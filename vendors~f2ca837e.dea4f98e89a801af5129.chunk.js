(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~f2ca837e"],{

/***/ "aurelia-bodylight-plugin/elements/dygraphchart":
/*!********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/dygraphchart.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.Dygraphchart = void 0;\n\nvar _dygraphs = _interopRequireDefault(__webpack_require__(/*! dygraphs */ \"EflE\"));\n\nvar _aureliaFramework = __webpack_require__(/*! aurelia-framework */ \"aurelia-framework\");\n\nvar _fileSaver = __webpack_require__(/*! file-saver */ \"Iab2\");\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nvar Dygraphchart = (_class = /*#__PURE__*/function () {\n  function Dygraphchart() {\n    var _this = this;\n\n    _initializerDefineProperty(this, \"inputs\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"maxdata\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor5, this);\n\n    //this.data = [[0, 0, 0]];\n    //this.data=[[1, 5], [2, 5], [3, 4.9], [4, 4.8], [5, 5.2]];\n    //create lambda function which is added as listener later\n    this.handleValueChange = function (e) {\n      var datapoint = [e.detail.time]; //e.detail do not reallocate - using same buffer, thus slicing to append to data array\n\n      var edata = e.detail.data.slice();\n\n      for (var i = _this.refindex; i < _this.refindex + _this.refvalues; i++) {\n        datapoint.push(edata[i]);\n      }\n\n      _this.data.push(datapoint); //shift - remove first element if data is too big\n\n\n      if (_this.data.length > _this.maxdata) _this.data.shift(); //console.log('Dygraphchar data', this.data);\n\n      _this.dygraph.updateOptions({\n        'file': _this.data\n      });\n    };\n\n    this.handleReset = function (e) {\n      _this.resetdata();\n\n      _this.dygraph.updateOptions({\n        'file': _this.data\n      });\n    };\n  }\n\n  var _proto = Dygraphchart.prototype;\n\n  _proto.resetdata = function resetdata() {\n    this.data = [];\n    var initdatapoint = Array(parseInt(this.refvalues, 10) + 1).fill(0);\n    this.data.push(initdatapoint);\n  };\n\n  _proto.attached = function attached() {\n    //listening to custom event fmidata\n    document.getElementById(this.fromid).addEventListener('fmidata', this.handleValueChange);\n    document.getElementById(this.fromid).addEventListener('fmireset', this.handleReset); //labels are separated by , in attribute inputs\n    //console.log('BdlDygraphchart attached inputs', this.inputs);\n\n    var labels = this.inputs.split(','); //console.log('BdlDygraphchart attached labels', labels);\n    //create dygraph\n\n    this.resetdata(); //console.log('BdlDygraphchart attached initial data init data', initdatapoint, ' data:', this.data);\n\n    this.dygraph = new _dygraphs.default(this.dygraphcanvas, this.data, {\n      //Draw a small dot at each point\n      drawPoints: true,\n      //rolling average period text box to be show\n      //showRoller: true,\n      //customBars if series is low;middle;high where range between low and high is visualised\n      //customBars: true,\n      //range selector\n      //showRangeSelector: true,\n      labels: labels\n    });\n    /*data.push([x, y]);\n    g.updateOptions( { 'file': data } );*/\n  };\n\n  _proto.detached = function detached() {\n    if (document.getElementById(this.fromid)) document.getElementById(this.fromid).removeEventListener('fmidata', this.handleValueChange);\n    if (document.getElementById(this.fromid)) document.getElementById(this.fromid).removeEventListener('fmireset', this.handleReset);\n  };\n\n  _proto.download = function download() {\n    var filename = prompt('File name (*.csv):', 'data.csv');\n\n    if (filename) {\n      if (!filename.endsWith('.csv')) filename = filename.concat('.csv');\n      var content = this.inputs + '\\n' + this.data.map(function (e) {\n        return e.join(',');\n      }).join('\\n');\n      var blob = new Blob([content], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      (0, _fileSaver.saveAs)(blob, filename);\n    }\n  };\n\n  _proto.preview = function preview() {\n    var content = this.inputs + '\\n' + this.data.map(function (e) {\n      return e.join(',');\n    }).join('\\n');\n    var blob = new Blob([content], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    var url = URL.createObjectURL(blob);\n    this.popup = window.open(url, 'BodylightPreview', 'width=800,height=600,menubar=no,status=no,titlebar=no,toolbar=no');\n  };\n\n  return Dygraphchart;\n}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"inputs\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"fromid\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"maxdata\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 300;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"refindex\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"refvalues\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 1;\n  }\n})), _class);\nexports.Dygraphchart = Dygraphchart;\n//# sourceMappingURL=dygraphchart.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/dygraphchart\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/dygraphchart.html":
/*!**********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/dygraphchart.html ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template bindable=\\\"width,height\\\">   <!--other attributes @bindable inputs;  @bindable fromid;  @bindable maxdata=300;-->\\n  <div class=\\\"w3-container\\\">\\n    <span class=\\\"w3-small\\\">\\n      <i class=\\\"fa fa-download w3-border\\\" title=\\\"download csv data\\\" click.delegate=\\\"download()\\\"></i>\\n      <!--i class=\\\"fa fa-eye w3-border\\\" title=\\\"preview csv data\\\" click.delegate=\\\"preview()\\\"></i-->\\n    </span>\\n  <div ref=\\\"dygraphcanvas\\\" style=\\\"width:${width}px; height:${height}px;\\\"></div>\\n  </div>\\n</template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2R5Z3JhcGhjaGFydC5odG1sLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F1cmVsaWEtYm9keWxpZ2h0LXBsdWdpbi9kaXN0L25hdGl2ZS1tb2R1bGVzL2VsZW1lbnRzL2R5Z3JhcGhjaGFydC5odG1sPzdlMTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZW1wbGF0ZSBiaW5kYWJsZT1cXFwid2lkdGgsaGVpZ2h0XFxcIj4gICA8IS0tb3RoZXIgYXR0cmlidXRlcyBAYmluZGFibGUgaW5wdXRzOyAgQGJpbmRhYmxlIGZyb21pZDsgIEBiaW5kYWJsZSBtYXhkYXRhPTMwMDstLT5cXG4gIDxkaXYgY2xhc3M9XFxcInczLWNvbnRhaW5lclxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJ3My1zbWFsbFxcXCI+XFxuICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWRvd25sb2FkIHczLWJvcmRlclxcXCIgdGl0bGU9XFxcImRvd25sb2FkIGNzdiBkYXRhXFxcIiBjbGljay5kZWxlZ2F0ZT1cXFwiZG93bmxvYWQoKVxcXCI+PC9pPlxcbiAgICAgIDwhLS1pIGNsYXNzPVxcXCJmYSBmYS1leWUgdzMtYm9yZGVyXFxcIiB0aXRsZT1cXFwicHJldmlldyBjc3YgZGF0YVxcXCIgY2xpY2suZGVsZWdhdGU9XFxcInByZXZpZXcoKVxcXCI+PC9pLS0+XFxuICAgIDwvc3Bhbj5cXG4gIDxkaXYgcmVmPVxcXCJkeWdyYXBoY2FudmFzXFxcIiBzdHlsZT1cXFwid2lkdGg6JHt3aWR0aH1weDsgaGVpZ2h0OiR7aGVpZ2h0fXB4O1xcXCI+PC9kaXY+XFxuICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcblwiOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/dygraphchart.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/ecg":
/*!***********************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/ecg.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.Ecg = void 0;\n\nvar _chartjsTime = __webpack_require__(/*! ./chartjs-time */ \"aurelia-bodylight-plugin/elements/chartjs-time\");\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n//import {PLATFORM} from 'aurelia-pal';\n//@useView(PLATFORM.moduleName('./bdl-chartjs.html'))\nvar Ecg = (_dec = (0, _aureliaTemplating.useView)('./chartjs.html'), _dec(_class = (_class2 = /*#__PURE__*/function (_ChartjsTime) {\n  _inheritsLoose(Ecg, _ChartjsTime);\n\n  //2 * 5*8 ecgvalues = 2 cardiac cycles\n  //@bindable refindex;\n  //  @bindable refvalues;\n  //initiate\n  // ]; //values in mV in segments\n  //ecgvalueslbb=[]\n  //labels related to values\n  function Ecg() {\n    var _this;\n\n    _this = _ChartjsTime.call(this) || this;\n\n    _initializerDefineProperty(_this, \"fromid\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"labels\", _descriptor2, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"maxdata\", _descriptor3, _assertThisInitialized(_this));\n\n    _this.refindex = 0;\n    _this.refvalues = 1;\n    _this.previousreltime = 0;\n\n    _initializerDefineProperty(_this, \"type\", _descriptor4, _assertThisInitialized(_this));\n\n    _this.ecgvalues = [[0.2, 0.12, 0, 0, 0, 0, -0.1, 1.4], //4b\n    [-0.5, 0, 0, 0, 0, 0, 0, 0], //1\n    [0, 0, 0, 0, 0.15, 0.28, 0.35, 0.38], //2\n    [0.38, 0.35, 0.28, 0.15, 0, 0, 0, 0], //3\n    [0, 0, 0, 0, 0, 0, 0.12, 0.2] //4a\n    ];\n    _this.ecglabels = [['P', '', '', '', '', '', 'Q', 'R'], //4b\n    ['S', '', '', '', '', '', '', ''], //1\n    ['', '', '', '', '', '', '', 'T'], //2\n    ['', '', '', '', '', '', '', ''], //3\n    ['', '', '', '', '', '', '', 'P'] //4a\n    ];\n    _this.ecgindex = 0;\n    _this.ecgsegment = 1;\n\n    _initializerDefineProperty(_this, \"width\", _descriptor5, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"height\", _descriptor6, _assertThisInitialized(_this));\n\n    console.log('BdlEcg()'); //this.type = 'line';\n    //need to define method here in order to register it for eventlistener later\n\n    _this.handleValueChange = function (e) {\n      _this.handleValueChangeImpl(e);\n    };\n\n    return _this;\n  }\n\n  var _proto = Ecg.prototype;\n\n  _proto.bind = function bind() {\n    _ChartjsTime.prototype.bind.call(this);\n\n    this.datalabels = true; //disable labels on xaxes\n\n    this.options.scales.xAxes = [{\n      ticks: {\n        display: false\n      }\n    }];\n  };\n\n  _proto.attached = function attached() {\n    _ChartjsTime.prototype.attached.call(this);\n\n    var fromidel = document.getElementById(this.fromid);\n\n    if (fromidel) {\n      fromidel.addEventListener('animatedata', this.handleValueChange);\n    } //instantiate datalabels\n\n\n    if (!this.chart.data.datasets[0].datalabels) this.chart.data.datasets[0].datalabels = [];\n  };\n\n  _proto.detached = function detached() {\n    _ChartjsTime.prototype.detached.call(this);\n\n    if (document.getElementById(this.fromid)) {\n      document.getElementById(this.fromid).removeEventListener('animatedata', this.handleValueChange);\n    }\n  };\n\n  _proto.handleValueChangeImpl = function handleValueChangeImpl(e) {\n    console.log('bdl-ecg handlevaluechange e.detail', e.detail);\n    var mysegment = e.detail.segment;\n    var myreltime = e.detail.relativetime; //reset index if new segment\n\n    if (this.currentsegment !== mysegment) {\n      //reset index\n      this.previousindex = 0;\n      this.index = 0;\n      this.currentsegment = mysegment;\n      this.previousreltime = 0; //TODO draw points from previous segments - if not already drawn\n    } else {\n      this.previousindex = this.index;\n    } //count difference in this step\n\n\n    var rd = myreltime - this.previousreltime; //e.g. 0.33 of segments\n    //count how many points of ECG to draw - >1 -\n\n    var npoints = Math.round(this.ecgvalues[mysegment].length * rd);\n    this.index += npoints; //set previousreltime to current points of time used\n\n    this.previousreltime = this.previousreltime + npoints / this.ecgvalues[mysegment].length; //TODO push multiple values - per percent in current segment - or do approximation\n    //push multiple values - if in ecgvalues\n\n    console.log('bdl-ecg handlevaluechange npoints,previndex,index:', npoints, this.previousindex, this.index);\n\n    if (npoints > 0) {\n      var _this$chart$data$data, _this$chart$data$data2, _this$chart$data$labe;\n\n      (_this$chart$data$data = this.chart.data.datasets[0].data).push.apply(_this$chart$data$data, this.ecgvalues[mysegment].slice(this.previousindex, this.index));\n\n      (_this$chart$data$data2 = this.chart.data.datasets[0].datalabels).push.apply(_this$chart$data$data2, this.ecglabels[mysegment].slice(this.previousindex, this.index)); //push npoints times the 'time' label\n\n\n      (_this$chart$data$labe = this.chart.data.labels).push.apply(_this$chart$data$labe, Array(npoints).fill(e.detail.time)); //shift\n\n\n      if (this.chart.data.datasets[0].data.length > this.maxdata) {\n        //console.log('shifting dataset chartjs-time', this.chart.data.datasets[j].data);\n        var pointstoremove = this.chart.data.datasets[0].data.length - this.maxdata;\n        this.chart.data.datasets[0].data.splice(0, pointstoremove);\n        this.chart.data.datasets[0].datalabels.splice(0, pointstoremove);\n        this.chart.data.labels.splice(0, pointstoremove);\n      }\n    } //shift - remove first element if data is too big\n    //console.log('chartjs handlevaluechange() chart.data.datasets[0].data', this.chart.data.datasets[0].data);\n\n\n    this.chart.update(0);\n  };\n\n  return Ecg;\n}(_chartjsTime.ChartjsTime), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'ECG I (mV)';\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"maxdata\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 80;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"type\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"width\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '300';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"height\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '50';\n  }\n})), _class2)) || _class);\nexports.Ecg = Ecg;\n//# sourceMappingURL=ecg.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/ecg\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/ecg.html":
/*!*************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/ecg.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template>\\n  <!-- not used, inherited from chartjs-->\\n  ECG:\\n  <div id=\\\"canvas-holder\\\">\\n    <span class=\\\"w3-small\\\">\\n      <i class=\\\"fa fa-download\\\" title=\\\"download csv data, row=data in time point\\\" click.delegate=\\\"download()\\\"></i>\\n      <i class=\\\"fa fa-download fa-rotate-270\\\" title=\\\"download flat csv data, row=all data for variable\\\" click.delegate=\\\"downloadflat()\\\"></i>\\n      <!--i class=\\\"fa fa-eye w3-border\\\" title=\\\"preview csv data\\\" click.delegate=\\\"preview()\\\"></i-->\\n    </span>\\n    <canvas id=\\\"${id}-canvas\\\" ref=\\\"chartcanvas\\\" width=\\\"${width}\\\" height=\\\"${height}\\\"></canvas> <!-- width=\\\"${width}\\\" height=\\\"${height}\\\" -->\\n  </div>\\n</template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2VjZy5odG1sLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F1cmVsaWEtYm9keWxpZ2h0LXBsdWdpbi9kaXN0L25hdGl2ZS1tb2R1bGVzL2VsZW1lbnRzL2VjZy5odG1sPzExYjYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZW1wbGF0ZT5cXG4gIDwhLS0gbm90IHVzZWQsIGluaGVyaXRlZCBmcm9tIGNoYXJ0anMtLT5cXG4gIEVDRzpcXG4gIDxkaXYgaWQ9XFxcImNhbnZhcy1ob2xkZXJcXFwiPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwidzMtc21hbGxcXFwiPlxcbiAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1kb3dubG9hZFxcXCIgdGl0bGU9XFxcImRvd25sb2FkIGNzdiBkYXRhLCByb3c9ZGF0YSBpbiB0aW1lIHBvaW50XFxcIiBjbGljay5kZWxlZ2F0ZT1cXFwiZG93bmxvYWQoKVxcXCI+PC9pPlxcbiAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1kb3dubG9hZCBmYS1yb3RhdGUtMjcwXFxcIiB0aXRsZT1cXFwiZG93bmxvYWQgZmxhdCBjc3YgZGF0YSwgcm93PWFsbCBkYXRhIGZvciB2YXJpYWJsZVxcXCIgY2xpY2suZGVsZWdhdGU9XFxcImRvd25sb2FkZmxhdCgpXFxcIj48L2k+XFxuICAgICAgPCEtLWkgY2xhc3M9XFxcImZhIGZhLWV5ZSB3My1ib3JkZXJcXFwiIHRpdGxlPVxcXCJwcmV2aWV3IGNzdiBkYXRhXFxcIiBjbGljay5kZWxlZ2F0ZT1cXFwicHJldmlldygpXFxcIj48L2ktLT5cXG4gICAgPC9zcGFuPlxcbiAgICA8Y2FudmFzIGlkPVxcXCIke2lkfS1jYW52YXNcXFwiIHJlZj1cXFwiY2hhcnRjYW52YXNcXFwiIHdpZHRoPVxcXCIke3dpZHRofVxcXCIgaGVpZ2h0PVxcXCIke2hlaWdodH1cXFwiPjwvY2FudmFzPiA8IS0tIHdpZHRoPVxcXCIke3dpZHRofVxcXCIgaGVpZ2h0PVxcXCIke2hlaWdodH1cXFwiIC0tPlxcbiAgPC9kaXY+XFxuPC90ZW1wbGF0ZT5cXG5cIjsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/ecg.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/fmi":
/*!***********************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/fmi.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.thirdpartytimeout = exports.Fmi = void 0;\n\nvar _aureliaFramework = __webpack_require__(/*! aurelia-framework */ \"aurelia-framework\");\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20;\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nvar thirdpartytimeout = 5000;\nexports.thirdpartytimeout = thirdpartytimeout;\nvar Fmi = (_class = /*#__PURE__*/function () {\n  //0.000030517578\n  //if >0 then fmi will stop at stoptime\n  //input==continuous/change==when user drops the value\n  //continuous or oneshot\n  //0.0078125;\n  function Fmi() {\n    var _this = this;\n\n    _initializerDefineProperty(this, \"fminame\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"tolerance\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"starttime\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"stoptime\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"guid\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"id\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"inputs\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"otherinputs\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"valuereferences\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"ticksToUpdate\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"src\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"fstepsize\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"controlid\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"showcontrols\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"fpslimit\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"showtime\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"showtimemultiply\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"eventlisten\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"mode\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"stepsperframe\", _descriptor20, this);\n\n    this.cosimulation = 1;\n    this.stepSize = 0.01;\n    this.doingstep = false;\n    this.animationstarted = false;\n    this.measurefps = false;\n    this.d = void 0;\n    this.fpstick = 0;\n    this.stepi = 0;\n    this.resetBeforeChange = false;\n    this.simulationtime = 0;\n    this.isOneshot = false;\n    this.perfstartTime = void 0;\n    this.perfendTime = void 0;\n    //create lambda function which is added as listener later\n    this.changeinputs = [];\n\n    this.handleValueChange = function (e) {\n      //e.target; //triggered the event\n      var targetid;\n      if (e.detail && e.detail.id) targetid = e.detail.id;else if (e.target.id.length > 0) targetid = e.target.id;else targetid = e.target.parentElement.parentElement.id;\n      var targetvalue = e.detail && e.detail.value ? e.detail.value : e.target.value;\n\n      _this.changeinputs.push({\n        id: targetid,\n        value: targetvalue\n      }); //detail will hold the value being changed\n      //determine whether it is fixed parameter - further reset is needed?\n\n\n      _this.resetBeforeChange = _this.resetBeforeChange || _this.inputreferences[targetid].fixed; //do step if mode is oneshot\n\n      if (_this.isOneshot) setTimeout(_this.step.bind(_this), 100); //do simulation step after 100 ms\n    };\n\n    this.handleDetailChange = function (e) {\n      _this.changeinputs.push({\n        valuereference: e.detail.valuereference,\n        value: e.detail.value,\n        fromid: e.detail.id\n      }); //detail will hold the value being changed\n\n\n      console.log('fmi handle detail change', _this.changeinputs); //do step if mode is oneshot\n\n      if (_this.isOneshot) setTimeout(_this.step.bind(_this), 100); //do simulation step after 100 ms\n    };\n\n    this.handleStart = function (e) {\n      _this.startevent(e);\n    };\n\n    this.handleStop = function (e) {\n      _this.stopevent(e);\n    }; //this handles event to register inputs - may be sent by subsequent component which change inputs/outputs communicating with fmi\n\n\n    this.handleRegister = function () {\n      _this.deregisterInputs();\n\n      _this.registerInputs();\n\n      if (_this.isOneshot) _this.step(); //do simulation step immediately;\n    };\n\n    this.inst = {};\n  }\n\n  var _proto = Fmi.prototype;\n\n  _proto.registerInputs = function registerInputs() {\n    if (this.inputs) {\n      //register DOM elements to listen to their 'change' event directly\n      var inputparts = this.inputs.split(';'); //splits groups delimited by ;\n\n      this.inputreferences = [];\n\n      for (var _iterator = _createForOfIteratorHelperLoose(inputparts), _step; !(_step = _iterator()).done;) {\n        var inputpart = _step.value;\n        var myinputs = inputpart.split(','); //splits reference and id by ,\n\n        var numerator = myinputs.length > 2 ? parseFloat(myinputs[2]) : 1;\n        var denominator = myinputs.length > 3 ? parseFloat(myinputs[3]) : 1;\n        var addconst = myinputs.length > 4 ? parseFloat(myinputs[4]) : 0;\n        var fixedsignature = myinputs.length > 5 ? myinputs[5] === 'f' : false;\n\n        if (isNaN(addconst)) {\n          addconst = 0;\n          fixedsignature = myinputs[4] === 'f';\n        } //fixes bug, setting  instead of NaN, when 4th param is omited and instead 'f' or 't' is specified\n\n\n        var inputref = {\n          ref: myinputs[1],\n          numerator: numerator,\n          denominator: denominator,\n          addconst: addconst,\n          fixed: fixedsignature\n        };\n\n        if (this.inputreferences[myinputs[0]]) {\n          this.inputreferences[myinputs[0]].fixed = this.inputreferences[myinputs[0]].fixed || fixedsignature;\n          this.inputreferences[myinputs[0]].refs.push(inputref); //first is id second is reference\n        } else this.inputreferences[myinputs[0]] = {\n          fixed: fixedsignature,\n          refs: [inputref]\n        }; //first is id second is reference\n        //register change event - the alteration is commited\n\n\n        var dependentEl = document.getElementById(myinputs[0]); //now register 'change' event or eventlisten\n\n        if (dependentEl) dependentEl.addEventListener(this.eventlisten, this.handleValueChange);else console.warn('cannot register changes for non-existing element id:', myinputs[0]);\n        console.log('registering input, ref, num,den,add,fixed', myinputs[0], myinputs[1], numerator, denominator, addconst, fixedsignature);\n      }\n    }\n\n    if (this.otherinputs) {\n      var otherinputtargets = this.otherinputs.split(';');\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(otherinputtargets), _step2; !(_step2 = _iterator2()).done;) {\n        var target = _step2.value;\n        document.getElementById(target).addEventListener('fmiinput', this.handleDetailChange);\n      }\n    } //if oneshot - do step\n\n\n    if (this.isOneshot) {\n      //console.log('oneshot scheduling startevent in promise() to do step()')\n      setTimeout(this.sendStartEvent.bind(this), 1000);\n      console.log('oneshot scheduling promise() to do step()');\n      setTimeout(this.step.bind(this), 1500);\n    } //do simulation step after 100 ms\n\n  };\n\n  _proto.deregisterInputs = function deregisterInputs() {\n    //do removeListeners()\n    if (this.inputs) {\n      var inputparts = this.inputs.split(';');\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(inputparts), _step3; !(_step3 = _iterator3()).done;) {\n        var inputpart = _step3.value;\n        var myinputs = inputpart.split(',');\n\n        try {\n          document.getElementById(myinputs[0]).removeEventListener(this.eventlisten, this.handleValueChange);\n        } catch (e) {}\n      }\n    }\n\n    if (this.otherinputs) {\n      var otherinputtargets = this.otherinputs.split(';');\n\n      for (var _iterator4 = _createForOfIteratorHelperLoose(otherinputtargets), _step4; !(_step4 = _iterator4()).done;) {\n        var target = _step4.value;\n\n        try {\n          document.getElementById(target).removeEventListener('fmiinput', this.handleDetailChange);\n        } catch (e) {}\n      }\n    }\n  };\n\n  _proto.attached = function attached() {\n    console.log('fmi attached');\n    this.mydata = [0, 0]; //split references by ,\n\n    this.references = this.valuereferences.split(',');\n    this.registerInputs(); //if src is not specified - then expects that fmi scripts is loaded in HTML page prior thus should be available\n\n    if (this.src && this.src.length > 0) {\n      console.log('loading script first, then init fmi'); //keep 'this' reference in global for callback\n\n      window.thisfmi = this;\n      this.getScript(this.src, this.initfmi);\n    } else {\n      //src is specified, thus load it - browser loads it at the end, thus adding the rest as callback after loaded\n      console.log('init fmi without loading script: fminame, this:', this.fminame, this);\n      this.initfmi();\n    }\n\n    if (this.controlid) {\n      document.getElementById(this.controlid).addEventListener('fmistart', this.handleStart);\n      document.getElementById(this.controlid).addEventListener('fmistop', this.handleStop);\n    }\n\n    if (typeof this.showcontrols === 'string') {\n      this.showcontrols = this.showcontrols === 'true';\n    }\n\n    document.addEventListener('fmiregister', this.handleRegister); //sending attached event - some may detect it to register it's outpu listener if attached before\n\n    var event = new CustomEvent('fmiattached');\n    document.dispatchEvent(event);\n  } //detects whether script with FMU is already loaded, if not it adds it to DOM and loads\n  //get script element and registers 'onload' callback to be called when the script is loaded\n  ;\n\n  _proto.getScript = function getScript(source, callback) {\n    //check whether the script is not already there\n    if (Array.from(document.getElementsByTagName('script')).filter(function (x) {\n      return x.getAttribute('src') === source;\n    }).length > 0) {\n      console.log('fmi.getScript() WARNING, script is already added into DOM:', source); //do callback?\n\n      if (callback) setTimeout(callback, 0);\n      return;\n    } //console.log('fmi getscript()');\n\n\n    var script = document.createElement('script');\n    var prior = document.getElementsByTagName('script')[0];\n    script.async = 1;\n\n    script.onerror = function () {\n      if (!script.readyState || /loaded|complete/.test(script.readyState)) {\n        script.onerror = script.onload = script.onreadystatechange = null;\n        script = undefined; // try to insert script by other app for previewing - scripts might be inserted into DOM\n\n        if (window.editorapi && typeof window.editorapi.insertScriptById === 'function') {\n          console.log('inserting script by thirdparty api');\n          window.editorapi.insertScriptById(source, 'fmiobj');\n        } //do callback even if isAbort - scripts might be inserted into DOM by another app\n\n\n        if (callback) setTimeout(callback, 1200);\n      }\n    };\n\n    script.onload = script.onreadystatechange = function (_, isAbort) {\n      if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {\n        script.onerror = script.onload = script.onreadystatechange = null;\n        script = undefined; //do callback - scripts might be inserted into DOM by another app\n\n        if (!isAbort && callback) setTimeout(callback, 0);\n      }\n    };\n\n    script.src = window.bdlBaseHref ? window.bdlBaseHref + source : source;\n    prior.parentNode.insertBefore(script, prior);\n  } //make inst object globally - in case of globals (non-src) declaration\n  ;\n\n  _proto.initfmi = function initfmi() {\n    console.log('fmi initfmi()');\n    var that = {};\n\n    if (window.thisfmi) {\n      that.fminame = window.thisfmi.fminame;\n      console.log('using global fmi initfmi() fminame', that.fminame);\n    } else {\n      that.fminame = this.fminame;\n      console.log('using local fmi initfmi() fminame', that.fminame);\n    } //create instance\n\n\n    var myinst = window[that.fminame](); //EMSDK v 3.x compiles fmu to Promise based api\n\n    if (myinst instanceof Promise) {\n      myinst.then(function (inst) {\n        that.inst = inst;\n\n        if (!window.fmiinst) {\n          window.fmiinst = [];\n        }\n\n        window.fmiinst[that.fminame] = that; //console.log('fmi callback from Promise that', that, that.inst);\n        //do one step if mode is oneshot\n        //https://newbedev.com/pass-correct-this-context-to-settimeout-callback\n\n        if (window.thisfmi.isOneshot) {\n          //console.log('oneshot scheduling startevent in promise() to do step()')\n          setTimeout(window.thisfmi.sendStartEvent.bind(window.thisfmi), 1000);\n          console.log('oneshot scheduling promise() to do step()');\n          setTimeout(window.thisfmi.step.bind(window.thisfmi), 1500);\n        } //do simulation step after 100 ms\n\n      });\n    } else {\n      //older EMSDK prior 3.x compiles directly to api, keep compatibility\n      that.inst = myinst;\n\n      if (!window.fmiinst) {\n        window.fmiinst = [];\n      }\n\n      window.fmiinst[that.fminame] = that; //console.log('fmi callback that, that.inst', that, that.inst);\n      //do one step if mode is oneshot\n      //https://newbedev.com/pass-correct-this-context-to-settimeout-callback\n\n      if (window.thisfmi.isOneshot) {\n        console.log('oneshot scheduling direct(nopromise) to do step()');\n        setTimeout(window.thisfmi.sendStartEvent.bind(window.thisfmi), 1000);\n        setTimeout(window.thisfmi.step.bind(window.thisfmi), 1500);\n      } //do simulation step after 100 ms\n\n    }\n  };\n\n  _proto.bind = function bind() {\n    this.isOneshot = this.mode === 'oneshot';\n\n    if (this.isOneshot) {\n      this.showcontrols = false;\n    }\n\n    if (typeof this.stoptime === 'string') {\n      this.stoptime = parseInt(this.stoptime);\n    }\n\n    if (typeof this.stepsperframee === 'string') {\n      this.stepsperframe = parseInt(this.stepsperframe);\n    }\n  };\n\n  _proto.detached = function detached() {\n    document.removeEventListener('fmiregister', this.handleRegister);\n\n    if (this.animationstarted) {\n      this.startstop();\n    }\n\n    this.deregisterInputs();\n\n    if (this.controlid) {\n      document.getElementById(this.controlid).removeEventListener('fmistart', this.handleStart);\n      document.getElementById(this.controlid).removeEventListener('fmistop', this.handleStop);\n    }\n  }\n  /**\n   * Implements a rudimentary browser console logger for the FMU.\n   */\n  ;\n\n  _proto.consoleLogger = function consoleLogger(componentEnvironment, instanceName, status, category, message, other) {\n    var _this2 = this;\n\n    /* Fills variables into message returned by the FMU, the C way */\n    var formatMessage = function formatMessage(message1, other1) {\n      // get a new pointer\n      var ptr = _this2.inst._malloc(1); // get the size of the resulting formated message\n\n\n      var num = _this2.inst._snprintf(ptr, 0, message1, other1);\n\n      _this2.inst._free(ptr);\n\n      num++; // TODO: Error handling num < 0\n\n      ptr = _this2.inst._malloc(num);\n\n      _this2.inst._snprintf(ptr, num, message1, other1); // return pointer to the resulting message string\n\n\n      return ptr;\n    }; // eslint-disable-next-line new-cap\n\n\n    console.log('FMU(' + this.inst.UTF8ToString(instanceName) + ':' + status + ':' + this.inst.UTF8ToString(category) + ') msg: ' + this.inst.UTF8ToString(formatMessage(message, other)));\n\n    this.inst._free(formatMessage);\n  };\n\n  _proto.initialize = function initialize() {\n    console.log('fmi initialize()');\n    this.fmiEnterInit(this.fmiinst);\n    this.fmiExitInit(this.fmiinst);\n  };\n\n  _proto.instantiate = function instantiate() {\n    //first define FMI API function names;\n    var sReset = 'fmi2Reset';\n    var sInstantiate = 'fmi2Instantiate';\n    var sSetup = 'fmi2SetupExperiment';\n    var sEnterinit = 'fmi2EnterInitializationMode';\n    var sExitinit = 'fmi2ExitInitializationMode';\n    var sSetreal = 'fmi2SetReal';\n    var sSetboolean = 'fmi2SetBoolean';\n    var sGetreal = 'fmi2GetReal';\n    var sGetboolean = 'fmi2GetBoolean';\n    var sDostep = 'fmi2DoStep';\n    var sCreateCallback = 'createFmi2CallbackFunctions';\n    this.stepTime = 0;\n    this.stepSize = typeof this.fstepsize === 'string' ? parseFloat(this.fstepsize) : this.fstepsize;\n    this.mystep = this.stepSize; //console callback ptr, per emsripten create int ptr with signature viiiiii\n\n    if (window.fmiinst && window.fmiinst[this.fminame]) this.inst = window.fmiinst[this.fminame].inst;else {\n      console.warn('fmi instantiate() error initfmi() prabably not called');\n    } //else this.inst = null;//if (window.thisfmi) {this.inst = window.thisfmi.inst;}\n\n    console.log('instantiate() this.inst', this.inst); //set the fminame and JS WASM function references\n\n    var separator = '_';\n    var prefix = this.fminame; //console.log('attached fminame:', that.fminame);\n    // OpenModelica exports function names without prefix\n\n    if (typeof this.inst._fmi2GetVersion === 'function') {\n      prefix = '';\n      separator = '';\n    } //now use a 'cwrap' delivered by emscripten to facilitate calling C functions with C primitives (string,number) from Javascript\n\n\n    this.fmiCreateCallback = this.inst.cwrap(sCreateCallback, 'number', ['number']);\n    this.fmiReset = this.inst.cwrap(prefix + separator + sReset, 'number', ['number']);\n    this.fmiInstantiate = this.inst.cwrap(prefix + separator + sInstantiate, 'number', ['string', 'number', 'string', 'string', 'number', 'number', 'number']);\n    this.fmiSetup = this.inst.cwrap(prefix + separator + sSetup, 'number', ['number', 'number', 'number', 'number', 'number', 'number']);\n    this.fmiEnterInit = this.inst.cwrap(prefix + separator + sEnterinit, 'number', ['number']);\n    this.fmiExitInit = this.inst.cwrap(prefix + separator + sExitinit, 'number', ['number']);\n    this.fmiSetReal = this.inst.cwrap(prefix + separator + sSetreal, 'number', ['number', 'number', 'number', 'number']);\n    this.fmiGetReal = this.inst.cwrap(prefix + separator + sGetreal, 'number', ['number', 'number', 'number', 'number']);\n    this.fmiSetBoolean = this.inst.cwrap(prefix + separator + sSetboolean, 'number', ['number', 'number', 'number', 'number']);\n    this.fmiGetBoolean = this.inst.cwrap(prefix + separator + sGetboolean, 'number', ['number', 'number', 'number', 'number']);\n    this.fmiDoStep = this.inst.cwrap(prefix + separator + sDostep, 'number', ['number', 'number', 'number', 'number']);\n    this.fmiGetVersion = this.inst.cwrap(prefix + separator + 'fmi2GetVersion', 'string');\n    this.fmiGetTypesPlatform = this.inst.cwrap(prefix + separator + 'fmi2GetTypesPlatform', 'string');\n    this.fmi2FreeInstance = this.inst.cwrap(prefix + separator + 'fmi2FreeInstance', 'number', ['number']);\n    this.instantiated = false; //calculate pow, power of stepsize\n\n    this.pow = this.stepSize < 1 ? -Math.ceil(-Math.log10(this.stepSize)) : Math.ceil(Math.log10(this.stepSize)); //use Math.trunc ??\n    //console.log('instantiate() this', this);\n\n    this.consoleLoggerPtr = this.inst.addFunction(this.consoleLogger.bind(this), 'viiiiii');\n    this.callbackptr = this.fmiCreateCallback(this.consoleLoggerPtr); //console.log('fminame',this.fminame);\n    //console.log('guid',this.guid);\n    //console.log('callbackptr',this.callbackptr);\n    //console.log('fmiinstantiate fnc:',this.fmiInstantiate);\n    //create instance of model simulation\n\n    this.fmiinst = this.fmiInstantiate(this.fminame, this.cosimulation, this.guid, '', this.callbackptr, 0, 0); //last 1 debug, 0 nodebug\n\n    this.setupExperiment();\n  };\n\n  _proto.setupExperiment = function setupExperiment() {\n    //setup experiment\n    this.fmiSetup(this.fmiinst, 1, this.tolerance, this.starttime, 0);\n    console.log('setupExperiment() fmiinst', this.fmiinst);\n    this.instantiated = true;\n  };\n\n  _proto.simulate = function simulate() {};\n\n  _proto.setReal = function setReal(query, value, count) {\n    console.log('setreal query,value,count', query, value, count);\n    return this.fmiSetReal(this.fmiinst, query.byteOffset, count, value.byteOffset);\n  };\n\n  _proto.setBoolean = function setBoolean(query, value, count) {\n    return this.fmiSetBoolean(this.fmiinst, query.byteOffset, count, value.byteOffset);\n  }\n  /**\n   * Loads Reals from FMU\n   */\n  ;\n\n  _proto.getReal = function getReal(query, output, count) {\n    return this.fmiGetReal(this.fmiinst, query.byteOffset, count, output.byteOffset);\n  }\n  /**\n   * Loads Booleans from FMU\n   */\n  ;\n\n  _proto.getBoolean = function getBoolean(query, output, count) {\n    return this.fmiGetBoolean(this.fmiinst, query.byteOffset, count, output.byteOffset);\n  };\n\n  _proto.startevent = function startevent(e) {\n    console.log('fmi startevent recieved', e);\n    if (!this.animationstarted) this.startSimulation();\n  };\n\n  _proto.stopevent = function stopevent(e) {\n    console.log('fmi stopevent recieved', e);\n    if (this.animationstarted) this.stopSimulation();\n  } //action to be performed when clicking the play/pause button\n  //sends fmistart/fmistop event and starts/stops simulation\n  ;\n\n  _proto.startstop = function startstop() {\n    if (this.animationstarted) {\n      this.stopSimulation();\n      this.sendStopEvent();\n      this.perfend();\n    } else {\n      this.perfstart();\n      this.sendStartEvent();\n      this.startSimulation();\n    }\n  } //defines action to be done during browser animationframe and starts\n  ;\n\n  _proto.startSimulation = function startSimulation() {\n    var _this3 = this;\n\n    this.animationstarted = true;\n    this.fpsInterval = 1000 / (isNaN(this.fpslimit) ? parseInt(this.fpslimit, 10) : this.fpslimit);\n    this.then = window.performance.now();\n\n    var performAnimation = function performAnimation(newtime) {\n      if (!_this3.animationstarted) return;\n      _this3.request = requestAnimationFrame(performAnimation);\n\n      if (_this3.fpslimit && _this3.fpslimit < 60) {\n        if (isNaN(_this3.fpslimit)) _this3.fpslimit = parseInt(_this3.fpslimit, 10);\n        _this3.now = newtime; //console.log('limiting fps to fpslimit, newtime, now, then, fpsinterval', this.fpslimit, newtime, this.now, this.then, this.fpsInterval);\n\n        _this3.elapsed = _this3.now - _this3.then; //console.log('elapsed,fpsinterval', this.elapsed, this.fpsInterval);\n\n        if (_this3.elapsed > _this3.fpsInterval) {\n          _this3.then = _this3.now - _this3.elapsed % _this3.fpsInterval;\n\n          _this3.step();\n        }\n      } else {\n        for (var i = 0; i < _this3.stepsperframe; i++) {\n          _this3.step();\n        }\n      }\n    };\n\n    performAnimation();\n  } //cancels all action to be done during browser animationframe and starts\n  ;\n\n  _proto.stopSimulation = function stopSimulation() {\n    //stop animation\n    this.animationstarted = false;\n    cancelAnimationFrame(this.request);\n  } //sends fmistop event\n  ;\n\n  _proto.sendStopEvent = function sendStopEvent() {\n    //create custom event\n    var event = new CustomEvent('fmistop', {\n      detail: {\n        time: this.round(this.stepTime, this.pow)\n      }\n    }); //dispatch event - it should be listened by some other component\n\n    document.getElementById(this.id).dispatchEvent(event);\n  };\n\n  _proto.sendStartEvent = function sendStartEvent() {\n    //create custom event\n    console.log('fmi.sendStartEvent(). Sending start event for adobeobj');\n    var event = new CustomEvent('fmistart', {\n      detail: {\n        time: this.round(this.stepTime, this.pow)\n      }\n    }); //dispatch event - it should be listened by some other component\n\n    document.getElementById(this.id).dispatchEvent(event); //animate using requestAnimationFrame\n  };\n\n  _proto.round = function round(value, decimals) {\n    if (decimals < 0) {\n      var posdecimals = -decimals;\n      return Number(Math.round(value + 'e' + posdecimals) + 'e-' + posdecimals);\n    }\n\n    return Number(Math.round(value + 'e-' + decimals) + 'e+' + decimals);\n  };\n\n  _proto.step = function step() {\n    //this = window.thisfmi;\n    //primitive semaphore, only one instance can perform this call\n    if (!this.doingstep) {\n      console.log('fmu step()');\n      this.doingstep = true;\n\n      try {\n        if (!this.instantiated) {\n          this.instantiate();\n          this.initialize();\n        }\n\n        this.stepi++; //changeinputs\n\n        if (this.resetBeforeChange) {\n          //fmi call\n          this.setupExperiment(); //do reset\n\n          this.fmiReset(this.fmiinst); //setting fixed parameters are now allowed\n\n          this.setInputVariables(); //initialize\n\n          this.initialize(); //make big step from 0 to current stepTime ???\n          //const res =\n          //make big step only if it is not oneshot\n\n          if (!this.isOneshot) this.fmiDoStep(this.fmiinst, 0, this.stepTime, 1);else this.stepTime = 0; //reset the signature\n\n          this.resetBeforeChange = false;\n        } else {\n          //do only change of variables\n          this.setInputVariables();\n        } //dostep\n        //compute step to round the desired time\n\n\n        var res = this.fmiDoStep(this.fmiinst, this.stepTime, this.mystep, 1);\n        this.stepTime = this.stepTime + this.mystep;\n        this.mystep = this.stepSize; //update correction step to current step\n\n        if (res === 1 || res === 2) {\n          console.warn('step() returned state<>0, doing reset()', res);\n          this.fmiReset(this.fmiinst);\n          this.initialize();\n        } //distribute simulation data to listeners\n\n\n        this.mydata = this.getReals(this.references); //create custom event\n\n        var event = new CustomEvent('fmidata', {\n          detail: {\n            time: this.round(this.stepTime, this.pow),\n            data: this.mydata\n          }\n        }); //dispatch event - it should be listened by some other component\n\n        document.getElementById(this.id).dispatchEvent(event); //compute showtime\n\n        if (this.showtime) this.simulationtime = this.secondsToTime(this.stepTime, this.showtimemultiply); //do computation only every tickstoupdate tick\n\n        if (this.measurefps) {\n          if (this.fpstick === 0) {\n            this.startfpstime = window.performance.now();\n          }\n\n          this.fpstick++;\n\n          if (this.fpstick >= this.ticksToUpdate) {\n            this.fpsInterval = 1000 / (isNaN(this.fpslimit) ? parseInt(this.fpslimit, 10) : this.fpslimit); //update ticks - so it will be every 3 seconds\n\n            this.ticksToUpdate = Math.round(3000 / this.fpsInterval); //do correction step calculation\n\n            if (this.stepSize < 1) {\n              this.pow = -Math.ceil(-Math.log10(this.stepSize));\n            } else {\n              this.pow = Math.ceil(Math.log10(this.stepSize));\n            }\n\n            this.mystep = this.round(this.stepTime + this.stepSize, this.pow) - this.stepTime; //do fps calculation\n\n            this.fps = (1000 * this.ticksToUpdate / (window.performance.now() - this.startfpstime)).toPrecision(4);\n            this.fpstick = 0;\n          }\n        } //stop simulation when stoptime is defined and reached\n\n\n        if (this.stoptime > 0 && this.animationstarted && this.stoptime < this.stepTime) {\n          this.startstop();\n        }\n      } catch (err) {\n        console.error('error catched during fmu step', err);\n      } finally {\n        this.doingstep = false;\n      }\n    }\n  };\n\n  _proto.setInputVariables = function setInputVariables() {\n    if (this.changeinputs.length > 0) {\n      while (this.changeinputs.length > 0) {\n        var myinputs = this.changeinputs.shift(); //remove first item\n        //console.log('changing inputs', myinputs);\n        //set real - reference is in - one input one reference\n        //sets individual values - if id is in input, then reference is taken from inputs definition\n\n        console.log('changing inputs,id,value', this.inputreferences, myinputs.id, myinputs.value);\n\n        for (var _iterator5 = _createForOfIteratorHelperLoose(this.inputreferences[myinputs.id].refs), _step5; !(_step5 = _iterator5()).done;) {\n          var iref = _step5.value;\n          var normalizedvalue = myinputs.value * iref.numerator / iref.denominator + iref.addconst;\n          if (myinputs.id) this.setSingleReal(iref.ref, normalizedvalue); // if reference is in input, then it is set directly\n          else if (myinputs.valuereference) this.setSingleReal(myinputs.valuereference, normalizedvalue);\n        }\n      } //flush all in one call to fmi\n\n\n      this.flushRealQueue();\n    }\n  };\n\n  _proto.reset = function reset() {\n    this.stepTime = 0;\n    this.stepSize = typeof this.fstepsize === 'string' ? parseFloat(this.fstepsize) : this.fstepsize;\n    this.mystep = this.stepSize;\n    this.setupExperiment();\n    this.fmiReset(this.fmiinst); //set input variables for possible change of non-tunable - fixed parameter values\n\n    this.setInputVariables();\n    this.initialize(); //create custom event\n\n    var event = new CustomEvent('fmireset'); //dispatch event - it should be listened by some other component\n\n    document.getElementById(this.id).dispatchEvent(event);\n  }\n  /* routines to alloc buffer for getting/setting from fmi*/\n  ;\n\n  _proto.createBuffer = function createBuffer(arr) {\n    var size = arr.length * arr.BYTES_PER_ELEMENT;\n\n    var ptr = this.inst._malloc(size);\n\n    return {\n      ptr: ptr,\n      size: size\n    };\n  };\n\n  _proto.createAndFillBuffer = function createAndFillBuffer(arr) {\n    var buffer = this.createBuffer(arr);\n    this.fillBuffer(buffer, arr);\n    return buffer;\n  };\n\n  _proto.freeBuffer = function freeBuffer(buffer) {\n    if (buffer.ptr !== null) {\n      this.inst._free(buffer.ptr);\n    }\n\n    buffer.ptr = null;\n    buffer.size = null;\n  };\n\n  _proto.viewBuffer = function viewBuffer(buffer) {\n    return new Uint8Array(this.inst.HEAPU8.buffer, buffer.ptr, buffer.size);\n  };\n\n  _proto.fillBuffer = function fillBuffer(buffer, arr) {\n    var view = this.viewBuffer(buffer);\n    view.set(new Uint8Array(arr.buffer));\n    return buffer;\n  };\n\n  _proto.getReals = function getReals(references) {\n    var queryBuffer = this.createAndFillBuffer(new Int32Array(references));\n    var query = this.viewBuffer(queryBuffer);\n    var outputBuffer = this.createBuffer(new Float64Array(references.length));\n    var output = this.viewBuffer(outputBuffer);\n    this.getReal(query, output, references.length);\n    var real = new Float64Array(output.buffer, output.byteOffset, references.length);\n    this.freeBuffer(queryBuffer);\n    this.freeBuffer(outputBuffer);\n    return real;\n  };\n\n  _proto.getSingleReal = function getSingleReal(reference) {\n    var queryBuffer = this.createAndFillBuffer(new Int32Array([reference]));\n    var query = this.viewBuffer(queryBuffer);\n    var outputBuffer = this.createBuffer(new Float64Array(1));\n    var output = this.viewBuffer(outputBuffer);\n    this.getReal(query, output, 1);\n    var real = new Float64Array(output.buffer, output.byteOffset, 1);\n    this.freeBuffer(queryBuffer);\n    this.freeBuffer(outputBuffer);\n    return real[0];\n  }\n  /**\n     * Adds a real value to setRealQueue\n     */\n  ;\n\n  _proto.setSingleReal = function setSingleReal(reference, value) {\n    console.log('setSingleReal reference,value', reference, value);\n\n    if (!this.setRealQueue) {\n      this.setRealQueue = {\n        references: [],\n        values: []\n      };\n    }\n\n    this.setRealQueue.references.push(reference);\n    this.setRealQueue.values.push(value);\n  };\n\n  _proto.flushRealQueue = function flushRealQueue() {\n    if (this.setRealQueue) {\n      var referenceBuffer = this.createAndFillBuffer(new Int32Array(this.setRealQueue.references));\n      var references = this.viewBuffer(referenceBuffer);\n      var valueBuffer = this.createAndFillBuffer(new Float64Array(this.setRealQueue.values));\n      var values = this.viewBuffer(valueBuffer);\n      this.setReal(references, values, this.setRealQueue.references.length);\n      this.freeBuffer(referenceBuffer);\n      this.freeBuffer(valueBuffer);\n      this.setRealQueue = false;\n    }\n  };\n\n  _proto.flushBooleanQueue = function flushBooleanQueue() {\n    if (this.setBooleanQueue) {\n      var referenceBuffer = this.createAndFillBuffer(new Int32Array(this.setBooleanQueue.references));\n      var references = this.viewBuffer(referenceBuffer);\n      var valueBuffer = this.createAndFillBuffer(new Int32Array(this.setBooleanQueue.values));\n      var values = this.viewBuffer(valueBuffer);\n      this.setBoolean(references, values, this.setBooleanQueue.references.length);\n      this.freeBuffer(referenceBuffer);\n      this.freeBuffer(valueBuffer);\n      this.setBooleanQueue = false;\n    }\n  }\n  /**\n     */\n  ;\n\n  _proto.setSingleBoolean = function setSingleBoolean(reference, value) {\n    if (!this.setBooleanQueue) {\n      this.setBooleanQueue = {\n        references: [],\n        values: []\n      };\n    }\n\n    this.setBooleanQueue.references.push(reference);\n    this.setBooleanQueue.values.push(value);\n  }\n  /**\n     * Loads a single boolean value based on reference, this is a shorthand function.\n     * It is recommended to use Module.getBoolean with reusable mallocs.\n     */\n  ;\n\n  _proto.getSingleBoolean = function getSingleBoolean(reference) {\n    var queryBuffer = this.createAndFillBuffer(new Int32Array([reference]));\n    var query = this.viewBuffer(queryBuffer);\n    var outputBuffer = this.createBuffer(new Int32Array(1));\n    var output = this.viewBuffer(outputBuffer);\n    this.getBoolean(query, output, 1);\n    var bool = new Int32Array(output.buffer, output.byteOffset, 1);\n    this.freeBuffer(queryBuffer);\n    this.freeBuffer(outputBuffer);\n    return bool[0];\n  };\n\n  _proto.getBooleans = function getBooleans(references) {\n    var queryBuffer = this.createAndFillBuffer(new Int32Array(references));\n    var query = this.viewBuffer(queryBuffer);\n    var outputBuffer = this.createBuffer(new Int32Array(references.length));\n    var output = this.viewBuffer(outputBuffer);\n    this.getBoolean(query, output, references.length);\n    var bool = new Int32Array(output.buffer, output.byteOffset, references.length);\n    this.freeBuffer(queryBuffer);\n    this.freeBuffer(outputBuffer);\n    return bool;\n  };\n\n  _proto.secondsToTime = function secondsToTime(sec, multiply) {\n    if (multiply === void 0) {\n      multiply = 1;\n    }\n\n    var x = Math.floor(sec * multiply);\n    var seconds = Math.floor(x % 60).toString().padStart(2, '0');\n    x /= 60;\n    var minutes = Math.floor(x % 60).toString().padStart(2, '0');\n    x /= 60;\n    var hours = Math.floor(x % 24).toString().padStart(2, '0');\n    x /= 24;\n    var days = Math.floor(x);\n    return ' ' + days + ' ' + hours + ':' + minutes + ':' + seconds;\n  };\n\n  _proto.perfstart = function perfstart() {\n    this.perfstartTime = new Date();\n  };\n\n  //outputs how many s the simulation was performed - at the end of simulation, good to measure performance\n  _proto.perfend = function perfend() {\n    this.perfendTime = new Date();\n    var timeDiff = this.perfendTime - this.perfstartTime; //in ms\n    // strip the ms\n\n    timeDiff /= 1000; // get seconds\n\n    console.warn(\"Simulation took \" + timeDiff + \" seconds\");\n  };\n\n  return Fmi;\n}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"fminame\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'N/A';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"tolerance\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0.000001;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"starttime\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"stoptime\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"guid\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'N/A';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"id\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"inputs\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"otherinputs\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"valuereferences\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"ticksToUpdate\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 30;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"src\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"fstepsize\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0.01;\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"controlid\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"showcontrols\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return true;\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"fpslimit\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 60;\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"showtime\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"showtimemultiply\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 1;\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"eventlisten\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'input';\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"mode\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return \"continuous\";\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"stepsperframe\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 1;\n  }\n})), _class);\nexports.Fmi = Fmi;\n//# sourceMappingURL=fmi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/fmi\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/fmi.html":
/*!*************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/fmi.html ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = \"<template>\\n  <require from=\\\"./w3.css\\\"></require>\\n  <!--require from=\\\"font-awesome/css/font-awesome.min.css\\\"></require>\\n  <require from=\\\"font-awesome/fonts/fontawesome-webfont.woff\\\"></require>\\n  <require from=\\\"font-awesome/fonts/fontawesome-webfont.ttf\\\"></require>\\n  <require from=\\\"font-awesome/fonts/fontawesome-webfont.woff2\\\"></require-->\\n  <div show.bind=\\\"showcontrols\\\">\\n    <table>\\n      <tr>\\n        <td>\\n          <button class=\\\"w3-button w3-theme\\\" click.delegate=\\\"startstop()\\\" title=\\\"Start/Stop simulation\\\"><i class.bind=\\\"animationstarted? 'fa fa-stop':'fa fa-play'\\\"></i> &nbsp;</button>\\n        </td>\\n        <td>\\n          <button class=\\\"w3-button w3-theme\\\" click.delegate=\\\"step()\\\" title=\\\"Do simulation step\\\"><i class=\\\"fa fa-step-forward\\\"> <sub><b>1</b></sub></i> &nbsp;</button>\\n        </td>\\n        <td>\\n          <button class=\\\"w3-button w3-theme\\\" click.delegate=\\\"reset()\\\" title=\\\"Reset simulation\\\"><i class=\\\"fa fa-refresh\\\"></i> &nbsp;</button>\\n        </td>\\n        <td class=\\\"w3-tiny\\\">\\n          <table>\\n            <tr><td><input type=\\\"checkbox\\\" checked.bind=\\\"measurefps\\\"/>\\n              <i show.bind=\\\"measurefps\\\" title=\\\"FMI: ${fminame}\\\">FPS:${fps}</i></td>\\n            </tr>\\n            <tr><td show.bind=\\\"measurefps\\\"><input type=\\\"number\\\" min=\\\"1\\\" max=\\\"60\\\" value.bind=\\\"fpslimit\\\" style=\\\"width:8ch\\\" /></td>\\n            </tr>\\n          </table>\\n        </td>\\n        <td show.bind=\\\"showtime\\\">\\n          <table style=\\\"font-family:Consolas,'courier new';line-height: 1.0;\\\" title=\\\"simulation time\\\">\\n            <tr><td><span>d hh:mm:ss</span></td></tr>\\n            <tr><td><span>${simulationtime}</span></td></tr>\\n          </table>\\n        </td>\\n      </tr>\\n    </table>\\n  </div>\\n</template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2ZtaS5odG1sLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F1cmVsaWEtYm9keWxpZ2h0LXBsdWdpbi9kaXN0L25hdGl2ZS1tb2R1bGVzL2VsZW1lbnRzL2ZtaS5odG1sPzFjYWYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZW1wbGF0ZT5cXG4gIDxyZXF1aXJlIGZyb209XFxcIi4vdzMuY3NzXFxcIj48L3JlcXVpcmU+XFxuICA8IS0tcmVxdWlyZSBmcm9tPVxcXCJmb250LWF3ZXNvbWUvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzXFxcIj48L3JlcXVpcmU+XFxuICA8cmVxdWlyZSBmcm9tPVxcXCJmb250LWF3ZXNvbWUvZm9udHMvZm9udGF3ZXNvbWUtd2ViZm9udC53b2ZmXFxcIj48L3JlcXVpcmU+XFxuICA8cmVxdWlyZSBmcm9tPVxcXCJmb250LWF3ZXNvbWUvZm9udHMvZm9udGF3ZXNvbWUtd2ViZm9udC50dGZcXFwiPjwvcmVxdWlyZT5cXG4gIDxyZXF1aXJlIGZyb209XFxcImZvbnQtYXdlc29tZS9mb250cy9mb250YXdlc29tZS13ZWJmb250LndvZmYyXFxcIj48L3JlcXVpcmUtLT5cXG4gIDxkaXYgc2hvdy5iaW5kPVxcXCJzaG93Y29udHJvbHNcXFwiPlxcbiAgICA8dGFibGU+XFxuICAgICAgPHRyPlxcbiAgICAgICAgPHRkPlxcbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJ3My1idXR0b24gdzMtdGhlbWVcXFwiIGNsaWNrLmRlbGVnYXRlPVxcXCJzdGFydHN0b3AoKVxcXCIgdGl0bGU9XFxcIlN0YXJ0L1N0b3Agc2ltdWxhdGlvblxcXCI+PGkgY2xhc3MuYmluZD1cXFwiYW5pbWF0aW9uc3RhcnRlZD8gJ2ZhIGZhLXN0b3AnOidmYSBmYS1wbGF5J1xcXCI+PC9pPiAmbmJzcDs8L2J1dHRvbj5cXG4gICAgICAgIDwvdGQ+XFxuICAgICAgICA8dGQ+XFxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcInczLWJ1dHRvbiB3My10aGVtZVxcXCIgY2xpY2suZGVsZWdhdGU9XFxcInN0ZXAoKVxcXCIgdGl0bGU9XFxcIkRvIHNpbXVsYXRpb24gc3RlcFxcXCI+PGkgY2xhc3M9XFxcImZhIGZhLXN0ZXAtZm9yd2FyZFxcXCI+IDxzdWI+PGI+MTwvYj48L3N1Yj48L2k+ICZuYnNwOzwvYnV0dG9uPlxcbiAgICAgICAgPC90ZD5cXG4gICAgICAgIDx0ZD5cXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwidzMtYnV0dG9uIHczLXRoZW1lXFxcIiBjbGljay5kZWxlZ2F0ZT1cXFwicmVzZXQoKVxcXCIgdGl0bGU9XFxcIlJlc2V0IHNpbXVsYXRpb25cXFwiPjxpIGNsYXNzPVxcXCJmYSBmYS1yZWZyZXNoXFxcIj48L2k+ICZuYnNwOzwvYnV0dG9uPlxcbiAgICAgICAgPC90ZD5cXG4gICAgICAgIDx0ZCBjbGFzcz1cXFwidzMtdGlueVxcXCI+XFxuICAgICAgICAgIDx0YWJsZT5cXG4gICAgICAgICAgICA8dHI+PHRkPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgY2hlY2tlZC5iaW5kPVxcXCJtZWFzdXJlZnBzXFxcIi8+XFxuICAgICAgICAgICAgICA8aSBzaG93LmJpbmQ9XFxcIm1lYXN1cmVmcHNcXFwiIHRpdGxlPVxcXCJGTUk6ICR7Zm1pbmFtZX1cXFwiPkZQUzoke2Zwc308L2k+PC90ZD5cXG4gICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDx0cj48dGQgc2hvdy5iaW5kPVxcXCJtZWFzdXJlZnBzXFxcIj48aW5wdXQgdHlwZT1cXFwibnVtYmVyXFxcIiBtaW49XFxcIjFcXFwiIG1heD1cXFwiNjBcXFwiIHZhbHVlLmJpbmQ9XFxcImZwc2xpbWl0XFxcIiBzdHlsZT1cXFwid2lkdGg6OGNoXFxcIiAvPjwvdGQ+XFxuICAgICAgICAgICAgPC90cj5cXG4gICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgIDwvdGQ+XFxuICAgICAgICA8dGQgc2hvdy5iaW5kPVxcXCJzaG93dGltZVxcXCI+XFxuICAgICAgICAgIDx0YWJsZSBzdHlsZT1cXFwiZm9udC1mYW1pbHk6Q29uc29sYXMsJ2NvdXJpZXIgbmV3JztsaW5lLWhlaWdodDogMS4wO1xcXCIgdGl0bGU9XFxcInNpbXVsYXRpb24gdGltZVxcXCI+XFxuICAgICAgICAgICAgPHRyPjx0ZD48c3Bhbj5kIGhoOm1tOnNzPC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgICA8dHI+PHRkPjxzcGFuPiR7c2ltdWxhdGlvbnRpbWV9PC9zcGFuPjwvdGQ+PC90cj5cXG4gICAgICAgICAgPC90YWJsZT5cXG4gICAgICAgIDwvdGQ+XFxuICAgICAgPC90cj5cXG4gICAgPC90YWJsZT5cXG4gIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuXCI7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/fmi.html\n");

/***/ })

}]);