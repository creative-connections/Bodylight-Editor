(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~a89a6558"],{

/***/ "Cnnb":
/*!**********************************************!*\
  !*** ./node_modules/dygraphs/src/dygraph.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var _dygraph_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dygraph-layout */ \"2c4Y\");\n/* harmony import */ var _dygraph_canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dygraph-canvas */ \"UmFC\");\n/* harmony import */ var _dygraph_options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dygraph-options */ \"h0jI\");\n/* harmony import */ var _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dygraph-interaction-model */ \"2Ep6\");\n/* harmony import */ var _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dygraph-tickers */ \"UzcX\");\n/* harmony import */ var _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./dygraph-utils */ \"venr\");\n/* harmony import */ var _dygraph_default_attrs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dygraph-default-attrs */ \"NM/G\");\n/* harmony import */ var _dygraph_options_reference__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dygraph-options-reference */ \"lsdr\");\n/* harmony import */ var _iframe_tarp__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./iframe-tarp */ \"/FzH\");\n/* harmony import */ var _datahandler_default__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./datahandler/default */ \"RZAc\");\n/* harmony import */ var _datahandler_bars_error__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./datahandler/bars-error */ \"MiBf\");\n/* harmony import */ var _datahandler_bars_custom__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./datahandler/bars-custom */ \"UXZ1\");\n/* harmony import */ var _datahandler_default_fractions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./datahandler/default-fractions */ \"UrnS\");\n/* harmony import */ var _datahandler_bars_fractions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./datahandler/bars-fractions */ \"TXHi\");\n/* harmony import */ var _datahandler_bars__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./datahandler/bars */ \"L0NK\");\n/* harmony import */ var _plugins_annotations__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./plugins/annotations */ \"qYh3\");\n/* harmony import */ var _plugins_axes__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./plugins/axes */ \"XJQ2\");\n/* harmony import */ var _plugins_chart_labels__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./plugins/chart-labels */ \"CnfQ\");\n/* harmony import */ var _plugins_grid__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./plugins/grid */ \"sVdv\");\n/* harmony import */ var _plugins_legend__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./plugins/legend */ \"Jkhw\");\n/* harmony import */ var _plugins_range_selector__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./plugins/range-selector */ \"nGoW\");\n/* harmony import */ var _dygraph_gviz__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./dygraph-gviz */ \"NQFv\");\n/**\n * @license\n * Copyright 2006 Dan Vanderkam (danvdk@gmail.com)\n * MIT-licensed (http://opensource.org/licenses/MIT)\n */\n\n/**\n * @fileoverview Creates an interactive, zoomable graph based on a CSV file or\n * string. Dygraph can handle multiple series with or without error bars. The\n * date/value ranges will be automatically set. Dygraph uses the\n * &lt;canvas&gt; tag, so it only works in FF1.5+.\n * @author danvdk@gmail.com (Dan Vanderkam)\n\n  Usage:\n   <div id=\"graphdiv\" style=\"width:800px; height:500px;\"></div>\n   <script type=\"text/javascript\">\n     new Dygraph(document.getElementById(\"graphdiv\"),\n                 \"datafile.csv\",  // CSV file with headers\n                 { }); // options\n   </script>\n\n The CSV file is of the form\n\n   Date,SeriesA,SeriesB,SeriesC\n   YYYYMMDD,A1,B1,C1\n   YYYYMMDD,A2,B2,C2\n\n If the 'errorBars' option is set in the constructor, the input should be of\n the form\n   Date,SeriesA,SeriesB,...\n   YYYYMMDD,A1,sigmaA1,B1,sigmaB1,...\n   YYYYMMDD,A2,sigmaA2,B2,sigmaB2,...\n\n If the 'fractions' option is set, the input should be of the form:\n\n   Date,SeriesA,SeriesB,...\n   YYYYMMDD,A1/B1,A2/B2,...\n   YYYYMMDD,A1/B1,A2/B2,...\n\n And error bars will be calculated automatically using a binomial distribution.\n\n For further documentation and examples, see http://dygraphs.com/\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\"use strict\";\n\n/**\n * Creates an interactive, zoomable chart.\n *\n * @constructor\n * @param {div | String} div A div or the id of a div into which to construct\n * the chart.\n * @param {String | Function} file A file containing CSV data or a function\n * that returns this data. The most basic expected format for each line is\n * \"YYYY/MM/DD,val1,val2,...\". For more information, see\n * http://dygraphs.com/data.html.\n * @param {Object} attrs Various other attributes, e.g. errorBars determines\n * whether the input data contains error ranges. For a complete list of\n * options, see http://dygraphs.com/options.html.\n */\nvar Dygraph = function(div, data, opts) {\n  this.__init__(div, data, opts);\n};\n\nDygraph.NAME = \"Dygraph\";\nDygraph.VERSION = \"2.0.0\";\n\n// Various default values\nDygraph.DEFAULT_ROLL_PERIOD = 1;\nDygraph.DEFAULT_WIDTH = 480;\nDygraph.DEFAULT_HEIGHT = 320;\n\n// For max 60 Hz. animation:\nDygraph.ANIMATION_STEPS = 12;\nDygraph.ANIMATION_DURATION = 200;\n\n/**\n * Standard plotters. These may be used by clients.\n * Available plotters are:\n * - Dygraph.Plotters.linePlotter: draws central lines (most common)\n * - Dygraph.Plotters.errorPlotter: draws error bars\n * - Dygraph.Plotters.fillPlotter: draws fills under lines (used with fillGraph)\n *\n * By default, the plotter is [fillPlotter, errorPlotter, linePlotter].\n * This causes all the lines to be drawn over all the fills/error bars.\n */\nDygraph.Plotters = _dygraph_canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"]._Plotters;\n\n\n// Used for initializing annotation CSS rules only once.\nDygraph.addedAnnotationCSS = false;\n\n/**\n * Initializes the Dygraph. This creates a new DIV and constructs the PlotKit\n * and context &lt;canvas&gt; inside of it. See the constructor for details.\n * on the parameters.\n * @param {Element} div the Element to render the graph into.\n * @param {string | Function} file Source data\n * @param {Object} attrs Miscellaneous other options\n * @private\n */\nDygraph.prototype.__init__ = function(div, file, attrs) {\n  this.is_initial_draw_ = true;\n  this.readyFns_ = [];\n\n  // Support two-argument constructor\n  if (attrs === null || attrs === undefined) { attrs = {}; }\n\n  attrs = Dygraph.copyUserAttrs_(attrs);\n\n  if (typeof(div) == 'string') {\n    div = document.getElementById(div);\n  }\n\n  if (!div) {\n    throw new Error('Constructing dygraph with a non-existent div!');\n  }\n\n  // Copy the important bits into the object\n  // TODO(danvk): most of these should just stay in the attrs_ dictionary.\n  this.maindiv_ = div;\n  this.file_ = file;\n  this.rollPeriod_ = attrs.rollPeriod || Dygraph.DEFAULT_ROLL_PERIOD;\n  this.previousVerticalX_ = -1;\n  this.fractions_ = attrs.fractions || false;\n  this.dateWindow_ = attrs.dateWindow || null;\n\n  this.annotations_ = [];\n\n  // Clear the div. This ensure that, if multiple dygraphs are passed the same\n  // div, then only one will be drawn.\n  div.innerHTML = \"\";\n\n  // For historical reasons, the 'width' and 'height' options trump all CSS\n  // rules _except_ for an explicit 'width' or 'height' on the div.\n  // As an added convenience, if the div has zero height (like <div></div> does\n  // without any styles), then we use a default height/width.\n  if (div.style.width === '' && attrs.width) {\n    div.style.width = attrs.width + \"px\";\n  }\n  if (div.style.height === '' && attrs.height) {\n    div.style.height = attrs.height + \"px\";\n  }\n  if (div.style.height === '' && div.clientHeight === 0) {\n    div.style.height = Dygraph.DEFAULT_HEIGHT + \"px\";\n    if (div.style.width === '') {\n      div.style.width = Dygraph.DEFAULT_WIDTH + \"px\";\n    }\n  }\n  // These will be zero if the dygraph's div is hidden. In that case,\n  // use the user-specified attributes if present. If not, use zero\n  // and assume the user will call resize to fix things later.\n  this.width_ = div.clientWidth || attrs.width || 0;\n  this.height_ = div.clientHeight || attrs.height || 0;\n\n  // TODO(danvk): set fillGraph to be part of attrs_ here, not user_attrs_.\n  if (attrs.stackedGraph) {\n    attrs.fillGraph = true;\n    // TODO(nikhilk): Add any other stackedGraph checks here.\n  }\n\n  // DEPRECATION WARNING: All option processing should be moved from\n  // attrs_ and user_attrs_ to options_, which holds all this information.\n  //\n  // Dygraphs has many options, some of which interact with one another.\n  // To keep track of everything, we maintain two sets of options:\n  //\n  //  this.user_attrs_   only options explicitly set by the user.\n  //  this.attrs_        defaults, options derived from user_attrs_, data.\n  //\n  // Options are then accessed this.attr_('attr'), which first looks at\n  // user_attrs_ and then computed attrs_. This way Dygraphs can set intelligent\n  // defaults without overriding behavior that the user specifically asks for.\n  this.user_attrs_ = {};\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"update\"](this.user_attrs_, attrs);\n\n  // This sequence ensures that Dygraph.DEFAULT_ATTRS is never modified.\n  this.attrs_ = {};\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"updateDeep\"](this.attrs_, _dygraph_default_attrs__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n\n  this.boundaryIds_ = [];\n  this.setIndexByName_ = {};\n  this.datasetIndex_ = [];\n\n  this.registeredEvents_ = [];\n  this.eventListeners_ = {};\n\n  this.attributes_ = new _dygraph_options__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this);\n\n  // Create the containing DIV and other interactive elements\n  this.createInterface_();\n\n  // Activate plugins.\n  this.plugins_ = [];\n  var plugins = Dygraph.PLUGINS.concat(this.getOption('plugins'));\n  for (var i = 0; i < plugins.length; i++) {\n    // the plugins option may contain either plugin classes or instances.\n    // Plugin instances contain an activate method.\n    var Plugin = plugins[i];  // either a constructor or an instance.\n    var pluginInstance;\n    if (typeof(Plugin.activate) !== 'undefined') {\n      pluginInstance = Plugin;\n    } else {\n      pluginInstance = new Plugin();\n    }\n\n    var pluginDict = {\n      plugin: pluginInstance,\n      events: {},\n      options: {},\n      pluginOptions: {}\n    };\n\n    var handlers = pluginInstance.activate(this);\n    for (var eventName in handlers) {\n      if (!handlers.hasOwnProperty(eventName)) continue;\n      // TODO(danvk): validate eventName.\n      pluginDict.events[eventName] = handlers[eventName];\n    }\n\n    this.plugins_.push(pluginDict);\n  }\n\n  // At this point, plugins can no longer register event handlers.\n  // Construct a map from event -> ordered list of [callback, plugin].\n  for (var i = 0; i < this.plugins_.length; i++) {\n    var plugin_dict = this.plugins_[i];\n    for (var eventName in plugin_dict.events) {\n      if (!plugin_dict.events.hasOwnProperty(eventName)) continue;\n      var callback = plugin_dict.events[eventName];\n\n      var pair = [plugin_dict.plugin, callback];\n      if (!(eventName in this.eventListeners_)) {\n        this.eventListeners_[eventName] = [pair];\n      } else {\n        this.eventListeners_[eventName].push(pair);\n      }\n    }\n  }\n\n  this.createDragInterface_();\n\n  this.start_();\n};\n\n/**\n * Triggers a cascade of events to the various plugins which are interested in them.\n * Returns true if the \"default behavior\" should be prevented, i.e. if one\n * of the event listeners called event.preventDefault().\n * @private\n */\nDygraph.prototype.cascadeEvents_ = function(name, extra_props) {\n  if (!(name in this.eventListeners_)) return false;\n\n  // QUESTION: can we use objects & prototypes to speed this up?\n  var e = {\n    dygraph: this,\n    cancelable: false,\n    defaultPrevented: false,\n    preventDefault: function() {\n      if (!e.cancelable) throw \"Cannot call preventDefault on non-cancelable event.\";\n      e.defaultPrevented = true;\n    },\n    propagationStopped: false,\n    stopPropagation: function() {\n      e.propagationStopped = true;\n    }\n  };\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"update\"](e, extra_props);\n\n  var callback_plugin_pairs = this.eventListeners_[name];\n  if (callback_plugin_pairs) {\n    for (var i = callback_plugin_pairs.length - 1; i >= 0; i--) {\n      var plugin = callback_plugin_pairs[i][0];\n      var callback = callback_plugin_pairs[i][1];\n      callback.call(plugin, e);\n      if (e.propagationStopped) break;\n    }\n  }\n  return e.defaultPrevented;\n};\n\n/**\n * Fetch a plugin instance of a particular class. Only for testing.\n * @private\n * @param {!Class} type The type of the plugin.\n * @return {Object} Instance of the plugin, or null if there is none.\n */\nDygraph.prototype.getPluginInstance_ = function(type) {\n  for (var i = 0; i < this.plugins_.length; i++) {\n    var p = this.plugins_[i];\n    if (p.plugin instanceof type) {\n      return p.plugin;\n    }\n  }\n  return null;\n};\n\n/**\n * Returns the zoomed status of the chart for one or both axes.\n *\n * Axis is an optional parameter. Can be set to 'x' or 'y'.\n *\n * The zoomed status for an axis is set whenever a user zooms using the mouse\n * or when the dateWindow or valueRange are updated. Double-clicking or calling\n * resetZoom() resets the zoom status for the chart.\n */\nDygraph.prototype.isZoomed = function(axis) {\n  const isZoomedX = !!this.dateWindow_;\n  if (axis === 'x') return isZoomedX;\n\n  const isZoomedY = this.axes_.map(axis => !!axis.valueRange).indexOf(true) >= 0;\n  if (axis === null || axis === undefined) {\n    return isZoomedX || isZoomedY;\n  }\n  if (axis === 'y') return isZoomedY;\n\n  throw new Error(`axis parameter is [${axis}] must be null, 'x' or 'y'.`);\n};\n\n/**\n * Returns information about the Dygraph object, including its containing ID.\n */\nDygraph.prototype.toString = function() {\n  var maindiv = this.maindiv_;\n  var id = (maindiv && maindiv.id) ? maindiv.id : maindiv;\n  return \"[Dygraph \" + id + \"]\";\n};\n\n/**\n * @private\n * Returns the value of an option. This may be set by the user (either in the\n * constructor or by calling updateOptions) or by dygraphs, and may be set to a\n * per-series value.\n * @param {string} name The name of the option, e.g. 'rollPeriod'.\n * @param {string} [seriesName] The name of the series to which the option\n * will be applied. If no per-series value of this option is available, then\n * the global value is returned. This is optional.\n * @return { ... } The value of the option.\n */\nDygraph.prototype.attr_ = function(name, seriesName) {\n  // For \"production\" code, this gets removed by uglifyjs.\n  if (typeof(process) !== 'undefined') {\n    if (true) {\n      if (typeof(_dygraph_options_reference__WEBPACK_IMPORTED_MODULE_7__[\"default\"]) === 'undefined') {\n        console.error('Must include options reference JS for testing');\n      } else if (!_dygraph_options_reference__WEBPACK_IMPORTED_MODULE_7__[\"default\"].hasOwnProperty(name)) {\n        console.error('Dygraphs is using property ' + name + ', which has no ' +\n                      'entry in the Dygraphs.OPTIONS_REFERENCE listing.');\n        // Only log this error once.\n        _dygraph_options_reference__WEBPACK_IMPORTED_MODULE_7__[\"default\"][name] = true;\n      }\n    }\n  }\n  return seriesName ? this.attributes_.getForSeries(name, seriesName) : this.attributes_.get(name);\n};\n\n/**\n * Returns the current value for an option, as set in the constructor or via\n * updateOptions. You may pass in an (optional) series name to get per-series\n * values for the option.\n *\n * All values returned by this method should be considered immutable. If you\n * modify them, there is no guarantee that the changes will be honored or that\n * dygraphs will remain in a consistent state. If you want to modify an option,\n * use updateOptions() instead.\n *\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {*} The value of the option.\n */\nDygraph.prototype.getOption = function(name, opt_seriesName) {\n  return this.attr_(name, opt_seriesName);\n};\n\n/**\n * Like getOption(), but specifically returns a number.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {number} The value of the option.\n * @private\n */\nDygraph.prototype.getNumericOption = function(name, opt_seriesName) {\n  return /** @type{number} */(this.getOption(name, opt_seriesName));\n};\n\n/**\n * Like getOption(), but specifically returns a string.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {string} The value of the option.\n * @private\n */\nDygraph.prototype.getStringOption = function(name, opt_seriesName) {\n  return /** @type{string} */(this.getOption(name, opt_seriesName));\n};\n\n/**\n * Like getOption(), but specifically returns a boolean.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {boolean} The value of the option.\n * @private\n */\nDygraph.prototype.getBooleanOption = function(name, opt_seriesName) {\n  return /** @type{boolean} */(this.getOption(name, opt_seriesName));\n};\n\n/**\n * Like getOption(), but specifically returns a function.\n * This is a convenience function for working with the Closure Compiler.\n * @param {string} name The name of the option (e.g. 'strokeWidth')\n * @param {string=} opt_seriesName Series name to get per-series values.\n * @return {function(...)} The value of the option.\n * @private\n */\nDygraph.prototype.getFunctionOption = function(name, opt_seriesName) {\n  return /** @type{function(...)} */(this.getOption(name, opt_seriesName));\n};\n\nDygraph.prototype.getOptionForAxis = function(name, axis) {\n  return this.attributes_.getForAxis(name, axis);\n};\n\n/**\n * @private\n * @param {string} axis The name of the axis (i.e. 'x', 'y' or 'y2')\n * @return { ... } A function mapping string -> option value\n */\nDygraph.prototype.optionsViewForAxis_ = function(axis) {\n  var self = this;\n  return function(opt) {\n    var axis_opts = self.user_attrs_.axes;\n    if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {\n      return axis_opts[axis][opt];\n    }\n\n    // I don't like that this is in a second spot.\n    if (axis === 'x' && opt === 'logscale') {\n      // return the default value.\n      // TODO(konigsberg): pull the default from a global default.\n      return false;\n    }\n\n    // user-specified attributes always trump defaults, even if they're less\n    // specific.\n    if (typeof(self.user_attrs_[opt]) != 'undefined') {\n      return self.user_attrs_[opt];\n    }\n\n    axis_opts = self.attrs_.axes;\n    if (axis_opts && axis_opts[axis] && axis_opts[axis].hasOwnProperty(opt)) {\n      return axis_opts[axis][opt];\n    }\n    // check old-style axis options\n    // TODO(danvk): add a deprecation warning if either of these match.\n    if (axis == 'y' && self.axes_[0].hasOwnProperty(opt)) {\n      return self.axes_[0][opt];\n    } else if (axis == 'y2' && self.axes_[1].hasOwnProperty(opt)) {\n      return self.axes_[1][opt];\n    }\n    return self.attr_(opt);\n  };\n};\n\n/**\n * Returns the current rolling period, as set by the user or an option.\n * @return {number} The number of points in the rolling window\n */\nDygraph.prototype.rollPeriod = function() {\n  return this.rollPeriod_;\n};\n\n/**\n * Returns the currently-visible x-range. This can be affected by zooming,\n * panning or a call to updateOptions.\n * Returns a two-element array: [left, right].\n * If the Dygraph has dates on the x-axis, these will be millis since epoch.\n */\nDygraph.prototype.xAxisRange = function() {\n  return this.dateWindow_ ? this.dateWindow_ : this.xAxisExtremes();\n};\n\n/**\n * Returns the lower- and upper-bound x-axis values of the data set.\n */\nDygraph.prototype.xAxisExtremes = function() {\n  var pad = this.getNumericOption('xRangePad') / this.plotter_.area.w;\n  if (this.numRows() === 0) {\n    return [0 - pad, 1 + pad];\n  }\n  var left = this.rawData_[0][0];\n  var right = this.rawData_[this.rawData_.length - 1][0];\n  if (pad) {\n    // Must keep this in sync with dygraph-layout _evaluateLimits()\n    var range = right - left;\n    left -= range * pad;\n    right += range * pad;\n  }\n  return [left, right];\n};\n\n/**\n * Returns the lower- and upper-bound y-axis values for each axis. These are\n * the ranges you'll get if you double-click to zoom out or call resetZoom().\n * The return value is an array of [low, high] tuples, one for each y-axis.\n */\nDygraph.prototype.yAxisExtremes = function() {\n  // TODO(danvk): this is pretty inefficient\n  const packed = this.gatherDatasets_(this.rolledSeries_, null);\n  const { extremes } = packed;\n  const saveAxes = this.axes_;\n  this.computeYAxisRanges_(extremes);\n  const newAxes = this.axes_;\n  this.axes_ = saveAxes;\n  return newAxes.map(axis => axis.extremeRange);\n}\n\n/**\n * Returns the currently-visible y-range for an axis. This can be affected by\n * zooming, panning or a call to updateOptions. Axis indices are zero-based. If\n * called with no arguments, returns the range of the first axis.\n * Returns a two-element array: [bottom, top].\n */\nDygraph.prototype.yAxisRange = function(idx) {\n  if (typeof(idx) == \"undefined\") idx = 0;\n  if (idx < 0 || idx >= this.axes_.length) {\n    return null;\n  }\n  var axis = this.axes_[idx];\n  return [ axis.computedValueRange[0], axis.computedValueRange[1] ];\n};\n\n/**\n * Returns the currently-visible y-ranges for each axis. This can be affected by\n * zooming, panning, calls to updateOptions, etc.\n * Returns an array of [bottom, top] pairs, one for each y-axis.\n */\nDygraph.prototype.yAxisRanges = function() {\n  var ret = [];\n  for (var i = 0; i < this.axes_.length; i++) {\n    ret.push(this.yAxisRange(i));\n  }\n  return ret;\n};\n\n// TODO(danvk): use these functions throughout dygraphs.\n/**\n * Convert from data coordinates to canvas/div X/Y coordinates.\n * If specified, do this conversion for the coordinate system of a particular\n * axis. Uses the first axis by default.\n * Returns a two-element array: [X, Y]\n *\n * Note: use toDomXCoord instead of toDomCoords(x, null) and use toDomYCoord\n * instead of toDomCoords(null, y, axis).\n */\nDygraph.prototype.toDomCoords = function(x, y, axis) {\n  return [ this.toDomXCoord(x), this.toDomYCoord(y, axis) ];\n};\n\n/**\n * Convert from data x coordinates to canvas/div X coordinate.\n * If specified, do this conversion for the coordinate system of a particular\n * axis.\n * Returns a single value or null if x is null.\n */\nDygraph.prototype.toDomXCoord = function(x) {\n  if (x === null) {\n    return null;\n  }\n\n  var area = this.plotter_.area;\n  var xRange = this.xAxisRange();\n  return area.x + (x - xRange[0]) / (xRange[1] - xRange[0]) * area.w;\n};\n\n/**\n * Convert from data x coordinates to canvas/div Y coordinate and optional\n * axis. Uses the first axis by default.\n *\n * returns a single value or null if y is null.\n */\nDygraph.prototype.toDomYCoord = function(y, axis) {\n  var pct = this.toPercentYCoord(y, axis);\n\n  if (pct === null) {\n    return null;\n  }\n  var area = this.plotter_.area;\n  return area.y + pct * area.h;\n};\n\n/**\n * Convert from canvas/div coords to data coordinates.\n * If specified, do this conversion for the coordinate system of a particular\n * axis. Uses the first axis by default.\n * Returns a two-element array: [X, Y].\n *\n * Note: use toDataXCoord instead of toDataCoords(x, null) and use toDataYCoord\n * instead of toDataCoords(null, y, axis).\n */\nDygraph.prototype.toDataCoords = function(x, y, axis) {\n  return [ this.toDataXCoord(x), this.toDataYCoord(y, axis) ];\n};\n\n/**\n * Convert from canvas/div x coordinate to data coordinate.\n *\n * If x is null, this returns null.\n */\nDygraph.prototype.toDataXCoord = function(x) {\n  if (x === null) {\n    return null;\n  }\n\n  var area = this.plotter_.area;\n  var xRange = this.xAxisRange();\n\n  if (!this.attributes_.getForAxis(\"logscale\", 'x')) {\n    return xRange[0] + (x - area.x) / area.w * (xRange[1] - xRange[0]);\n  } else {\n    var pct = (x - area.x) / area.w;\n    return _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"logRangeFraction\"](xRange[0], xRange[1], pct);\n  }\n};\n\n/**\n * Convert from canvas/div y coord to value.\n *\n * If y is null, this returns null.\n * if axis is null, this uses the first axis.\n */\nDygraph.prototype.toDataYCoord = function(y, axis) {\n  if (y === null) {\n    return null;\n  }\n\n  var area = this.plotter_.area;\n  var yRange = this.yAxisRange(axis);\n\n  if (typeof(axis) == \"undefined\") axis = 0;\n  if (!this.attributes_.getForAxis(\"logscale\", axis)) {\n    return yRange[0] + (area.y + area.h - y) / area.h * (yRange[1] - yRange[0]);\n  } else {\n    // Computing the inverse of toDomCoord.\n    var pct = (y - area.y) / area.h;\n    // Note reversed yRange, y1 is on top with pct==0.\n    return _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"logRangeFraction\"](yRange[1], yRange[0], pct);\n  }\n};\n\n/**\n * Converts a y for an axis to a percentage from the top to the\n * bottom of the drawing area.\n *\n * If the coordinate represents a value visible on the canvas, then\n * the value will be between 0 and 1, where 0 is the top of the canvas.\n * However, this method will return values outside the range, as\n * values can fall outside the canvas.\n *\n * If y is null, this returns null.\n * if axis is null, this uses the first axis.\n *\n * @param {number} y The data y-coordinate.\n * @param {number} [axis] The axis number on which the data coordinate lives.\n * @return {number} A fraction in [0, 1] where 0 = the top edge.\n */\nDygraph.prototype.toPercentYCoord = function(y, axis) {\n  if (y === null) {\n    return null;\n  }\n  if (typeof(axis) == \"undefined\") axis = 0;\n\n  var yRange = this.yAxisRange(axis);\n\n  var pct;\n  var logscale = this.attributes_.getForAxis(\"logscale\", axis);\n  if (logscale) {\n    var logr0 = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"log10\"](yRange[0]);\n    var logr1 = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"log10\"](yRange[1]);\n    pct = (logr1 - _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"log10\"](y)) / (logr1 - logr0);\n  } else {\n    // yRange[1] - y is unit distance from the bottom.\n    // yRange[1] - yRange[0] is the scale of the range.\n    // (yRange[1] - y) / (yRange[1] - yRange[0]) is the % from the bottom.\n    pct = (yRange[1] - y) / (yRange[1] - yRange[0]);\n  }\n  return pct;\n};\n\n/**\n * Converts an x value to a percentage from the left to the right of\n * the drawing area.\n *\n * If the coordinate represents a value visible on the canvas, then\n * the value will be between 0 and 1, where 0 is the left of the canvas.\n * However, this method will return values outside the range, as\n * values can fall outside the canvas.\n *\n * If x is null, this returns null.\n * @param {number} x The data x-coordinate.\n * @return {number} A fraction in [0, 1] where 0 = the left edge.\n */\nDygraph.prototype.toPercentXCoord = function(x) {\n  if (x === null) {\n    return null;\n  }\n\n  var xRange = this.xAxisRange();\n  var pct;\n  var logscale = this.attributes_.getForAxis(\"logscale\", 'x') ;\n  if (logscale === true) {  // logscale can be null so we test for true explicitly.\n    var logr0 = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"log10\"](xRange[0]);\n    var logr1 = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"log10\"](xRange[1]);\n    pct = (_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"log10\"](x) - logr0) / (logr1 - logr0);\n  } else {\n    // x - xRange[0] is unit distance from the left.\n    // xRange[1] - xRange[0] is the scale of the range.\n    // The full expression below is the % from the left.\n    pct = (x - xRange[0]) / (xRange[1] - xRange[0]);\n  }\n  return pct;\n};\n\n/**\n * Returns the number of columns (including the independent variable).\n * @return {number} The number of columns.\n */\nDygraph.prototype.numColumns = function() {\n  if (!this.rawData_) return 0;\n  return this.rawData_[0] ? this.rawData_[0].length : this.attr_(\"labels\").length;\n};\n\n/**\n * Returns the number of rows (excluding any header/label row).\n * @return {number} The number of rows, less any header.\n */\nDygraph.prototype.numRows = function() {\n  if (!this.rawData_) return 0;\n  return this.rawData_.length;\n};\n\n/**\n * Returns the value in the given row and column. If the row and column exceed\n * the bounds on the data, returns null. Also returns null if the value is\n * missing.\n * @param {number} row The row number of the data (0-based). Row 0 is the\n *     first row of data, not a header row.\n * @param {number} col The column number of the data (0-based)\n * @return {number} The value in the specified cell or null if the row/col\n *     were out of range.\n */\nDygraph.prototype.getValue = function(row, col) {\n  if (row < 0 || row > this.rawData_.length) return null;\n  if (col < 0 || col > this.rawData_[row].length) return null;\n\n  return this.rawData_[row][col];\n};\n\n/**\n * Generates interface elements for the Dygraph: a containing div, a div to\n * display the current point, and a textbox to adjust the rolling average\n * period. Also creates the Renderer/Layout elements.\n * @private\n */\nDygraph.prototype.createInterface_ = function() {\n  // Create the all-enclosing graph div\n  var enclosing = this.maindiv_;\n\n  this.graphDiv = document.createElement(\"div\");\n\n  // TODO(danvk): any other styles that are useful to set here?\n  this.graphDiv.style.textAlign = 'left';  // This is a CSS \"reset\"\n  this.graphDiv.style.position = 'relative';\n  enclosing.appendChild(this.graphDiv);\n\n  // Create the canvas for interactive parts of the chart.\n  this.canvas_ = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"createCanvas\"]();\n  this.canvas_.style.position = \"absolute\";\n\n  // ... and for static parts of the chart.\n  this.hidden_ = this.createPlotKitCanvas_(this.canvas_);\n\n  this.canvas_ctx_ = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"getContext\"](this.canvas_);\n  this.hidden_ctx_ = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"getContext\"](this.hidden_);\n\n  this.resizeElements_();\n\n  // The interactive parts of the graph are drawn on top of the chart.\n  this.graphDiv.appendChild(this.hidden_);\n  this.graphDiv.appendChild(this.canvas_);\n  this.mouseEventElement_ = this.createMouseEventElement_();\n\n  // Create the grapher\n  this.layout_ = new _dygraph_layout__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\n\n  var dygraph = this;\n\n  this.mouseMoveHandler_ = function(e) {\n    dygraph.mouseMove_(e);\n  };\n\n  this.mouseOutHandler_ = function(e) {\n    // The mouse has left the chart if:\n    // 1. e.target is inside the chart\n    // 2. e.relatedTarget is outside the chart\n    var target = e.target || e.fromElement;\n    var relatedTarget = e.relatedTarget || e.toElement;\n    if (_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isNodeContainedBy\"](target, dygraph.graphDiv) &&\n        !_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isNodeContainedBy\"](relatedTarget, dygraph.graphDiv)) {\n      dygraph.mouseOut_(e);\n    }\n  };\n\n  this.addAndTrackEvent(window, 'mouseout', this.mouseOutHandler_);\n  this.addAndTrackEvent(this.mouseEventElement_, 'mousemove', this.mouseMoveHandler_);\n\n  // Don't recreate and register the resize handler on subsequent calls.\n  // This happens when the graph is resized.\n  if (!this.resizeHandler_) {\n    this.resizeHandler_ = function(e) {\n      dygraph.resize();\n    };\n\n    // Update when the window is resized.\n    // TODO(danvk): drop frames depending on complexity of the chart.\n    this.addAndTrackEvent(window, 'resize', this.resizeHandler_);\n  }\n};\n\nDygraph.prototype.resizeElements_ = function() {\n  this.graphDiv.style.width = this.width_ + \"px\";\n  this.graphDiv.style.height = this.height_ + \"px\";\n\n  var pixelRatioOption = this.getNumericOption('pixelRatio')\n\n  var canvasScale = pixelRatioOption || _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"getContextPixelRatio\"](this.canvas_ctx_);\n  this.canvas_.width = this.width_ * canvasScale;\n  this.canvas_.height = this.height_ * canvasScale;\n  this.canvas_.style.width = this.width_ + \"px\";    // for IE\n  this.canvas_.style.height = this.height_ + \"px\";  // for IE\n  if (canvasScale !== 1) {\n    this.canvas_ctx_.scale(canvasScale, canvasScale);\n  }\n\n  var hiddenScale = pixelRatioOption || _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"getContextPixelRatio\"](this.hidden_ctx_);\n  this.hidden_.width = this.width_ * hiddenScale;\n  this.hidden_.height = this.height_ * hiddenScale;\n  this.hidden_.style.width = this.width_ + \"px\";    // for IE\n  this.hidden_.style.height = this.height_ + \"px\";  // for IE\n  if (hiddenScale !== 1) {\n    this.hidden_ctx_.scale(hiddenScale, hiddenScale);\n  }\n};\n\n/**\n * Detach DOM elements in the dygraph and null out all data references.\n * Calling this when you're done with a dygraph can dramatically reduce memory\n * usage. See, e.g., the tests/perf.html example.\n */\nDygraph.prototype.destroy = function() {\n  this.canvas_ctx_.restore();\n  this.hidden_ctx_.restore();\n\n  // Destroy any plugins, in the reverse order that they were registered.\n  for (var i = this.plugins_.length - 1; i >= 0; i--) {\n    var p = this.plugins_.pop();\n    if (p.plugin.destroy) p.plugin.destroy();\n  }\n\n  var removeRecursive = function(node) {\n    while (node.hasChildNodes()) {\n      removeRecursive(node.firstChild);\n      node.removeChild(node.firstChild);\n    }\n  };\n\n  this.removeTrackedEvents_();\n\n  // remove mouse event handlers (This may not be necessary anymore)\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"removeEvent\"](window, 'mouseout', this.mouseOutHandler_);\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"removeEvent\"](this.mouseEventElement_, 'mousemove', this.mouseMoveHandler_);\n\n  // remove window handlers\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"removeEvent\"](window,'resize', this.resizeHandler_);\n  this.resizeHandler_ = null;\n\n  removeRecursive(this.maindiv_);\n\n  var nullOut = function(obj) {\n    for (var n in obj) {\n      if (typeof(obj[n]) === 'object') {\n        obj[n] = null;\n      }\n    }\n  };\n  // These may not all be necessary, but it can't hurt...\n  nullOut(this.layout_);\n  nullOut(this.plotter_);\n  nullOut(this);\n};\n\n/**\n * Creates the canvas on which the chart will be drawn. Only the Renderer ever\n * draws on this particular canvas. All Dygraph work (i.e. drawing hover dots\n * or the zoom rectangles) is done on this.canvas_.\n * @param {Object} canvas The Dygraph canvas over which to overlay the plot\n * @return {Object} The newly-created canvas\n * @private\n */\nDygraph.prototype.createPlotKitCanvas_ = function(canvas) {\n  var h = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"createCanvas\"]();\n  h.style.position = \"absolute\";\n  // TODO(danvk): h should be offset from canvas. canvas needs to include\n  // some extra area to make it easier to zoom in on the far left and far\n  // right. h needs to be precisely the plot area, so that clipping occurs.\n  h.style.top = canvas.style.top;\n  h.style.left = canvas.style.left;\n  h.width = this.width_;\n  h.height = this.height_;\n  h.style.width = this.width_ + \"px\";    // for IE\n  h.style.height = this.height_ + \"px\";  // for IE\n  return h;\n};\n\n/**\n * Creates an overlay element used to handle mouse events.\n * @return {Object} The mouse event element.\n * @private\n */\nDygraph.prototype.createMouseEventElement_ = function() {\n  return this.canvas_;\n};\n\n/**\n * Generate a set of distinct colors for the data series. This is done with a\n * color wheel. Saturation/Value are customizable, and the hue is\n * equally-spaced around the color wheel. If a custom set of colors is\n * specified, that is used instead.\n * @private\n */\nDygraph.prototype.setColors_ = function() {\n  var labels = this.getLabels();\n  var num = labels.length - 1;\n  this.colors_ = [];\n  this.colorsMap_ = {};\n\n  // These are used for when no custom colors are specified.\n  var sat = this.getNumericOption('colorSaturation') || 1.0;\n  var val = this.getNumericOption('colorValue') || 0.5;\n  var half = Math.ceil(num / 2);\n\n  var colors = this.getOption('colors');\n  var visibility = this.visibility();\n  for (var i = 0; i < num; i++) {\n    if (!visibility[i]) {\n      continue;\n    }\n    var label = labels[i + 1];\n    var colorStr = this.attributes_.getForSeries('color', label);\n    if (!colorStr) {\n      if (colors) {\n        colorStr = colors[i % colors.length];\n      } else {\n        // alternate colors for high contrast.\n        var idx = i % 2 ? (half + (i + 1)/ 2) : Math.ceil((i + 1) / 2);\n        var hue = (1.0 * idx / (1 + num));\n        colorStr = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"hsvToRGB\"](hue, sat, val);\n      }\n    }\n    this.colors_.push(colorStr);\n    this.colorsMap_[label] = colorStr;\n  }\n};\n\n/**\n * Return the list of colors. This is either the list of colors passed in the\n * attributes or the autogenerated list of rgb(r,g,b) strings.\n * This does not return colors for invisible series.\n * @return {Array.<string>} The list of colors.\n */\nDygraph.prototype.getColors = function() {\n  return this.colors_;\n};\n\n/**\n * Returns a few attributes of a series, i.e. its color, its visibility, which\n * axis it's assigned to, and its column in the original data.\n * Returns null if the series does not exist.\n * Otherwise, returns an object with column, visibility, color and axis properties.\n * The \"axis\" property will be set to 1 for y1 and 2 for y2.\n * The \"column\" property can be fed back into getValue(row, column) to get\n * values for this series.\n */\nDygraph.prototype.getPropertiesForSeries = function(series_name) {\n  var idx = -1;\n  var labels = this.getLabels();\n  for (var i = 1; i < labels.length; i++) {\n    if (labels[i] == series_name) {\n      idx = i;\n      break;\n    }\n  }\n  if (idx == -1) return null;\n\n  return {\n    name: series_name,\n    column: idx,\n    visible: this.visibility()[idx - 1],\n    color: this.colorsMap_[series_name],\n    axis: 1 + this.attributes_.axisForSeries(series_name)\n  };\n};\n\n/**\n * Create the text box to adjust the averaging period\n * @private\n */\nDygraph.prototype.createRollInterface_ = function() {\n  // Create a roller if one doesn't exist already.\n  var roller = this.roller_;\n  if (!roller) {\n    this.roller_ = roller = document.createElement(\"input\");\n    roller.type = \"text\";\n    roller.style.display = \"none\";\n    roller.className = 'dygraph-roller';\n    this.graphDiv.appendChild(roller);\n  }\n\n  var display = this.getBooleanOption('showRoller') ? 'block' : 'none';\n\n  var area = this.getArea();\n  var textAttr = {\n                   \"top\": (area.y + area.h - 25) + \"px\",\n                   \"left\": (area.x + 1) + \"px\",\n                   \"display\": display\n                 };\n  roller.size = \"2\";\n  roller.value = this.rollPeriod_;\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"update\"](roller.style, textAttr);\n\n  roller.onchange = () => this.adjustRoll(roller.value);\n};\n\n/**\n * Set up all the mouse handlers needed to capture dragging behavior for zoom\n * events.\n * @private\n */\nDygraph.prototype.createDragInterface_ = function() {\n  var context = {\n    // Tracks whether the mouse is down right now\n    isZooming: false,\n    isPanning: false,  // is this drag part of a pan?\n    is2DPan: false,    // if so, is that pan 1- or 2-dimensional?\n    dragStartX: null, // pixel coordinates\n    dragStartY: null, // pixel coordinates\n    dragEndX: null, // pixel coordinates\n    dragEndY: null, // pixel coordinates\n    dragDirection: null,\n    prevEndX: null, // pixel coordinates\n    prevEndY: null, // pixel coordinates\n    prevDragDirection: null,\n    cancelNextDblclick: false,  // see comment in dygraph-interaction-model.js\n\n    // The value on the left side of the graph when a pan operation starts.\n    initialLeftmostDate: null,\n\n    // The number of units each pixel spans. (This won't be valid for log\n    // scales)\n    xUnitsPerPixel: null,\n\n    // TODO(danvk): update this comment\n    // The range in second/value units that the viewport encompasses during a\n    // panning operation.\n    dateRange: null,\n\n    // Top-left corner of the canvas, in DOM coords\n    // TODO(konigsberg): Rename topLeftCanvasX, topLeftCanvasY.\n    px: 0,\n    py: 0,\n\n    // Values for use with panEdgeFraction, which limit how far outside the\n    // graph's data boundaries it can be panned.\n    boundedDates: null, // [minDate, maxDate]\n    boundedValues: null, // [[minValue, maxValue] ...]\n\n    // We cover iframes during mouse interactions. See comments in\n    // dygraph-utils.js for more info on why this is a good idea.\n    tarp: new _iframe_tarp__WEBPACK_IMPORTED_MODULE_8__[\"default\"](),\n\n    // contextB is the same thing as this context object but renamed.\n    initializeMouseDown: function(event, g, contextB) {\n      // prevents mouse drags from selecting page text.\n      if (event.preventDefault) {\n        event.preventDefault();  // Firefox, Chrome, etc.\n      } else {\n        event.returnValue = false;  // IE\n        event.cancelBubble = true;\n      }\n\n      var canvasPos = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"findPos\"](g.canvas_);\n      contextB.px = canvasPos.x;\n      contextB.py = canvasPos.y;\n      contextB.dragStartX = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dragGetX_\"](event, contextB);\n      contextB.dragStartY = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dragGetY_\"](event, contextB);\n      contextB.cancelNextDblclick = false;\n      contextB.tarp.cover();\n    },\n    destroy: function() {\n      var context = this;\n      if (context.isZooming || context.isPanning) {\n        context.isZooming = false;\n        context.dragStartX = null;\n        context.dragStartY = null;\n      }\n\n      if (context.isPanning) {\n        context.isPanning = false;\n        context.draggingDate = null;\n        context.dateRange = null;\n        for (var i = 0; i < self.axes_.length; i++) {\n          delete self.axes_[i].draggingValue;\n          delete self.axes_[i].dragValueRange;\n        }\n      }\n\n      context.tarp.uncover();\n    }\n  };\n\n  var interactionModel = this.getOption(\"interactionModel\");\n\n  // Self is the graph.\n  var self = this;\n\n  // Function that binds the graph and context to the handler.\n  var bindHandler = function(handler) {\n    return function(event) {\n      handler(event, self, context);\n    };\n  };\n\n  for (var eventName in interactionModel) {\n    if (!interactionModel.hasOwnProperty(eventName)) continue;\n    this.addAndTrackEvent(this.mouseEventElement_, eventName,\n        bindHandler(interactionModel[eventName]));\n  }\n\n  // If the user releases the mouse button during a drag, but not over the\n  // canvas, then it doesn't count as a zooming action.\n  if (!interactionModel.willDestroyContextMyself) {\n    var mouseUpHandler = function(event) {\n      context.destroy();\n    };\n\n    this.addAndTrackEvent(document, 'mouseup', mouseUpHandler);\n  }\n};\n\n/**\n * Draw a gray zoom rectangle over the desired area of the canvas. Also clears\n * up any previous zoom rectangles that were drawn. This could be optimized to\n * avoid extra redrawing, but it's tricky to avoid interactions with the status\n * dots.\n *\n * @param {number} direction the direction of the zoom rectangle. Acceptable\n *     values are utils.HORIZONTAL and utils.VERTICAL.\n * @param {number} startX The X position where the drag started, in canvas\n *     coordinates.\n * @param {number} endX The current X position of the drag, in canvas coords.\n * @param {number} startY The Y position where the drag started, in canvas\n *     coordinates.\n * @param {number} endY The current Y position of the drag, in canvas coords.\n * @param {number} prevDirection the value of direction on the previous call to\n *     this function. Used to avoid excess redrawing\n * @param {number} prevEndX The value of endX on the previous call to this\n *     function. Used to avoid excess redrawing\n * @param {number} prevEndY The value of endY on the previous call to this\n *     function. Used to avoid excess redrawing\n * @private\n */\nDygraph.prototype.drawZoomRect_ = function(direction, startX, endX, startY,\n                                           endY, prevDirection, prevEndX,\n                                           prevEndY) {\n  var ctx = this.canvas_ctx_;\n\n  // Clean up from the previous rect if necessary\n  if (prevDirection == _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"HORIZONTAL\"]) {\n    ctx.clearRect(Math.min(startX, prevEndX), this.layout_.getPlotArea().y,\n                  Math.abs(startX - prevEndX), this.layout_.getPlotArea().h);\n  } else if (prevDirection == _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"VERTICAL\"]) {\n    ctx.clearRect(this.layout_.getPlotArea().x, Math.min(startY, prevEndY),\n                  this.layout_.getPlotArea().w, Math.abs(startY - prevEndY));\n  }\n\n  // Draw a light-grey rectangle to show the new viewing area\n  if (direction == _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"HORIZONTAL\"]) {\n    if (endX && startX) {\n      ctx.fillStyle = \"rgba(128,128,128,0.33)\";\n      ctx.fillRect(Math.min(startX, endX), this.layout_.getPlotArea().y,\n                   Math.abs(endX - startX), this.layout_.getPlotArea().h);\n    }\n  } else if (direction == _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"VERTICAL\"]) {\n    if (endY && startY) {\n      ctx.fillStyle = \"rgba(128,128,128,0.33)\";\n      ctx.fillRect(this.layout_.getPlotArea().x, Math.min(startY, endY),\n                   this.layout_.getPlotArea().w, Math.abs(endY - startY));\n    }\n  }\n};\n\n/**\n * Clear the zoom rectangle (and perform no zoom).\n * @private\n */\nDygraph.prototype.clearZoomRect_ = function() {\n  this.currentZoomRectArgs_ = null;\n  this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_);\n};\n\n/**\n * Zoom to something containing [lowX, highX]. These are pixel coordinates in\n * the canvas. The exact zoom window may be slightly larger if there are no data\n * points near lowX or highX. Don't confuse this function with doZoomXDates,\n * which accepts dates that match the raw data. This function redraws the graph.\n *\n * @param {number} lowX The leftmost pixel value that should be visible.\n * @param {number} highX The rightmost pixel value that should be visible.\n * @private\n */\nDygraph.prototype.doZoomX_ = function(lowX, highX) {\n  this.currentZoomRectArgs_ = null;\n  // Find the earliest and latest dates contained in this canvasx range.\n  // Convert the call to date ranges of the raw data.\n  var minDate = this.toDataXCoord(lowX);\n  var maxDate = this.toDataXCoord(highX);\n  this.doZoomXDates_(minDate, maxDate);\n};\n\n/**\n * Zoom to something containing [minDate, maxDate] values. Don't confuse this\n * method with doZoomX which accepts pixel coordinates. This function redraws\n * the graph.\n *\n * @param {number} minDate The minimum date that should be visible.\n * @param {number} maxDate The maximum date that should be visible.\n * @private\n */\nDygraph.prototype.doZoomXDates_ = function(minDate, maxDate) {\n  // TODO(danvk): when xAxisRange is null (i.e. \"fit to data\", the animation\n  // can produce strange effects. Rather than the x-axis transitioning slowly\n  // between values, it can jerk around.)\n  var old_window = this.xAxisRange();\n  var new_window = [minDate, maxDate];\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n  this.doAnimatedZoom(old_window, new_window, null, null, () => {\n    if (zoomCallback) {\n      zoomCallback.call(this, minDate, maxDate, this.yAxisRanges());\n    }\n  });\n};\n\n/**\n * Zoom to something containing [lowY, highY]. These are pixel coordinates in\n * the canvas. This function redraws the graph.\n *\n * @param {number} lowY The topmost pixel value that should be visible.\n * @param {number} highY The lowest pixel value that should be visible.\n * @private\n */\nDygraph.prototype.doZoomY_ = function(lowY, highY) {\n  this.currentZoomRectArgs_ = null;\n  // Find the highest and lowest values in pixel range for each axis.\n  // Note that lowY (in pixels) corresponds to the max Value (in data coords).\n  // This is because pixels increase as you go down on the screen, whereas data\n  // coordinates increase as you go up the screen.\n  var oldValueRanges = this.yAxisRanges();\n  var newValueRanges = [];\n  for (var i = 0; i < this.axes_.length; i++) {\n    var hi = this.toDataYCoord(lowY, i);\n    var low = this.toDataYCoord(highY, i);\n    newValueRanges.push([low, hi]);\n  }\n\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n  this.doAnimatedZoom(null, null, oldValueRanges, newValueRanges, () => {\n    if (zoomCallback) {\n      const [minX, maxX] = this.xAxisRange();\n      zoomCallback.call(this, minX, maxX, this.yAxisRanges());\n    }\n  });\n};\n\n/**\n * Transition function to use in animations. Returns values between 0.0\n * (totally old values) and 1.0 (totally new values) for each frame.\n * @private\n */\nDygraph.zoomAnimationFunction = function(frame, numFrames) {\n  var k = 1.5;\n  return (1.0 - Math.pow(k, -frame)) / (1.0 - Math.pow(k, -numFrames));\n};\n\n/**\n * Reset the zoom to the original view coordinates. This is the same as\n * double-clicking on the graph.\n */\nDygraph.prototype.resetZoom = function() {\n  const dirtyX = this.isZoomed('x');\n  const dirtyY = this.isZoomed('y');\n  const dirty = dirtyX || dirtyY;\n\n  // Clear any selection, since it's likely to be drawn in the wrong place.\n  this.clearSelection();\n\n  if (!dirty) return;\n\n  // Calculate extremes to avoid lack of padding on reset.\n  const [minDate, maxDate] = this.xAxisExtremes();\n\n  const animatedZooms = this.getBooleanOption('animatedZooms');\n  const zoomCallback = this.getFunctionOption('zoomCallback');\n\n  // TODO(danvk): merge this block w/ the code below.\n  // TODO(danvk): factor out a generic, public zoomTo method.\n  if (!animatedZooms) {\n    this.dateWindow_ = null;\n    this.axes_.forEach(axis => {\n      if (axis.valueRange) delete axis.valueRange;\n    });\n\n    this.drawGraph_();\n    if (zoomCallback) {\n      zoomCallback.call(this, minDate, maxDate, this.yAxisRanges());\n    }\n    return;\n  }\n\n  var oldWindow=null, newWindow=null, oldValueRanges=null, newValueRanges=null;\n  if (dirtyX) {\n    oldWindow = this.xAxisRange();\n    newWindow = [minDate, maxDate];\n  }\n\n  if (dirtyY) {\n    oldValueRanges = this.yAxisRanges();\n    newValueRanges = this.yAxisExtremes();\n  }\n\n  this.doAnimatedZoom(oldWindow, newWindow, oldValueRanges, newValueRanges,\n      () => {\n        this.dateWindow_ = null;\n        this.axes_.forEach(axis => {\n          if (axis.valueRange) delete axis.valueRange;\n        });\n        if (zoomCallback) {\n          zoomCallback.call(this, minDate, maxDate, this.yAxisRanges());\n        }\n      });\n};\n\n/**\n * Combined animation logic for all zoom functions.\n * either the x parameters or y parameters may be null.\n * @private\n */\nDygraph.prototype.doAnimatedZoom = function(oldXRange, newXRange, oldYRanges, newYRanges, callback) {\n  var steps = this.getBooleanOption(\"animatedZooms\") ?\n      Dygraph.ANIMATION_STEPS : 1;\n\n  var windows = [];\n  var valueRanges = [];\n  var step, frac;\n\n  if (oldXRange !== null && newXRange !== null) {\n    for (step = 1; step <= steps; step++) {\n      frac = Dygraph.zoomAnimationFunction(step, steps);\n      windows[step-1] = [oldXRange[0]*(1-frac) + frac*newXRange[0],\n                         oldXRange[1]*(1-frac) + frac*newXRange[1]];\n    }\n  }\n\n  if (oldYRanges !== null && newYRanges !== null) {\n    for (step = 1; step <= steps; step++) {\n      frac = Dygraph.zoomAnimationFunction(step, steps);\n      var thisRange = [];\n      for (var j = 0; j < this.axes_.length; j++) {\n        thisRange.push([oldYRanges[j][0]*(1-frac) + frac*newYRanges[j][0],\n                        oldYRanges[j][1]*(1-frac) + frac*newYRanges[j][1]]);\n      }\n      valueRanges[step-1] = thisRange;\n    }\n  }\n\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"repeatAndCleanup\"](step => {\n    if (valueRanges.length) {\n      for (var i = 0; i < this.axes_.length; i++) {\n        var w = valueRanges[step][i];\n        this.axes_[i].valueRange = [w[0], w[1]];\n      }\n    }\n    if (windows.length) {\n      this.dateWindow_ = windows[step];\n    }\n    this.drawGraph_();\n  }, steps, Dygraph.ANIMATION_DURATION / steps, callback);\n};\n\n/**\n * Get the current graph's area object.\n *\n * Returns: {x, y, w, h}\n */\nDygraph.prototype.getArea = function() {\n  return this.plotter_.area;\n};\n\n/**\n * Convert a mouse event to DOM coordinates relative to the graph origin.\n *\n * Returns a two-element array: [X, Y].\n */\nDygraph.prototype.eventToDomCoords = function(event) {\n  if (event.offsetX && event.offsetY) {\n    return [ event.offsetX, event.offsetY ];\n  } else {\n    var eventElementPos = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"findPos\"](this.mouseEventElement_);\n    var canvasx = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"pageX\"](event) - eventElementPos.x;\n    var canvasy = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"pageY\"](event) - eventElementPos.y;\n    return [canvasx, canvasy];\n  }\n};\n\n/**\n * Given a canvas X coordinate, find the closest row.\n * @param {number} domX graph-relative DOM X coordinate\n * Returns {number} row number.\n * @private\n */\nDygraph.prototype.findClosestRow = function(domX) {\n  var minDistX = Infinity;\n  var closestRow = -1;\n  var sets = this.layout_.points;\n  for (var i = 0; i < sets.length; i++) {\n    var points = sets[i];\n    var len = points.length;\n    for (var j = 0; j < len; j++) {\n      var point = points[j];\n      if (!_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isValidPoint\"](point, true)) continue;\n      var dist = Math.abs(point.canvasx - domX);\n      if (dist < minDistX) {\n        minDistX = dist;\n        closestRow = point.idx;\n      }\n    }\n  }\n\n  return closestRow;\n};\n\n/**\n * Given canvas X,Y coordinates, find the closest point.\n *\n * This finds the individual data point across all visible series\n * that's closest to the supplied DOM coordinates using the standard\n * Euclidean X,Y distance.\n *\n * @param {number} domX graph-relative DOM X coordinate\n * @param {number} domY graph-relative DOM Y coordinate\n * Returns: {row, seriesName, point}\n * @private\n */\nDygraph.prototype.findClosestPoint = function(domX, domY) {\n  var minDist = Infinity;\n  var dist, dx, dy, point, closestPoint, closestSeries, closestRow;\n  for ( var setIdx = this.layout_.points.length - 1 ; setIdx >= 0 ; --setIdx ) {\n    var points = this.layout_.points[setIdx];\n    for (var i = 0; i < points.length; ++i) {\n      point = points[i];\n      if (!_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isValidPoint\"](point)) continue;\n      dx = point.canvasx - domX;\n      dy = point.canvasy - domY;\n      dist = dx * dx + dy * dy;\n      if (dist < minDist) {\n        minDist = dist;\n        closestPoint = point;\n        closestSeries = setIdx;\n        closestRow = point.idx;\n      }\n    }\n  }\n  var name = this.layout_.setNames[closestSeries];\n  return {\n    row: closestRow,\n    seriesName: name,\n    point: closestPoint\n  };\n};\n\n/**\n * Given canvas X,Y coordinates, find the touched area in a stacked graph.\n *\n * This first finds the X data point closest to the supplied DOM X coordinate,\n * then finds the series which puts the Y coordinate on top of its filled area,\n * using linear interpolation between adjacent point pairs.\n *\n * @param {number} domX graph-relative DOM X coordinate\n * @param {number} domY graph-relative DOM Y coordinate\n * Returns: {row, seriesName, point}\n * @private\n */\nDygraph.prototype.findStackedPoint = function(domX, domY) {\n  var row = this.findClosestRow(domX);\n  var closestPoint, closestSeries;\n  for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {\n    var boundary = this.getLeftBoundary_(setIdx);\n    var rowIdx = row - boundary;\n    var points = this.layout_.points[setIdx];\n    if (rowIdx >= points.length) continue;\n    var p1 = points[rowIdx];\n    if (!_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isValidPoint\"](p1)) continue;\n    var py = p1.canvasy;\n    if (domX > p1.canvasx && rowIdx + 1 < points.length) {\n      // interpolate series Y value using next point\n      var p2 = points[rowIdx + 1];\n      if (_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isValidPoint\"](p2)) {\n        var dx = p2.canvasx - p1.canvasx;\n        if (dx > 0) {\n          var r = (domX - p1.canvasx) / dx;\n          py += r * (p2.canvasy - p1.canvasy);\n        }\n      }\n    } else if (domX < p1.canvasx && rowIdx > 0) {\n      // interpolate series Y value using previous point\n      var p0 = points[rowIdx - 1];\n      if (_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isValidPoint\"](p0)) {\n        var dx = p1.canvasx - p0.canvasx;\n        if (dx > 0) {\n          var r = (p1.canvasx - domX) / dx;\n          py += r * (p0.canvasy - p1.canvasy);\n        }\n      }\n    }\n    // Stop if the point (domX, py) is above this series' upper edge\n    if (setIdx === 0 || py < domY) {\n      closestPoint = p1;\n      closestSeries = setIdx;\n    }\n  }\n  var name = this.layout_.setNames[closestSeries];\n  return {\n    row: row,\n    seriesName: name,\n    point: closestPoint\n  };\n};\n\n/**\n * When the mouse moves in the canvas, display information about a nearby data\n * point and draw dots over those points in the data series. This function\n * takes care of cleanup of previously-drawn dots.\n * @param {Object} event The mousemove event from the browser.\n * @private\n */\nDygraph.prototype.mouseMove_ = function(event) {\n  // This prevents JS errors when mousing over the canvas before data loads.\n  var points = this.layout_.points;\n  if (points === undefined || points === null) return;\n\n  var canvasCoords = this.eventToDomCoords(event);\n  var canvasx = canvasCoords[0];\n  var canvasy = canvasCoords[1];\n\n  var highlightSeriesOpts = this.getOption(\"highlightSeriesOpts\");\n  var selectionChanged = false;\n  if (highlightSeriesOpts && !this.isSeriesLocked()) {\n    var closest;\n    if (this.getBooleanOption(\"stackedGraph\")) {\n      closest = this.findStackedPoint(canvasx, canvasy);\n    } else {\n      closest = this.findClosestPoint(canvasx, canvasy);\n    }\n    selectionChanged = this.setSelection(closest.row, closest.seriesName);\n  } else {\n    var idx = this.findClosestRow(canvasx);\n    selectionChanged = this.setSelection(idx);\n  }\n\n  var callback = this.getFunctionOption(\"highlightCallback\");\n  if (callback && selectionChanged) {\n    callback.call(this, event,\n        this.lastx_,\n        this.selPoints_,\n        this.lastRow_,\n        this.highlightSet_);\n  }\n};\n\n/**\n * Fetch left offset from the specified set index or if not passed, the\n * first defined boundaryIds record (see bug #236).\n * @private\n */\nDygraph.prototype.getLeftBoundary_ = function(setIdx) {\n  if (this.boundaryIds_[setIdx]) {\n      return this.boundaryIds_[setIdx][0];\n  } else {\n    for (var i = 0; i < this.boundaryIds_.length; i++) {\n      if (this.boundaryIds_[i] !== undefined) {\n        return this.boundaryIds_[i][0];\n      }\n    }\n    return 0;\n  }\n};\n\nDygraph.prototype.animateSelection_ = function(direction) {\n  var totalSteps = 10;\n  var millis = 30;\n  if (this.fadeLevel === undefined) this.fadeLevel = 0;\n  if (this.animateId === undefined) this.animateId = 0;\n  var start = this.fadeLevel;\n  var steps = direction < 0 ? start : totalSteps - start;\n  if (steps <= 0) {\n    if (this.fadeLevel) {\n      this.updateSelection_(1.0);\n    }\n    return;\n  }\n\n  var thisId = ++this.animateId;\n  var that = this;\n  var cleanupIfClearing = function() {\n    // if we haven't reached fadeLevel 0 in the max frame time,\n    // ensure that the clear happens and just go to 0\n    if (that.fadeLevel !== 0 && direction < 0) {\n      that.fadeLevel = 0;\n      that.clearSelection();\n    }\n  };\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"repeatAndCleanup\"](\n    function(n) {\n      // ignore simultaneous animations\n      if (that.animateId != thisId) return;\n\n      that.fadeLevel += direction;\n      if (that.fadeLevel === 0) {\n        that.clearSelection();\n      } else {\n        that.updateSelection_(that.fadeLevel / totalSteps);\n      }\n    },\n    steps, millis, cleanupIfClearing);\n};\n\n/**\n * Draw dots over the selectied points in the data series. This function\n * takes care of cleanup of previously-drawn dots.\n * @private\n */\nDygraph.prototype.updateSelection_ = function(opt_animFraction) {\n  /*var defaultPrevented = */\n  this.cascadeEvents_('select', {\n    selectedRow: this.lastRow_ === -1 ? undefined : this.lastRow_,\n    selectedX: this.lastx_ === -1 ? undefined : this.lastx_,\n    selectedPoints: this.selPoints_\n  });\n  // TODO(danvk): use defaultPrevented here?\n\n  // Clear the previously drawn vertical, if there is one\n  var i;\n  var ctx = this.canvas_ctx_;\n  if (this.getOption('highlightSeriesOpts')) {\n    ctx.clearRect(0, 0, this.width_, this.height_);\n    var alpha = 1.0 - this.getNumericOption('highlightSeriesBackgroundAlpha');\n    var backgroundColor = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"toRGB_\"](this.getOption('highlightSeriesBackgroundColor'));\n\n    if (alpha) {\n      // Activating background fade includes an animation effect for a gradual\n      // fade. TODO(klausw): make this independently configurable if it causes\n      // issues? Use a shared preference to control animations?\n      var animateBackgroundFade = true;\n      if (animateBackgroundFade) {\n        if (opt_animFraction === undefined) {\n          // start a new animation\n          this.animateSelection_(1);\n          return;\n        }\n        alpha *= opt_animFraction;\n      }\n      ctx.fillStyle = 'rgba(' + backgroundColor.r + ',' + backgroundColor.g + ',' + backgroundColor.b + ',' + alpha + ')';\n      ctx.fillRect(0, 0, this.width_, this.height_);\n    }\n\n    // Redraw only the highlighted series in the interactive canvas (not the\n    // static plot canvas, which is where series are usually drawn).\n    this.plotter_._renderLineChart(this.highlightSet_, ctx);\n  } else if (this.previousVerticalX_ >= 0) {\n    // Determine the maximum highlight circle size.\n    var maxCircleSize = 0;\n    var labels = this.attr_('labels');\n    for (i = 1; i < labels.length; i++) {\n      var r = this.getNumericOption('highlightCircleSize', labels[i]);\n      if (r > maxCircleSize) maxCircleSize = r;\n    }\n    var px = this.previousVerticalX_;\n    ctx.clearRect(px - maxCircleSize - 1, 0,\n                  2 * maxCircleSize + 2, this.height_);\n  }\n\n  if (this.selPoints_.length > 0) {\n    // Draw colored circles over the center of each selected point\n    var canvasx = this.selPoints_[0].canvasx;\n    ctx.save();\n    for (i = 0; i < this.selPoints_.length; i++) {\n      var pt = this.selPoints_[i];\n      if (isNaN(pt.canvasy)) continue;\n\n      var circleSize = this.getNumericOption('highlightCircleSize', pt.name);\n      var callback = this.getFunctionOption(\"drawHighlightPointCallback\", pt.name);\n      var color = this.plotter_.colors[pt.name];\n      if (!callback) {\n        callback = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"Circles\"].DEFAULT;\n      }\n      ctx.lineWidth = this.getNumericOption('strokeWidth', pt.name);\n      ctx.strokeStyle = color;\n      ctx.fillStyle = color;\n      callback.call(this, this, pt.name, ctx, canvasx, pt.canvasy,\n          color, circleSize, pt.idx);\n    }\n    ctx.restore();\n\n    this.previousVerticalX_ = canvasx;\n  }\n};\n\n/**\n * Manually set the selected points and display information about them in the\n * legend. The selection can be cleared using clearSelection() and queried\n * using getSelection().\n *\n * To set a selected series but not a selected point, call setSelection with\n * row=false and the selected series name.\n *\n * @param {number} row Row number that should be highlighted (i.e. appear with\n * hover dots on the chart).\n * @param {seriesName} optional series name to highlight that series with the\n * the highlightSeriesOpts setting.\n * @param { locked } optional If true, keep seriesName selected when mousing\n * over the graph, disabling closest-series highlighting. Call clearSelection()\n * to unlock it.\n */\nDygraph.prototype.setSelection = function(row, opt_seriesName, opt_locked) {\n  // Extract the points we've selected\n  this.selPoints_ = [];\n\n  var changed = false;\n  if (row !== false && row >= 0) {\n    if (row != this.lastRow_) changed = true;\n    this.lastRow_ = row;\n    for (var setIdx = 0; setIdx < this.layout_.points.length; ++setIdx) {\n      var points = this.layout_.points[setIdx];\n      // Check if the point at the appropriate index is the point we're looking\n      // for.  If it is, just use it, otherwise search the array for a point\n      // in the proper place.\n      var setRow = row - this.getLeftBoundary_(setIdx);\n      if (setRow >= 0 && setRow < points.length && points[setRow].idx == row) {\n        var point = points[setRow];\n        if (point.yval !== null) this.selPoints_.push(point);\n      } else {\n        for (var pointIdx = 0; pointIdx < points.length; ++pointIdx) {\n          var point = points[pointIdx];\n          if (point.idx == row) {\n            if (point.yval !== null) {\n              this.selPoints_.push(point);\n            }\n            break;\n          }\n        }\n      }\n    }\n  } else {\n    if (this.lastRow_ >= 0) changed = true;\n    this.lastRow_ = -1;\n  }\n\n  if (this.selPoints_.length) {\n    this.lastx_ = this.selPoints_[0].xval;\n  } else {\n    this.lastx_ = -1;\n  }\n\n  if (opt_seriesName !== undefined) {\n    if (this.highlightSet_ !== opt_seriesName) changed = true;\n    this.highlightSet_ = opt_seriesName;\n  }\n\n  if (opt_locked !== undefined) {\n    this.lockedSet_ = opt_locked;\n  }\n\n  if (changed) {\n    this.updateSelection_(undefined);\n  }\n  return changed;\n};\n\n/**\n * The mouse has left the canvas. Clear out whatever artifacts remain\n * @param {Object} event the mouseout event from the browser.\n * @private\n */\nDygraph.prototype.mouseOut_ = function(event) {\n  if (this.getFunctionOption(\"unhighlightCallback\")) {\n    this.getFunctionOption(\"unhighlightCallback\").call(this, event);\n  }\n\n  if (this.getBooleanOption(\"hideOverlayOnMouseOut\") && !this.lockedSet_) {\n    this.clearSelection();\n  }\n};\n\n/**\n * Clears the current selection (i.e. points that were highlighted by moving\n * the mouse over the chart).\n */\nDygraph.prototype.clearSelection = function() {\n  this.cascadeEvents_('deselect', {});\n\n  this.lockedSet_ = false;\n  // Get rid of the overlay data\n  if (this.fadeLevel) {\n    this.animateSelection_(-1);\n    return;\n  }\n  this.canvas_ctx_.clearRect(0, 0, this.width_, this.height_);\n  this.fadeLevel = 0;\n  this.selPoints_ = [];\n  this.lastx_ = -1;\n  this.lastRow_ = -1;\n  this.highlightSet_ = null;\n};\n\n/**\n * Returns the number of the currently selected row. To get data for this row,\n * you can use the getValue method.\n * @return {number} row number, or -1 if nothing is selected\n */\nDygraph.prototype.getSelection = function() {\n  if (!this.selPoints_ || this.selPoints_.length < 1) {\n    return -1;\n  }\n\n  for (var setIdx = 0; setIdx < this.layout_.points.length; setIdx++) {\n    var points = this.layout_.points[setIdx];\n    for (var row = 0; row < points.length; row++) {\n      if (points[row].x == this.selPoints_[0].x) {\n        return points[row].idx;\n      }\n    }\n  }\n  return -1;\n};\n\n/**\n * Returns the name of the currently-highlighted series.\n * Only available when the highlightSeriesOpts option is in use.\n */\nDygraph.prototype.getHighlightSeries = function() {\n  return this.highlightSet_;\n};\n\n/**\n * Returns true if the currently-highlighted series was locked\n * via setSelection(..., seriesName, true).\n */\nDygraph.prototype.isSeriesLocked = function() {\n  return this.lockedSet_;\n};\n\n/**\n * Fires when there's data available to be graphed.\n * @param {string} data Raw CSV data to be plotted\n * @private\n */\nDygraph.prototype.loadedEvent_ = function(data) {\n  this.rawData_ = this.parseCSV_(data);\n  this.cascadeDataDidUpdateEvent_();\n  this.predraw_();\n};\n\n/**\n * Add ticks on the x-axis representing years, months, quarters, weeks, or days\n * @private\n */\nDygraph.prototype.addXTicks_ = function() {\n  // Determine the correct ticks scale on the x-axis: quarterly, monthly, ...\n  var range;\n  if (this.dateWindow_) {\n    range = [this.dateWindow_[0], this.dateWindow_[1]];\n  } else {\n    range = this.xAxisExtremes();\n  }\n\n  var xAxisOptionsView = this.optionsViewForAxis_('x');\n  var xTicks = xAxisOptionsView('ticker')(\n      range[0],\n      range[1],\n      this.plotter_.area.w,  // TODO(danvk): should be area.width\n      xAxisOptionsView,\n      this);\n  // var msg = 'ticker(' + range[0] + ', ' + range[1] + ', ' + this.width_ + ', ' + this.attr_('pixelsPerXLabel') + ') -> ' + JSON.stringify(xTicks);\n  // console.log(msg);\n  this.layout_.setXTicks(xTicks);\n};\n\n/**\n * Returns the correct handler class for the currently set options.\n * @private\n */\nDygraph.prototype.getHandlerClass_ = function() {\n  var handlerClass;\n  if (this.attr_('dataHandler')) {\n    handlerClass =  this.attr_('dataHandler');\n  } else if (this.fractions_) {\n    if (this.getBooleanOption('errorBars')) {\n      handlerClass = _datahandler_bars_fractions__WEBPACK_IMPORTED_MODULE_13__[\"default\"];\n    } else {\n      handlerClass = _datahandler_default_fractions__WEBPACK_IMPORTED_MODULE_12__[\"default\"];\n    }\n  } else if (this.getBooleanOption('customBars')) {\n    handlerClass = _datahandler_bars_custom__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\n  } else if (this.getBooleanOption('errorBars')) {\n    handlerClass = _datahandler_bars_error__WEBPACK_IMPORTED_MODULE_10__[\"default\"];\n  } else {\n    handlerClass = _datahandler_default__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\n  }\n  return handlerClass;\n};\n\n/**\n * @private\n * This function is called once when the chart's data is changed or the options\n * dictionary is updated. It is _not_ called when the user pans or zooms. The\n * idea is that values derived from the chart's data can be computed here,\n * rather than every time the chart is drawn. This includes things like the\n * number of axes, rolling averages, etc.\n */\nDygraph.prototype.predraw_ = function() {\n  var start = new Date();\n\n  // Create the correct dataHandler\n  this.dataHandler_ = new (this.getHandlerClass_())();\n\n  this.layout_.computePlotArea();\n\n  // TODO(danvk): move more computations out of drawGraph_ and into here.\n  this.computeYAxes_();\n\n  if (!this.is_initial_draw_) {\n    this.canvas_ctx_.restore();\n    this.hidden_ctx_.restore();\n  }\n\n  this.canvas_ctx_.save();\n  this.hidden_ctx_.save();\n\n  // Create a new plotter.\n  this.plotter_ = new _dygraph_canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this,\n                                            this.hidden_,\n                                            this.hidden_ctx_,\n                                            this.layout_);\n\n  // The roller sits in the bottom left corner of the chart. We don't know where\n  // this will be until the options are available, so it's positioned here.\n  this.createRollInterface_();\n\n  this.cascadeEvents_('predraw');\n\n  // Convert the raw data (a 2D array) into the internal format and compute\n  // rolling averages.\n  this.rolledSeries_ = [null];  // x-axis is the first series and it's special\n  for (var i = 1; i < this.numColumns(); i++) {\n    // var logScale = this.attr_('logscale', i); // TODO(klausw): this looks wrong // konigsberg thinks so too.\n    var series = this.dataHandler_.extractSeries(this.rawData_, i, this.attributes_);\n    if (this.rollPeriod_ > 1) {\n      series = this.dataHandler_.rollingAverage(series, this.rollPeriod_, this.attributes_);\n    }\n\n    this.rolledSeries_.push(series);\n  }\n\n  // If the data or options have changed, then we'd better redraw.\n  this.drawGraph_();\n\n  // This is used to determine whether to do various animations.\n  var end = new Date();\n  this.drawingTimeMs_ = (end - start);\n};\n\n/**\n * Point structure.\n *\n * xval_* and yval_* are the original unscaled data values,\n * while x_* and y_* are scaled to the range (0.0-1.0) for plotting.\n * yval_stacked is the cumulative Y value used for stacking graphs,\n * and bottom/top/minus/plus are used for error bar graphs.\n *\n * @typedef {{\n *     idx: number,\n *     name: string,\n *     x: ?number,\n *     xval: ?number,\n *     y_bottom: ?number,\n *     y: ?number,\n *     y_stacked: ?number,\n *     y_top: ?number,\n *     yval_minus: ?number,\n *     yval: ?number,\n *     yval_plus: ?number,\n *     yval_stacked\n * }}\n */\nDygraph.PointType = undefined;\n\n/**\n * Calculates point stacking for stackedGraph=true.\n *\n * For stacking purposes, interpolate or extend neighboring data across\n * NaN values based on stackedGraphNaNFill settings. This is for display\n * only, the underlying data value as shown in the legend remains NaN.\n *\n * @param {Array.<Dygraph.PointType>} points Point array for a single series.\n *     Updates each Point's yval_stacked property.\n * @param {Array.<number>} cumulativeYval Accumulated top-of-graph stacked Y\n *     values for the series seen so far. Index is the row number. Updated\n *     based on the current series's values.\n * @param {Array.<number>} seriesExtremes Min and max values, updated\n *     to reflect the stacked values.\n * @param {string} fillMethod Interpolation method, one of 'all', 'inside', or\n *     'none'.\n * @private\n */\nDygraph.stackPoints_ = function(\n    points, cumulativeYval, seriesExtremes, fillMethod) {\n  var lastXval = null;\n  var prevPoint = null;\n  var nextPoint = null;\n  var nextPointIdx = -1;\n\n  // Find the next stackable point starting from the given index.\n  var updateNextPoint = function(idx) {\n    // If we've previously found a non-NaN point and haven't gone past it yet,\n    // just use that.\n    if (nextPointIdx >= idx) return;\n\n    // We haven't found a non-NaN point yet or have moved past it,\n    // look towards the right to find a non-NaN point.\n    for (var j = idx; j < points.length; ++j) {\n      // Clear out a previously-found point (if any) since it's no longer\n      // valid, we shouldn't use it for interpolation anymore.\n      nextPoint = null;\n      if (!isNaN(points[j].yval) && points[j].yval !== null) {\n        nextPointIdx = j;\n        nextPoint = points[j];\n        break;\n      }\n    }\n  };\n\n  for (var i = 0; i < points.length; ++i) {\n    var point = points[i];\n    var xval = point.xval;\n    if (cumulativeYval[xval] === undefined) {\n      cumulativeYval[xval] = 0;\n    }\n\n    var actualYval = point.yval;\n    if (isNaN(actualYval) || actualYval === null) {\n      if(fillMethod == 'none') {\n        actualYval = 0;\n      } else {\n        // Interpolate/extend for stacking purposes if possible.\n        updateNextPoint(i);\n        if (prevPoint && nextPoint && fillMethod != 'none') {\n          // Use linear interpolation between prevPoint and nextPoint.\n          actualYval = prevPoint.yval + (nextPoint.yval - prevPoint.yval) *\n              ((xval - prevPoint.xval) / (nextPoint.xval - prevPoint.xval));\n        } else if (prevPoint && fillMethod == 'all') {\n          actualYval = prevPoint.yval;\n        } else if (nextPoint && fillMethod == 'all') {\n          actualYval = nextPoint.yval;\n        } else {\n          actualYval = 0;\n        }\n      }\n    } else {\n      prevPoint = point;\n    }\n\n    var stackedYval = cumulativeYval[xval];\n    if (lastXval != xval) {\n      // If an x-value is repeated, we ignore the duplicates.\n      stackedYval += actualYval;\n      cumulativeYval[xval] = stackedYval;\n    }\n    lastXval = xval;\n\n    point.yval_stacked = stackedYval;\n\n    if (stackedYval > seriesExtremes[1]) {\n      seriesExtremes[1] = stackedYval;\n    }\n    if (stackedYval < seriesExtremes[0]) {\n      seriesExtremes[0] = stackedYval;\n    }\n  }\n};\n\n\n/**\n * Loop over all fields and create datasets, calculating extreme y-values for\n * each series and extreme x-indices as we go.\n *\n * dateWindow is passed in as an explicit parameter so that we can compute\n * extreme values \"speculatively\", i.e. without actually setting state on the\n * dygraph.\n *\n * @param {Array.<Array.<Array.<(number|Array<number>)>>} rolledSeries, where\n *     rolledSeries[seriesIndex][row] = raw point, where\n *     seriesIndex is the column number starting with 1, and\n *     rawPoint is [x,y] or [x, [y, err]] or [x, [y, yminus, yplus]].\n * @param {?Array.<number>} dateWindow [xmin, xmax] pair, or null.\n * @return {{\n *     points: Array.<Array.<Dygraph.PointType>>,\n *     seriesExtremes: Array.<Array.<number>>,\n *     boundaryIds: Array.<number>}}\n * @private\n */\nDygraph.prototype.gatherDatasets_ = function(rolledSeries, dateWindow) {\n  var boundaryIds = [];\n  var points = [];\n  var cumulativeYval = [];  // For stacked series.\n  var extremes = {};  // series name -> [low, high]\n  var seriesIdx, sampleIdx;\n  var firstIdx, lastIdx;\n  var axisIdx;\n\n  // Loop over the fields (series).  Go from the last to the first,\n  // because if they're stacked that's how we accumulate the values.\n  var num_series = rolledSeries.length - 1;\n  var series;\n  for (seriesIdx = num_series; seriesIdx >= 1; seriesIdx--) {\n    if (!this.visibility()[seriesIdx - 1]) continue;\n\n    // Prune down to the desired range, if necessary (for zooming)\n    // Because there can be lines going to points outside of the visible area,\n    // we actually prune to visible points, plus one on either side.\n    if (dateWindow) {\n      series = rolledSeries[seriesIdx];\n      var low = dateWindow[0];\n      var high = dateWindow[1];\n\n      // TODO(danvk): do binary search instead of linear search.\n      // TODO(danvk): pass firstIdx and lastIdx directly to the renderer.\n      firstIdx = null;\n      lastIdx = null;\n      for (sampleIdx = 0; sampleIdx < series.length; sampleIdx++) {\n        if (series[sampleIdx][0] >= low && firstIdx === null) {\n          firstIdx = sampleIdx;\n        }\n        if (series[sampleIdx][0] <= high) {\n          lastIdx = sampleIdx;\n        }\n      }\n\n      if (firstIdx === null) firstIdx = 0;\n      var correctedFirstIdx = firstIdx;\n      var isInvalidValue = true;\n      while (isInvalidValue && correctedFirstIdx > 0) {\n        correctedFirstIdx--;\n        // check if the y value is null.\n        isInvalidValue = series[correctedFirstIdx][1] === null;\n      }\n\n      if (lastIdx === null) lastIdx = series.length - 1;\n      var correctedLastIdx = lastIdx;\n      isInvalidValue = true;\n      while (isInvalidValue && correctedLastIdx < series.length - 1) {\n        correctedLastIdx++;\n        isInvalidValue = series[correctedLastIdx][1] === null;\n      }\n\n      if (correctedFirstIdx!==firstIdx) {\n        firstIdx = correctedFirstIdx;\n      }\n      if (correctedLastIdx !== lastIdx) {\n        lastIdx = correctedLastIdx;\n      }\n\n      boundaryIds[seriesIdx-1] = [firstIdx, lastIdx];\n\n      // .slice's end is exclusive, we want to include lastIdx.\n      series = series.slice(firstIdx, lastIdx + 1);\n    } else {\n      series = rolledSeries[seriesIdx];\n      boundaryIds[seriesIdx-1] = [0, series.length-1];\n    }\n\n    var seriesName = this.attr_(\"labels\")[seriesIdx];\n    var seriesExtremes = this.dataHandler_.getExtremeYValues(series,\n        dateWindow, this.getBooleanOption(\"stepPlot\",seriesName));\n\n    var seriesPoints = this.dataHandler_.seriesToPoints(series,\n        seriesName, boundaryIds[seriesIdx-1][0]);\n\n    if (this.getBooleanOption(\"stackedGraph\")) {\n      axisIdx = this.attributes_.axisForSeries(seriesName);\n      if (cumulativeYval[axisIdx] === undefined) {\n        cumulativeYval[axisIdx] = [];\n      }\n      Dygraph.stackPoints_(seriesPoints, cumulativeYval[axisIdx], seriesExtremes,\n                           this.getBooleanOption(\"stackedGraphNaNFill\"));\n    }\n\n    extremes[seriesName] = seriesExtremes;\n    points[seriesIdx] = seriesPoints;\n  }\n\n  return { points: points, extremes: extremes, boundaryIds: boundaryIds };\n};\n\n/**\n * Update the graph with new data. This method is called when the viewing area\n * has changed. If the underlying data or options have changed, predraw_ will\n * be called before drawGraph_ is called.\n *\n * @private\n */\nDygraph.prototype.drawGraph_ = function() {\n  var start = new Date();\n\n  // This is used to set the second parameter to drawCallback, below.\n  var is_initial_draw = this.is_initial_draw_;\n  this.is_initial_draw_ = false;\n\n  this.layout_.removeAllDatasets();\n  this.setColors_();\n  this.attrs_.pointSize = 0.5 * this.getNumericOption('highlightCircleSize');\n\n  var packed = this.gatherDatasets_(this.rolledSeries_, this.dateWindow_);\n  var points = packed.points;\n  var extremes = packed.extremes;\n  this.boundaryIds_ = packed.boundaryIds;\n\n  this.setIndexByName_ = {};\n  var labels = this.attr_(\"labels\");\n  var dataIdx = 0;\n  for (var i = 1; i < points.length; i++) {\n    if (!this.visibility()[i - 1]) continue;\n    this.layout_.addDataset(labels[i], points[i]);\n    this.datasetIndex_[i] = dataIdx++;\n  }\n  for (var i = 0; i < labels.length; i++) {\n    this.setIndexByName_[labels[i]] = i;\n  }\n\n  this.computeYAxisRanges_(extremes);\n  this.layout_.setYAxes(this.axes_);\n\n  this.addXTicks_();\n\n  // Tell PlotKit to use this new data and render itself\n  this.layout_.evaluate();\n  this.renderGraph_(is_initial_draw);\n\n  if (this.getStringOption(\"timingName\")) {\n    var end = new Date();\n    console.log(this.getStringOption(\"timingName\") + \" - drawGraph: \" + (end - start) + \"ms\");\n  }\n};\n\n/**\n * This does the work of drawing the chart. It assumes that the layout and axis\n * scales have already been set (e.g. by predraw_).\n *\n * @private\n */\nDygraph.prototype.renderGraph_ = function(is_initial_draw) {\n  this.cascadeEvents_('clearChart');\n  this.plotter_.clear();\n\n  const underlayCallback = this.getFunctionOption('underlayCallback');\n  if (underlayCallback) {\n    // NOTE: we pass the dygraph object to this callback twice to avoid breaking\n    // users who expect a deprecated form of this callback.\n    underlayCallback.call(this,\n        this.hidden_ctx_, this.layout_.getPlotArea(), this, this);\n  }\n\n  var e = {\n    canvas: this.hidden_,\n    drawingContext: this.hidden_ctx_\n  };\n  this.cascadeEvents_('willDrawChart', e);\n  this.plotter_.render();\n  this.cascadeEvents_('didDrawChart', e);\n  this.lastRow_ = -1;  // because plugins/legend.js clears the legend\n\n  // TODO(danvk): is this a performance bottleneck when panning?\n  // The interaction canvas should already be empty in that situation.\n  this.canvas_.getContext('2d').clearRect(0, 0, this.width_, this.height_);\n\n  const drawCallback = this.getFunctionOption(\"drawCallback\");\n  if (drawCallback !== null) {\n    drawCallback.call(this, this, is_initial_draw);\n  }\n  if (is_initial_draw) {\n    this.readyFired_ = true;\n    while (this.readyFns_.length > 0) {\n      var fn = this.readyFns_.pop();\n      fn(this);\n    }\n  }\n};\n\n/**\n * @private\n * Determine properties of the y-axes which are independent of the data\n * currently being displayed. This includes things like the number of axes and\n * the style of the axes. It does not include the range of each axis and its\n * tick marks.\n * This fills in this.axes_.\n * axes_ = [ { options } ]\n *   indices are into the axes_ array.\n */\nDygraph.prototype.computeYAxes_ = function() {\n  var axis, index, opts, v;\n\n  // this.axes_ doesn't match this.attributes_.axes_.options. It's used for\n  // data computation as well as options storage.\n  // Go through once and add all the axes.\n  this.axes_ = [];\n\n  for (axis = 0; axis < this.attributes_.numAxes(); axis++) {\n    // Add a new axis, making a copy of its per-axis options.\n    opts = { g : this };\n    _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"update\"](opts, this.attributes_.axisOptions(axis));\n    this.axes_[axis] = opts;\n  }\n\n  for (axis = 0; axis < this.axes_.length; axis++) {\n    if (axis === 0) {\n      opts = this.optionsViewForAxis_('y' + (axis ? '2' : ''));\n      v = opts(\"valueRange\");\n      if (v) this.axes_[axis].valueRange = v;\n    } else {  // To keep old behavior\n      var axes = this.user_attrs_.axes;\n      if (axes && axes.y2) {\n        v = axes.y2.valueRange;\n        if (v) this.axes_[axis].valueRange = v;\n      }\n    }\n  }\n};\n\n/**\n * Returns the number of y-axes on the chart.\n * @return {number} the number of axes.\n */\nDygraph.prototype.numAxes = function() {\n  return this.attributes_.numAxes();\n};\n\n/**\n * @private\n * Returns axis properties for the given series.\n * @param {string} setName The name of the series for which to get axis\n * properties, e.g. 'Y1'.\n * @return {Object} The axis properties.\n */\nDygraph.prototype.axisPropertiesForSeries = function(series) {\n  // TODO(danvk): handle errors.\n  return this.axes_[this.attributes_.axisForSeries(series)];\n};\n\n/**\n * @private\n * Determine the value range and tick marks for each axis.\n * @param {Object} extremes A mapping from seriesName -> [low, high]\n * This fills in the valueRange and ticks fields in each entry of this.axes_.\n */\nDygraph.prototype.computeYAxisRanges_ = function(extremes) {\n  var isNullUndefinedOrNaN = function(num) {\n    return isNaN(parseFloat(num));\n  };\n  var numAxes = this.attributes_.numAxes();\n  var ypadCompat, span, series, ypad;\n\n  var p_axis;\n\n  // Compute extreme values, a span and tick marks for each axis.\n  for (var i = 0; i < numAxes; i++) {\n    var axis = this.axes_[i];\n    var logscale = this.attributes_.getForAxis(\"logscale\", i);\n    var includeZero = this.attributes_.getForAxis(\"includeZero\", i);\n    var independentTicks = this.attributes_.getForAxis(\"independentTicks\", i);\n    series = this.attributes_.seriesForAxis(i);\n\n    // Add some padding. This supports two Y padding operation modes:\n    //\n    // - backwards compatible (yRangePad not set):\n    //   10% padding for automatic Y ranges, but not for user-supplied\n    //   ranges, and move a close-to-zero edge to zero, since drawing at the edge\n    //   results in invisible lines. Unfortunately lines drawn at the edge of a\n    //   user-supplied range will still be invisible. If logscale is\n    //   set, add a variable amount of padding at the top but\n    //   none at the bottom.\n    //\n    // - new-style (yRangePad set by the user):\n    //   always add the specified Y padding.\n    //\n    ypadCompat = true;\n    ypad = 0.1; // add 10%\n    const yRangePad = this.getNumericOption('yRangePad');\n    if (yRangePad !== null) {\n      ypadCompat = false;\n      // Convert pixel padding to ratio\n      ypad = yRangePad / this.plotter_.area.h;\n    }\n\n    if (series.length === 0) {\n      // If no series are defined or visible then use a reasonable default\n      axis.extremeRange = [0, 1];\n    } else {\n      // Calculate the extremes of extremes.\n      var minY = Infinity;  // extremes[series[0]][0];\n      var maxY = -Infinity;  // extremes[series[0]][1];\n      var extremeMinY, extremeMaxY;\n\n      for (var j = 0; j < series.length; j++) {\n        // this skips invisible series\n        if (!extremes.hasOwnProperty(series[j])) continue;\n\n        // Only use valid extremes to stop null data series' from corrupting the scale.\n        extremeMinY = extremes[series[j]][0];\n        if (extremeMinY !== null) {\n          minY = Math.min(extremeMinY, minY);\n        }\n        extremeMaxY = extremes[series[j]][1];\n        if (extremeMaxY !== null) {\n          maxY = Math.max(extremeMaxY, maxY);\n        }\n      }\n\n      // Include zero if requested by the user.\n      if (includeZero && !logscale) {\n        if (minY > 0) minY = 0;\n        if (maxY < 0) maxY = 0;\n      }\n\n      // Ensure we have a valid scale, otherwise default to [0, 1] for safety.\n      if (minY == Infinity) minY = 0;\n      if (maxY == -Infinity) maxY = 1;\n\n      span = maxY - minY;\n      // special case: if we have no sense of scale, center on the sole value.\n      if (span === 0) {\n        if (maxY !== 0) {\n          span = Math.abs(maxY);\n        } else {\n          // ... and if the sole value is zero, use range 0-1.\n          maxY = 1;\n          span = 1;\n        }\n      }\n\n      var maxAxisY = maxY, minAxisY = minY;\n      if (ypadCompat) {\n        if (logscale) {\n          maxAxisY = maxY + ypad * span;\n          minAxisY = minY;\n        } else {\n          maxAxisY = maxY + ypad * span;\n          minAxisY = minY - ypad * span;\n\n          // Backwards-compatible behavior: Move the span to start or end at zero if it's\n          // close to zero.\n          if (minAxisY < 0 && minY >= 0) minAxisY = 0;\n          if (maxAxisY > 0 && maxY <= 0) maxAxisY = 0;\n        }\n      }\n      axis.extremeRange = [minAxisY, maxAxisY];\n    }\n    if (axis.valueRange) {\n      // This is a user-set value range for this axis.\n      var y0 = isNullUndefinedOrNaN(axis.valueRange[0]) ? axis.extremeRange[0] : axis.valueRange[0];\n      var y1 = isNullUndefinedOrNaN(axis.valueRange[1]) ? axis.extremeRange[1] : axis.valueRange[1];\n      axis.computedValueRange = [y0, y1];\n    } else {\n      axis.computedValueRange = axis.extremeRange;\n    }\n    if (!ypadCompat) {\n      // When using yRangePad, adjust the upper/lower bounds to add\n      // padding unless the user has zoomed/panned the Y axis range.\n      if (logscale) {\n        y0 = axis.computedValueRange[0];\n        y1 = axis.computedValueRange[1];\n        var y0pct = ypad / (2 * ypad - 1);\n        var y1pct = (ypad - 1) / (2 * ypad - 1);\n        axis.computedValueRange[0] = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"logRangeFraction\"](y0, y1, y0pct);\n        axis.computedValueRange[1] = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"logRangeFraction\"](y0, y1, y1pct);\n      } else {\n        y0 = axis.computedValueRange[0];\n        y1 = axis.computedValueRange[1];\n        span = y1 - y0;\n        axis.computedValueRange[0] = y0 - span * ypad;\n        axis.computedValueRange[1] = y1 + span * ypad;\n      }\n    }\n\n\n    if (independentTicks) {\n      axis.independentTicks = independentTicks;\n      var opts = this.optionsViewForAxis_('y' + (i ? '2' : ''));\n      var ticker = opts('ticker');\n      axis.ticks = ticker(axis.computedValueRange[0],\n              axis.computedValueRange[1],\n              this.plotter_.area.h,\n              opts,\n              this);\n      // Define the first independent axis as primary axis.\n      if (!p_axis) p_axis = axis;\n    }\n  }\n  if (p_axis === undefined) {\n    throw (\"Configuration Error: At least one axis has to have the \\\"independentTicks\\\" option activated.\");\n  }\n  // Add ticks. By default, all axes inherit the tick positions of the\n  // primary axis. However, if an axis is specifically marked as having\n  // independent ticks, then that is permissible as well.\n  for (var i = 0; i < numAxes; i++) {\n    var axis = this.axes_[i];\n\n    if (!axis.independentTicks) {\n      var opts = this.optionsViewForAxis_('y' + (i ? '2' : ''));\n      var ticker = opts('ticker');\n      var p_ticks = p_axis.ticks;\n      var p_scale = p_axis.computedValueRange[1] - p_axis.computedValueRange[0];\n      var scale = axis.computedValueRange[1] - axis.computedValueRange[0];\n      var tick_values = [];\n      for (var k = 0; k < p_ticks.length; k++) {\n        var y_frac = (p_ticks[k].v - p_axis.computedValueRange[0]) / p_scale;\n        var y_val = axis.computedValueRange[0] + y_frac * scale;\n        tick_values.push(y_val);\n      }\n\n      axis.ticks = ticker(axis.computedValueRange[0],\n                          axis.computedValueRange[1],\n                          this.plotter_.area.h,\n                          opts,\n                          this,\n                          tick_values);\n    }\n  }\n};\n\n/**\n * Detects the type of the str (date or numeric) and sets the various\n * formatting attributes in this.attrs_ based on this type.\n * @param {string} str An x value.\n * @private\n */\nDygraph.prototype.detectTypeFromString_ = function(str) {\n  var isDate = false;\n  var dashPos = str.indexOf('-');  // could be 2006-01-01 _or_ 1.0e-2\n  if ((dashPos > 0 && (str[dashPos-1] != 'e' && str[dashPos-1] != 'E')) ||\n      str.indexOf('/') >= 0 ||\n      isNaN(parseFloat(str))) {\n    isDate = true;\n  } else if (str.length == 8 && str > '19700101' && str < '20371231') {\n    // TODO(danvk): remove support for this format.\n    isDate = true;\n  }\n\n  this.setXAxisOptions_(isDate);\n};\n\nDygraph.prototype.setXAxisOptions_ = function(isDate) {\n  if (isDate) {\n    this.attrs_.xValueParser = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateParser\"];\n    this.attrs_.axes.x.valueFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateValueFormatter\"];\n    this.attrs_.axes.x.ticker = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"dateTicker\"];\n    this.attrs_.axes.x.axisLabelFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateAxisLabelFormatter\"];\n  } else {\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.xValueParser = function(x) { return parseFloat(x); };\n    // TODO(danvk): use Dygraph.numberValueFormatter here?\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.axes.x.valueFormatter = function(x) { return x; };\n    this.attrs_.axes.x.ticker = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"numericTicks\"];\n    this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter;\n  }\n};\n\n/**\n * @private\n * Parses a string in a special csv format.  We expect a csv file where each\n * line is a date point, and the first field in each line is the date string.\n * We also expect that all remaining fields represent series.\n * if the errorBars attribute is set, then interpret the fields as:\n * date, series1, stddev1, series2, stddev2, ...\n * @param {[Object]} data See above.\n *\n * @return [Object] An array with one entry for each row. These entries\n * are an array of cells in that row. The first entry is the parsed x-value for\n * the row. The second, third, etc. are the y-values. These can take on one of\n * three forms, depending on the CSV and constructor parameters:\n * 1. numeric value\n * 2. [ value, stddev ]\n * 3. [ low value, center value, high value ]\n */\nDygraph.prototype.parseCSV_ = function(data) {\n  var ret = [];\n  var line_delimiter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"detectLineDelimiter\"](data);\n  var lines = data.split(line_delimiter || \"\\n\");\n  var vals, j;\n\n  // Use the default delimiter or fall back to a tab if that makes sense.\n  var delim = this.getStringOption('delimiter');\n  if (lines[0].indexOf(delim) == -1 && lines[0].indexOf('\\t') >= 0) {\n    delim = '\\t';\n  }\n\n  var start = 0;\n  if (!('labels' in this.user_attrs_)) {\n    // User hasn't explicitly set labels, so they're (presumably) in the CSV.\n    start = 1;\n    this.attrs_.labels = lines[0].split(delim);  // NOTE: _not_ user_attrs_.\n    this.attributes_.reparseSeries();\n  }\n  var line_no = 0;\n\n  var xParser;\n  var defaultParserSet = false;  // attempt to auto-detect x value type\n  var expectedCols = this.attr_(\"labels\").length;\n  var outOfOrder = false;\n  for (var i = start; i < lines.length; i++) {\n    var line = lines[i];\n    line_no = i;\n    if (line.length === 0) continue;  // skip blank lines\n    if (line[0] == '#') continue;    // skip comment lines\n    var inFields = line.split(delim);\n    if (inFields.length < 2) continue;\n\n    var fields = [];\n    if (!defaultParserSet) {\n      this.detectTypeFromString_(inFields[0]);\n      xParser = this.getFunctionOption(\"xValueParser\");\n      defaultParserSet = true;\n    }\n    fields[0] = xParser(inFields[0], this);\n\n    // If fractions are expected, parse the numbers as \"A/B\"\n    if (this.fractions_) {\n      for (j = 1; j < inFields.length; j++) {\n        // TODO(danvk): figure out an appropriate way to flag parse errors.\n        vals = inFields[j].split(\"/\");\n        if (vals.length != 2) {\n          console.error('Expected fractional \"num/den\" values in CSV data ' +\n                        \"but found a value '\" + inFields[j] + \"' on line \" +\n                        (1 + i) + \" ('\" + line + \"') which is not of this form.\");\n          fields[j] = [0, 0];\n        } else {\n          fields[j] = [_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](vals[0], i, line),\n                       _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](vals[1], i, line)];\n        }\n      }\n    } else if (this.getBooleanOption(\"errorBars\")) {\n      // If there are error bars, values are (value, stddev) pairs\n      if (inFields.length % 2 != 1) {\n        console.error('Expected alternating (value, stdev.) pairs in CSV data ' +\n                      'but line ' + (1 + i) + ' has an odd number of values (' +\n                      (inFields.length - 1) + \"): '\" + line + \"'\");\n      }\n      for (j = 1; j < inFields.length; j += 2) {\n        fields[(j + 1) / 2] = [_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](inFields[j], i, line),\n                               _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](inFields[j + 1], i, line)];\n      }\n    } else if (this.getBooleanOption(\"customBars\")) {\n      // Bars are a low;center;high tuple\n      for (j = 1; j < inFields.length; j++) {\n        var val = inFields[j];\n        if (/^ *$/.test(val)) {\n          fields[j] = [null, null, null];\n        } else {\n          vals = val.split(\";\");\n          if (vals.length == 3) {\n            fields[j] = [ _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](vals[0], i, line),\n                          _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](vals[1], i, line),\n                          _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](vals[2], i, line) ];\n          } else {\n            console.warn('When using customBars, values must be either blank ' +\n                         'or \"low;center;high\" tuples (got \"' + val +\n                         '\" on line ' + (1+i));\n          }\n        }\n      }\n    } else {\n      // Values are just numbers\n      for (j = 1; j < inFields.length; j++) {\n        fields[j] = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"parseFloat_\"](inFields[j], i, line);\n      }\n    }\n    if (ret.length > 0 && fields[0] < ret[ret.length - 1][0]) {\n      outOfOrder = true;\n    }\n\n    if (fields.length != expectedCols) {\n      console.error(\"Number of columns in line \" + i + \" (\" + fields.length +\n                    \") does not agree with number of labels (\" + expectedCols +\n                    \") \" + line);\n    }\n\n    // If the user specified the 'labels' option and none of the cells of the\n    // first row parsed correctly, then they probably double-specified the\n    // labels. We go with the values set in the option, discard this row and\n    // log a warning to the JS console.\n    if (i === 0 && this.attr_('labels')) {\n      var all_null = true;\n      for (j = 0; all_null && j < fields.length; j++) {\n        if (fields[j]) all_null = false;\n      }\n      if (all_null) {\n        console.warn(\"The dygraphs 'labels' option is set, but the first row \" +\n                     \"of CSV data ('\" + line + \"') appears to also contain \" +\n                     \"labels. Will drop the CSV labels and use the option \" +\n                     \"labels.\");\n        continue;\n      }\n    }\n    ret.push(fields);\n  }\n\n  if (outOfOrder) {\n    console.warn(\"CSV is out of order; order it correctly to speed loading.\");\n    ret.sort(function(a,b) { return a[0] - b[0]; });\n  }\n\n  return ret;\n};\n\n// In native format, all values must be dates or numbers.\n// This check isn't perfect but will catch most mistaken uses of strings.\nfunction validateNativeFormat(data) {\n  const firstRow = data[0];\n  const firstX = firstRow[0];\n  if (typeof firstX !== 'number' && !_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isDateLike\"](firstX)) {\n    throw new Error(`Expected number or date but got ${typeof firstX}: ${firstX}.`);\n  }\n  for (let i = 1; i < firstRow.length; i++) {\n    const val = firstRow[i];\n    if (val === null || val === undefined) continue;\n    if (typeof val === 'number') continue;\n    if (_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isArrayLike\"](val)) continue;  // e.g. error bars or custom bars.\n    throw new Error(`Expected number or array but got ${typeof val}: ${val}.`);\n  }\n}\n\n/**\n * The user has provided their data as a pre-packaged JS array. If the x values\n * are numeric, this is the same as dygraphs' internal format. If the x values\n * are dates, we need to convert them from Date objects to ms since epoch.\n * @param {!Array} data\n * @return {Object} data with numeric x values.\n * @private\n */\nDygraph.prototype.parseArray_ = function(data) {\n  // Peek at the first x value to see if it's numeric.\n  if (data.length === 0) {\n    console.error(\"Can't plot empty data set\");\n    return null;\n  }\n  if (data[0].length === 0) {\n    console.error(\"Data set cannot contain an empty row\");\n    return null;\n  }\n\n  validateNativeFormat(data);\n\n  var i;\n  if (this.attr_(\"labels\") === null) {\n    console.warn(\"Using default labels. Set labels explicitly via 'labels' \" +\n                 \"in the options parameter\");\n    this.attrs_.labels = [ \"X\" ];\n    for (i = 1; i < data[0].length; i++) {\n      this.attrs_.labels.push(\"Y\" + i); // Not user_attrs_.\n    }\n    this.attributes_.reparseSeries();\n  } else {\n    var num_labels = this.attr_(\"labels\");\n    if (num_labels.length != data[0].length) {\n      console.error(\"Mismatch between number of labels (\" + num_labels + \")\" +\n                    \" and number of columns in array (\" + data[0].length + \")\");\n      return null;\n    }\n  }\n\n  if (_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isDateLike\"](data[0][0])) {\n    // Some intelligent defaults for a date x-axis.\n    this.attrs_.axes.x.valueFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateValueFormatter\"];\n    this.attrs_.axes.x.ticker = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"dateTicker\"];\n    this.attrs_.axes.x.axisLabelFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateAxisLabelFormatter\"];\n\n    // Assume they're all dates.\n    var parsedData = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"clone\"](data);\n    for (i = 0; i < data.length; i++) {\n      if (parsedData[i].length === 0) {\n        console.error(\"Row \" + (1 + i) + \" of data is empty\");\n        return null;\n      }\n      if (parsedData[i][0] === null ||\n          typeof(parsedData[i][0].getTime) != 'function' ||\n          isNaN(parsedData[i][0].getTime())) {\n        console.error(\"x value in row \" + (1 + i) + \" is not a Date\");\n        return null;\n      }\n      parsedData[i][0] = parsedData[i][0].getTime();\n    }\n    return parsedData;\n  } else {\n    // Some intelligent defaults for a numeric x-axis.\n    /** @private (shut up, jsdoc!) */\n    this.attrs_.axes.x.valueFormatter = function(x) { return x; };\n    this.attrs_.axes.x.ticker = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"numericTicks\"];\n    this.attrs_.axes.x.axisLabelFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"numberAxisLabelFormatter\"];\n    return data;\n  }\n};\n\n/**\n * Parses a DataTable object from gviz.\n * The data is expected to have a first column that is either a date or a\n * number. All subsequent columns must be numbers. If there is a clear mismatch\n * between this.xValueParser_ and the type of the first column, it will be\n * fixed. Fills out rawData_.\n * @param {!google.visualization.DataTable} data See above.\n * @private\n */\nDygraph.prototype.parseDataTable_ = function(data) {\n  var shortTextForAnnotationNum = function(num) {\n    // converts [0-9]+ [A-Z][a-z]*\n    // example: 0=A, 1=B, 25=Z, 26=Aa, 27=Ab\n    // and continues like.. Ba Bb .. Za .. Zz..Aaa...Zzz Aaaa Zzzz\n    var shortText = String.fromCharCode(65 /* A */ + num % 26);\n    num = Math.floor(num / 26);\n    while ( num > 0 ) {\n      shortText = String.fromCharCode(65 /* A */ + (num - 1) % 26 ) + shortText.toLowerCase();\n      num = Math.floor((num - 1) / 26);\n    }\n    return shortText;\n  };\n\n  var cols = data.getNumberOfColumns();\n  var rows = data.getNumberOfRows();\n\n  var indepType = data.getColumnType(0);\n  if (indepType == 'date' || indepType == 'datetime') {\n    this.attrs_.xValueParser = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateParser\"];\n    this.attrs_.axes.x.valueFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateValueFormatter\"];\n    this.attrs_.axes.x.ticker = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"dateTicker\"];\n    this.attrs_.axes.x.axisLabelFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateAxisLabelFormatter\"];\n  } else if (indepType == 'number') {\n    this.attrs_.xValueParser = function(x) { return parseFloat(x); };\n    this.attrs_.axes.x.valueFormatter = function(x) { return x; };\n    this.attrs_.axes.x.ticker = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"numericTicks\"];\n    this.attrs_.axes.x.axisLabelFormatter = this.attrs_.axes.x.valueFormatter;\n  } else {\n    throw new Error(\n          \"only 'date', 'datetime' and 'number' types are supported \" +\n          \"for column 1 of DataTable input (Got '\" + indepType + \"')\");\n  }\n\n  // Array of the column indices which contain data (and not annotations).\n  var colIdx = [];\n  var annotationCols = {};  // data index -> [annotation cols]\n  var hasAnnotations = false;\n  var i, j;\n  for (i = 1; i < cols; i++) {\n    var type = data.getColumnType(i);\n    if (type == 'number') {\n      colIdx.push(i);\n    } else if (type == 'string' && this.getBooleanOption('displayAnnotations')) {\n      // This is OK -- it's an annotation column.\n      var dataIdx = colIdx[colIdx.length - 1];\n      if (!annotationCols.hasOwnProperty(dataIdx)) {\n        annotationCols[dataIdx] = [i];\n      } else {\n        annotationCols[dataIdx].push(i);\n      }\n      hasAnnotations = true;\n    } else {\n      throw new Error(\n          \"Only 'number' is supported as a dependent type with Gviz.\" +\n          \" 'string' is only supported if displayAnnotations is true\");\n    }\n  }\n\n  // Read column labels\n  // TODO(danvk): add support back for errorBars\n  var labels = [data.getColumnLabel(0)];\n  for (i = 0; i < colIdx.length; i++) {\n    labels.push(data.getColumnLabel(colIdx[i]));\n    if (this.getBooleanOption(\"errorBars\")) i += 1;\n  }\n  this.attrs_.labels = labels;\n  cols = labels.length;\n\n  var ret = [];\n  var outOfOrder = false;\n  var annotations = [];\n  for (i = 0; i < rows; i++) {\n    var row = [];\n    if (typeof(data.getValue(i, 0)) === 'undefined' ||\n        data.getValue(i, 0) === null) {\n      console.warn(\"Ignoring row \" + i +\n                   \" of DataTable because of undefined or null first column.\");\n      continue;\n    }\n\n    if (indepType == 'date' || indepType == 'datetime') {\n      row.push(data.getValue(i, 0).getTime());\n    } else {\n      row.push(data.getValue(i, 0));\n    }\n    if (!this.getBooleanOption(\"errorBars\")) {\n      for (j = 0; j < colIdx.length; j++) {\n        var col = colIdx[j];\n        row.push(data.getValue(i, col));\n        if (hasAnnotations &&\n            annotationCols.hasOwnProperty(col) &&\n            data.getValue(i, annotationCols[col][0]) !== null) {\n          var ann = {};\n          ann.series = data.getColumnLabel(col);\n          ann.xval = row[0];\n          ann.shortText = shortTextForAnnotationNum(annotations.length);\n          ann.text = '';\n          for (var k = 0; k < annotationCols[col].length; k++) {\n            if (k) ann.text += \"\\n\";\n            ann.text += data.getValue(i, annotationCols[col][k]);\n          }\n          annotations.push(ann);\n        }\n      }\n\n      // Strip out infinities, which give dygraphs problems later on.\n      for (j = 0; j < row.length; j++) {\n        if (!isFinite(row[j])) row[j] = null;\n      }\n    } else {\n      for (j = 0; j < cols - 1; j++) {\n        row.push([ data.getValue(i, 1 + 2 * j), data.getValue(i, 2 + 2 * j) ]);\n      }\n    }\n    if (ret.length > 0 && row[0] < ret[ret.length - 1][0]) {\n      outOfOrder = true;\n    }\n    ret.push(row);\n  }\n\n  if (outOfOrder) {\n    console.warn(\"DataTable is out of order; order it correctly to speed loading.\");\n    ret.sort(function(a,b) { return a[0] - b[0]; });\n  }\n  this.rawData_ = ret;\n\n  if (annotations.length > 0) {\n    this.setAnnotations(annotations, true);\n  }\n  this.attributes_.reparseSeries();\n};\n\n/**\n * Signals to plugins that the chart data has updated.\n * This happens after the data has updated but before the chart has redrawn.\n * @private\n */\nDygraph.prototype.cascadeDataDidUpdateEvent_ = function() {\n  // TODO(danvk): there are some issues checking xAxisRange() and using\n  // toDomCoords from handlers of this event. The visible range should be set\n  // when the chart is drawn, not derived from the data.\n  this.cascadeEvents_('dataDidUpdate', {});\n};\n\n/**\n * Get the CSV data. If it's in a function, call that function. If it's in a\n * file, do an XMLHttpRequest to get it.\n * @private\n */\nDygraph.prototype.start_ = function() {\n  var data = this.file_;\n\n  // Functions can return references of all other types.\n  if (typeof data == 'function') {\n    data = data();\n  }\n\n  if (_dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isArrayLike\"](data)) {\n    this.rawData_ = this.parseArray_(data);\n    this.cascadeDataDidUpdateEvent_();\n    this.predraw_();\n  } else if (typeof data == 'object' &&\n             typeof data.getColumnRange == 'function') {\n    // must be a DataTable from gviz.\n    this.parseDataTable_(data);\n    this.cascadeDataDidUpdateEvent_();\n    this.predraw_();\n  } else if (typeof data == 'string') {\n    // Heuristic: a newline means it's CSV data. Otherwise it's an URL.\n    var line_delimiter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"detectLineDelimiter\"](data);\n    if (line_delimiter) {\n      this.loadedEvent_(data);\n    } else {\n      // REMOVE_FOR_IE\n      var req;\n      if (window.XMLHttpRequest) {\n        // Firefox, Opera, IE7, and other browsers will use the native object\n        req = new XMLHttpRequest();\n      } else {\n        // IE 5 and 6 will use the ActiveX control\n        req = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n\n      var caller = this;\n      req.onreadystatechange = function () {\n        if (req.readyState == 4) {\n          if (req.status === 200 ||  // Normal http\n              req.status === 0) {    // Chrome w/ --allow-file-access-from-files\n            caller.loadedEvent_(req.responseText);\n          }\n        }\n      };\n\n      req.open(\"GET\", data, true);\n      req.send(null);\n    }\n  } else {\n    console.error(\"Unknown data format: \" + (typeof data));\n  }\n};\n\n/**\n * Changes various properties of the graph. These can include:\n * <ul>\n * <li>file: changes the source data for the graph</li>\n * <li>errorBars: changes whether the data contains stddev</li>\n * </ul>\n *\n * There's a huge variety of options that can be passed to this method. For a\n * full list, see http://dygraphs.com/options.html.\n *\n * @param {Object} input_attrs The new properties and values\n * @param {boolean} block_redraw Usually the chart is redrawn after every\n *     call to updateOptions(). If you know better, you can pass true to\n *     explicitly block the redraw. This can be useful for chaining\n *     updateOptions() calls, avoiding the occasional infinite loop and\n *     preventing redraws when it's not necessary (e.g. when updating a\n *     callback).\n */\nDygraph.prototype.updateOptions = function(input_attrs, block_redraw) {\n  if (typeof(block_redraw) == 'undefined') block_redraw = false;\n\n  // copyUserAttrs_ drops the \"file\" parameter as a convenience to us.\n  var file = input_attrs.file;\n  var attrs = Dygraph.copyUserAttrs_(input_attrs);\n\n  // TODO(danvk): this is a mess. Move these options into attr_.\n  if ('rollPeriod' in attrs) {\n    this.rollPeriod_ = attrs.rollPeriod;\n  }\n  if ('dateWindow' in attrs) {\n    this.dateWindow_ = attrs.dateWindow;\n  }\n\n  // TODO(danvk): validate per-series options.\n  // Supported:\n  // strokeWidth\n  // pointSize\n  // drawPoints\n  // highlightCircleSize\n\n  // Check if this set options will require new points.\n  var requiresNewPoints = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"isPixelChangingOptionList\"](this.attr_(\"labels\"), attrs);\n\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"updateDeep\"](this.user_attrs_, attrs);\n\n  this.attributes_.reparseSeries();\n\n  if (file) {\n    // This event indicates that the data is about to change, but hasn't yet.\n    // TODO(danvk): support cancellation of the update via this event.\n    this.cascadeEvents_('dataWillUpdate', {});\n\n    this.file_ = file;\n    if (!block_redraw) this.start_();\n  } else {\n    if (!block_redraw) {\n      if (requiresNewPoints) {\n        this.predraw_();\n      } else {\n        this.renderGraph_(false);\n      }\n    }\n  }\n};\n\n/**\n * Make a copy of input attributes, removing file as a convenience.\n * @private\n */\nDygraph.copyUserAttrs_ = function(attrs) {\n  var my_attrs = {};\n  for (var k in attrs) {\n    if (!attrs.hasOwnProperty(k)) continue;\n    if (k == 'file') continue;\n    if (attrs.hasOwnProperty(k)) my_attrs[k] = attrs[k];\n  }\n  return my_attrs;\n};\n\n/**\n * Resizes the dygraph. If no parameters are specified, resizes to fill the\n * containing div (which has presumably changed size since the dygraph was\n * instantiated. If the width/height are specified, the div will be resized.\n *\n * This is far more efficient than destroying and re-instantiating a\n * Dygraph, since it doesn't have to reparse the underlying data.\n *\n * @param {number} width Width (in pixels)\n * @param {number} height Height (in pixels)\n */\nDygraph.prototype.resize = function(width, height) {\n  if (this.resize_lock) {\n    return;\n  }\n  this.resize_lock = true;\n\n  if ((width === null) != (height === null)) {\n    console.warn(\"Dygraph.resize() should be called with zero parameters or \" +\n                 \"two non-NULL parameters. Pretending it was zero.\");\n    width = height = null;\n  }\n\n  var old_width = this.width_;\n  var old_height = this.height_;\n\n  if (width) {\n    this.maindiv_.style.width = width + \"px\";\n    this.maindiv_.style.height = height + \"px\";\n    this.width_ = width;\n    this.height_ = height;\n  } else {\n    this.width_ = this.maindiv_.clientWidth;\n    this.height_ = this.maindiv_.clientHeight;\n  }\n\n  if (old_width != this.width_ || old_height != this.height_) {\n    // Resizing a canvas erases it, even when the size doesn't change, so\n    // any resize needs to be followed by a redraw.\n    this.resizeElements_();\n    this.predraw_();\n  }\n\n  this.resize_lock = false;\n};\n\n/**\n * Adjusts the number of points in the rolling average. Updates the graph to\n * reflect the new averaging period.\n * @param {number} length Number of points over which to average the data.\n */\nDygraph.prototype.adjustRoll = function(length) {\n  this.rollPeriod_ = length;\n  this.predraw_();\n};\n\n/**\n * Returns a boolean array of visibility statuses.\n */\nDygraph.prototype.visibility = function() {\n  // Do lazy-initialization, so that this happens after we know the number of\n  // data series.\n  if (!this.getOption(\"visibility\")) {\n    this.attrs_.visibility = [];\n  }\n  // TODO(danvk): it looks like this could go into an infinite loop w/ user_attrs.\n  while (this.getOption(\"visibility\").length < this.numColumns() - 1) {\n    this.attrs_.visibility.push(true);\n  }\n  return this.getOption(\"visibility\");\n};\n\n/**\n * Changes the visibility of one or more series.\n *\n * @param {number|number[]|object} num the series index or an array of series indices\n *                                     or a boolean array of visibility states by index\n *                                     or an object mapping series numbers, as keys, to\n *                                     visibility state (boolean values)\n * @param {boolean} value the visibility state expressed as a boolean\n */\nDygraph.prototype.setVisibility = function(num, value) {\n  var x = this.visibility();\n  var numIsObject = false;\n\n  if (!Array.isArray(num)) {\n    if (num !== null && typeof num === 'object') {\n      numIsObject = true;\n    } else {\n      num = [num];\n    }\n  }\n\n  if (numIsObject) {\n    for (var i in num) {\n      if (num.hasOwnProperty(i)) {\n        if (i < 0 || i >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + i);\n        } else {\n          x[i] = num[i];\n        }\n      }\n    }\n  } else {\n    for (var i = 0; i < num.length; i++) {\n      if (typeof num[i] === 'boolean') {\n        if (i >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + i);\n        } else {\n          x[i] = num[i];\n        }\n      } else {\n        if (num[i] < 0 || num[i] >= x.length) {\n          console.warn(\"Invalid series number in setVisibility: \" + num[i]);\n        } else {\n          x[num[i]] = value;\n        }\n      }\n    }\n  }\n\n  this.predraw_();\n};\n\n/**\n * How large of an area will the dygraph render itself in?\n * This is used for testing.\n * @return A {width: w, height: h} object.\n * @private\n */\nDygraph.prototype.size = function() {\n  return { width: this.width_, height: this.height_ };\n};\n\n/**\n * Update the list of annotations and redraw the chart.\n * See dygraphs.com/annotations.html for more info on how to use annotations.\n * @param ann {Array} An array of annotation objects.\n * @param suppressDraw {Boolean} Set to \"true\" to block chart redraw (optional).\n */\nDygraph.prototype.setAnnotations = function(ann, suppressDraw) {\n  // Only add the annotation CSS rule once we know it will be used.\n  this.annotations_ = ann;\n  if (!this.layout_) {\n    console.warn(\"Tried to setAnnotations before dygraph was ready. \" +\n                 \"Try setting them in a ready() block. See \" +\n                 \"dygraphs.com/tests/annotation.html\");\n    return;\n  }\n\n  this.layout_.setAnnotations(this.annotations_);\n  if (!suppressDraw) {\n    this.predraw_();\n  }\n};\n\n/**\n * Return the list of annotations.\n */\nDygraph.prototype.annotations = function() {\n  return this.annotations_;\n};\n\n/**\n * Get the list of label names for this graph. The first column is the\n * x-axis, so the data series names start at index 1.\n *\n * Returns null when labels have not yet been defined.\n */\nDygraph.prototype.getLabels = function() {\n  var labels = this.attr_(\"labels\");\n  return labels ? labels.slice() : null;\n};\n\n/**\n * Get the index of a series (column) given its name. The first column is the\n * x-axis, so the data series start with index 1.\n */\nDygraph.prototype.indexFromSetName = function(name) {\n  return this.setIndexByName_[name];\n};\n\n/**\n * Find the row number corresponding to the given x-value.\n * Returns null if there is no such x-value in the data.\n * If there are multiple rows with the same x-value, this will return the\n * first one.\n * @param {number} xVal The x-value to look for (e.g. millis since epoch).\n * @return {?number} The row number, which you can pass to getValue(), or null.\n */\nDygraph.prototype.getRowForX = function(xVal) {\n  var low = 0,\n      high = this.numRows() - 1;\n\n  while (low <= high) {\n    var idx = (high + low) >> 1;\n    var x = this.getValue(idx, 0);\n    if (x < xVal) {\n      low = idx + 1;\n    } else if (x > xVal) {\n      high = idx - 1;\n    } else if (low != idx) {  // equal, but there may be an earlier match.\n      high = idx;\n    } else {\n      return idx;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Trigger a callback when the dygraph has drawn itself and is ready to be\n * manipulated. This is primarily useful when dygraphs has to do an XHR for the\n * data (i.e. a URL is passed as the data source) and the chart is drawn\n * asynchronously. If the chart has already drawn, the callback will fire\n * immediately.\n *\n * This is a good place to call setAnnotation().\n *\n * @param {function(!Dygraph)} callback The callback to trigger when the chart\n *     is ready.\n */\nDygraph.prototype.ready = function(callback) {\n  if (this.is_initial_draw_) {\n    this.readyFns_.push(callback);\n  } else {\n    callback.call(this, this);\n  }\n};\n\n/**\n * Add an event handler. This event handler is kept until the graph is\n * destroyed with a call to graph.destroy().\n *\n * @param {!Node} elem The element to add the event to.\n * @param {string} type The type of the event, e.g. 'click' or 'mousemove'.\n * @param {function(Event):(boolean|undefined)} fn The function to call\n *     on the event. The function takes one parameter: the event object.\n * @private\n */\nDygraph.prototype.addAndTrackEvent = function(elem, type, fn) {\n  _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"addEvent\"](elem, type, fn);\n  this.registeredEvents_.push({elem, type, fn});\n};\n\nDygraph.prototype.removeTrackedEvents_ = function() {\n  if (this.registeredEvents_) {\n    for (var idx = 0; idx < this.registeredEvents_.length; idx++) {\n      var reg = this.registeredEvents_[idx];\n      _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"removeEvent\"](reg.elem, reg.type, reg.fn);\n    }\n  }\n\n  this.registeredEvents_ = [];\n};\n\n\n// Installed plugins, in order of precedence (most-general to most-specific).\nDygraph.PLUGINS = [\n  _plugins_legend__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\n  _plugins_axes__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\n  _plugins_range_selector__WEBPACK_IMPORTED_MODULE_20__[\"default\"], // Has to be before ChartLabels so that its callbacks are called after ChartLabels' callbacks.\n  _plugins_chart_labels__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\n  _plugins_annotations__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n  _plugins_grid__WEBPACK_IMPORTED_MODULE_18__[\"default\"]\n];\n\n// There are many symbols which have historically been available through the\n// Dygraph class. These are exported here for backwards compatibility.\nDygraph.GVizChart = _dygraph_gviz__WEBPACK_IMPORTED_MODULE_21__[\"default\"];\nDygraph.DASHED_LINE = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"DASHED_LINE\"];\nDygraph.DOT_DASH_LINE = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"DOT_DASH_LINE\"];\nDygraph.dateAxisLabelFormatter = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateAxisLabelFormatter\"];\nDygraph.toRGB_ = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"toRGB_\"];\nDygraph.findPos = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"findPos\"];\nDygraph.pageX = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"pageX\"];\nDygraph.pageY = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"pageY\"];\nDygraph.dateString_ = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"dateString_\"];\nDygraph.defaultInteractionModel = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].defaultModel;\nDygraph.nonInteractiveModel = Dygraph.nonInteractiveModel_ = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].nonInteractiveModel_;\nDygraph.Circles = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"Circles\"];\n\nDygraph.Plugins = {\n  Legend: _plugins_legend__WEBPACK_IMPORTED_MODULE_19__[\"default\"],\n  Axes: _plugins_axes__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\n  Annotations: _plugins_annotations__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n  ChartLabels: _plugins_chart_labels__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\n  Grid: _plugins_grid__WEBPACK_IMPORTED_MODULE_18__[\"default\"],\n  RangeSelector: _plugins_range_selector__WEBPACK_IMPORTED_MODULE_20__[\"default\"]\n};\n\nDygraph.DataHandlers = {\n  DefaultHandler: _datahandler_default__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n  BarsHandler: _datahandler_bars__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n  CustomBarsHandler: _datahandler_bars_custom__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n  DefaultFractionHandler: _datahandler_default_fractions__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n  ErrorBarsHandler: _datahandler_bars_error__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n  FractionsBarsHandler: _datahandler_bars_fractions__WEBPACK_IMPORTED_MODULE_13__[\"default\"]\n};\n\nDygraph.startPan = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].startPan;\nDygraph.startZoom = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].startZoom;\nDygraph.movePan = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].movePan;\nDygraph.moveZoom = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].moveZoom;\nDygraph.endPan = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].endPan;\nDygraph.endZoom = _dygraph_interaction_model__WEBPACK_IMPORTED_MODULE_3__[\"default\"].endZoom;\n\nDygraph.numericLinearTicks = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"numericLinearTicks\"];\nDygraph.numericTicks = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"numericTicks\"];\nDygraph.dateTicker = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"dateTicker\"];\nDygraph.Granularity = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"Granularity\"];\nDygraph.getDateAxis = _dygraph_tickers__WEBPACK_IMPORTED_MODULE_4__[\"getDateAxis\"];\nDygraph.floatFormat = _dygraph_utils__WEBPACK_IMPORTED_MODULE_5__[\"floatFormat\"];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Dygraph);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"8oxB\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ25uYi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9keWdyYXBocy9zcmMvZHlncmFwaC5qcz8wYTc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDA2IERhbiBWYW5kZXJrYW0gKGRhbnZka0BnbWFpbC5jb20pXG4gKiBNSVQtbGljZW5zZWQgKGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQpXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IENyZWF0ZXMgYW4gaW50ZXJhY3RpdmUsIHpvb21hYmxlIGdyYXBoIGJhc2VkIG9uIGEgQ1NWIGZpbGUgb3JcbiAqIHN0cmluZy4gRHlncmFwaCBjYW4gaGFuZGxlIG11bHRpcGxlIHNlcmllcyB3aXRoIG9yIHdpdGhvdXQgZXJyb3IgYmFycy4gVGhlXG4gKiBkYXRlL3ZhbHVlIHJhbmdlcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgc2V0LiBEeWdyYXBoIHVzZXMgdGhlXG4gKiAmbHQ7Y2FudmFzJmd0OyB0YWcsIHNvIGl0IG9ubHkgd29ya3MgaW4gRkYxLjUrLlxuICogQGF1dGhvciBkYW52ZGtAZ21haWwuY29tIChEYW4gVmFuZGVya2FtKVxuXG4gIFVzYWdlOlxuICAgPGRpdiBpZD1cImdyYXBoZGl2XCIgc3R5bGU9XCJ3aWR0aDo4MDBweDsgaGVpZ2h0OjUwMHB4O1wiPjwvZGl2PlxuICAgPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG4gICAgIG5ldyBEeWdyYXBoKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ3JhcGhkaXZcIiksXG4gICAgICAgICAgICAgICAgIFwiZGF0YWZpbGUuY3N2XCIsICAvLyBDU1YgZmlsZSB3aXRoIGhlYWRlcnNcbiAgICAgICAgICAgICAgICAgeyB9KTsgLy8gb3B0aW9uc1xuICAgPC9zY3JpcHQ+XG5cbiBUaGUgQ1NWIGZpbGUgaXMgb2YgdGhlIGZvcm1cblxuICAgRGF0ZSxTZXJpZXNBLFNlcmllc0IsU2VyaWVzQ1xuICAgWVlZWU1NREQsQTEsQjEsQzFcbiAgIFlZWVlNTURELEEyLEIyLEMyXG5cbiBJZiB0aGUgJ2Vycm9yQmFycycgb3B0aW9uIGlzIHNldCBpbiB0aGUgY29uc3RydWN0b3IsIHRoZSBpbnB1dCBzaG91bGQgYmUgb2ZcbiB0aGUgZm9ybVxuICAgRGF0ZSxTZXJpZXNBLFNlcmllc0IsLi4uXG4gICBZWVlZTU1ERCxBMSxzaWdtYUExLEIxLHNpZ21hQjEsLi4uXG4gICBZWVlZTU1ERCxBMixzaWdtYUEyLEIyLHNpZ21hQjIsLi4uXG5cbiBJZiB0aGUgJ2ZyYWN0aW9ucycgb3B0aW9uIGlzIHNldCwgdGhlIGlucHV0IHNob3VsZCBiZSBvZiB0aGUgZm9ybTpcblxuICAgRGF0ZSxTZXJpZXNBLFNlcmllc0IsLi4uXG4gICBZWVlZTU1ERCxBMS9CMSxBMi9CMiwuLi5cbiAgIFlZWVlNTURELEExL0IxLEEyL0IyLC4uLlxuXG4gQW5kIGVycm9yIGJhcnMgd2lsbCBiZSBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgdXNpbmcgYSBiaW5vbWlhbCBkaXN0cmlidXRpb24uXG5cbiBGb3IgZnVydGhlciBkb2N1bWVudGF0aW9uIGFuZCBleGFtcGxlcywgc2VlIGh0dHA6Ly9keWdyYXBocy5jb20vXG4gKi9cblxuaW1wb3J0IER5Z3JhcGhMYXlvdXQgZnJvbSAnLi9keWdyYXBoLWxheW91dCc7XG5pbXBvcnQgRHlncmFwaENhbnZhc1JlbmRlcmVyIGZyb20gJy4vZHlncmFwaC1jYW52YXMnO1xuaW1wb3J0IER5Z3JhcGhPcHRpb25zIGZyb20gJy4vZHlncmFwaC1vcHRpb25zJztcbmltcG9ydCBEeWdyYXBoSW50ZXJhY3Rpb24gZnJvbSAnLi9keWdyYXBoLWludGVyYWN0aW9uLW1vZGVsJztcbmltcG9ydCAqIGFzIER5Z3JhcGhUaWNrZXJzIGZyb20gJy4vZHlncmFwaC10aWNrZXJzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vZHlncmFwaC11dGlscyc7XG5pbXBvcnQgREVGQVVMVF9BVFRSUyBmcm9tICcuL2R5Z3JhcGgtZGVmYXVsdC1hdHRycyc7XG5pbXBvcnQgT1BUSU9OU19SRUZFUkVOQ0UgZnJvbSAnLi9keWdyYXBoLW9wdGlvbnMtcmVmZXJlbmNlJztcbmltcG9ydCBJRnJhbWVUYXJwIGZyb20gJy4vaWZyYW1lLXRhcnAnO1xuXG5pbXBvcnQgRGVmYXVsdEhhbmRsZXIgZnJvbSAnLi9kYXRhaGFuZGxlci9kZWZhdWx0JztcbmltcG9ydCBFcnJvckJhcnNIYW5kbGVyIGZyb20gJy4vZGF0YWhhbmRsZXIvYmFycy1lcnJvcic7XG5pbXBvcnQgQ3VzdG9tQmFyc0hhbmRsZXIgZnJvbSAnLi9kYXRhaGFuZGxlci9iYXJzLWN1c3RvbSc7XG5pbXBvcnQgRGVmYXVsdEZyYWN0aW9uSGFuZGxlciBmcm9tICcuL2RhdGFoYW5kbGVyL2RlZmF1bHQtZnJhY3Rpb25zJztcbmltcG9ydCBGcmFjdGlvbnNCYXJzSGFuZGxlciBmcm9tICcuL2RhdGFoYW5kbGVyL2JhcnMtZnJhY3Rpb25zJztcbmltcG9ydCBCYXJzSGFuZGxlciBmcm9tICcuL2RhdGFoYW5kbGVyL2JhcnMnO1xuXG5pbXBvcnQgQW5ub3RhdGlvbnNQbHVnaW4gZnJvbSAnLi9wbHVnaW5zL2Fubm90YXRpb25zJztcbmltcG9ydCBBeGVzUGx1Z2luIGZyb20gJy4vcGx1Z2lucy9heGVzJztcbmltcG9ydCBDaGFydExhYmVsc1BsdWdpbiBmcm9tICcuL3BsdWdpbnMvY2hhcnQtbGFiZWxzJztcbmltcG9ydCBHcmlkUGx1Z2luIGZyb20gJy4vcGx1Z2lucy9ncmlkJztcbmltcG9ydCBMZWdlbmRQbHVnaW4gZnJvbSAnLi9wbHVnaW5zL2xlZ2VuZCc7XG5pbXBvcnQgUmFuZ2VTZWxlY3RvclBsdWdpbiBmcm9tICcuL3BsdWdpbnMvcmFuZ2Utc2VsZWN0b3InO1xuXG5pbXBvcnQgR1ZpekNoYXJ0IGZyb20gJy4vZHlncmFwaC1ndml6JztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnRlcmFjdGl2ZSwgem9vbWFibGUgY2hhcnQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2RpdiB8IFN0cmluZ30gZGl2IEEgZGl2IG9yIHRoZSBpZCBvZiBhIGRpdiBpbnRvIHdoaWNoIHRvIGNvbnN0cnVjdFxuICogdGhlIGNoYXJ0LlxuICogQHBhcmFtIHtTdHJpbmcgfCBGdW5jdGlvbn0gZmlsZSBBIGZpbGUgY29udGFpbmluZyBDU1YgZGF0YSBvciBhIGZ1bmN0aW9uXG4gKiB0aGF0IHJldHVybnMgdGhpcyBkYXRhLiBUaGUgbW9zdCBiYXNpYyBleHBlY3RlZCBmb3JtYXQgZm9yIGVhY2ggbGluZSBpc1xuICogXCJZWVlZL01NL0RELHZhbDEsdmFsMiwuLi5cIi4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuICogaHR0cDovL2R5Z3JhcGhzLmNvbS9kYXRhLmh0bWwuXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cnMgVmFyaW91cyBvdGhlciBhdHRyaWJ1dGVzLCBlLmcuIGVycm9yQmFycyBkZXRlcm1pbmVzXG4gKiB3aGV0aGVyIHRoZSBpbnB1dCBkYXRhIGNvbnRhaW5zIGVycm9yIHJhbmdlcy4gRm9yIGEgY29tcGxldGUgbGlzdCBvZlxuICogb3B0aW9ucywgc2VlIGh0dHA6Ly9keWdyYXBocy5jb20vb3B0aW9ucy5odG1sLlxuICovXG52YXIgRHlncmFwaCA9IGZ1bmN0aW9uKGRpdiwgZGF0YSwgb3B0cykge1xuICB0aGlzLl9faW5pdF9fKGRpdiwgZGF0YSwgb3B0cyk7XG59O1xuXG5EeWdyYXBoLk5BTUUgPSBcIkR5Z3JhcGhcIjtcbkR5Z3JhcGguVkVSU0lPTiA9IFwiMi4wLjBcIjtcblxuLy8gVmFyaW91cyBkZWZhdWx0IHZhbHVlc1xuRHlncmFwaC5ERUZBVUxUX1JPTExfUEVSSU9EID0gMTtcbkR5Z3JhcGguREVGQVVMVF9XSURUSCA9IDQ4MDtcbkR5Z3JhcGguREVGQVVMVF9IRUlHSFQgPSAzMjA7XG5cbi8vIEZvciBtYXggNjAgSHouIGFuaW1hdGlvbjpcbkR5Z3JhcGguQU5JTUFUSU9OX1NURVBTID0gMTI7XG5EeWdyYXBoLkFOSU1BVElPTl9EVVJBVElPTiA9IDIwMDtcblxuLyoqXG4gKiBTdGFuZGFyZCBwbG90dGVycy4gVGhlc2UgbWF5IGJlIHVzZWQgYnkgY2xpZW50cy5cbiAqIEF2YWlsYWJsZSBwbG90dGVycyBhcmU6XG4gKiAtIER5Z3JhcGguUGxvdHRlcnMubGluZVBsb3R0ZXI6IGRyYXdzIGNlbnRyYWwgbGluZXMgKG1vc3QgY29tbW9uKVxuICogLSBEeWdyYXBoLlBsb3R0ZXJzLmVycm9yUGxvdHRlcjogZHJhd3MgZXJyb3IgYmFyc1xuICogLSBEeWdyYXBoLlBsb3R0ZXJzLmZpbGxQbG90dGVyOiBkcmF3cyBmaWxscyB1bmRlciBsaW5lcyAodXNlZCB3aXRoIGZpbGxHcmFwaClcbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgcGxvdHRlciBpcyBbZmlsbFBsb3R0ZXIsIGVycm9yUGxvdHRlciwgbGluZVBsb3R0ZXJdLlxuICogVGhpcyBjYXVzZXMgYWxsIHRoZSBsaW5lcyB0byBiZSBkcmF3biBvdmVyIGFsbCB0aGUgZmlsbHMvZXJyb3IgYmFycy5cbiAqL1xuRHlncmFwaC5QbG90dGVycyA9IER5Z3JhcGhDYW52YXNSZW5kZXJlci5fUGxvdHRlcnM7XG5cblxuLy8gVXNlZCBmb3IgaW5pdGlhbGl6aW5nIGFubm90YXRpb24gQ1NTIHJ1bGVzIG9ubHkgb25jZS5cbkR5Z3JhcGguYWRkZWRBbm5vdGF0aW9uQ1NTID0gZmFsc2U7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIER5Z3JhcGguIFRoaXMgY3JlYXRlcyBhIG5ldyBESVYgYW5kIGNvbnN0cnVjdHMgdGhlIFBsb3RLaXRcbiAqIGFuZCBjb250ZXh0ICZsdDtjYW52YXMmZ3Q7IGluc2lkZSBvZiBpdC4gU2VlIHRoZSBjb25zdHJ1Y3RvciBmb3IgZGV0YWlscy5cbiAqIG9uIHRoZSBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtFbGVtZW50fSBkaXYgdGhlIEVsZW1lbnQgdG8gcmVuZGVyIHRoZSBncmFwaCBpbnRvLlxuICogQHBhcmFtIHtzdHJpbmcgfCBGdW5jdGlvbn0gZmlsZSBTb3VyY2UgZGF0YVxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJzIE1pc2NlbGxhbmVvdXMgb3RoZXIgb3B0aW9uc1xuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuX19pbml0X18gPSBmdW5jdGlvbihkaXYsIGZpbGUsIGF0dHJzKSB7XG4gIHRoaXMuaXNfaW5pdGlhbF9kcmF3XyA9IHRydWU7XG4gIHRoaXMucmVhZHlGbnNfID0gW107XG5cbiAgLy8gU3VwcG9ydCB0d28tYXJndW1lbnQgY29uc3RydWN0b3JcbiAgaWYgKGF0dHJzID09PSBudWxsIHx8IGF0dHJzID09PSB1bmRlZmluZWQpIHsgYXR0cnMgPSB7fTsgfVxuXG4gIGF0dHJzID0gRHlncmFwaC5jb3B5VXNlckF0dHJzXyhhdHRycyk7XG5cbiAgaWYgKHR5cGVvZihkaXYpID09ICdzdHJpbmcnKSB7XG4gICAgZGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGl2KTtcbiAgfVxuXG4gIGlmICghZGl2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDb25zdHJ1Y3RpbmcgZHlncmFwaCB3aXRoIGEgbm9uLWV4aXN0ZW50IGRpdiEnKTtcbiAgfVxuXG4gIC8vIENvcHkgdGhlIGltcG9ydGFudCBiaXRzIGludG8gdGhlIG9iamVjdFxuICAvLyBUT0RPKGRhbnZrKTogbW9zdCBvZiB0aGVzZSBzaG91bGQganVzdCBzdGF5IGluIHRoZSBhdHRyc18gZGljdGlvbmFyeS5cbiAgdGhpcy5tYWluZGl2XyA9IGRpdjtcbiAgdGhpcy5maWxlXyA9IGZpbGU7XG4gIHRoaXMucm9sbFBlcmlvZF8gPSBhdHRycy5yb2xsUGVyaW9kIHx8IER5Z3JhcGguREVGQVVMVF9ST0xMX1BFUklPRDtcbiAgdGhpcy5wcmV2aW91c1ZlcnRpY2FsWF8gPSAtMTtcbiAgdGhpcy5mcmFjdGlvbnNfID0gYXR0cnMuZnJhY3Rpb25zIHx8IGZhbHNlO1xuICB0aGlzLmRhdGVXaW5kb3dfID0gYXR0cnMuZGF0ZVdpbmRvdyB8fCBudWxsO1xuXG4gIHRoaXMuYW5ub3RhdGlvbnNfID0gW107XG5cbiAgLy8gQ2xlYXIgdGhlIGRpdi4gVGhpcyBlbnN1cmUgdGhhdCwgaWYgbXVsdGlwbGUgZHlncmFwaHMgYXJlIHBhc3NlZCB0aGUgc2FtZVxuICAvLyBkaXYsIHRoZW4gb25seSBvbmUgd2lsbCBiZSBkcmF3bi5cbiAgZGl2LmlubmVySFRNTCA9IFwiXCI7XG5cbiAgLy8gRm9yIGhpc3RvcmljYWwgcmVhc29ucywgdGhlICd3aWR0aCcgYW5kICdoZWlnaHQnIG9wdGlvbnMgdHJ1bXAgYWxsIENTU1xuICAvLyBydWxlcyBfZXhjZXB0XyBmb3IgYW4gZXhwbGljaXQgJ3dpZHRoJyBvciAnaGVpZ2h0JyBvbiB0aGUgZGl2LlxuICAvLyBBcyBhbiBhZGRlZCBjb252ZW5pZW5jZSwgaWYgdGhlIGRpdiBoYXMgemVybyBoZWlnaHQgKGxpa2UgPGRpdj48L2Rpdj4gZG9lc1xuICAvLyB3aXRob3V0IGFueSBzdHlsZXMpLCB0aGVuIHdlIHVzZSBhIGRlZmF1bHQgaGVpZ2h0L3dpZHRoLlxuICBpZiAoZGl2LnN0eWxlLndpZHRoID09PSAnJyAmJiBhdHRycy53aWR0aCkge1xuICAgIGRpdi5zdHlsZS53aWR0aCA9IGF0dHJzLndpZHRoICsgXCJweFwiO1xuICB9XG4gIGlmIChkaXYuc3R5bGUuaGVpZ2h0ID09PSAnJyAmJiBhdHRycy5oZWlnaHQpIHtcbiAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gYXR0cnMuaGVpZ2h0ICsgXCJweFwiO1xuICB9XG4gIGlmIChkaXYuc3R5bGUuaGVpZ2h0ID09PSAnJyAmJiBkaXYuY2xpZW50SGVpZ2h0ID09PSAwKSB7XG4gICAgZGl2LnN0eWxlLmhlaWdodCA9IER5Z3JhcGguREVGQVVMVF9IRUlHSFQgKyBcInB4XCI7XG4gICAgaWYgKGRpdi5zdHlsZS53aWR0aCA9PT0gJycpIHtcbiAgICAgIGRpdi5zdHlsZS53aWR0aCA9IER5Z3JhcGguREVGQVVMVF9XSURUSCArIFwicHhcIjtcbiAgICB9XG4gIH1cbiAgLy8gVGhlc2Ugd2lsbCBiZSB6ZXJvIGlmIHRoZSBkeWdyYXBoJ3MgZGl2IGlzIGhpZGRlbi4gSW4gdGhhdCBjYXNlLFxuICAvLyB1c2UgdGhlIHVzZXItc3BlY2lmaWVkIGF0dHJpYnV0ZXMgaWYgcHJlc2VudC4gSWYgbm90LCB1c2UgemVyb1xuICAvLyBhbmQgYXNzdW1lIHRoZSB1c2VyIHdpbGwgY2FsbCByZXNpemUgdG8gZml4IHRoaW5ncyBsYXRlci5cbiAgdGhpcy53aWR0aF8gPSBkaXYuY2xpZW50V2lkdGggfHwgYXR0cnMud2lkdGggfHwgMDtcbiAgdGhpcy5oZWlnaHRfID0gZGl2LmNsaWVudEhlaWdodCB8fCBhdHRycy5oZWlnaHQgfHwgMDtcblxuICAvLyBUT0RPKGRhbnZrKTogc2V0IGZpbGxHcmFwaCB0byBiZSBwYXJ0IG9mIGF0dHJzXyBoZXJlLCBub3QgdXNlcl9hdHRyc18uXG4gIGlmIChhdHRycy5zdGFja2VkR3JhcGgpIHtcbiAgICBhdHRycy5maWxsR3JhcGggPSB0cnVlO1xuICAgIC8vIFRPRE8obmlraGlsayk6IEFkZCBhbnkgb3RoZXIgc3RhY2tlZEdyYXBoIGNoZWNrcyBoZXJlLlxuICB9XG5cbiAgLy8gREVQUkVDQVRJT04gV0FSTklORzogQWxsIG9wdGlvbiBwcm9jZXNzaW5nIHNob3VsZCBiZSBtb3ZlZCBmcm9tXG4gIC8vIGF0dHJzXyBhbmQgdXNlcl9hdHRyc18gdG8gb3B0aW9uc18sIHdoaWNoIGhvbGRzIGFsbCB0aGlzIGluZm9ybWF0aW9uLlxuICAvL1xuICAvLyBEeWdyYXBocyBoYXMgbWFueSBvcHRpb25zLCBzb21lIG9mIHdoaWNoIGludGVyYWN0IHdpdGggb25lIGFub3RoZXIuXG4gIC8vIFRvIGtlZXAgdHJhY2sgb2YgZXZlcnl0aGluZywgd2UgbWFpbnRhaW4gdHdvIHNldHMgb2Ygb3B0aW9uczpcbiAgLy9cbiAgLy8gIHRoaXMudXNlcl9hdHRyc18gICBvbmx5IG9wdGlvbnMgZXhwbGljaXRseSBzZXQgYnkgdGhlIHVzZXIuXG4gIC8vICB0aGlzLmF0dHJzXyAgICAgICAgZGVmYXVsdHMsIG9wdGlvbnMgZGVyaXZlZCBmcm9tIHVzZXJfYXR0cnNfLCBkYXRhLlxuICAvL1xuICAvLyBPcHRpb25zIGFyZSB0aGVuIGFjY2Vzc2VkIHRoaXMuYXR0cl8oJ2F0dHInKSwgd2hpY2ggZmlyc3QgbG9va3MgYXRcbiAgLy8gdXNlcl9hdHRyc18gYW5kIHRoZW4gY29tcHV0ZWQgYXR0cnNfLiBUaGlzIHdheSBEeWdyYXBocyBjYW4gc2V0IGludGVsbGlnZW50XG4gIC8vIGRlZmF1bHRzIHdpdGhvdXQgb3ZlcnJpZGluZyBiZWhhdmlvciB0aGF0IHRoZSB1c2VyIHNwZWNpZmljYWxseSBhc2tzIGZvci5cbiAgdGhpcy51c2VyX2F0dHJzXyA9IHt9O1xuICB1dGlscy51cGRhdGUodGhpcy51c2VyX2F0dHJzXywgYXR0cnMpO1xuXG4gIC8vIFRoaXMgc2VxdWVuY2UgZW5zdXJlcyB0aGF0IER5Z3JhcGguREVGQVVMVF9BVFRSUyBpcyBuZXZlciBtb2RpZmllZC5cbiAgdGhpcy5hdHRyc18gPSB7fTtcbiAgdXRpbHMudXBkYXRlRGVlcCh0aGlzLmF0dHJzXywgREVGQVVMVF9BVFRSUyk7XG5cbiAgdGhpcy5ib3VuZGFyeUlkc18gPSBbXTtcbiAgdGhpcy5zZXRJbmRleEJ5TmFtZV8gPSB7fTtcbiAgdGhpcy5kYXRhc2V0SW5kZXhfID0gW107XG5cbiAgdGhpcy5yZWdpc3RlcmVkRXZlbnRzXyA9IFtdO1xuICB0aGlzLmV2ZW50TGlzdGVuZXJzXyA9IHt9O1xuXG4gIHRoaXMuYXR0cmlidXRlc18gPSBuZXcgRHlncmFwaE9wdGlvbnModGhpcyk7XG5cbiAgLy8gQ3JlYXRlIHRoZSBjb250YWluaW5nIERJViBhbmQgb3RoZXIgaW50ZXJhY3RpdmUgZWxlbWVudHNcbiAgdGhpcy5jcmVhdGVJbnRlcmZhY2VfKCk7XG5cbiAgLy8gQWN0aXZhdGUgcGx1Z2lucy5cbiAgdGhpcy5wbHVnaW5zXyA9IFtdO1xuICB2YXIgcGx1Z2lucyA9IER5Z3JhcGguUExVR0lOUy5jb25jYXQodGhpcy5nZXRPcHRpb24oJ3BsdWdpbnMnKSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgIC8vIHRoZSBwbHVnaW5zIG9wdGlvbiBtYXkgY29udGFpbiBlaXRoZXIgcGx1Z2luIGNsYXNzZXMgb3IgaW5zdGFuY2VzLlxuICAgIC8vIFBsdWdpbiBpbnN0YW5jZXMgY29udGFpbiBhbiBhY3RpdmF0ZSBtZXRob2QuXG4gICAgdmFyIFBsdWdpbiA9IHBsdWdpbnNbaV07ICAvLyBlaXRoZXIgYSBjb25zdHJ1Y3RvciBvciBhbiBpbnN0YW5jZS5cbiAgICB2YXIgcGx1Z2luSW5zdGFuY2U7XG4gICAgaWYgKHR5cGVvZihQbHVnaW4uYWN0aXZhdGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcGx1Z2luSW5zdGFuY2UgPSBQbHVnaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHBsdWdpbkluc3RhbmNlID0gbmV3IFBsdWdpbigpO1xuICAgIH1cblxuICAgIHZhciBwbHVnaW5EaWN0ID0ge1xuICAgICAgcGx1Z2luOiBwbHVnaW5JbnN0YW5jZSxcbiAgICAgIGV2ZW50czoge30sXG4gICAgICBvcHRpb25zOiB7fSxcbiAgICAgIHBsdWdpbk9wdGlvbnM6IHt9XG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVycyA9IHBsdWdpbkluc3RhbmNlLmFjdGl2YXRlKHRoaXMpO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBoYW5kbGVycykge1xuICAgICAgaWYgKCFoYW5kbGVycy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpKSBjb250aW51ZTtcbiAgICAgIC8vIFRPRE8oZGFudmspOiB2YWxpZGF0ZSBldmVudE5hbWUuXG4gICAgICBwbHVnaW5EaWN0LmV2ZW50c1tldmVudE5hbWVdID0gaGFuZGxlcnNbZXZlbnROYW1lXTtcbiAgICB9XG5cbiAgICB0aGlzLnBsdWdpbnNfLnB1c2gocGx1Z2luRGljdCk7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50LCBwbHVnaW5zIGNhbiBubyBsb25nZXIgcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMuXG4gIC8vIENvbnN0cnVjdCBhIG1hcCBmcm9tIGV2ZW50IC0+IG9yZGVyZWQgbGlzdCBvZiBbY2FsbGJhY2ssIHBsdWdpbl0uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wbHVnaW5zXy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbHVnaW5fZGljdCA9IHRoaXMucGx1Z2luc19baV07XG4gICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHBsdWdpbl9kaWN0LmV2ZW50cykge1xuICAgICAgaWYgKCFwbHVnaW5fZGljdC5ldmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkgY29udGludWU7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBwbHVnaW5fZGljdC5ldmVudHNbZXZlbnROYW1lXTtcblxuICAgICAgdmFyIHBhaXIgPSBbcGx1Z2luX2RpY3QucGx1Z2luLCBjYWxsYmFja107XG4gICAgICBpZiAoIShldmVudE5hbWUgaW4gdGhpcy5ldmVudExpc3RlbmVyc18pKSB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnNfW2V2ZW50TmFtZV0gPSBbcGFpcl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzX1tldmVudE5hbWVdLnB1c2gocGFpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5jcmVhdGVEcmFnSW50ZXJmYWNlXygpO1xuXG4gIHRoaXMuc3RhcnRfKCk7XG59O1xuXG4vKipcbiAqIFRyaWdnZXJzIGEgY2FzY2FkZSBvZiBldmVudHMgdG8gdGhlIHZhcmlvdXMgcGx1Z2lucyB3aGljaCBhcmUgaW50ZXJlc3RlZCBpbiB0aGVtLlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBcImRlZmF1bHQgYmVoYXZpb3JcIiBzaG91bGQgYmUgcHJldmVudGVkLCBpLmUuIGlmIG9uZVxuICogb2YgdGhlIGV2ZW50IGxpc3RlbmVycyBjYWxsZWQgZXZlbnQucHJldmVudERlZmF1bHQoKS5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmNhc2NhZGVFdmVudHNfID0gZnVuY3Rpb24obmFtZSwgZXh0cmFfcHJvcHMpIHtcbiAgaWYgKCEobmFtZSBpbiB0aGlzLmV2ZW50TGlzdGVuZXJzXykpIHJldHVybiBmYWxzZTtcblxuICAvLyBRVUVTVElPTjogY2FuIHdlIHVzZSBvYmplY3RzICYgcHJvdG90eXBlcyB0byBzcGVlZCB0aGlzIHVwP1xuICB2YXIgZSA9IHtcbiAgICBkeWdyYXBoOiB0aGlzLFxuICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlLFxuICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghZS5jYW5jZWxhYmxlKSB0aHJvdyBcIkNhbm5vdCBjYWxsIHByZXZlbnREZWZhdWx0IG9uIG5vbi1jYW5jZWxhYmxlIGV2ZW50LlwiO1xuICAgICAgZS5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIHByb3BhZ2F0aW9uU3RvcHBlZDogZmFsc2UsXG4gICAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGUucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHV0aWxzLnVwZGF0ZShlLCBleHRyYV9wcm9wcyk7XG5cbiAgdmFyIGNhbGxiYWNrX3BsdWdpbl9wYWlycyA9IHRoaXMuZXZlbnRMaXN0ZW5lcnNfW25hbWVdO1xuICBpZiAoY2FsbGJhY2tfcGx1Z2luX3BhaXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IGNhbGxiYWNrX3BsdWdpbl9wYWlycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHBsdWdpbiA9IGNhbGxiYWNrX3BsdWdpbl9wYWlyc1tpXVswXTtcbiAgICAgIHZhciBjYWxsYmFjayA9IGNhbGxiYWNrX3BsdWdpbl9wYWlyc1tpXVsxXTtcbiAgICAgIGNhbGxiYWNrLmNhbGwocGx1Z2luLCBlKTtcbiAgICAgIGlmIChlLnByb3BhZ2F0aW9uU3RvcHBlZCkgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBlLmRlZmF1bHRQcmV2ZW50ZWQ7XG59O1xuXG4vKipcbiAqIEZldGNoIGEgcGx1Z2luIGluc3RhbmNlIG9mIGEgcGFydGljdWxhciBjbGFzcy4gT25seSBmb3IgdGVzdGluZy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyFDbGFzc30gdHlwZSBUaGUgdHlwZSBvZiB0aGUgcGx1Z2luLlxuICogQHJldHVybiB7T2JqZWN0fSBJbnN0YW5jZSBvZiB0aGUgcGx1Z2luLCBvciBudWxsIGlmIHRoZXJlIGlzIG5vbmUuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldFBsdWdpbkluc3RhbmNlXyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBsdWdpbnNfLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHAgPSB0aGlzLnBsdWdpbnNfW2ldO1xuICAgIGlmIChwLnBsdWdpbiBpbnN0YW5jZW9mIHR5cGUpIHtcbiAgICAgIHJldHVybiBwLnBsdWdpbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHpvb21lZCBzdGF0dXMgb2YgdGhlIGNoYXJ0IGZvciBvbmUgb3IgYm90aCBheGVzLlxuICpcbiAqIEF4aXMgaXMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyLiBDYW4gYmUgc2V0IHRvICd4JyBvciAneScuXG4gKlxuICogVGhlIHpvb21lZCBzdGF0dXMgZm9yIGFuIGF4aXMgaXMgc2V0IHdoZW5ldmVyIGEgdXNlciB6b29tcyB1c2luZyB0aGUgbW91c2VcbiAqIG9yIHdoZW4gdGhlIGRhdGVXaW5kb3cgb3IgdmFsdWVSYW5nZSBhcmUgdXBkYXRlZC4gRG91YmxlLWNsaWNraW5nIG9yIGNhbGxpbmdcbiAqIHJlc2V0Wm9vbSgpIHJlc2V0cyB0aGUgem9vbSBzdGF0dXMgZm9yIHRoZSBjaGFydC5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuaXNab29tZWQgPSBmdW5jdGlvbihheGlzKSB7XG4gIGNvbnN0IGlzWm9vbWVkWCA9ICEhdGhpcy5kYXRlV2luZG93XztcbiAgaWYgKGF4aXMgPT09ICd4JykgcmV0dXJuIGlzWm9vbWVkWDtcblxuICBjb25zdCBpc1pvb21lZFkgPSB0aGlzLmF4ZXNfLm1hcChheGlzID0+ICEhYXhpcy52YWx1ZVJhbmdlKS5pbmRleE9mKHRydWUpID49IDA7XG4gIGlmIChheGlzID09PSBudWxsIHx8IGF4aXMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBpc1pvb21lZFggfHwgaXNab29tZWRZO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHJldHVybiBpc1pvb21lZFk7XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBheGlzIHBhcmFtZXRlciBpcyBbJHtheGlzfV0gbXVzdCBiZSBudWxsLCAneCcgb3IgJ3knLmApO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBEeWdyYXBoIG9iamVjdCwgaW5jbHVkaW5nIGl0cyBjb250YWluaW5nIElELlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbWFpbmRpdiA9IHRoaXMubWFpbmRpdl87XG4gIHZhciBpZCA9IChtYWluZGl2ICYmIG1haW5kaXYuaWQpID8gbWFpbmRpdi5pZCA6IG1haW5kaXY7XG4gIHJldHVybiBcIltEeWdyYXBoIFwiICsgaWQgKyBcIl1cIjtcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGFuIG9wdGlvbi4gVGhpcyBtYXkgYmUgc2V0IGJ5IHRoZSB1c2VyIChlaXRoZXIgaW4gdGhlXG4gKiBjb25zdHJ1Y3RvciBvciBieSBjYWxsaW5nIHVwZGF0ZU9wdGlvbnMpIG9yIGJ5IGR5Z3JhcGhzLCBhbmQgbWF5IGJlIHNldCB0byBhXG4gKiBwZXItc2VyaWVzIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG9wdGlvbiwgZS5nLiAncm9sbFBlcmlvZCcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Nlcmllc05hbWVdIFRoZSBuYW1lIG9mIHRoZSBzZXJpZXMgdG8gd2hpY2ggdGhlIG9wdGlvblxuICogd2lsbCBiZSBhcHBsaWVkLiBJZiBubyBwZXItc2VyaWVzIHZhbHVlIG9mIHRoaXMgb3B0aW9uIGlzIGF2YWlsYWJsZSwgdGhlblxuICogdGhlIGdsb2JhbCB2YWx1ZSBpcyByZXR1cm5lZC4gVGhpcyBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm4geyAuLi4gfSBUaGUgdmFsdWUgb2YgdGhlIG9wdGlvbi5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuYXR0cl8gPSBmdW5jdGlvbihuYW1lLCBzZXJpZXNOYW1lKSB7XG4gIC8vIEZvciBcInByb2R1Y3Rpb25cIiBjb2RlLCB0aGlzIGdldHMgcmVtb3ZlZCBieSB1Z2xpZnlqcy5cbiAgaWYgKHR5cGVvZihwcm9jZXNzKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mKE9QVElPTlNfUkVGRVJFTkNFKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTXVzdCBpbmNsdWRlIG9wdGlvbnMgcmVmZXJlbmNlIEpTIGZvciB0ZXN0aW5nJyk7XG4gICAgICB9IGVsc2UgaWYgKCFPUFRJT05TX1JFRkVSRU5DRS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdEeWdyYXBocyBpcyB1c2luZyBwcm9wZXJ0eSAnICsgbmFtZSArICcsIHdoaWNoIGhhcyBubyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAnZW50cnkgaW4gdGhlIER5Z3JhcGhzLk9QVElPTlNfUkVGRVJFTkNFIGxpc3RpbmcuJyk7XG4gICAgICAgIC8vIE9ubHkgbG9nIHRoaXMgZXJyb3Igb25jZS5cbiAgICAgICAgT1BUSU9OU19SRUZFUkVOQ0VbbmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWVzTmFtZSA/IHRoaXMuYXR0cmlidXRlc18uZ2V0Rm9yU2VyaWVzKG5hbWUsIHNlcmllc05hbWUpIDogdGhpcy5hdHRyaWJ1dGVzXy5nZXQobmFtZSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgZm9yIGFuIG9wdGlvbiwgYXMgc2V0IGluIHRoZSBjb25zdHJ1Y3RvciBvciB2aWFcbiAqIHVwZGF0ZU9wdGlvbnMuIFlvdSBtYXkgcGFzcyBpbiBhbiAob3B0aW9uYWwpIHNlcmllcyBuYW1lIHRvIGdldCBwZXItc2VyaWVzXG4gKiB2YWx1ZXMgZm9yIHRoZSBvcHRpb24uXG4gKlxuICogQWxsIHZhbHVlcyByZXR1cm5lZCBieSB0aGlzIG1ldGhvZCBzaG91bGQgYmUgY29uc2lkZXJlZCBpbW11dGFibGUuIElmIHlvdVxuICogbW9kaWZ5IHRoZW0sIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IHRoZSBjaGFuZ2VzIHdpbGwgYmUgaG9ub3JlZCBvciB0aGF0XG4gKiBkeWdyYXBocyB3aWxsIHJlbWFpbiBpbiBhIGNvbnNpc3RlbnQgc3RhdGUuIElmIHlvdSB3YW50IHRvIG1vZGlmeSBhbiBvcHRpb24sXG4gKiB1c2UgdXBkYXRlT3B0aW9ucygpIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG9wdGlvbiAoZS5nLiAnc3Ryb2tlV2lkdGgnKVxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfc2VyaWVzTmFtZSBTZXJpZXMgbmFtZSB0byBnZXQgcGVyLXNlcmllcyB2YWx1ZXMuXG4gKiBAcmV0dXJuIHsqfSBUaGUgdmFsdWUgb2YgdGhlIG9wdGlvbi5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZ2V0T3B0aW9uID0gZnVuY3Rpb24obmFtZSwgb3B0X3Nlcmllc05hbWUpIHtcbiAgcmV0dXJuIHRoaXMuYXR0cl8obmFtZSwgb3B0X3Nlcmllc05hbWUpO1xufTtcblxuLyoqXG4gKiBMaWtlIGdldE9wdGlvbigpLCBidXQgc3BlY2lmaWNhbGx5IHJldHVybnMgYSBudW1iZXIuXG4gKiBUaGlzIGlzIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIHdvcmtpbmcgd2l0aCB0aGUgQ2xvc3VyZSBDb21waWxlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBvcHRpb24gKGUuZy4gJ3N0cm9rZVdpZHRoJylcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3Nlcmllc05hbWUgU2VyaWVzIG5hbWUgdG8gZ2V0IHBlci1zZXJpZXMgdmFsdWVzLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmFsdWUgb2YgdGhlIG9wdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldE51bWVyaWNPcHRpb24gPSBmdW5jdGlvbihuYW1lLCBvcHRfc2VyaWVzTmFtZSkge1xuICByZXR1cm4gLyoqIEB0eXBle251bWJlcn0gKi8odGhpcy5nZXRPcHRpb24obmFtZSwgb3B0X3Nlcmllc05hbWUpKTtcbn07XG5cbi8qKlxuICogTGlrZSBnZXRPcHRpb24oKSwgYnV0IHNwZWNpZmljYWxseSByZXR1cm5zIGEgc3RyaW5nLlxuICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciB3b3JraW5nIHdpdGggdGhlIENsb3N1cmUgQ29tcGlsZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgb3B0aW9uIChlLmcuICdzdHJva2VXaWR0aCcpXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zZXJpZXNOYW1lIFNlcmllcyBuYW1lIHRvIGdldCBwZXItc2VyaWVzIHZhbHVlcy5cbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHZhbHVlIG9mIHRoZSBvcHRpb24uXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5nZXRTdHJpbmdPcHRpb24gPSBmdW5jdGlvbihuYW1lLCBvcHRfc2VyaWVzTmFtZSkge1xuICByZXR1cm4gLyoqIEB0eXBle3N0cmluZ30gKi8odGhpcy5nZXRPcHRpb24obmFtZSwgb3B0X3Nlcmllc05hbWUpKTtcbn07XG5cbi8qKlxuICogTGlrZSBnZXRPcHRpb24oKSwgYnV0IHNwZWNpZmljYWxseSByZXR1cm5zIGEgYm9vbGVhbi5cbiAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBmdW5jdGlvbiBmb3Igd29ya2luZyB3aXRoIHRoZSBDbG9zdXJlIENvbXBpbGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG9wdGlvbiAoZS5nLiAnc3Ryb2tlV2lkdGgnKVxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfc2VyaWVzTmFtZSBTZXJpZXMgbmFtZSB0byBnZXQgcGVyLXNlcmllcyB2YWx1ZXMuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUaGUgdmFsdWUgb2YgdGhlIG9wdGlvbi5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldEJvb2xlYW5PcHRpb24gPSBmdW5jdGlvbihuYW1lLCBvcHRfc2VyaWVzTmFtZSkge1xuICByZXR1cm4gLyoqIEB0eXBle2Jvb2xlYW59ICovKHRoaXMuZ2V0T3B0aW9uKG5hbWUsIG9wdF9zZXJpZXNOYW1lKSk7XG59O1xuXG4vKipcbiAqIExpa2UgZ2V0T3B0aW9uKCksIGJ1dCBzcGVjaWZpY2FsbHkgcmV0dXJucyBhIGZ1bmN0aW9uLlxuICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciB3b3JraW5nIHdpdGggdGhlIENsb3N1cmUgQ29tcGlsZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgb3B0aW9uIChlLmcuICdzdHJva2VXaWR0aCcpXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zZXJpZXNOYW1lIFNlcmllcyBuYW1lIHRvIGdldCBwZXItc2VyaWVzIHZhbHVlcy5cbiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLil9IFRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZ2V0RnVuY3Rpb25PcHRpb24gPSBmdW5jdGlvbihuYW1lLCBvcHRfc2VyaWVzTmFtZSkge1xuICByZXR1cm4gLyoqIEB0eXBle2Z1bmN0aW9uKC4uLil9ICovKHRoaXMuZ2V0T3B0aW9uKG5hbWUsIG9wdF9zZXJpZXNOYW1lKSk7XG59O1xuXG5EeWdyYXBoLnByb3RvdHlwZS5nZXRPcHRpb25Gb3JBeGlzID0gZnVuY3Rpb24obmFtZSwgYXhpcykge1xuICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzXy5nZXRGb3JBeGlzKG5hbWUsIGF4aXMpO1xufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGF4aXMgVGhlIG5hbWUgb2YgdGhlIGF4aXMgKGkuZS4gJ3gnLCAneScgb3IgJ3kyJylcbiAqIEByZXR1cm4geyAuLi4gfSBBIGZ1bmN0aW9uIG1hcHBpbmcgc3RyaW5nIC0+IG9wdGlvbiB2YWx1ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5vcHRpb25zVmlld0ZvckF4aXNfID0gZnVuY3Rpb24oYXhpcykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiBmdW5jdGlvbihvcHQpIHtcbiAgICB2YXIgYXhpc19vcHRzID0gc2VsZi51c2VyX2F0dHJzXy5heGVzO1xuICAgIGlmIChheGlzX29wdHMgJiYgYXhpc19vcHRzW2F4aXNdICYmIGF4aXNfb3B0c1theGlzXS5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICByZXR1cm4gYXhpc19vcHRzW2F4aXNdW29wdF07XG4gICAgfVxuXG4gICAgLy8gSSBkb24ndCBsaWtlIHRoYXQgdGhpcyBpcyBpbiBhIHNlY29uZCBzcG90LlxuICAgIGlmIChheGlzID09PSAneCcgJiYgb3B0ID09PSAnbG9nc2NhbGUnKSB7XG4gICAgICAvLyByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICAvLyBUT0RPKGtvbmlnc2JlcmcpOiBwdWxsIHRoZSBkZWZhdWx0IGZyb20gYSBnbG9iYWwgZGVmYXVsdC5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyB1c2VyLXNwZWNpZmllZCBhdHRyaWJ1dGVzIGFsd2F5cyB0cnVtcCBkZWZhdWx0cywgZXZlbiBpZiB0aGV5J3JlIGxlc3NcbiAgICAvLyBzcGVjaWZpYy5cbiAgICBpZiAodHlwZW9mKHNlbGYudXNlcl9hdHRyc19bb3B0XSkgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBzZWxmLnVzZXJfYXR0cnNfW29wdF07XG4gICAgfVxuXG4gICAgYXhpc19vcHRzID0gc2VsZi5hdHRyc18uYXhlcztcbiAgICBpZiAoYXhpc19vcHRzICYmIGF4aXNfb3B0c1theGlzXSAmJiBheGlzX29wdHNbYXhpc10uaGFzT3duUHJvcGVydHkob3B0KSkge1xuICAgICAgcmV0dXJuIGF4aXNfb3B0c1theGlzXVtvcHRdO1xuICAgIH1cbiAgICAvLyBjaGVjayBvbGQtc3R5bGUgYXhpcyBvcHRpb25zXG4gICAgLy8gVE9ETyhkYW52ayk6IGFkZCBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgaWYgZWl0aGVyIG9mIHRoZXNlIG1hdGNoLlxuICAgIGlmIChheGlzID09ICd5JyAmJiBzZWxmLmF4ZXNfWzBdLmhhc093blByb3BlcnR5KG9wdCkpIHtcbiAgICAgIHJldHVybiBzZWxmLmF4ZXNfWzBdW29wdF07XG4gICAgfSBlbHNlIGlmIChheGlzID09ICd5MicgJiYgc2VsZi5heGVzX1sxXS5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICByZXR1cm4gc2VsZi5heGVzX1sxXVtvcHRdO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZi5hdHRyXyhvcHQpO1xuICB9O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHJvbGxpbmcgcGVyaW9kLCBhcyBzZXQgYnkgdGhlIHVzZXIgb3IgYW4gb3B0aW9uLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIHBvaW50cyBpbiB0aGUgcm9sbGluZyB3aW5kb3dcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUucm9sbFBlcmlvZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5yb2xsUGVyaW9kXztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudGx5LXZpc2libGUgeC1yYW5nZS4gVGhpcyBjYW4gYmUgYWZmZWN0ZWQgYnkgem9vbWluZyxcbiAqIHBhbm5pbmcgb3IgYSBjYWxsIHRvIHVwZGF0ZU9wdGlvbnMuXG4gKiBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgYXJyYXk6IFtsZWZ0LCByaWdodF0uXG4gKiBJZiB0aGUgRHlncmFwaCBoYXMgZGF0ZXMgb24gdGhlIHgtYXhpcywgdGhlc2Ugd2lsbCBiZSBtaWxsaXMgc2luY2UgZXBvY2guXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnhBeGlzUmFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZGF0ZVdpbmRvd18gPyB0aGlzLmRhdGVXaW5kb3dfIDogdGhpcy54QXhpc0V4dHJlbWVzKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvd2VyLSBhbmQgdXBwZXItYm91bmQgeC1heGlzIHZhbHVlcyBvZiB0aGUgZGF0YSBzZXQuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnhBeGlzRXh0cmVtZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhZCA9IHRoaXMuZ2V0TnVtZXJpY09wdGlvbigneFJhbmdlUGFkJykgLyB0aGlzLnBsb3R0ZXJfLmFyZWEudztcbiAgaWYgKHRoaXMubnVtUm93cygpID09PSAwKSB7XG4gICAgcmV0dXJuIFswIC0gcGFkLCAxICsgcGFkXTtcbiAgfVxuICB2YXIgbGVmdCA9IHRoaXMucmF3RGF0YV9bMF1bMF07XG4gIHZhciByaWdodCA9IHRoaXMucmF3RGF0YV9bdGhpcy5yYXdEYXRhXy5sZW5ndGggLSAxXVswXTtcbiAgaWYgKHBhZCkge1xuICAgIC8vIE11c3Qga2VlcCB0aGlzIGluIHN5bmMgd2l0aCBkeWdyYXBoLWxheW91dCBfZXZhbHVhdGVMaW1pdHMoKVxuICAgIHZhciByYW5nZSA9IHJpZ2h0IC0gbGVmdDtcbiAgICBsZWZ0IC09IHJhbmdlICogcGFkO1xuICAgIHJpZ2h0ICs9IHJhbmdlICogcGFkO1xuICB9XG4gIHJldHVybiBbbGVmdCwgcmlnaHRdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb3dlci0gYW5kIHVwcGVyLWJvdW5kIHktYXhpcyB2YWx1ZXMgZm9yIGVhY2ggYXhpcy4gVGhlc2UgYXJlXG4gKiB0aGUgcmFuZ2VzIHlvdSdsbCBnZXQgaWYgeW91IGRvdWJsZS1jbGljayB0byB6b29tIG91dCBvciBjYWxsIHJlc2V0Wm9vbSgpLlxuICogVGhlIHJldHVybiB2YWx1ZSBpcyBhbiBhcnJheSBvZiBbbG93LCBoaWdoXSB0dXBsZXMsIG9uZSBmb3IgZWFjaCB5LWF4aXMuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnlBeGlzRXh0cmVtZXMgPSBmdW5jdGlvbigpIHtcbiAgLy8gVE9ETyhkYW52ayk6IHRoaXMgaXMgcHJldHR5IGluZWZmaWNpZW50XG4gIGNvbnN0IHBhY2tlZCA9IHRoaXMuZ2F0aGVyRGF0YXNldHNfKHRoaXMucm9sbGVkU2VyaWVzXywgbnVsbCk7XG4gIGNvbnN0IHsgZXh0cmVtZXMgfSA9IHBhY2tlZDtcbiAgY29uc3Qgc2F2ZUF4ZXMgPSB0aGlzLmF4ZXNfO1xuICB0aGlzLmNvbXB1dGVZQXhpc1Jhbmdlc18oZXh0cmVtZXMpO1xuICBjb25zdCBuZXdBeGVzID0gdGhpcy5heGVzXztcbiAgdGhpcy5heGVzXyA9IHNhdmVBeGVzO1xuICByZXR1cm4gbmV3QXhlcy5tYXAoYXhpcyA9PiBheGlzLmV4dHJlbWVSYW5nZSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudGx5LXZpc2libGUgeS1yYW5nZSBmb3IgYW4gYXhpcy4gVGhpcyBjYW4gYmUgYWZmZWN0ZWQgYnlcbiAqIHpvb21pbmcsIHBhbm5pbmcgb3IgYSBjYWxsIHRvIHVwZGF0ZU9wdGlvbnMuIEF4aXMgaW5kaWNlcyBhcmUgemVyby1iYXNlZC4gSWZcbiAqIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgcmV0dXJucyB0aGUgcmFuZ2Ugb2YgdGhlIGZpcnN0IGF4aXMuXG4gKiBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgYXJyYXk6IFtib3R0b20sIHRvcF0uXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnlBeGlzUmFuZ2UgPSBmdW5jdGlvbihpZHgpIHtcbiAgaWYgKHR5cGVvZihpZHgpID09IFwidW5kZWZpbmVkXCIpIGlkeCA9IDA7XG4gIGlmIChpZHggPCAwIHx8IGlkeCA+PSB0aGlzLmF4ZXNfLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBheGlzID0gdGhpcy5heGVzX1tpZHhdO1xuICByZXR1cm4gWyBheGlzLmNvbXB1dGVkVmFsdWVSYW5nZVswXSwgYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2VbMV0gXTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudGx5LXZpc2libGUgeS1yYW5nZXMgZm9yIGVhY2ggYXhpcy4gVGhpcyBjYW4gYmUgYWZmZWN0ZWQgYnlcbiAqIHpvb21pbmcsIHBhbm5pbmcsIGNhbGxzIHRvIHVwZGF0ZU9wdGlvbnMsIGV0Yy5cbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgW2JvdHRvbSwgdG9wXSBwYWlycywgb25lIGZvciBlYWNoIHktYXhpcy5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUueUF4aXNSYW5nZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXhlc18ubGVuZ3RoOyBpKyspIHtcbiAgICByZXQucHVzaCh0aGlzLnlBeGlzUmFuZ2UoaSkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG4vLyBUT0RPKGRhbnZrKTogdXNlIHRoZXNlIGZ1bmN0aW9ucyB0aHJvdWdob3V0IGR5Z3JhcGhzLlxuLyoqXG4gKiBDb252ZXJ0IGZyb20gZGF0YSBjb29yZGluYXRlcyB0byBjYW52YXMvZGl2IFgvWSBjb29yZGluYXRlcy5cbiAqIElmIHNwZWNpZmllZCwgZG8gdGhpcyBjb252ZXJzaW9uIGZvciB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gb2YgYSBwYXJ0aWN1bGFyXG4gKiBheGlzLiBVc2VzIHRoZSBmaXJzdCBheGlzIGJ5IGRlZmF1bHQuXG4gKiBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgYXJyYXk6IFtYLCBZXVxuICpcbiAqIE5vdGU6IHVzZSB0b0RvbVhDb29yZCBpbnN0ZWFkIG9mIHRvRG9tQ29vcmRzKHgsIG51bGwpIGFuZCB1c2UgdG9Eb21ZQ29vcmRcbiAqIGluc3RlYWQgb2YgdG9Eb21Db29yZHMobnVsbCwgeSwgYXhpcykuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnRvRG9tQ29vcmRzID0gZnVuY3Rpb24oeCwgeSwgYXhpcykge1xuICByZXR1cm4gWyB0aGlzLnRvRG9tWENvb3JkKHgpLCB0aGlzLnRvRG9tWUNvb3JkKHksIGF4aXMpIF07XG59O1xuXG4vKipcbiAqIENvbnZlcnQgZnJvbSBkYXRhIHggY29vcmRpbmF0ZXMgdG8gY2FudmFzL2RpdiBYIGNvb3JkaW5hdGUuXG4gKiBJZiBzcGVjaWZpZWQsIGRvIHRoaXMgY29udmVyc2lvbiBmb3IgdGhlIGNvb3JkaW5hdGUgc3lzdGVtIG9mIGEgcGFydGljdWxhclxuICogYXhpcy5cbiAqIFJldHVybnMgYSBzaW5nbGUgdmFsdWUgb3IgbnVsbCBpZiB4IGlzIG51bGwuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnRvRG9tWENvb3JkID0gZnVuY3Rpb24oeCkge1xuICBpZiAoeCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFyZWEgPSB0aGlzLnBsb3R0ZXJfLmFyZWE7XG4gIHZhciB4UmFuZ2UgPSB0aGlzLnhBeGlzUmFuZ2UoKTtcbiAgcmV0dXJuIGFyZWEueCArICh4IC0geFJhbmdlWzBdKSAvICh4UmFuZ2VbMV0gLSB4UmFuZ2VbMF0pICogYXJlYS53O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGZyb20gZGF0YSB4IGNvb3JkaW5hdGVzIHRvIGNhbnZhcy9kaXYgWSBjb29yZGluYXRlIGFuZCBvcHRpb25hbFxuICogYXhpcy4gVXNlcyB0aGUgZmlyc3QgYXhpcyBieSBkZWZhdWx0LlxuICpcbiAqIHJldHVybnMgYSBzaW5nbGUgdmFsdWUgb3IgbnVsbCBpZiB5IGlzIG51bGwuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnRvRG9tWUNvb3JkID0gZnVuY3Rpb24oeSwgYXhpcykge1xuICB2YXIgcGN0ID0gdGhpcy50b1BlcmNlbnRZQ29vcmQoeSwgYXhpcyk7XG5cbiAgaWYgKHBjdCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBhcmVhID0gdGhpcy5wbG90dGVyXy5hcmVhO1xuICByZXR1cm4gYXJlYS55ICsgcGN0ICogYXJlYS5oO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGZyb20gY2FudmFzL2RpdiBjb29yZHMgdG8gZGF0YSBjb29yZGluYXRlcy5cbiAqIElmIHNwZWNpZmllZCwgZG8gdGhpcyBjb252ZXJzaW9uIGZvciB0aGUgY29vcmRpbmF0ZSBzeXN0ZW0gb2YgYSBwYXJ0aWN1bGFyXG4gKiBheGlzLiBVc2VzIHRoZSBmaXJzdCBheGlzIGJ5IGRlZmF1bHQuXG4gKiBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgYXJyYXk6IFtYLCBZXS5cbiAqXG4gKiBOb3RlOiB1c2UgdG9EYXRhWENvb3JkIGluc3RlYWQgb2YgdG9EYXRhQ29vcmRzKHgsIG51bGwpIGFuZCB1c2UgdG9EYXRhWUNvb3JkXG4gKiBpbnN0ZWFkIG9mIHRvRGF0YUNvb3JkcyhudWxsLCB5LCBheGlzKS5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUudG9EYXRhQ29vcmRzID0gZnVuY3Rpb24oeCwgeSwgYXhpcykge1xuICByZXR1cm4gWyB0aGlzLnRvRGF0YVhDb29yZCh4KSwgdGhpcy50b0RhdGFZQ29vcmQoeSwgYXhpcykgXTtcbn07XG5cbi8qKlxuICogQ29udmVydCBmcm9tIGNhbnZhcy9kaXYgeCBjb29yZGluYXRlIHRvIGRhdGEgY29vcmRpbmF0ZS5cbiAqXG4gKiBJZiB4IGlzIG51bGwsIHRoaXMgcmV0dXJucyBudWxsLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS50b0RhdGFYQ29vcmQgPSBmdW5jdGlvbih4KSB7XG4gIGlmICh4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXJlYSA9IHRoaXMucGxvdHRlcl8uYXJlYTtcbiAgdmFyIHhSYW5nZSA9IHRoaXMueEF4aXNSYW5nZSgpO1xuXG4gIGlmICghdGhpcy5hdHRyaWJ1dGVzXy5nZXRGb3JBeGlzKFwibG9nc2NhbGVcIiwgJ3gnKSkge1xuICAgIHJldHVybiB4UmFuZ2VbMF0gKyAoeCAtIGFyZWEueCkgLyBhcmVhLncgKiAoeFJhbmdlWzFdIC0geFJhbmdlWzBdKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGN0ID0gKHggLSBhcmVhLngpIC8gYXJlYS53O1xuICAgIHJldHVybiB1dGlscy5sb2dSYW5nZUZyYWN0aW9uKHhSYW5nZVswXSwgeFJhbmdlWzFdLCBwY3QpO1xuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnQgZnJvbSBjYW52YXMvZGl2IHkgY29vcmQgdG8gdmFsdWUuXG4gKlxuICogSWYgeSBpcyBudWxsLCB0aGlzIHJldHVybnMgbnVsbC5cbiAqIGlmIGF4aXMgaXMgbnVsbCwgdGhpcyB1c2VzIHRoZSBmaXJzdCBheGlzLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS50b0RhdGFZQ29vcmQgPSBmdW5jdGlvbih5LCBheGlzKSB7XG4gIGlmICh5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXJlYSA9IHRoaXMucGxvdHRlcl8uYXJlYTtcbiAgdmFyIHlSYW5nZSA9IHRoaXMueUF4aXNSYW5nZShheGlzKTtcblxuICBpZiAodHlwZW9mKGF4aXMpID09IFwidW5kZWZpbmVkXCIpIGF4aXMgPSAwO1xuICBpZiAoIXRoaXMuYXR0cmlidXRlc18uZ2V0Rm9yQXhpcyhcImxvZ3NjYWxlXCIsIGF4aXMpKSB7XG4gICAgcmV0dXJuIHlSYW5nZVswXSArIChhcmVhLnkgKyBhcmVhLmggLSB5KSAvIGFyZWEuaCAqICh5UmFuZ2VbMV0gLSB5UmFuZ2VbMF0pO1xuICB9IGVsc2Uge1xuICAgIC8vIENvbXB1dGluZyB0aGUgaW52ZXJzZSBvZiB0b0RvbUNvb3JkLlxuICAgIHZhciBwY3QgPSAoeSAtIGFyZWEueSkgLyBhcmVhLmg7XG4gICAgLy8gTm90ZSByZXZlcnNlZCB5UmFuZ2UsIHkxIGlzIG9uIHRvcCB3aXRoIHBjdD09MC5cbiAgICByZXR1cm4gdXRpbHMubG9nUmFuZ2VGcmFjdGlvbih5UmFuZ2VbMV0sIHlSYW5nZVswXSwgcGN0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHkgZm9yIGFuIGF4aXMgdG8gYSBwZXJjZW50YWdlIGZyb20gdGhlIHRvcCB0byB0aGVcbiAqIGJvdHRvbSBvZiB0aGUgZHJhd2luZyBhcmVhLlxuICpcbiAqIElmIHRoZSBjb29yZGluYXRlIHJlcHJlc2VudHMgYSB2YWx1ZSB2aXNpYmxlIG9uIHRoZSBjYW52YXMsIHRoZW5cbiAqIHRoZSB2YWx1ZSB3aWxsIGJlIGJldHdlZW4gMCBhbmQgMSwgd2hlcmUgMCBpcyB0aGUgdG9wIG9mIHRoZSBjYW52YXMuXG4gKiBIb3dldmVyLCB0aGlzIG1ldGhvZCB3aWxsIHJldHVybiB2YWx1ZXMgb3V0c2lkZSB0aGUgcmFuZ2UsIGFzXG4gKiB2YWx1ZXMgY2FuIGZhbGwgb3V0c2lkZSB0aGUgY2FudmFzLlxuICpcbiAqIElmIHkgaXMgbnVsbCwgdGhpcyByZXR1cm5zIG51bGwuXG4gKiBpZiBheGlzIGlzIG51bGwsIHRoaXMgdXNlcyB0aGUgZmlyc3QgYXhpcy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0geSBUaGUgZGF0YSB5LWNvb3JkaW5hdGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW2F4aXNdIFRoZSBheGlzIG51bWJlciBvbiB3aGljaCB0aGUgZGF0YSBjb29yZGluYXRlIGxpdmVzLlxuICogQHJldHVybiB7bnVtYmVyfSBBIGZyYWN0aW9uIGluIFswLCAxXSB3aGVyZSAwID0gdGhlIHRvcCBlZGdlLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS50b1BlcmNlbnRZQ29vcmQgPSBmdW5jdGlvbih5LCBheGlzKSB7XG4gIGlmICh5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHR5cGVvZihheGlzKSA9PSBcInVuZGVmaW5lZFwiKSBheGlzID0gMDtcblxuICB2YXIgeVJhbmdlID0gdGhpcy55QXhpc1JhbmdlKGF4aXMpO1xuXG4gIHZhciBwY3Q7XG4gIHZhciBsb2dzY2FsZSA9IHRoaXMuYXR0cmlidXRlc18uZ2V0Rm9yQXhpcyhcImxvZ3NjYWxlXCIsIGF4aXMpO1xuICBpZiAobG9nc2NhbGUpIHtcbiAgICB2YXIgbG9ncjAgPSB1dGlscy5sb2cxMCh5UmFuZ2VbMF0pO1xuICAgIHZhciBsb2dyMSA9IHV0aWxzLmxvZzEwKHlSYW5nZVsxXSk7XG4gICAgcGN0ID0gKGxvZ3IxIC0gdXRpbHMubG9nMTAoeSkpIC8gKGxvZ3IxIC0gbG9ncjApO1xuICB9IGVsc2Uge1xuICAgIC8vIHlSYW5nZVsxXSAtIHkgaXMgdW5pdCBkaXN0YW5jZSBmcm9tIHRoZSBib3R0b20uXG4gICAgLy8geVJhbmdlWzFdIC0geVJhbmdlWzBdIGlzIHRoZSBzY2FsZSBvZiB0aGUgcmFuZ2UuXG4gICAgLy8gKHlSYW5nZVsxXSAtIHkpIC8gKHlSYW5nZVsxXSAtIHlSYW5nZVswXSkgaXMgdGhlICUgZnJvbSB0aGUgYm90dG9tLlxuICAgIHBjdCA9ICh5UmFuZ2VbMV0gLSB5KSAvICh5UmFuZ2VbMV0gLSB5UmFuZ2VbMF0pO1xuICB9XG4gIHJldHVybiBwY3Q7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIHggdmFsdWUgdG8gYSBwZXJjZW50YWdlIGZyb20gdGhlIGxlZnQgdG8gdGhlIHJpZ2h0IG9mXG4gKiB0aGUgZHJhd2luZyBhcmVhLlxuICpcbiAqIElmIHRoZSBjb29yZGluYXRlIHJlcHJlc2VudHMgYSB2YWx1ZSB2aXNpYmxlIG9uIHRoZSBjYW52YXMsIHRoZW5cbiAqIHRoZSB2YWx1ZSB3aWxsIGJlIGJldHdlZW4gMCBhbmQgMSwgd2hlcmUgMCBpcyB0aGUgbGVmdCBvZiB0aGUgY2FudmFzLlxuICogSG93ZXZlciwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdmFsdWVzIG91dHNpZGUgdGhlIHJhbmdlLCBhc1xuICogdmFsdWVzIGNhbiBmYWxsIG91dHNpZGUgdGhlIGNhbnZhcy5cbiAqXG4gKiBJZiB4IGlzIG51bGwsIHRoaXMgcmV0dXJucyBudWxsLlxuICogQHBhcmFtIHtudW1iZXJ9IHggVGhlIGRhdGEgeC1jb29yZGluYXRlLlxuICogQHJldHVybiB7bnVtYmVyfSBBIGZyYWN0aW9uIGluIFswLCAxXSB3aGVyZSAwID0gdGhlIGxlZnQgZWRnZS5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUudG9QZXJjZW50WENvb3JkID0gZnVuY3Rpb24oeCkge1xuICBpZiAoeCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHhSYW5nZSA9IHRoaXMueEF4aXNSYW5nZSgpO1xuICB2YXIgcGN0O1xuICB2YXIgbG9nc2NhbGUgPSB0aGlzLmF0dHJpYnV0ZXNfLmdldEZvckF4aXMoXCJsb2dzY2FsZVwiLCAneCcpIDtcbiAgaWYgKGxvZ3NjYWxlID09PSB0cnVlKSB7ICAvLyBsb2dzY2FsZSBjYW4gYmUgbnVsbCBzbyB3ZSB0ZXN0IGZvciB0cnVlIGV4cGxpY2l0bHkuXG4gICAgdmFyIGxvZ3IwID0gdXRpbHMubG9nMTAoeFJhbmdlWzBdKTtcbiAgICB2YXIgbG9ncjEgPSB1dGlscy5sb2cxMCh4UmFuZ2VbMV0pO1xuICAgIHBjdCA9ICh1dGlscy5sb2cxMCh4KSAtIGxvZ3IwKSAvIChsb2dyMSAtIGxvZ3IwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB4IC0geFJhbmdlWzBdIGlzIHVuaXQgZGlzdGFuY2UgZnJvbSB0aGUgbGVmdC5cbiAgICAvLyB4UmFuZ2VbMV0gLSB4UmFuZ2VbMF0gaXMgdGhlIHNjYWxlIG9mIHRoZSByYW5nZS5cbiAgICAvLyBUaGUgZnVsbCBleHByZXNzaW9uIGJlbG93IGlzIHRoZSAlIGZyb20gdGhlIGxlZnQuXG4gICAgcGN0ID0gKHggLSB4UmFuZ2VbMF0pIC8gKHhSYW5nZVsxXSAtIHhSYW5nZVswXSk7XG4gIH1cbiAgcmV0dXJuIHBjdDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgKGluY2x1ZGluZyB0aGUgaW5kZXBlbmRlbnQgdmFyaWFibGUpLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNvbHVtbnMuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLm51bUNvbHVtbnMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnJhd0RhdGFfKSByZXR1cm4gMDtcbiAgcmV0dXJuIHRoaXMucmF3RGF0YV9bMF0gPyB0aGlzLnJhd0RhdGFfWzBdLmxlbmd0aCA6IHRoaXMuYXR0cl8oXCJsYWJlbHNcIikubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygcm93cyAoZXhjbHVkaW5nIGFueSBoZWFkZXIvbGFiZWwgcm93KS5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiByb3dzLCBsZXNzIGFueSBoZWFkZXIuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLm51bVJvd3MgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnJhd0RhdGFfKSByZXR1cm4gMDtcbiAgcmV0dXJuIHRoaXMucmF3RGF0YV8ubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBpbiB0aGUgZ2l2ZW4gcm93IGFuZCBjb2x1bW4uIElmIHRoZSByb3cgYW5kIGNvbHVtbiBleGNlZWRcbiAqIHRoZSBib3VuZHMgb24gdGhlIGRhdGEsIHJldHVybnMgbnVsbC4gQWxzbyByZXR1cm5zIG51bGwgaWYgdGhlIHZhbHVlIGlzXG4gKiBtaXNzaW5nLlxuICogQHBhcmFtIHtudW1iZXJ9IHJvdyBUaGUgcm93IG51bWJlciBvZiB0aGUgZGF0YSAoMC1iYXNlZCkuIFJvdyAwIGlzIHRoZVxuICogICAgIGZpcnN0IHJvdyBvZiBkYXRhLCBub3QgYSBoZWFkZXIgcm93LlxuICogQHBhcmFtIHtudW1iZXJ9IGNvbCBUaGUgY29sdW1uIG51bWJlciBvZiB0aGUgZGF0YSAoMC1iYXNlZClcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHZhbHVlIGluIHRoZSBzcGVjaWZpZWQgY2VsbCBvciBudWxsIGlmIHRoZSByb3cvY29sXG4gKiAgICAgd2VyZSBvdXQgb2YgcmFuZ2UuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24ocm93LCBjb2wpIHtcbiAgaWYgKHJvdyA8IDAgfHwgcm93ID4gdGhpcy5yYXdEYXRhXy5sZW5ndGgpIHJldHVybiBudWxsO1xuICBpZiAoY29sIDwgMCB8fCBjb2wgPiB0aGlzLnJhd0RhdGFfW3Jvd10ubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4gdGhpcy5yYXdEYXRhX1tyb3ddW2NvbF07XG59O1xuXG4vKipcbiAqIEdlbmVyYXRlcyBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIHRoZSBEeWdyYXBoOiBhIGNvbnRhaW5pbmcgZGl2LCBhIGRpdiB0b1xuICogZGlzcGxheSB0aGUgY3VycmVudCBwb2ludCwgYW5kIGEgdGV4dGJveCB0byBhZGp1c3QgdGhlIHJvbGxpbmcgYXZlcmFnZVxuICogcGVyaW9kLiBBbHNvIGNyZWF0ZXMgdGhlIFJlbmRlcmVyL0xheW91dCBlbGVtZW50cy5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmNyZWF0ZUludGVyZmFjZV8gPSBmdW5jdGlvbigpIHtcbiAgLy8gQ3JlYXRlIHRoZSBhbGwtZW5jbG9zaW5nIGdyYXBoIGRpdlxuICB2YXIgZW5jbG9zaW5nID0gdGhpcy5tYWluZGl2XztcblxuICB0aGlzLmdyYXBoRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAvLyBUT0RPKGRhbnZrKTogYW55IG90aGVyIHN0eWxlcyB0aGF0IGFyZSB1c2VmdWwgdG8gc2V0IGhlcmU/XG4gIHRoaXMuZ3JhcGhEaXYuc3R5bGUudGV4dEFsaWduID0gJ2xlZnQnOyAgLy8gVGhpcyBpcyBhIENTUyBcInJlc2V0XCJcbiAgdGhpcy5ncmFwaERpdi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gIGVuY2xvc2luZy5hcHBlbmRDaGlsZCh0aGlzLmdyYXBoRGl2KTtcblxuICAvLyBDcmVhdGUgdGhlIGNhbnZhcyBmb3IgaW50ZXJhY3RpdmUgcGFydHMgb2YgdGhlIGNoYXJ0LlxuICB0aGlzLmNhbnZhc18gPSB1dGlscy5jcmVhdGVDYW52YXMoKTtcbiAgdGhpcy5jYW52YXNfLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXG4gIC8vIC4uLiBhbmQgZm9yIHN0YXRpYyBwYXJ0cyBvZiB0aGUgY2hhcnQuXG4gIHRoaXMuaGlkZGVuXyA9IHRoaXMuY3JlYXRlUGxvdEtpdENhbnZhc18odGhpcy5jYW52YXNfKTtcblxuICB0aGlzLmNhbnZhc19jdHhfID0gdXRpbHMuZ2V0Q29udGV4dCh0aGlzLmNhbnZhc18pO1xuICB0aGlzLmhpZGRlbl9jdHhfID0gdXRpbHMuZ2V0Q29udGV4dCh0aGlzLmhpZGRlbl8pO1xuXG4gIHRoaXMucmVzaXplRWxlbWVudHNfKCk7XG5cbiAgLy8gVGhlIGludGVyYWN0aXZlIHBhcnRzIG9mIHRoZSBncmFwaCBhcmUgZHJhd24gb24gdG9wIG9mIHRoZSBjaGFydC5cbiAgdGhpcy5ncmFwaERpdi5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlbl8pO1xuICB0aGlzLmdyYXBoRGl2LmFwcGVuZENoaWxkKHRoaXMuY2FudmFzXyk7XG4gIHRoaXMubW91c2VFdmVudEVsZW1lbnRfID0gdGhpcy5jcmVhdGVNb3VzZUV2ZW50RWxlbWVudF8oKTtcblxuICAvLyBDcmVhdGUgdGhlIGdyYXBoZXJcbiAgdGhpcy5sYXlvdXRfID0gbmV3IER5Z3JhcGhMYXlvdXQodGhpcyk7XG5cbiAgdmFyIGR5Z3JhcGggPSB0aGlzO1xuXG4gIHRoaXMubW91c2VNb3ZlSGFuZGxlcl8gPSBmdW5jdGlvbihlKSB7XG4gICAgZHlncmFwaC5tb3VzZU1vdmVfKGUpO1xuICB9O1xuXG4gIHRoaXMubW91c2VPdXRIYW5kbGVyXyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAvLyBUaGUgbW91c2UgaGFzIGxlZnQgdGhlIGNoYXJ0IGlmOlxuICAgIC8vIDEuIGUudGFyZ2V0IGlzIGluc2lkZSB0aGUgY2hhcnRcbiAgICAvLyAyLiBlLnJlbGF0ZWRUYXJnZXQgaXMgb3V0c2lkZSB0aGUgY2hhcnRcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5mcm9tRWxlbWVudDtcbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9IGUucmVsYXRlZFRhcmdldCB8fCBlLnRvRWxlbWVudDtcbiAgICBpZiAodXRpbHMuaXNOb2RlQ29udGFpbmVkQnkodGFyZ2V0LCBkeWdyYXBoLmdyYXBoRGl2KSAmJlxuICAgICAgICAhdXRpbHMuaXNOb2RlQ29udGFpbmVkQnkocmVsYXRlZFRhcmdldCwgZHlncmFwaC5ncmFwaERpdikpIHtcbiAgICAgIGR5Z3JhcGgubW91c2VPdXRfKGUpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmFkZEFuZFRyYWNrRXZlbnQod2luZG93LCAnbW91c2VvdXQnLCB0aGlzLm1vdXNlT3V0SGFuZGxlcl8pO1xuICB0aGlzLmFkZEFuZFRyYWNrRXZlbnQodGhpcy5tb3VzZUV2ZW50RWxlbWVudF8sICdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlTW92ZUhhbmRsZXJfKTtcblxuICAvLyBEb24ndCByZWNyZWF0ZSBhbmQgcmVnaXN0ZXIgdGhlIHJlc2l6ZSBoYW5kbGVyIG9uIHN1YnNlcXVlbnQgY2FsbHMuXG4gIC8vIFRoaXMgaGFwcGVucyB3aGVuIHRoZSBncmFwaCBpcyByZXNpemVkLlxuICBpZiAoIXRoaXMucmVzaXplSGFuZGxlcl8pIHtcbiAgICB0aGlzLnJlc2l6ZUhhbmRsZXJfID0gZnVuY3Rpb24oZSkge1xuICAgICAgZHlncmFwaC5yZXNpemUoKTtcbiAgICB9O1xuXG4gICAgLy8gVXBkYXRlIHdoZW4gdGhlIHdpbmRvdyBpcyByZXNpemVkLlxuICAgIC8vIFRPRE8oZGFudmspOiBkcm9wIGZyYW1lcyBkZXBlbmRpbmcgb24gY29tcGxleGl0eSBvZiB0aGUgY2hhcnQuXG4gICAgdGhpcy5hZGRBbmRUcmFja0V2ZW50KHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMucmVzaXplSGFuZGxlcl8pO1xuICB9XG59O1xuXG5EeWdyYXBoLnByb3RvdHlwZS5yZXNpemVFbGVtZW50c18gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5ncmFwaERpdi5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGhfICsgXCJweFwiO1xuICB0aGlzLmdyYXBoRGl2LnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0XyArIFwicHhcIjtcblxuICB2YXIgcGl4ZWxSYXRpb09wdGlvbiA9IHRoaXMuZ2V0TnVtZXJpY09wdGlvbigncGl4ZWxSYXRpbycpXG5cbiAgdmFyIGNhbnZhc1NjYWxlID0gcGl4ZWxSYXRpb09wdGlvbiB8fCB1dGlscy5nZXRDb250ZXh0UGl4ZWxSYXRpbyh0aGlzLmNhbnZhc19jdHhfKTtcbiAgdGhpcy5jYW52YXNfLndpZHRoID0gdGhpcy53aWR0aF8gKiBjYW52YXNTY2FsZTtcbiAgdGhpcy5jYW52YXNfLmhlaWdodCA9IHRoaXMuaGVpZ2h0XyAqIGNhbnZhc1NjYWxlO1xuICB0aGlzLmNhbnZhc18uc3R5bGUud2lkdGggPSB0aGlzLndpZHRoXyArIFwicHhcIjsgICAgLy8gZm9yIElFXG4gIHRoaXMuY2FudmFzXy5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodF8gKyBcInB4XCI7ICAvLyBmb3IgSUVcbiAgaWYgKGNhbnZhc1NjYWxlICE9PSAxKSB7XG4gICAgdGhpcy5jYW52YXNfY3R4Xy5zY2FsZShjYW52YXNTY2FsZSwgY2FudmFzU2NhbGUpO1xuICB9XG5cbiAgdmFyIGhpZGRlblNjYWxlID0gcGl4ZWxSYXRpb09wdGlvbiB8fCB1dGlscy5nZXRDb250ZXh0UGl4ZWxSYXRpbyh0aGlzLmhpZGRlbl9jdHhfKTtcbiAgdGhpcy5oaWRkZW5fLndpZHRoID0gdGhpcy53aWR0aF8gKiBoaWRkZW5TY2FsZTtcbiAgdGhpcy5oaWRkZW5fLmhlaWdodCA9IHRoaXMuaGVpZ2h0XyAqIGhpZGRlblNjYWxlO1xuICB0aGlzLmhpZGRlbl8uc3R5bGUud2lkdGggPSB0aGlzLndpZHRoXyArIFwicHhcIjsgICAgLy8gZm9yIElFXG4gIHRoaXMuaGlkZGVuXy5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodF8gKyBcInB4XCI7ICAvLyBmb3IgSUVcbiAgaWYgKGhpZGRlblNjYWxlICE9PSAxKSB7XG4gICAgdGhpcy5oaWRkZW5fY3R4Xy5zY2FsZShoaWRkZW5TY2FsZSwgaGlkZGVuU2NhbGUpO1xuICB9XG59O1xuXG4vKipcbiAqIERldGFjaCBET00gZWxlbWVudHMgaW4gdGhlIGR5Z3JhcGggYW5kIG51bGwgb3V0IGFsbCBkYXRhIHJlZmVyZW5jZXMuXG4gKiBDYWxsaW5nIHRoaXMgd2hlbiB5b3UncmUgZG9uZSB3aXRoIGEgZHlncmFwaCBjYW4gZHJhbWF0aWNhbGx5IHJlZHVjZSBtZW1vcnlcbiAqIHVzYWdlLiBTZWUsIGUuZy4sIHRoZSB0ZXN0cy9wZXJmLmh0bWwgZXhhbXBsZS5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmNhbnZhc19jdHhfLnJlc3RvcmUoKTtcbiAgdGhpcy5oaWRkZW5fY3R4Xy5yZXN0b3JlKCk7XG5cbiAgLy8gRGVzdHJveSBhbnkgcGx1Z2lucywgaW4gdGhlIHJldmVyc2Ugb3JkZXIgdGhhdCB0aGV5IHdlcmUgcmVnaXN0ZXJlZC5cbiAgZm9yICh2YXIgaSA9IHRoaXMucGx1Z2luc18ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcCA9IHRoaXMucGx1Z2luc18ucG9wKCk7XG4gICAgaWYgKHAucGx1Z2luLmRlc3Ryb3kpIHAucGx1Z2luLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHZhciByZW1vdmVSZWN1cnNpdmUgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICByZW1vdmVSZWN1cnNpdmUobm9kZS5maXJzdENoaWxkKTtcbiAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5maXJzdENoaWxkKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5yZW1vdmVUcmFja2VkRXZlbnRzXygpO1xuXG4gIC8vIHJlbW92ZSBtb3VzZSBldmVudCBoYW5kbGVycyAoVGhpcyBtYXkgbm90IGJlIG5lY2Vzc2FyeSBhbnltb3JlKVxuICB1dGlscy5yZW1vdmVFdmVudCh3aW5kb3csICdtb3VzZW91dCcsIHRoaXMubW91c2VPdXRIYW5kbGVyXyk7XG4gIHV0aWxzLnJlbW92ZUV2ZW50KHRoaXMubW91c2VFdmVudEVsZW1lbnRfLCAnbW91c2Vtb3ZlJywgdGhpcy5tb3VzZU1vdmVIYW5kbGVyXyk7XG5cbiAgLy8gcmVtb3ZlIHdpbmRvdyBoYW5kbGVyc1xuICB1dGlscy5yZW1vdmVFdmVudCh3aW5kb3csJ3Jlc2l6ZScsIHRoaXMucmVzaXplSGFuZGxlcl8pO1xuICB0aGlzLnJlc2l6ZUhhbmRsZXJfID0gbnVsbDtcblxuICByZW1vdmVSZWN1cnNpdmUodGhpcy5tYWluZGl2Xyk7XG5cbiAgdmFyIG51bGxPdXQgPSBmdW5jdGlvbihvYmopIHtcbiAgICBmb3IgKHZhciBuIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZihvYmpbbl0pID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvYmpbbl0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLy8gVGhlc2UgbWF5IG5vdCBhbGwgYmUgbmVjZXNzYXJ5LCBidXQgaXQgY2FuJ3QgaHVydC4uLlxuICBudWxsT3V0KHRoaXMubGF5b3V0Xyk7XG4gIG51bGxPdXQodGhpcy5wbG90dGVyXyk7XG4gIG51bGxPdXQodGhpcyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgdGhlIGNhbnZhcyBvbiB3aGljaCB0aGUgY2hhcnQgd2lsbCBiZSBkcmF3bi4gT25seSB0aGUgUmVuZGVyZXIgZXZlclxuICogZHJhd3Mgb24gdGhpcyBwYXJ0aWN1bGFyIGNhbnZhcy4gQWxsIER5Z3JhcGggd29yayAoaS5lLiBkcmF3aW5nIGhvdmVyIGRvdHNcbiAqIG9yIHRoZSB6b29tIHJlY3RhbmdsZXMpIGlzIGRvbmUgb24gdGhpcy5jYW52YXNfLlxuICogQHBhcmFtIHtPYmplY3R9IGNhbnZhcyBUaGUgRHlncmFwaCBjYW52YXMgb3ZlciB3aGljaCB0byBvdmVybGF5IHRoZSBwbG90XG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXdseS1jcmVhdGVkIGNhbnZhc1xuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuY3JlYXRlUGxvdEtpdENhbnZhc18gPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgdmFyIGggPSB1dGlscy5jcmVhdGVDYW52YXMoKTtcbiAgaC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgLy8gVE9ETyhkYW52ayk6IGggc2hvdWxkIGJlIG9mZnNldCBmcm9tIGNhbnZhcy4gY2FudmFzIG5lZWRzIHRvIGluY2x1ZGVcbiAgLy8gc29tZSBleHRyYSBhcmVhIHRvIG1ha2UgaXQgZWFzaWVyIHRvIHpvb20gaW4gb24gdGhlIGZhciBsZWZ0IGFuZCBmYXJcbiAgLy8gcmlnaHQuIGggbmVlZHMgdG8gYmUgcHJlY2lzZWx5IHRoZSBwbG90IGFyZWEsIHNvIHRoYXQgY2xpcHBpbmcgb2NjdXJzLlxuICBoLnN0eWxlLnRvcCA9IGNhbnZhcy5zdHlsZS50b3A7XG4gIGguc3R5bGUubGVmdCA9IGNhbnZhcy5zdHlsZS5sZWZ0O1xuICBoLndpZHRoID0gdGhpcy53aWR0aF87XG4gIGguaGVpZ2h0ID0gdGhpcy5oZWlnaHRfO1xuICBoLnN0eWxlLndpZHRoID0gdGhpcy53aWR0aF8gKyBcInB4XCI7ICAgIC8vIGZvciBJRVxuICBoLnN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0XyArIFwicHhcIjsgIC8vIGZvciBJRVxuICByZXR1cm4gaDtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvdmVybGF5IGVsZW1lbnQgdXNlZCB0byBoYW5kbGUgbW91c2UgZXZlbnRzLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgbW91c2UgZXZlbnQgZWxlbWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmNyZWF0ZU1vdXNlRXZlbnRFbGVtZW50XyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jYW52YXNfO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHNldCBvZiBkaXN0aW5jdCBjb2xvcnMgZm9yIHRoZSBkYXRhIHNlcmllcy4gVGhpcyBpcyBkb25lIHdpdGggYVxuICogY29sb3Igd2hlZWwuIFNhdHVyYXRpb24vVmFsdWUgYXJlIGN1c3RvbWl6YWJsZSwgYW5kIHRoZSBodWUgaXNcbiAqIGVxdWFsbHktc3BhY2VkIGFyb3VuZCB0aGUgY29sb3Igd2hlZWwuIElmIGEgY3VzdG9tIHNldCBvZiBjb2xvcnMgaXNcbiAqIHNwZWNpZmllZCwgdGhhdCBpcyB1c2VkIGluc3RlYWQuXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5zZXRDb2xvcnNfID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICB2YXIgbnVtID0gbGFiZWxzLmxlbmd0aCAtIDE7XG4gIHRoaXMuY29sb3JzXyA9IFtdO1xuICB0aGlzLmNvbG9yc01hcF8gPSB7fTtcblxuICAvLyBUaGVzZSBhcmUgdXNlZCBmb3Igd2hlbiBubyBjdXN0b20gY29sb3JzIGFyZSBzcGVjaWZpZWQuXG4gIHZhciBzYXQgPSB0aGlzLmdldE51bWVyaWNPcHRpb24oJ2NvbG9yU2F0dXJhdGlvbicpIHx8IDEuMDtcbiAgdmFyIHZhbCA9IHRoaXMuZ2V0TnVtZXJpY09wdGlvbignY29sb3JWYWx1ZScpIHx8IDAuNTtcbiAgdmFyIGhhbGYgPSBNYXRoLmNlaWwobnVtIC8gMik7XG5cbiAgdmFyIGNvbG9ycyA9IHRoaXMuZ2V0T3B0aW9uKCdjb2xvcnMnKTtcbiAgdmFyIHZpc2liaWxpdHkgPSB0aGlzLnZpc2liaWxpdHkoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgIGlmICghdmlzaWJpbGl0eVtpXSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBsYWJlbCA9IGxhYmVsc1tpICsgMV07XG4gICAgdmFyIGNvbG9yU3RyID0gdGhpcy5hdHRyaWJ1dGVzXy5nZXRGb3JTZXJpZXMoJ2NvbG9yJywgbGFiZWwpO1xuICAgIGlmICghY29sb3JTdHIpIHtcbiAgICAgIGlmIChjb2xvcnMpIHtcbiAgICAgICAgY29sb3JTdHIgPSBjb2xvcnNbaSAlIGNvbG9ycy5sZW5ndGhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYWx0ZXJuYXRlIGNvbG9ycyBmb3IgaGlnaCBjb250cmFzdC5cbiAgICAgICAgdmFyIGlkeCA9IGkgJSAyID8gKGhhbGYgKyAoaSArIDEpLyAyKSA6IE1hdGguY2VpbCgoaSArIDEpIC8gMik7XG4gICAgICAgIHZhciBodWUgPSAoMS4wICogaWR4IC8gKDEgKyBudW0pKTtcbiAgICAgICAgY29sb3JTdHIgPSB1dGlscy5oc3ZUb1JHQihodWUsIHNhdCwgdmFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb2xvcnNfLnB1c2goY29sb3JTdHIpO1xuICAgIHRoaXMuY29sb3JzTWFwX1tsYWJlbF0gPSBjb2xvclN0cjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGxpc3Qgb2YgY29sb3JzLiBUaGlzIGlzIGVpdGhlciB0aGUgbGlzdCBvZiBjb2xvcnMgcGFzc2VkIGluIHRoZVxuICogYXR0cmlidXRlcyBvciB0aGUgYXV0b2dlbmVyYXRlZCBsaXN0IG9mIHJnYihyLGcsYikgc3RyaW5ncy5cbiAqIFRoaXMgZG9lcyBub3QgcmV0dXJuIGNvbG9ycyBmb3IgaW52aXNpYmxlIHNlcmllcy5cbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBUaGUgbGlzdCBvZiBjb2xvcnMuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldENvbG9ycyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jb2xvcnNfO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZmV3IGF0dHJpYnV0ZXMgb2YgYSBzZXJpZXMsIGkuZS4gaXRzIGNvbG9yLCBpdHMgdmlzaWJpbGl0eSwgd2hpY2hcbiAqIGF4aXMgaXQncyBhc3NpZ25lZCB0bywgYW5kIGl0cyBjb2x1bW4gaW4gdGhlIG9yaWdpbmFsIGRhdGEuXG4gKiBSZXR1cm5zIG51bGwgaWYgdGhlIHNlcmllcyBkb2VzIG5vdCBleGlzdC5cbiAqIE90aGVyd2lzZSwgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBjb2x1bW4sIHZpc2liaWxpdHksIGNvbG9yIGFuZCBheGlzIHByb3BlcnRpZXMuXG4gKiBUaGUgXCJheGlzXCIgcHJvcGVydHkgd2lsbCBiZSBzZXQgdG8gMSBmb3IgeTEgYW5kIDIgZm9yIHkyLlxuICogVGhlIFwiY29sdW1uXCIgcHJvcGVydHkgY2FuIGJlIGZlZCBiYWNrIGludG8gZ2V0VmFsdWUocm93LCBjb2x1bW4pIHRvIGdldFxuICogdmFsdWVzIGZvciB0aGlzIHNlcmllcy5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZ2V0UHJvcGVydGllc0ZvclNlcmllcyA9IGZ1bmN0aW9uKHNlcmllc19uYW1lKSB7XG4gIHZhciBpZHggPSAtMTtcbiAgdmFyIGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxhYmVsc1tpXSA9PSBzZXJpZXNfbmFtZSkge1xuICAgICAgaWR4ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoaWR4ID09IC0xKSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IHNlcmllc19uYW1lLFxuICAgIGNvbHVtbjogaWR4LFxuICAgIHZpc2libGU6IHRoaXMudmlzaWJpbGl0eSgpW2lkeCAtIDFdLFxuICAgIGNvbG9yOiB0aGlzLmNvbG9yc01hcF9bc2VyaWVzX25hbWVdLFxuICAgIGF4aXM6IDEgKyB0aGlzLmF0dHJpYnV0ZXNfLmF4aXNGb3JTZXJpZXMoc2VyaWVzX25hbWUpXG4gIH07XG59O1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgdGV4dCBib3ggdG8gYWRqdXN0IHRoZSBhdmVyYWdpbmcgcGVyaW9kXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5jcmVhdGVSb2xsSW50ZXJmYWNlXyA9IGZ1bmN0aW9uKCkge1xuICAvLyBDcmVhdGUgYSByb2xsZXIgaWYgb25lIGRvZXNuJ3QgZXhpc3QgYWxyZWFkeS5cbiAgdmFyIHJvbGxlciA9IHRoaXMucm9sbGVyXztcbiAgaWYgKCFyb2xsZXIpIHtcbiAgICB0aGlzLnJvbGxlcl8gPSByb2xsZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgcm9sbGVyLnR5cGUgPSBcInRleHRcIjtcbiAgICByb2xsZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIHJvbGxlci5jbGFzc05hbWUgPSAnZHlncmFwaC1yb2xsZXInO1xuICAgIHRoaXMuZ3JhcGhEaXYuYXBwZW5kQ2hpbGQocm9sbGVyKTtcbiAgfVxuXG4gIHZhciBkaXNwbGF5ID0gdGhpcy5nZXRCb29sZWFuT3B0aW9uKCdzaG93Um9sbGVyJykgPyAnYmxvY2snIDogJ25vbmUnO1xuXG4gIHZhciBhcmVhID0gdGhpcy5nZXRBcmVhKCk7XG4gIHZhciB0ZXh0QXR0ciA9IHtcbiAgICAgICAgICAgICAgICAgICBcInRvcFwiOiAoYXJlYS55ICsgYXJlYS5oIC0gMjUpICsgXCJweFwiLFxuICAgICAgICAgICAgICAgICAgIFwibGVmdFwiOiAoYXJlYS54ICsgMSkgKyBcInB4XCIsXG4gICAgICAgICAgICAgICAgICAgXCJkaXNwbGF5XCI6IGRpc3BsYXlcbiAgICAgICAgICAgICAgICAgfTtcbiAgcm9sbGVyLnNpemUgPSBcIjJcIjtcbiAgcm9sbGVyLnZhbHVlID0gdGhpcy5yb2xsUGVyaW9kXztcbiAgdXRpbHMudXBkYXRlKHJvbGxlci5zdHlsZSwgdGV4dEF0dHIpO1xuXG4gIHJvbGxlci5vbmNoYW5nZSA9ICgpID0+IHRoaXMuYWRqdXN0Um9sbChyb2xsZXIudmFsdWUpO1xufTtcblxuLyoqXG4gKiBTZXQgdXAgYWxsIHRoZSBtb3VzZSBoYW5kbGVycyBuZWVkZWQgdG8gY2FwdHVyZSBkcmFnZ2luZyBiZWhhdmlvciBmb3Igem9vbVxuICogZXZlbnRzLlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuY3JlYXRlRHJhZ0ludGVyZmFjZV8gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvbnRleHQgPSB7XG4gICAgLy8gVHJhY2tzIHdoZXRoZXIgdGhlIG1vdXNlIGlzIGRvd24gcmlnaHQgbm93XG4gICAgaXNab29taW5nOiBmYWxzZSxcbiAgICBpc1Bhbm5pbmc6IGZhbHNlLCAgLy8gaXMgdGhpcyBkcmFnIHBhcnQgb2YgYSBwYW4/XG4gICAgaXMyRFBhbjogZmFsc2UsICAgIC8vIGlmIHNvLCBpcyB0aGF0IHBhbiAxLSBvciAyLWRpbWVuc2lvbmFsP1xuICAgIGRyYWdTdGFydFg6IG51bGwsIC8vIHBpeGVsIGNvb3JkaW5hdGVzXG4gICAgZHJhZ1N0YXJ0WTogbnVsbCwgLy8gcGl4ZWwgY29vcmRpbmF0ZXNcbiAgICBkcmFnRW5kWDogbnVsbCwgLy8gcGl4ZWwgY29vcmRpbmF0ZXNcbiAgICBkcmFnRW5kWTogbnVsbCwgLy8gcGl4ZWwgY29vcmRpbmF0ZXNcbiAgICBkcmFnRGlyZWN0aW9uOiBudWxsLFxuICAgIHByZXZFbmRYOiBudWxsLCAvLyBwaXhlbCBjb29yZGluYXRlc1xuICAgIHByZXZFbmRZOiBudWxsLCAvLyBwaXhlbCBjb29yZGluYXRlc1xuICAgIHByZXZEcmFnRGlyZWN0aW9uOiBudWxsLFxuICAgIGNhbmNlbE5leHREYmxjbGljazogZmFsc2UsICAvLyBzZWUgY29tbWVudCBpbiBkeWdyYXBoLWludGVyYWN0aW9uLW1vZGVsLmpzXG5cbiAgICAvLyBUaGUgdmFsdWUgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgZ3JhcGggd2hlbiBhIHBhbiBvcGVyYXRpb24gc3RhcnRzLlxuICAgIGluaXRpYWxMZWZ0bW9zdERhdGU6IG51bGwsXG5cbiAgICAvLyBUaGUgbnVtYmVyIG9mIHVuaXRzIGVhY2ggcGl4ZWwgc3BhbnMuIChUaGlzIHdvbid0IGJlIHZhbGlkIGZvciBsb2dcbiAgICAvLyBzY2FsZXMpXG4gICAgeFVuaXRzUGVyUGl4ZWw6IG51bGwsXG5cbiAgICAvLyBUT0RPKGRhbnZrKTogdXBkYXRlIHRoaXMgY29tbWVudFxuICAgIC8vIFRoZSByYW5nZSBpbiBzZWNvbmQvdmFsdWUgdW5pdHMgdGhhdCB0aGUgdmlld3BvcnQgZW5jb21wYXNzZXMgZHVyaW5nIGFcbiAgICAvLyBwYW5uaW5nIG9wZXJhdGlvbi5cbiAgICBkYXRlUmFuZ2U6IG51bGwsXG5cbiAgICAvLyBUb3AtbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhcywgaW4gRE9NIGNvb3Jkc1xuICAgIC8vIFRPRE8oa29uaWdzYmVyZyk6IFJlbmFtZSB0b3BMZWZ0Q2FudmFzWCwgdG9wTGVmdENhbnZhc1kuXG4gICAgcHg6IDAsXG4gICAgcHk6IDAsXG5cbiAgICAvLyBWYWx1ZXMgZm9yIHVzZSB3aXRoIHBhbkVkZ2VGcmFjdGlvbiwgd2hpY2ggbGltaXQgaG93IGZhciBvdXRzaWRlIHRoZVxuICAgIC8vIGdyYXBoJ3MgZGF0YSBib3VuZGFyaWVzIGl0IGNhbiBiZSBwYW5uZWQuXG4gICAgYm91bmRlZERhdGVzOiBudWxsLCAvLyBbbWluRGF0ZSwgbWF4RGF0ZV1cbiAgICBib3VuZGVkVmFsdWVzOiBudWxsLCAvLyBbW21pblZhbHVlLCBtYXhWYWx1ZV0gLi4uXVxuXG4gICAgLy8gV2UgY292ZXIgaWZyYW1lcyBkdXJpbmcgbW91c2UgaW50ZXJhY3Rpb25zLiBTZWUgY29tbWVudHMgaW5cbiAgICAvLyBkeWdyYXBoLXV0aWxzLmpzIGZvciBtb3JlIGluZm8gb24gd2h5IHRoaXMgaXMgYSBnb29kIGlkZWEuXG4gICAgdGFycDogbmV3IElGcmFtZVRhcnAoKSxcblxuICAgIC8vIGNvbnRleHRCIGlzIHRoZSBzYW1lIHRoaW5nIGFzIHRoaXMgY29udGV4dCBvYmplY3QgYnV0IHJlbmFtZWQuXG4gICAgaW5pdGlhbGl6ZU1vdXNlRG93bjogZnVuY3Rpb24oZXZlbnQsIGcsIGNvbnRleHRCKSB7XG4gICAgICAvLyBwcmV2ZW50cyBtb3VzZSBkcmFncyBmcm9tIHNlbGVjdGluZyBwYWdlIHRleHQuXG4gICAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgIC8vIEZpcmVmb3gsIENocm9tZSwgZXRjLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTsgIC8vIElFXG4gICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYW52YXNQb3MgPSB1dGlscy5maW5kUG9zKGcuY2FudmFzXyk7XG4gICAgICBjb250ZXh0Qi5weCA9IGNhbnZhc1Bvcy54O1xuICAgICAgY29udGV4dEIucHkgPSBjYW52YXNQb3MueTtcbiAgICAgIGNvbnRleHRCLmRyYWdTdGFydFggPSB1dGlscy5kcmFnR2V0WF8oZXZlbnQsIGNvbnRleHRCKTtcbiAgICAgIGNvbnRleHRCLmRyYWdTdGFydFkgPSB1dGlscy5kcmFnR2V0WV8oZXZlbnQsIGNvbnRleHRCKTtcbiAgICAgIGNvbnRleHRCLmNhbmNlbE5leHREYmxjbGljayA9IGZhbHNlO1xuICAgICAgY29udGV4dEIudGFycC5jb3ZlcigpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBpZiAoY29udGV4dC5pc1pvb21pbmcgfHwgY29udGV4dC5pc1Bhbm5pbmcpIHtcbiAgICAgICAgY29udGV4dC5pc1pvb21pbmcgPSBmYWxzZTtcbiAgICAgICAgY29udGV4dC5kcmFnU3RhcnRYID0gbnVsbDtcbiAgICAgICAgY29udGV4dC5kcmFnU3RhcnRZID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRleHQuaXNQYW5uaW5nKSB7XG4gICAgICAgIGNvbnRleHQuaXNQYW5uaW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnRleHQuZHJhZ2dpbmdEYXRlID0gbnVsbDtcbiAgICAgICAgY29udGV4dC5kYXRlUmFuZ2UgPSBudWxsO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuYXhlc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkZWxldGUgc2VsZi5heGVzX1tpXS5kcmFnZ2luZ1ZhbHVlO1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLmF4ZXNfW2ldLmRyYWdWYWx1ZVJhbmdlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQudGFycC51bmNvdmVyKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbnRlcmFjdGlvbk1vZGVsID0gdGhpcy5nZXRPcHRpb24oXCJpbnRlcmFjdGlvbk1vZGVsXCIpO1xuXG4gIC8vIFNlbGYgaXMgdGhlIGdyYXBoLlxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gRnVuY3Rpb24gdGhhdCBiaW5kcyB0aGUgZ3JhcGggYW5kIGNvbnRleHQgdG8gdGhlIGhhbmRsZXIuXG4gIHZhciBiaW5kSGFuZGxlciA9IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGhhbmRsZXIoZXZlbnQsIHNlbGYsIGNvbnRleHQpO1xuICAgIH07XG4gIH07XG5cbiAgZm9yICh2YXIgZXZlbnROYW1lIGluIGludGVyYWN0aW9uTW9kZWwpIHtcbiAgICBpZiAoIWludGVyYWN0aW9uTW9kZWwuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkgY29udGludWU7XG4gICAgdGhpcy5hZGRBbmRUcmFja0V2ZW50KHRoaXMubW91c2VFdmVudEVsZW1lbnRfLCBldmVudE5hbWUsXG4gICAgICAgIGJpbmRIYW5kbGVyKGludGVyYWN0aW9uTW9kZWxbZXZlbnROYW1lXSkpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcmVsZWFzZXMgdGhlIG1vdXNlIGJ1dHRvbiBkdXJpbmcgYSBkcmFnLCBidXQgbm90IG92ZXIgdGhlXG4gIC8vIGNhbnZhcywgdGhlbiBpdCBkb2Vzbid0IGNvdW50IGFzIGEgem9vbWluZyBhY3Rpb24uXG4gIGlmICghaW50ZXJhY3Rpb25Nb2RlbC53aWxsRGVzdHJveUNvbnRleHRNeXNlbGYpIHtcbiAgICB2YXIgbW91c2VVcEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgY29udGV4dC5kZXN0cm95KCk7XG4gICAgfTtcblxuICAgIHRoaXMuYWRkQW5kVHJhY2tFdmVudChkb2N1bWVudCwgJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XG4gIH1cbn07XG5cbi8qKlxuICogRHJhdyBhIGdyYXkgem9vbSByZWN0YW5nbGUgb3ZlciB0aGUgZGVzaXJlZCBhcmVhIG9mIHRoZSBjYW52YXMuIEFsc28gY2xlYXJzXG4gKiB1cCBhbnkgcHJldmlvdXMgem9vbSByZWN0YW5nbGVzIHRoYXQgd2VyZSBkcmF3bi4gVGhpcyBjb3VsZCBiZSBvcHRpbWl6ZWQgdG9cbiAqIGF2b2lkIGV4dHJhIHJlZHJhd2luZywgYnV0IGl0J3MgdHJpY2t5IHRvIGF2b2lkIGludGVyYWN0aW9ucyB3aXRoIHRoZSBzdGF0dXNcbiAqIGRvdHMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRpcmVjdGlvbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSB6b29tIHJlY3RhbmdsZS4gQWNjZXB0YWJsZVxuICogICAgIHZhbHVlcyBhcmUgdXRpbHMuSE9SSVpPTlRBTCBhbmQgdXRpbHMuVkVSVElDQUwuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRYIFRoZSBYIHBvc2l0aW9uIHdoZXJlIHRoZSBkcmFnIHN0YXJ0ZWQsIGluIGNhbnZhc1xuICogICAgIGNvb3JkaW5hdGVzLlxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFggVGhlIGN1cnJlbnQgWCBwb3NpdGlvbiBvZiB0aGUgZHJhZywgaW4gY2FudmFzIGNvb3Jkcy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydFkgVGhlIFkgcG9zaXRpb24gd2hlcmUgdGhlIGRyYWcgc3RhcnRlZCwgaW4gY2FudmFzXG4gKiAgICAgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kWSBUaGUgY3VycmVudCBZIHBvc2l0aW9uIG9mIHRoZSBkcmFnLCBpbiBjYW52YXMgY29vcmRzLlxuICogQHBhcmFtIHtudW1iZXJ9IHByZXZEaXJlY3Rpb24gdGhlIHZhbHVlIG9mIGRpcmVjdGlvbiBvbiB0aGUgcHJldmlvdXMgY2FsbCB0b1xuICogICAgIHRoaXMgZnVuY3Rpb24uIFVzZWQgdG8gYXZvaWQgZXhjZXNzIHJlZHJhd2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHByZXZFbmRYIFRoZSB2YWx1ZSBvZiBlbmRYIG9uIHRoZSBwcmV2aW91cyBjYWxsIHRvIHRoaXNcbiAqICAgICBmdW5jdGlvbi4gVXNlZCB0byBhdm9pZCBleGNlc3MgcmVkcmF3aW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcHJldkVuZFkgVGhlIHZhbHVlIG9mIGVuZFkgb24gdGhlIHByZXZpb3VzIGNhbGwgdG8gdGhpc1xuICogICAgIGZ1bmN0aW9uLiBVc2VkIHRvIGF2b2lkIGV4Y2VzcyByZWRyYXdpbmdcbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmRyYXdab29tUmVjdF8gPSBmdW5jdGlvbihkaXJlY3Rpb24sIHN0YXJ0WCwgZW5kWCwgc3RhcnRZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZFksIHByZXZEaXJlY3Rpb24sIHByZXZFbmRYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZFbmRZKSB7XG4gIHZhciBjdHggPSB0aGlzLmNhbnZhc19jdHhfO1xuXG4gIC8vIENsZWFuIHVwIGZyb20gdGhlIHByZXZpb3VzIHJlY3QgaWYgbmVjZXNzYXJ5XG4gIGlmIChwcmV2RGlyZWN0aW9uID09IHV0aWxzLkhPUklaT05UQUwpIHtcbiAgICBjdHguY2xlYXJSZWN0KE1hdGgubWluKHN0YXJ0WCwgcHJldkVuZFgpLCB0aGlzLmxheW91dF8uZ2V0UGxvdEFyZWEoKS55LFxuICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoc3RhcnRYIC0gcHJldkVuZFgpLCB0aGlzLmxheW91dF8uZ2V0UGxvdEFyZWEoKS5oKTtcbiAgfSBlbHNlIGlmIChwcmV2RGlyZWN0aW9uID09IHV0aWxzLlZFUlRJQ0FMKSB7XG4gICAgY3R4LmNsZWFyUmVjdCh0aGlzLmxheW91dF8uZ2V0UGxvdEFyZWEoKS54LCBNYXRoLm1pbihzdGFydFksIHByZXZFbmRZKSxcbiAgICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0Xy5nZXRQbG90QXJlYSgpLncsIE1hdGguYWJzKHN0YXJ0WSAtIHByZXZFbmRZKSk7XG4gIH1cblxuICAvLyBEcmF3IGEgbGlnaHQtZ3JleSByZWN0YW5nbGUgdG8gc2hvdyB0aGUgbmV3IHZpZXdpbmcgYXJlYVxuICBpZiAoZGlyZWN0aW9uID09IHV0aWxzLkhPUklaT05UQUwpIHtcbiAgICBpZiAoZW5kWCAmJiBzdGFydFgpIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBcInJnYmEoMTI4LDEyOCwxMjgsMC4zMylcIjtcbiAgICAgIGN0eC5maWxsUmVjdChNYXRoLm1pbihzdGFydFgsIGVuZFgpLCB0aGlzLmxheW91dF8uZ2V0UGxvdEFyZWEoKS55LFxuICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKGVuZFggLSBzdGFydFgpLCB0aGlzLmxheW91dF8uZ2V0UGxvdEFyZWEoKS5oKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IHV0aWxzLlZFUlRJQ0FMKSB7XG4gICAgaWYgKGVuZFkgJiYgc3RhcnRZKSB7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJyZ2JhKDEyOCwxMjgsMTI4LDAuMzMpXCI7XG4gICAgICBjdHguZmlsbFJlY3QodGhpcy5sYXlvdXRfLmdldFBsb3RBcmVhKCkueCwgTWF0aC5taW4oc3RhcnRZLCBlbmRZKSxcbiAgICAgICAgICAgICAgICAgICB0aGlzLmxheW91dF8uZ2V0UGxvdEFyZWEoKS53LCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFyIHRoZSB6b29tIHJlY3RhbmdsZSAoYW5kIHBlcmZvcm0gbm8gem9vbSkuXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5jbGVhclpvb21SZWN0XyA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmN1cnJlbnRab29tUmVjdEFyZ3NfID0gbnVsbDtcbiAgdGhpcy5jYW52YXNfY3R4Xy5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aF8sIHRoaXMuaGVpZ2h0Xyk7XG59O1xuXG4vKipcbiAqIFpvb20gdG8gc29tZXRoaW5nIGNvbnRhaW5pbmcgW2xvd1gsIGhpZ2hYXS4gVGhlc2UgYXJlIHBpeGVsIGNvb3JkaW5hdGVzIGluXG4gKiB0aGUgY2FudmFzLiBUaGUgZXhhY3Qgem9vbSB3aW5kb3cgbWF5IGJlIHNsaWdodGx5IGxhcmdlciBpZiB0aGVyZSBhcmUgbm8gZGF0YVxuICogcG9pbnRzIG5lYXIgbG93WCBvciBoaWdoWC4gRG9uJ3QgY29uZnVzZSB0aGlzIGZ1bmN0aW9uIHdpdGggZG9ab29tWERhdGVzLFxuICogd2hpY2ggYWNjZXB0cyBkYXRlcyB0aGF0IG1hdGNoIHRoZSByYXcgZGF0YS4gVGhpcyBmdW5jdGlvbiByZWRyYXdzIHRoZSBncmFwaC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbG93WCBUaGUgbGVmdG1vc3QgcGl4ZWwgdmFsdWUgdGhhdCBzaG91bGQgYmUgdmlzaWJsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoWCBUaGUgcmlnaHRtb3N0IHBpeGVsIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHZpc2libGUuXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5kb1pvb21YXyA9IGZ1bmN0aW9uKGxvd1gsIGhpZ2hYKSB7XG4gIHRoaXMuY3VycmVudFpvb21SZWN0QXJnc18gPSBudWxsO1xuICAvLyBGaW5kIHRoZSBlYXJsaWVzdCBhbmQgbGF0ZXN0IGRhdGVzIGNvbnRhaW5lZCBpbiB0aGlzIGNhbnZhc3ggcmFuZ2UuXG4gIC8vIENvbnZlcnQgdGhlIGNhbGwgdG8gZGF0ZSByYW5nZXMgb2YgdGhlIHJhdyBkYXRhLlxuICB2YXIgbWluRGF0ZSA9IHRoaXMudG9EYXRhWENvb3JkKGxvd1gpO1xuICB2YXIgbWF4RGF0ZSA9IHRoaXMudG9EYXRhWENvb3JkKGhpZ2hYKTtcbiAgdGhpcy5kb1pvb21YRGF0ZXNfKG1pbkRhdGUsIG1heERhdGUpO1xufTtcblxuLyoqXG4gKiBab29tIHRvIHNvbWV0aGluZyBjb250YWluaW5nIFttaW5EYXRlLCBtYXhEYXRlXSB2YWx1ZXMuIERvbid0IGNvbmZ1c2UgdGhpc1xuICogbWV0aG9kIHdpdGggZG9ab29tWCB3aGljaCBhY2NlcHRzIHBpeGVsIGNvb3JkaW5hdGVzLiBUaGlzIGZ1bmN0aW9uIHJlZHJhd3NcbiAqIHRoZSBncmFwaC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbWluRGF0ZSBUaGUgbWluaW11bSBkYXRlIHRoYXQgc2hvdWxkIGJlIHZpc2libGUuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4RGF0ZSBUaGUgbWF4aW11bSBkYXRlIHRoYXQgc2hvdWxkIGJlIHZpc2libGUuXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5kb1pvb21YRGF0ZXNfID0gZnVuY3Rpb24obWluRGF0ZSwgbWF4RGF0ZSkge1xuICAvLyBUT0RPKGRhbnZrKTogd2hlbiB4QXhpc1JhbmdlIGlzIG51bGwgKGkuZS4gXCJmaXQgdG8gZGF0YVwiLCB0aGUgYW5pbWF0aW9uXG4gIC8vIGNhbiBwcm9kdWNlIHN0cmFuZ2UgZWZmZWN0cy4gUmF0aGVyIHRoYW4gdGhlIHgtYXhpcyB0cmFuc2l0aW9uaW5nIHNsb3dseVxuICAvLyBiZXR3ZWVuIHZhbHVlcywgaXQgY2FuIGplcmsgYXJvdW5kLilcbiAgdmFyIG9sZF93aW5kb3cgPSB0aGlzLnhBeGlzUmFuZ2UoKTtcbiAgdmFyIG5ld193aW5kb3cgPSBbbWluRGF0ZSwgbWF4RGF0ZV07XG4gIGNvbnN0IHpvb21DYWxsYmFjayA9IHRoaXMuZ2V0RnVuY3Rpb25PcHRpb24oJ3pvb21DYWxsYmFjaycpO1xuICB0aGlzLmRvQW5pbWF0ZWRab29tKG9sZF93aW5kb3csIG5ld193aW5kb3csIG51bGwsIG51bGwsICgpID0+IHtcbiAgICBpZiAoem9vbUNhbGxiYWNrKSB7XG4gICAgICB6b29tQ2FsbGJhY2suY2FsbCh0aGlzLCBtaW5EYXRlLCBtYXhEYXRlLCB0aGlzLnlBeGlzUmFuZ2VzKCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFpvb20gdG8gc29tZXRoaW5nIGNvbnRhaW5pbmcgW2xvd1ksIGhpZ2hZXS4gVGhlc2UgYXJlIHBpeGVsIGNvb3JkaW5hdGVzIGluXG4gKiB0aGUgY2FudmFzLiBUaGlzIGZ1bmN0aW9uIHJlZHJhd3MgdGhlIGdyYXBoLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsb3dZIFRoZSB0b3Btb3N0IHBpeGVsIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHZpc2libGUuXG4gKiBAcGFyYW0ge251bWJlcn0gaGlnaFkgVGhlIGxvd2VzdCBwaXhlbCB2YWx1ZSB0aGF0IHNob3VsZCBiZSB2aXNpYmxlLlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZG9ab29tWV8gPSBmdW5jdGlvbihsb3dZLCBoaWdoWSkge1xuICB0aGlzLmN1cnJlbnRab29tUmVjdEFyZ3NfID0gbnVsbDtcbiAgLy8gRmluZCB0aGUgaGlnaGVzdCBhbmQgbG93ZXN0IHZhbHVlcyBpbiBwaXhlbCByYW5nZSBmb3IgZWFjaCBheGlzLlxuICAvLyBOb3RlIHRoYXQgbG93WSAoaW4gcGl4ZWxzKSBjb3JyZXNwb25kcyB0byB0aGUgbWF4IFZhbHVlIChpbiBkYXRhIGNvb3JkcykuXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSBwaXhlbHMgaW5jcmVhc2UgYXMgeW91IGdvIGRvd24gb24gdGhlIHNjcmVlbiwgd2hlcmVhcyBkYXRhXG4gIC8vIGNvb3JkaW5hdGVzIGluY3JlYXNlIGFzIHlvdSBnbyB1cCB0aGUgc2NyZWVuLlxuICB2YXIgb2xkVmFsdWVSYW5nZXMgPSB0aGlzLnlBeGlzUmFuZ2VzKCk7XG4gIHZhciBuZXdWYWx1ZVJhbmdlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXhlc18ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaGkgPSB0aGlzLnRvRGF0YVlDb29yZChsb3dZLCBpKTtcbiAgICB2YXIgbG93ID0gdGhpcy50b0RhdGFZQ29vcmQoaGlnaFksIGkpO1xuICAgIG5ld1ZhbHVlUmFuZ2VzLnB1c2goW2xvdywgaGldKTtcbiAgfVxuXG4gIGNvbnN0IHpvb21DYWxsYmFjayA9IHRoaXMuZ2V0RnVuY3Rpb25PcHRpb24oJ3pvb21DYWxsYmFjaycpO1xuICB0aGlzLmRvQW5pbWF0ZWRab29tKG51bGwsIG51bGwsIG9sZFZhbHVlUmFuZ2VzLCBuZXdWYWx1ZVJhbmdlcywgKCkgPT4ge1xuICAgIGlmICh6b29tQ2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IFttaW5YLCBtYXhYXSA9IHRoaXMueEF4aXNSYW5nZSgpO1xuICAgICAgem9vbUNhbGxiYWNrLmNhbGwodGhpcywgbWluWCwgbWF4WCwgdGhpcy55QXhpc1JhbmdlcygpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uIGZ1bmN0aW9uIHRvIHVzZSBpbiBhbmltYXRpb25zLiBSZXR1cm5zIHZhbHVlcyBiZXR3ZWVuIDAuMFxuICogKHRvdGFsbHkgb2xkIHZhbHVlcykgYW5kIDEuMCAodG90YWxseSBuZXcgdmFsdWVzKSBmb3IgZWFjaCBmcmFtZS5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGguem9vbUFuaW1hdGlvbkZ1bmN0aW9uID0gZnVuY3Rpb24oZnJhbWUsIG51bUZyYW1lcykge1xuICB2YXIgayA9IDEuNTtcbiAgcmV0dXJuICgxLjAgLSBNYXRoLnBvdyhrLCAtZnJhbWUpKSAvICgxLjAgLSBNYXRoLnBvdyhrLCAtbnVtRnJhbWVzKSk7XG59O1xuXG4vKipcbiAqIFJlc2V0IHRoZSB6b29tIHRvIHRoZSBvcmlnaW5hbCB2aWV3IGNvb3JkaW5hdGVzLiBUaGlzIGlzIHRoZSBzYW1lIGFzXG4gKiBkb3VibGUtY2xpY2tpbmcgb24gdGhlIGdyYXBoLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5yZXNldFpvb20gPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZGlydHlYID0gdGhpcy5pc1pvb21lZCgneCcpO1xuICBjb25zdCBkaXJ0eVkgPSB0aGlzLmlzWm9vbWVkKCd5Jyk7XG4gIGNvbnN0IGRpcnR5ID0gZGlydHlYIHx8IGRpcnR5WTtcblxuICAvLyBDbGVhciBhbnkgc2VsZWN0aW9uLCBzaW5jZSBpdCdzIGxpa2VseSB0byBiZSBkcmF3biBpbiB0aGUgd3JvbmcgcGxhY2UuXG4gIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcblxuICBpZiAoIWRpcnR5KSByZXR1cm47XG5cbiAgLy8gQ2FsY3VsYXRlIGV4dHJlbWVzIHRvIGF2b2lkIGxhY2sgb2YgcGFkZGluZyBvbiByZXNldC5cbiAgY29uc3QgW21pbkRhdGUsIG1heERhdGVdID0gdGhpcy54QXhpc0V4dHJlbWVzKCk7XG5cbiAgY29uc3QgYW5pbWF0ZWRab29tcyA9IHRoaXMuZ2V0Qm9vbGVhbk9wdGlvbignYW5pbWF0ZWRab29tcycpO1xuICBjb25zdCB6b29tQ2FsbGJhY2sgPSB0aGlzLmdldEZ1bmN0aW9uT3B0aW9uKCd6b29tQ2FsbGJhY2snKTtcblxuICAvLyBUT0RPKGRhbnZrKTogbWVyZ2UgdGhpcyBibG9jayB3LyB0aGUgY29kZSBiZWxvdy5cbiAgLy8gVE9ETyhkYW52ayk6IGZhY3RvciBvdXQgYSBnZW5lcmljLCBwdWJsaWMgem9vbVRvIG1ldGhvZC5cbiAgaWYgKCFhbmltYXRlZFpvb21zKSB7XG4gICAgdGhpcy5kYXRlV2luZG93XyA9IG51bGw7XG4gICAgdGhpcy5heGVzXy5mb3JFYWNoKGF4aXMgPT4ge1xuICAgICAgaWYgKGF4aXMudmFsdWVSYW5nZSkgZGVsZXRlIGF4aXMudmFsdWVSYW5nZTtcbiAgICB9KTtcblxuICAgIHRoaXMuZHJhd0dyYXBoXygpO1xuICAgIGlmICh6b29tQ2FsbGJhY2spIHtcbiAgICAgIHpvb21DYWxsYmFjay5jYWxsKHRoaXMsIG1pbkRhdGUsIG1heERhdGUsIHRoaXMueUF4aXNSYW5nZXMoKSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvbGRXaW5kb3c9bnVsbCwgbmV3V2luZG93PW51bGwsIG9sZFZhbHVlUmFuZ2VzPW51bGwsIG5ld1ZhbHVlUmFuZ2VzPW51bGw7XG4gIGlmIChkaXJ0eVgpIHtcbiAgICBvbGRXaW5kb3cgPSB0aGlzLnhBeGlzUmFuZ2UoKTtcbiAgICBuZXdXaW5kb3cgPSBbbWluRGF0ZSwgbWF4RGF0ZV07XG4gIH1cblxuICBpZiAoZGlydHlZKSB7XG4gICAgb2xkVmFsdWVSYW5nZXMgPSB0aGlzLnlBeGlzUmFuZ2VzKCk7XG4gICAgbmV3VmFsdWVSYW5nZXMgPSB0aGlzLnlBeGlzRXh0cmVtZXMoKTtcbiAgfVxuXG4gIHRoaXMuZG9BbmltYXRlZFpvb20ob2xkV2luZG93LCBuZXdXaW5kb3csIG9sZFZhbHVlUmFuZ2VzLCBuZXdWYWx1ZVJhbmdlcyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5kYXRlV2luZG93XyA9IG51bGw7XG4gICAgICAgIHRoaXMuYXhlc18uZm9yRWFjaChheGlzID0+IHtcbiAgICAgICAgICBpZiAoYXhpcy52YWx1ZVJhbmdlKSBkZWxldGUgYXhpcy52YWx1ZVJhbmdlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHpvb21DYWxsYmFjaykge1xuICAgICAgICAgIHpvb21DYWxsYmFjay5jYWxsKHRoaXMsIG1pbkRhdGUsIG1heERhdGUsIHRoaXMueUF4aXNSYW5nZXMoKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBDb21iaW5lZCBhbmltYXRpb24gbG9naWMgZm9yIGFsbCB6b29tIGZ1bmN0aW9ucy5cbiAqIGVpdGhlciB0aGUgeCBwYXJhbWV0ZXJzIG9yIHkgcGFyYW1ldGVycyBtYXkgYmUgbnVsbC5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmRvQW5pbWF0ZWRab29tID0gZnVuY3Rpb24ob2xkWFJhbmdlLCBuZXdYUmFuZ2UsIG9sZFlSYW5nZXMsIG5ld1lSYW5nZXMsIGNhbGxiYWNrKSB7XG4gIHZhciBzdGVwcyA9IHRoaXMuZ2V0Qm9vbGVhbk9wdGlvbihcImFuaW1hdGVkWm9vbXNcIikgP1xuICAgICAgRHlncmFwaC5BTklNQVRJT05fU1RFUFMgOiAxO1xuXG4gIHZhciB3aW5kb3dzID0gW107XG4gIHZhciB2YWx1ZVJhbmdlcyA9IFtdO1xuICB2YXIgc3RlcCwgZnJhYztcblxuICBpZiAob2xkWFJhbmdlICE9PSBudWxsICYmIG5ld1hSYW5nZSAhPT0gbnVsbCkge1xuICAgIGZvciAoc3RlcCA9IDE7IHN0ZXAgPD0gc3RlcHM7IHN0ZXArKykge1xuICAgICAgZnJhYyA9IER5Z3JhcGguem9vbUFuaW1hdGlvbkZ1bmN0aW9uKHN0ZXAsIHN0ZXBzKTtcbiAgICAgIHdpbmRvd3Nbc3RlcC0xXSA9IFtvbGRYUmFuZ2VbMF0qKDEtZnJhYykgKyBmcmFjKm5ld1hSYW5nZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBvbGRYUmFuZ2VbMV0qKDEtZnJhYykgKyBmcmFjKm5ld1hSYW5nZVsxXV07XG4gICAgfVxuICB9XG5cbiAgaWYgKG9sZFlSYW5nZXMgIT09IG51bGwgJiYgbmV3WVJhbmdlcyAhPT0gbnVsbCkge1xuICAgIGZvciAoc3RlcCA9IDE7IHN0ZXAgPD0gc3RlcHM7IHN0ZXArKykge1xuICAgICAgZnJhYyA9IER5Z3JhcGguem9vbUFuaW1hdGlvbkZ1bmN0aW9uKHN0ZXAsIHN0ZXBzKTtcbiAgICAgIHZhciB0aGlzUmFuZ2UgPSBbXTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5heGVzXy5sZW5ndGg7IGorKykge1xuICAgICAgICB0aGlzUmFuZ2UucHVzaChbb2xkWVJhbmdlc1tqXVswXSooMS1mcmFjKSArIGZyYWMqbmV3WVJhbmdlc1tqXVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFlSYW5nZXNbal1bMV0qKDEtZnJhYykgKyBmcmFjKm5ld1lSYW5nZXNbal1bMV1dKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlUmFuZ2VzW3N0ZXAtMV0gPSB0aGlzUmFuZ2U7XG4gICAgfVxuICB9XG5cbiAgdXRpbHMucmVwZWF0QW5kQ2xlYW51cChzdGVwID0+IHtcbiAgICBpZiAodmFsdWVSYW5nZXMubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXhlc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB2YWx1ZVJhbmdlc1tzdGVwXVtpXTtcbiAgICAgICAgdGhpcy5heGVzX1tpXS52YWx1ZVJhbmdlID0gW3dbMF0sIHdbMV1dO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAod2luZG93cy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGF0ZVdpbmRvd18gPSB3aW5kb3dzW3N0ZXBdO1xuICAgIH1cbiAgICB0aGlzLmRyYXdHcmFwaF8oKTtcbiAgfSwgc3RlcHMsIER5Z3JhcGguQU5JTUFUSU9OX0RVUkFUSU9OIC8gc3RlcHMsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBjdXJyZW50IGdyYXBoJ3MgYXJlYSBvYmplY3QuXG4gKlxuICogUmV0dXJuczoge3gsIHksIHcsIGh9XG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldEFyZWEgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucGxvdHRlcl8uYXJlYTtcbn07XG5cbi8qKlxuICogQ29udmVydCBhIG1vdXNlIGV2ZW50IHRvIERPTSBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0aGUgZ3JhcGggb3JpZ2luLlxuICpcbiAqIFJldHVybnMgYSB0d28tZWxlbWVudCBhcnJheTogW1gsIFldLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5ldmVudFRvRG9tQ29vcmRzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm9mZnNldFggJiYgZXZlbnQub2Zmc2V0WSkge1xuICAgIHJldHVybiBbIGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFkgXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXZlbnRFbGVtZW50UG9zID0gdXRpbHMuZmluZFBvcyh0aGlzLm1vdXNlRXZlbnRFbGVtZW50Xyk7XG4gICAgdmFyIGNhbnZhc3ggPSB1dGlscy5wYWdlWChldmVudCkgLSBldmVudEVsZW1lbnRQb3MueDtcbiAgICB2YXIgY2FudmFzeSA9IHV0aWxzLnBhZ2VZKGV2ZW50KSAtIGV2ZW50RWxlbWVudFBvcy55O1xuICAgIHJldHVybiBbY2FudmFzeCwgY2FudmFzeV07XG4gIH1cbn07XG5cbi8qKlxuICogR2l2ZW4gYSBjYW52YXMgWCBjb29yZGluYXRlLCBmaW5kIHRoZSBjbG9zZXN0IHJvdy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkb21YIGdyYXBoLXJlbGF0aXZlIERPTSBYIGNvb3JkaW5hdGVcbiAqIFJldHVybnMge251bWJlcn0gcm93IG51bWJlci5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmZpbmRDbG9zZXN0Um93ID0gZnVuY3Rpb24oZG9tWCkge1xuICB2YXIgbWluRGlzdFggPSBJbmZpbml0eTtcbiAgdmFyIGNsb3Nlc3RSb3cgPSAtMTtcbiAgdmFyIHNldHMgPSB0aGlzLmxheW91dF8ucG9pbnRzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcG9pbnRzID0gc2V0c1tpXTtcbiAgICB2YXIgbGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICB2YXIgcG9pbnQgPSBwb2ludHNbal07XG4gICAgICBpZiAoIXV0aWxzLmlzVmFsaWRQb2ludChwb2ludCwgdHJ1ZSkpIGNvbnRpbnVlO1xuICAgICAgdmFyIGRpc3QgPSBNYXRoLmFicyhwb2ludC5jYW52YXN4IC0gZG9tWCk7XG4gICAgICBpZiAoZGlzdCA8IG1pbkRpc3RYKSB7XG4gICAgICAgIG1pbkRpc3RYID0gZGlzdDtcbiAgICAgICAgY2xvc2VzdFJvdyA9IHBvaW50LmlkeDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdFJvdztcbn07XG5cbi8qKlxuICogR2l2ZW4gY2FudmFzIFgsWSBjb29yZGluYXRlcywgZmluZCB0aGUgY2xvc2VzdCBwb2ludC5cbiAqXG4gKiBUaGlzIGZpbmRzIHRoZSBpbmRpdmlkdWFsIGRhdGEgcG9pbnQgYWNyb3NzIGFsbCB2aXNpYmxlIHNlcmllc1xuICogdGhhdCdzIGNsb3Nlc3QgdG8gdGhlIHN1cHBsaWVkIERPTSBjb29yZGluYXRlcyB1c2luZyB0aGUgc3RhbmRhcmRcbiAqIEV1Y2xpZGVhbiBYLFkgZGlzdGFuY2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRvbVggZ3JhcGgtcmVsYXRpdmUgRE9NIFggY29vcmRpbmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGRvbVkgZ3JhcGgtcmVsYXRpdmUgRE9NIFkgY29vcmRpbmF0ZVxuICogUmV0dXJuczoge3Jvdywgc2VyaWVzTmFtZSwgcG9pbnR9XG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5maW5kQ2xvc2VzdFBvaW50ID0gZnVuY3Rpb24oZG9tWCwgZG9tWSkge1xuICB2YXIgbWluRGlzdCA9IEluZmluaXR5O1xuICB2YXIgZGlzdCwgZHgsIGR5LCBwb2ludCwgY2xvc2VzdFBvaW50LCBjbG9zZXN0U2VyaWVzLCBjbG9zZXN0Um93O1xuICBmb3IgKCB2YXIgc2V0SWR4ID0gdGhpcy5sYXlvdXRfLnBvaW50cy5sZW5ndGggLSAxIDsgc2V0SWR4ID49IDAgOyAtLXNldElkeCApIHtcbiAgICB2YXIgcG9pbnRzID0gdGhpcy5sYXlvdXRfLnBvaW50c1tzZXRJZHhdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGlmICghdXRpbHMuaXNWYWxpZFBvaW50KHBvaW50KSkgY29udGludWU7XG4gICAgICBkeCA9IHBvaW50LmNhbnZhc3ggLSBkb21YO1xuICAgICAgZHkgPSBwb2ludC5jYW52YXN5IC0gZG9tWTtcbiAgICAgIGRpc3QgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGlmIChkaXN0IDwgbWluRGlzdCkge1xuICAgICAgICBtaW5EaXN0ID0gZGlzdDtcbiAgICAgICAgY2xvc2VzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgIGNsb3Nlc3RTZXJpZXMgPSBzZXRJZHg7XG4gICAgICAgIGNsb3Nlc3RSb3cgPSBwb2ludC5pZHg7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhciBuYW1lID0gdGhpcy5sYXlvdXRfLnNldE5hbWVzW2Nsb3Nlc3RTZXJpZXNdO1xuICByZXR1cm4ge1xuICAgIHJvdzogY2xvc2VzdFJvdyxcbiAgICBzZXJpZXNOYW1lOiBuYW1lLFxuICAgIHBvaW50OiBjbG9zZXN0UG9pbnRcbiAgfTtcbn07XG5cbi8qKlxuICogR2l2ZW4gY2FudmFzIFgsWSBjb29yZGluYXRlcywgZmluZCB0aGUgdG91Y2hlZCBhcmVhIGluIGEgc3RhY2tlZCBncmFwaC5cbiAqXG4gKiBUaGlzIGZpcnN0IGZpbmRzIHRoZSBYIGRhdGEgcG9pbnQgY2xvc2VzdCB0byB0aGUgc3VwcGxpZWQgRE9NIFggY29vcmRpbmF0ZSxcbiAqIHRoZW4gZmluZHMgdGhlIHNlcmllcyB3aGljaCBwdXRzIHRoZSBZIGNvb3JkaW5hdGUgb24gdG9wIG9mIGl0cyBmaWxsZWQgYXJlYSxcbiAqIHVzaW5nIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gYWRqYWNlbnQgcG9pbnQgcGFpcnMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGRvbVggZ3JhcGgtcmVsYXRpdmUgRE9NIFggY29vcmRpbmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IGRvbVkgZ3JhcGgtcmVsYXRpdmUgRE9NIFkgY29vcmRpbmF0ZVxuICogUmV0dXJuczoge3Jvdywgc2VyaWVzTmFtZSwgcG9pbnR9XG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5maW5kU3RhY2tlZFBvaW50ID0gZnVuY3Rpb24oZG9tWCwgZG9tWSkge1xuICB2YXIgcm93ID0gdGhpcy5maW5kQ2xvc2VzdFJvdyhkb21YKTtcbiAgdmFyIGNsb3Nlc3RQb2ludCwgY2xvc2VzdFNlcmllcztcbiAgZm9yICh2YXIgc2V0SWR4ID0gMDsgc2V0SWR4IDwgdGhpcy5sYXlvdXRfLnBvaW50cy5sZW5ndGg7ICsrc2V0SWR4KSB7XG4gICAgdmFyIGJvdW5kYXJ5ID0gdGhpcy5nZXRMZWZ0Qm91bmRhcnlfKHNldElkeCk7XG4gICAgdmFyIHJvd0lkeCA9IHJvdyAtIGJvdW5kYXJ5O1xuICAgIHZhciBwb2ludHMgPSB0aGlzLmxheW91dF8ucG9pbnRzW3NldElkeF07XG4gICAgaWYgKHJvd0lkeCA+PSBwb2ludHMubGVuZ3RoKSBjb250aW51ZTtcbiAgICB2YXIgcDEgPSBwb2ludHNbcm93SWR4XTtcbiAgICBpZiAoIXV0aWxzLmlzVmFsaWRQb2ludChwMSkpIGNvbnRpbnVlO1xuICAgIHZhciBweSA9IHAxLmNhbnZhc3k7XG4gICAgaWYgKGRvbVggPiBwMS5jYW52YXN4ICYmIHJvd0lkeCArIDEgPCBwb2ludHMubGVuZ3RoKSB7XG4gICAgICAvLyBpbnRlcnBvbGF0ZSBzZXJpZXMgWSB2YWx1ZSB1c2luZyBuZXh0IHBvaW50XG4gICAgICB2YXIgcDIgPSBwb2ludHNbcm93SWR4ICsgMV07XG4gICAgICBpZiAodXRpbHMuaXNWYWxpZFBvaW50KHAyKSkge1xuICAgICAgICB2YXIgZHggPSBwMi5jYW52YXN4IC0gcDEuY2FudmFzeDtcbiAgICAgICAgaWYgKGR4ID4gMCkge1xuICAgICAgICAgIHZhciByID0gKGRvbVggLSBwMS5jYW52YXN4KSAvIGR4O1xuICAgICAgICAgIHB5ICs9IHIgKiAocDIuY2FudmFzeSAtIHAxLmNhbnZhc3kpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkb21YIDwgcDEuY2FudmFzeCAmJiByb3dJZHggPiAwKSB7XG4gICAgICAvLyBpbnRlcnBvbGF0ZSBzZXJpZXMgWSB2YWx1ZSB1c2luZyBwcmV2aW91cyBwb2ludFxuICAgICAgdmFyIHAwID0gcG9pbnRzW3Jvd0lkeCAtIDFdO1xuICAgICAgaWYgKHV0aWxzLmlzVmFsaWRQb2ludChwMCkpIHtcbiAgICAgICAgdmFyIGR4ID0gcDEuY2FudmFzeCAtIHAwLmNhbnZhc3g7XG4gICAgICAgIGlmIChkeCA+IDApIHtcbiAgICAgICAgICB2YXIgciA9IChwMS5jYW52YXN4IC0gZG9tWCkgLyBkeDtcbiAgICAgICAgICBweSArPSByICogKHAwLmNhbnZhc3kgLSBwMS5jYW52YXN5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBTdG9wIGlmIHRoZSBwb2ludCAoZG9tWCwgcHkpIGlzIGFib3ZlIHRoaXMgc2VyaWVzJyB1cHBlciBlZGdlXG4gICAgaWYgKHNldElkeCA9PT0gMCB8fCBweSA8IGRvbVkpIHtcbiAgICAgIGNsb3Nlc3RQb2ludCA9IHAxO1xuICAgICAgY2xvc2VzdFNlcmllcyA9IHNldElkeDtcbiAgICB9XG4gIH1cbiAgdmFyIG5hbWUgPSB0aGlzLmxheW91dF8uc2V0TmFtZXNbY2xvc2VzdFNlcmllc107XG4gIHJldHVybiB7XG4gICAgcm93OiByb3csXG4gICAgc2VyaWVzTmFtZTogbmFtZSxcbiAgICBwb2ludDogY2xvc2VzdFBvaW50XG4gIH07XG59O1xuXG4vKipcbiAqIFdoZW4gdGhlIG1vdXNlIG1vdmVzIGluIHRoZSBjYW52YXMsIGRpc3BsYXkgaW5mb3JtYXRpb24gYWJvdXQgYSBuZWFyYnkgZGF0YVxuICogcG9pbnQgYW5kIGRyYXcgZG90cyBvdmVyIHRob3NlIHBvaW50cyBpbiB0aGUgZGF0YSBzZXJpZXMuIFRoaXMgZnVuY3Rpb25cbiAqIHRha2VzIGNhcmUgb2YgY2xlYW51cCBvZiBwcmV2aW91c2x5LWRyYXduIGRvdHMuXG4gKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgVGhlIG1vdXNlbW92ZSBldmVudCBmcm9tIHRoZSBicm93c2VyLlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUubW91c2VNb3ZlXyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIC8vIFRoaXMgcHJldmVudHMgSlMgZXJyb3JzIHdoZW4gbW91c2luZyBvdmVyIHRoZSBjYW52YXMgYmVmb3JlIGRhdGEgbG9hZHMuXG4gIHZhciBwb2ludHMgPSB0aGlzLmxheW91dF8ucG9pbnRzO1xuICBpZiAocG9pbnRzID09PSB1bmRlZmluZWQgfHwgcG9pbnRzID09PSBudWxsKSByZXR1cm47XG5cbiAgdmFyIGNhbnZhc0Nvb3JkcyA9IHRoaXMuZXZlbnRUb0RvbUNvb3JkcyhldmVudCk7XG4gIHZhciBjYW52YXN4ID0gY2FudmFzQ29vcmRzWzBdO1xuICB2YXIgY2FudmFzeSA9IGNhbnZhc0Nvb3Jkc1sxXTtcblxuICB2YXIgaGlnaGxpZ2h0U2VyaWVzT3B0cyA9IHRoaXMuZ2V0T3B0aW9uKFwiaGlnaGxpZ2h0U2VyaWVzT3B0c1wiKTtcbiAgdmFyIHNlbGVjdGlvbkNoYW5nZWQgPSBmYWxzZTtcbiAgaWYgKGhpZ2hsaWdodFNlcmllc09wdHMgJiYgIXRoaXMuaXNTZXJpZXNMb2NrZWQoKSkge1xuICAgIHZhciBjbG9zZXN0O1xuICAgIGlmICh0aGlzLmdldEJvb2xlYW5PcHRpb24oXCJzdGFja2VkR3JhcGhcIikpIHtcbiAgICAgIGNsb3Nlc3QgPSB0aGlzLmZpbmRTdGFja2VkUG9pbnQoY2FudmFzeCwgY2FudmFzeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3Nlc3QgPSB0aGlzLmZpbmRDbG9zZXN0UG9pbnQoY2FudmFzeCwgY2FudmFzeSk7XG4gICAgfVxuICAgIHNlbGVjdGlvbkNoYW5nZWQgPSB0aGlzLnNldFNlbGVjdGlvbihjbG9zZXN0LnJvdywgY2xvc2VzdC5zZXJpZXNOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaWR4ID0gdGhpcy5maW5kQ2xvc2VzdFJvdyhjYW52YXN4KTtcbiAgICBzZWxlY3Rpb25DaGFuZ2VkID0gdGhpcy5zZXRTZWxlY3Rpb24oaWR4KTtcbiAgfVxuXG4gIHZhciBjYWxsYmFjayA9IHRoaXMuZ2V0RnVuY3Rpb25PcHRpb24oXCJoaWdobGlnaHRDYWxsYmFja1wiKTtcbiAgaWYgKGNhbGxiYWNrICYmIHNlbGVjdGlvbkNoYW5nZWQpIHtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGV2ZW50LFxuICAgICAgICB0aGlzLmxhc3R4XyxcbiAgICAgICAgdGhpcy5zZWxQb2ludHNfLFxuICAgICAgICB0aGlzLmxhc3RSb3dfLFxuICAgICAgICB0aGlzLmhpZ2hsaWdodFNldF8pO1xuICB9XG59O1xuXG4vKipcbiAqIEZldGNoIGxlZnQgb2Zmc2V0IGZyb20gdGhlIHNwZWNpZmllZCBzZXQgaW5kZXggb3IgaWYgbm90IHBhc3NlZCwgdGhlXG4gKiBmaXJzdCBkZWZpbmVkIGJvdW5kYXJ5SWRzIHJlY29yZCAoc2VlIGJ1ZyAjMjM2KS5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldExlZnRCb3VuZGFyeV8gPSBmdW5jdGlvbihzZXRJZHgpIHtcbiAgaWYgKHRoaXMuYm91bmRhcnlJZHNfW3NldElkeF0pIHtcbiAgICAgIHJldHVybiB0aGlzLmJvdW5kYXJ5SWRzX1tzZXRJZHhdWzBdO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ib3VuZGFyeUlkc18ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmJvdW5kYXJ5SWRzX1tpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdW5kYXJ5SWRzX1tpXVswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbkR5Z3JhcGgucHJvdG90eXBlLmFuaW1hdGVTZWxlY3Rpb25fID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gIHZhciB0b3RhbFN0ZXBzID0gMTA7XG4gIHZhciBtaWxsaXMgPSAzMDtcbiAgaWYgKHRoaXMuZmFkZUxldmVsID09PSB1bmRlZmluZWQpIHRoaXMuZmFkZUxldmVsID0gMDtcbiAgaWYgKHRoaXMuYW5pbWF0ZUlkID09PSB1bmRlZmluZWQpIHRoaXMuYW5pbWF0ZUlkID0gMDtcbiAgdmFyIHN0YXJ0ID0gdGhpcy5mYWRlTGV2ZWw7XG4gIHZhciBzdGVwcyA9IGRpcmVjdGlvbiA8IDAgPyBzdGFydCA6IHRvdGFsU3RlcHMgLSBzdGFydDtcbiAgaWYgKHN0ZXBzIDw9IDApIHtcbiAgICBpZiAodGhpcy5mYWRlTGV2ZWwpIHtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0aW9uXygxLjApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdGhpc0lkID0gKyt0aGlzLmFuaW1hdGVJZDtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgY2xlYW51cElmQ2xlYXJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBpZiB3ZSBoYXZlbid0IHJlYWNoZWQgZmFkZUxldmVsIDAgaW4gdGhlIG1heCBmcmFtZSB0aW1lLFxuICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBjbGVhciBoYXBwZW5zIGFuZCBqdXN0IGdvIHRvIDBcbiAgICBpZiAodGhhdC5mYWRlTGV2ZWwgIT09IDAgJiYgZGlyZWN0aW9uIDwgMCkge1xuICAgICAgdGhhdC5mYWRlTGV2ZWwgPSAwO1xuICAgICAgdGhhdC5jbGVhclNlbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcbiAgdXRpbHMucmVwZWF0QW5kQ2xlYW51cChcbiAgICBmdW5jdGlvbihuKSB7XG4gICAgICAvLyBpZ25vcmUgc2ltdWx0YW5lb3VzIGFuaW1hdGlvbnNcbiAgICAgIGlmICh0aGF0LmFuaW1hdGVJZCAhPSB0aGlzSWQpIHJldHVybjtcblxuICAgICAgdGhhdC5mYWRlTGV2ZWwgKz0gZGlyZWN0aW9uO1xuICAgICAgaWYgKHRoYXQuZmFkZUxldmVsID09PSAwKSB7XG4gICAgICAgIHRoYXQuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoYXQudXBkYXRlU2VsZWN0aW9uXyh0aGF0LmZhZGVMZXZlbCAvIHRvdGFsU3RlcHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc3RlcHMsIG1pbGxpcywgY2xlYW51cElmQ2xlYXJpbmcpO1xufTtcblxuLyoqXG4gKiBEcmF3IGRvdHMgb3ZlciB0aGUgc2VsZWN0aWVkIHBvaW50cyBpbiB0aGUgZGF0YSBzZXJpZXMuIFRoaXMgZnVuY3Rpb25cbiAqIHRha2VzIGNhcmUgb2YgY2xlYW51cCBvZiBwcmV2aW91c2x5LWRyYXduIGRvdHMuXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS51cGRhdGVTZWxlY3Rpb25fID0gZnVuY3Rpb24ob3B0X2FuaW1GcmFjdGlvbikge1xuICAvKnZhciBkZWZhdWx0UHJldmVudGVkID0gKi9cbiAgdGhpcy5jYXNjYWRlRXZlbnRzXygnc2VsZWN0Jywge1xuICAgIHNlbGVjdGVkUm93OiB0aGlzLmxhc3RSb3dfID09PSAtMSA/IHVuZGVmaW5lZCA6IHRoaXMubGFzdFJvd18sXG4gICAgc2VsZWN0ZWRYOiB0aGlzLmxhc3R4XyA9PT0gLTEgPyB1bmRlZmluZWQgOiB0aGlzLmxhc3R4XyxcbiAgICBzZWxlY3RlZFBvaW50czogdGhpcy5zZWxQb2ludHNfXG4gIH0pO1xuICAvLyBUT0RPKGRhbnZrKTogdXNlIGRlZmF1bHRQcmV2ZW50ZWQgaGVyZT9cblxuICAvLyBDbGVhciB0aGUgcHJldmlvdXNseSBkcmF3biB2ZXJ0aWNhbCwgaWYgdGhlcmUgaXMgb25lXG4gIHZhciBpO1xuICB2YXIgY3R4ID0gdGhpcy5jYW52YXNfY3R4XztcbiAgaWYgKHRoaXMuZ2V0T3B0aW9uKCdoaWdobGlnaHRTZXJpZXNPcHRzJykpIHtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGhfLCB0aGlzLmhlaWdodF8pO1xuICAgIHZhciBhbHBoYSA9IDEuMCAtIHRoaXMuZ2V0TnVtZXJpY09wdGlvbignaGlnaGxpZ2h0U2VyaWVzQmFja2dyb3VuZEFscGhhJyk7XG4gICAgdmFyIGJhY2tncm91bmRDb2xvciA9IHV0aWxzLnRvUkdCXyh0aGlzLmdldE9wdGlvbignaGlnaGxpZ2h0U2VyaWVzQmFja2dyb3VuZENvbG9yJykpO1xuXG4gICAgaWYgKGFscGhhKSB7XG4gICAgICAvLyBBY3RpdmF0aW5nIGJhY2tncm91bmQgZmFkZSBpbmNsdWRlcyBhbiBhbmltYXRpb24gZWZmZWN0IGZvciBhIGdyYWR1YWxcbiAgICAgIC8vIGZhZGUuIFRPRE8oa2xhdXN3KTogbWFrZSB0aGlzIGluZGVwZW5kZW50bHkgY29uZmlndXJhYmxlIGlmIGl0IGNhdXNlc1xuICAgICAgLy8gaXNzdWVzPyBVc2UgYSBzaGFyZWQgcHJlZmVyZW5jZSB0byBjb250cm9sIGFuaW1hdGlvbnM/XG4gICAgICB2YXIgYW5pbWF0ZUJhY2tncm91bmRGYWRlID0gdHJ1ZTtcbiAgICAgIGlmIChhbmltYXRlQmFja2dyb3VuZEZhZGUpIHtcbiAgICAgICAgaWYgKG9wdF9hbmltRnJhY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIHN0YXJ0IGEgbmV3IGFuaW1hdGlvblxuICAgICAgICAgIHRoaXMuYW5pbWF0ZVNlbGVjdGlvbl8oMSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFscGhhICo9IG9wdF9hbmltRnJhY3Rpb247XG4gICAgICB9XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoJyArIGJhY2tncm91bmRDb2xvci5yICsgJywnICsgYmFja2dyb3VuZENvbG9yLmcgKyAnLCcgKyBiYWNrZ3JvdW5kQ29sb3IuYiArICcsJyArIGFscGhhICsgJyknO1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMud2lkdGhfLCB0aGlzLmhlaWdodF8pO1xuICAgIH1cblxuICAgIC8vIFJlZHJhdyBvbmx5IHRoZSBoaWdobGlnaHRlZCBzZXJpZXMgaW4gdGhlIGludGVyYWN0aXZlIGNhbnZhcyAobm90IHRoZVxuICAgIC8vIHN0YXRpYyBwbG90IGNhbnZhcywgd2hpY2ggaXMgd2hlcmUgc2VyaWVzIGFyZSB1c3VhbGx5IGRyYXduKS5cbiAgICB0aGlzLnBsb3R0ZXJfLl9yZW5kZXJMaW5lQ2hhcnQodGhpcy5oaWdobGlnaHRTZXRfLCBjdHgpO1xuICB9IGVsc2UgaWYgKHRoaXMucHJldmlvdXNWZXJ0aWNhbFhfID49IDApIHtcbiAgICAvLyBEZXRlcm1pbmUgdGhlIG1heGltdW0gaGlnaGxpZ2h0IGNpcmNsZSBzaXplLlxuICAgIHZhciBtYXhDaXJjbGVTaXplID0gMDtcbiAgICB2YXIgbGFiZWxzID0gdGhpcy5hdHRyXygnbGFiZWxzJyk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHIgPSB0aGlzLmdldE51bWVyaWNPcHRpb24oJ2hpZ2hsaWdodENpcmNsZVNpemUnLCBsYWJlbHNbaV0pO1xuICAgICAgaWYgKHIgPiBtYXhDaXJjbGVTaXplKSBtYXhDaXJjbGVTaXplID0gcjtcbiAgICB9XG4gICAgdmFyIHB4ID0gdGhpcy5wcmV2aW91c1ZlcnRpY2FsWF87XG4gICAgY3R4LmNsZWFyUmVjdChweCAtIG1heENpcmNsZVNpemUgLSAxLCAwLFxuICAgICAgICAgICAgICAgICAgMiAqIG1heENpcmNsZVNpemUgKyAyLCB0aGlzLmhlaWdodF8pO1xuICB9XG5cbiAgaWYgKHRoaXMuc2VsUG9pbnRzXy5sZW5ndGggPiAwKSB7XG4gICAgLy8gRHJhdyBjb2xvcmVkIGNpcmNsZXMgb3ZlciB0aGUgY2VudGVyIG9mIGVhY2ggc2VsZWN0ZWQgcG9pbnRcbiAgICB2YXIgY2FudmFzeCA9IHRoaXMuc2VsUG9pbnRzX1swXS5jYW52YXN4O1xuICAgIGN0eC5zYXZlKCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuc2VsUG9pbnRzXy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHB0ID0gdGhpcy5zZWxQb2ludHNfW2ldO1xuICAgICAgaWYgKGlzTmFOKHB0LmNhbnZhc3kpKSBjb250aW51ZTtcblxuICAgICAgdmFyIGNpcmNsZVNpemUgPSB0aGlzLmdldE51bWVyaWNPcHRpb24oJ2hpZ2hsaWdodENpcmNsZVNpemUnLCBwdC5uYW1lKTtcbiAgICAgIHZhciBjYWxsYmFjayA9IHRoaXMuZ2V0RnVuY3Rpb25PcHRpb24oXCJkcmF3SGlnaGxpZ2h0UG9pbnRDYWxsYmFja1wiLCBwdC5uYW1lKTtcbiAgICAgIHZhciBjb2xvciA9IHRoaXMucGxvdHRlcl8uY29sb3JzW3B0Lm5hbWVdO1xuICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IHV0aWxzLkNpcmNsZXMuREVGQVVMVDtcbiAgICAgIH1cbiAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmdldE51bWVyaWNPcHRpb24oJ3N0cm9rZVdpZHRoJywgcHQubmFtZSk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgdGhpcywgcHQubmFtZSwgY3R4LCBjYW52YXN4LCBwdC5jYW52YXN5LFxuICAgICAgICAgIGNvbG9yLCBjaXJjbGVTaXplLCBwdC5pZHgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuXG4gICAgdGhpcy5wcmV2aW91c1ZlcnRpY2FsWF8gPSBjYW52YXN4O1xuICB9XG59O1xuXG4vKipcbiAqIE1hbnVhbGx5IHNldCB0aGUgc2VsZWN0ZWQgcG9pbnRzIGFuZCBkaXNwbGF5IGluZm9ybWF0aW9uIGFib3V0IHRoZW0gaW4gdGhlXG4gKiBsZWdlbmQuIFRoZSBzZWxlY3Rpb24gY2FuIGJlIGNsZWFyZWQgdXNpbmcgY2xlYXJTZWxlY3Rpb24oKSBhbmQgcXVlcmllZFxuICogdXNpbmcgZ2V0U2VsZWN0aW9uKCkuXG4gKlxuICogVG8gc2V0IGEgc2VsZWN0ZWQgc2VyaWVzIGJ1dCBub3QgYSBzZWxlY3RlZCBwb2ludCwgY2FsbCBzZXRTZWxlY3Rpb24gd2l0aFxuICogcm93PWZhbHNlIGFuZCB0aGUgc2VsZWN0ZWQgc2VyaWVzIG5hbWUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHJvdyBSb3cgbnVtYmVyIHRoYXQgc2hvdWxkIGJlIGhpZ2hsaWdodGVkIChpLmUuIGFwcGVhciB3aXRoXG4gKiBob3ZlciBkb3RzIG9uIHRoZSBjaGFydCkuXG4gKiBAcGFyYW0ge3Nlcmllc05hbWV9IG9wdGlvbmFsIHNlcmllcyBuYW1lIHRvIGhpZ2hsaWdodCB0aGF0IHNlcmllcyB3aXRoIHRoZVxuICogdGhlIGhpZ2hsaWdodFNlcmllc09wdHMgc2V0dGluZy5cbiAqIEBwYXJhbSB7IGxvY2tlZCB9IG9wdGlvbmFsIElmIHRydWUsIGtlZXAgc2VyaWVzTmFtZSBzZWxlY3RlZCB3aGVuIG1vdXNpbmdcbiAqIG92ZXIgdGhlIGdyYXBoLCBkaXNhYmxpbmcgY2xvc2VzdC1zZXJpZXMgaGlnaGxpZ2h0aW5nLiBDYWxsIGNsZWFyU2VsZWN0aW9uKClcbiAqIHRvIHVubG9jayBpdC5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuc2V0U2VsZWN0aW9uID0gZnVuY3Rpb24ocm93LCBvcHRfc2VyaWVzTmFtZSwgb3B0X2xvY2tlZCkge1xuICAvLyBFeHRyYWN0IHRoZSBwb2ludHMgd2UndmUgc2VsZWN0ZWRcbiAgdGhpcy5zZWxQb2ludHNfID0gW107XG5cbiAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgaWYgKHJvdyAhPT0gZmFsc2UgJiYgcm93ID49IDApIHtcbiAgICBpZiAocm93ICE9IHRoaXMubGFzdFJvd18pIGNoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMubGFzdFJvd18gPSByb3c7XG4gICAgZm9yICh2YXIgc2V0SWR4ID0gMDsgc2V0SWR4IDwgdGhpcy5sYXlvdXRfLnBvaW50cy5sZW5ndGg7ICsrc2V0SWR4KSB7XG4gICAgICB2YXIgcG9pbnRzID0gdGhpcy5sYXlvdXRfLnBvaW50c1tzZXRJZHhdO1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHBvaW50IGF0IHRoZSBhcHByb3ByaWF0ZSBpbmRleCBpcyB0aGUgcG9pbnQgd2UncmUgbG9va2luZ1xuICAgICAgLy8gZm9yLiAgSWYgaXQgaXMsIGp1c3QgdXNlIGl0LCBvdGhlcndpc2Ugc2VhcmNoIHRoZSBhcnJheSBmb3IgYSBwb2ludFxuICAgICAgLy8gaW4gdGhlIHByb3BlciBwbGFjZS5cbiAgICAgIHZhciBzZXRSb3cgPSByb3cgLSB0aGlzLmdldExlZnRCb3VuZGFyeV8oc2V0SWR4KTtcbiAgICAgIGlmIChzZXRSb3cgPj0gMCAmJiBzZXRSb3cgPCBwb2ludHMubGVuZ3RoICYmIHBvaW50c1tzZXRSb3ddLmlkeCA9PSByb3cpIHtcbiAgICAgICAgdmFyIHBvaW50ID0gcG9pbnRzW3NldFJvd107XG4gICAgICAgIGlmIChwb2ludC55dmFsICE9PSBudWxsKSB0aGlzLnNlbFBvaW50c18ucHVzaChwb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBwb2ludElkeCA9IDA7IHBvaW50SWR4IDwgcG9pbnRzLmxlbmd0aDsgKytwb2ludElkeCkge1xuICAgICAgICAgIHZhciBwb2ludCA9IHBvaW50c1twb2ludElkeF07XG4gICAgICAgICAgaWYgKHBvaW50LmlkeCA9PSByb3cpIHtcbiAgICAgICAgICAgIGlmIChwb2ludC55dmFsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2VsUG9pbnRzXy5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodGhpcy5sYXN0Um93XyA+PSAwKSBjaGFuZ2VkID0gdHJ1ZTtcbiAgICB0aGlzLmxhc3RSb3dfID0gLTE7XG4gIH1cblxuICBpZiAodGhpcy5zZWxQb2ludHNfLmxlbmd0aCkge1xuICAgIHRoaXMubGFzdHhfID0gdGhpcy5zZWxQb2ludHNfWzBdLnh2YWw7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0eF8gPSAtMTtcbiAgfVxuXG4gIGlmIChvcHRfc2VyaWVzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHRoaXMuaGlnaGxpZ2h0U2V0XyAhPT0gb3B0X3Nlcmllc05hbWUpIGNoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMuaGlnaGxpZ2h0U2V0XyA9IG9wdF9zZXJpZXNOYW1lO1xuICB9XG5cbiAgaWYgKG9wdF9sb2NrZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMubG9ja2VkU2V0XyA9IG9wdF9sb2NrZWQ7XG4gIH1cblxuICBpZiAoY2hhbmdlZCkge1xuICAgIHRoaXMudXBkYXRlU2VsZWN0aW9uXyh1bmRlZmluZWQpO1xuICB9XG4gIHJldHVybiBjaGFuZ2VkO1xufTtcblxuLyoqXG4gKiBUaGUgbW91c2UgaGFzIGxlZnQgdGhlIGNhbnZhcy4gQ2xlYXIgb3V0IHdoYXRldmVyIGFydGlmYWN0cyByZW1haW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCB0aGUgbW91c2VvdXQgZXZlbnQgZnJvbSB0aGUgYnJvd3Nlci5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLm1vdXNlT3V0XyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmICh0aGlzLmdldEZ1bmN0aW9uT3B0aW9uKFwidW5oaWdobGlnaHRDYWxsYmFja1wiKSkge1xuICAgIHRoaXMuZ2V0RnVuY3Rpb25PcHRpb24oXCJ1bmhpZ2hsaWdodENhbGxiYWNrXCIpLmNhbGwodGhpcywgZXZlbnQpO1xuICB9XG5cbiAgaWYgKHRoaXMuZ2V0Qm9vbGVhbk9wdGlvbihcImhpZGVPdmVybGF5T25Nb3VzZU91dFwiKSAmJiAhdGhpcy5sb2NrZWRTZXRfKSB7XG4gICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICB9XG59O1xuXG4vKipcbiAqIENsZWFycyB0aGUgY3VycmVudCBzZWxlY3Rpb24gKGkuZS4gcG9pbnRzIHRoYXQgd2VyZSBoaWdobGlnaHRlZCBieSBtb3ZpbmdcbiAqIHRoZSBtb3VzZSBvdmVyIHRoZSBjaGFydCkuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmNsZWFyU2VsZWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY2FzY2FkZUV2ZW50c18oJ2Rlc2VsZWN0Jywge30pO1xuXG4gIHRoaXMubG9ja2VkU2V0XyA9IGZhbHNlO1xuICAvLyBHZXQgcmlkIG9mIHRoZSBvdmVybGF5IGRhdGFcbiAgaWYgKHRoaXMuZmFkZUxldmVsKSB7XG4gICAgdGhpcy5hbmltYXRlU2VsZWN0aW9uXygtMSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuY2FudmFzX2N0eF8uY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGhfLCB0aGlzLmhlaWdodF8pO1xuICB0aGlzLmZhZGVMZXZlbCA9IDA7XG4gIHRoaXMuc2VsUG9pbnRzXyA9IFtdO1xuICB0aGlzLmxhc3R4XyA9IC0xO1xuICB0aGlzLmxhc3RSb3dfID0gLTE7XG4gIHRoaXMuaGlnaGxpZ2h0U2V0XyA9IG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHJvdy4gVG8gZ2V0IGRhdGEgZm9yIHRoaXMgcm93LFxuICogeW91IGNhbiB1c2UgdGhlIGdldFZhbHVlIG1ldGhvZC5cbiAqIEByZXR1cm4ge251bWJlcn0gcm93IG51bWJlciwgb3IgLTEgaWYgbm90aGluZyBpcyBzZWxlY3RlZFxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5nZXRTZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLnNlbFBvaW50c18gfHwgdGhpcy5zZWxQb2ludHNfLmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBmb3IgKHZhciBzZXRJZHggPSAwOyBzZXRJZHggPCB0aGlzLmxheW91dF8ucG9pbnRzLmxlbmd0aDsgc2V0SWR4KyspIHtcbiAgICB2YXIgcG9pbnRzID0gdGhpcy5sYXlvdXRfLnBvaW50c1tzZXRJZHhdO1xuICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHBvaW50cy5sZW5ndGg7IHJvdysrKSB7XG4gICAgICBpZiAocG9pbnRzW3Jvd10ueCA9PSB0aGlzLnNlbFBvaW50c19bMF0ueCkge1xuICAgICAgICByZXR1cm4gcG9pbnRzW3Jvd10uaWR4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnRseS1oaWdobGlnaHRlZCBzZXJpZXMuXG4gKiBPbmx5IGF2YWlsYWJsZSB3aGVuIHRoZSBoaWdobGlnaHRTZXJpZXNPcHRzIG9wdGlvbiBpcyBpbiB1c2UuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldEhpZ2hsaWdodFNlcmllcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5oaWdobGlnaHRTZXRfO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnRseS1oaWdobGlnaHRlZCBzZXJpZXMgd2FzIGxvY2tlZFxuICogdmlhIHNldFNlbGVjdGlvbiguLi4sIHNlcmllc05hbWUsIHRydWUpLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5pc1Nlcmllc0xvY2tlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5sb2NrZWRTZXRfO1xufTtcblxuLyoqXG4gKiBGaXJlcyB3aGVuIHRoZXJlJ3MgZGF0YSBhdmFpbGFibGUgdG8gYmUgZ3JhcGhlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIFJhdyBDU1YgZGF0YSB0byBiZSBwbG90dGVkXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5sb2FkZWRFdmVudF8gPSBmdW5jdGlvbihkYXRhKSB7XG4gIHRoaXMucmF3RGF0YV8gPSB0aGlzLnBhcnNlQ1NWXyhkYXRhKTtcbiAgdGhpcy5jYXNjYWRlRGF0YURpZFVwZGF0ZUV2ZW50XygpO1xuICB0aGlzLnByZWRyYXdfKCk7XG59O1xuXG4vKipcbiAqIEFkZCB0aWNrcyBvbiB0aGUgeC1heGlzIHJlcHJlc2VudGluZyB5ZWFycywgbW9udGhzLCBxdWFydGVycywgd2Vla3MsIG9yIGRheXNcbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmFkZFhUaWNrc18gPSBmdW5jdGlvbigpIHtcbiAgLy8gRGV0ZXJtaW5lIHRoZSBjb3JyZWN0IHRpY2tzIHNjYWxlIG9uIHRoZSB4LWF4aXM6IHF1YXJ0ZXJseSwgbW9udGhseSwgLi4uXG4gIHZhciByYW5nZTtcbiAgaWYgKHRoaXMuZGF0ZVdpbmRvd18pIHtcbiAgICByYW5nZSA9IFt0aGlzLmRhdGVXaW5kb3dfWzBdLCB0aGlzLmRhdGVXaW5kb3dfWzFdXTtcbiAgfSBlbHNlIHtcbiAgICByYW5nZSA9IHRoaXMueEF4aXNFeHRyZW1lcygpO1xuICB9XG5cbiAgdmFyIHhBeGlzT3B0aW9uc1ZpZXcgPSB0aGlzLm9wdGlvbnNWaWV3Rm9yQXhpc18oJ3gnKTtcbiAgdmFyIHhUaWNrcyA9IHhBeGlzT3B0aW9uc1ZpZXcoJ3RpY2tlcicpKFxuICAgICAgcmFuZ2VbMF0sXG4gICAgICByYW5nZVsxXSxcbiAgICAgIHRoaXMucGxvdHRlcl8uYXJlYS53LCAgLy8gVE9ETyhkYW52ayk6IHNob3VsZCBiZSBhcmVhLndpZHRoXG4gICAgICB4QXhpc09wdGlvbnNWaWV3LFxuICAgICAgdGhpcyk7XG4gIC8vIHZhciBtc2cgPSAndGlja2VyKCcgKyByYW5nZVswXSArICcsICcgKyByYW5nZVsxXSArICcsICcgKyB0aGlzLndpZHRoXyArICcsICcgKyB0aGlzLmF0dHJfKCdwaXhlbHNQZXJYTGFiZWwnKSArICcpIC0+ICcgKyBKU09OLnN0cmluZ2lmeSh4VGlja3MpO1xuICAvLyBjb25zb2xlLmxvZyhtc2cpO1xuICB0aGlzLmxheW91dF8uc2V0WFRpY2tzKHhUaWNrcyk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvcnJlY3QgaGFuZGxlciBjbGFzcyBmb3IgdGhlIGN1cnJlbnRseSBzZXQgb3B0aW9ucy5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldEhhbmRsZXJDbGFzc18gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhhbmRsZXJDbGFzcztcbiAgaWYgKHRoaXMuYXR0cl8oJ2RhdGFIYW5kbGVyJykpIHtcbiAgICBoYW5kbGVyQ2xhc3MgPSAgdGhpcy5hdHRyXygnZGF0YUhhbmRsZXInKTtcbiAgfSBlbHNlIGlmICh0aGlzLmZyYWN0aW9uc18pIHtcbiAgICBpZiAodGhpcy5nZXRCb29sZWFuT3B0aW9uKCdlcnJvckJhcnMnKSkge1xuICAgICAgaGFuZGxlckNsYXNzID0gRnJhY3Rpb25zQmFyc0hhbmRsZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXJDbGFzcyA9IERlZmF1bHRGcmFjdGlvbkhhbmRsZXI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHRoaXMuZ2V0Qm9vbGVhbk9wdGlvbignY3VzdG9tQmFycycpKSB7XG4gICAgaGFuZGxlckNsYXNzID0gQ3VzdG9tQmFyc0hhbmRsZXI7XG4gIH0gZWxzZSBpZiAodGhpcy5nZXRCb29sZWFuT3B0aW9uKCdlcnJvckJhcnMnKSkge1xuICAgIGhhbmRsZXJDbGFzcyA9IEVycm9yQmFyc0hhbmRsZXI7XG4gIH0gZWxzZSB7XG4gICAgaGFuZGxlckNsYXNzID0gRGVmYXVsdEhhbmRsZXI7XG4gIH1cbiAgcmV0dXJuIGhhbmRsZXJDbGFzcztcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2Ugd2hlbiB0aGUgY2hhcnQncyBkYXRhIGlzIGNoYW5nZWQgb3IgdGhlIG9wdGlvbnNcbiAqIGRpY3Rpb25hcnkgaXMgdXBkYXRlZC4gSXQgaXMgX25vdF8gY2FsbGVkIHdoZW4gdGhlIHVzZXIgcGFucyBvciB6b29tcy4gVGhlXG4gKiBpZGVhIGlzIHRoYXQgdmFsdWVzIGRlcml2ZWQgZnJvbSB0aGUgY2hhcnQncyBkYXRhIGNhbiBiZSBjb21wdXRlZCBoZXJlLFxuICogcmF0aGVyIHRoYW4gZXZlcnkgdGltZSB0aGUgY2hhcnQgaXMgZHJhd24uIFRoaXMgaW5jbHVkZXMgdGhpbmdzIGxpa2UgdGhlXG4gKiBudW1iZXIgb2YgYXhlcywgcm9sbGluZyBhdmVyYWdlcywgZXRjLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5wcmVkcmF3XyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpO1xuXG4gIC8vIENyZWF0ZSB0aGUgY29ycmVjdCBkYXRhSGFuZGxlclxuICB0aGlzLmRhdGFIYW5kbGVyXyA9IG5ldyAodGhpcy5nZXRIYW5kbGVyQ2xhc3NfKCkpKCk7XG5cbiAgdGhpcy5sYXlvdXRfLmNvbXB1dGVQbG90QXJlYSgpO1xuXG4gIC8vIFRPRE8oZGFudmspOiBtb3ZlIG1vcmUgY29tcHV0YXRpb25zIG91dCBvZiBkcmF3R3JhcGhfIGFuZCBpbnRvIGhlcmUuXG4gIHRoaXMuY29tcHV0ZVlBeGVzXygpO1xuXG4gIGlmICghdGhpcy5pc19pbml0aWFsX2RyYXdfKSB7XG4gICAgdGhpcy5jYW52YXNfY3R4Xy5yZXN0b3JlKCk7XG4gICAgdGhpcy5oaWRkZW5fY3R4Xy5yZXN0b3JlKCk7XG4gIH1cblxuICB0aGlzLmNhbnZhc19jdHhfLnNhdmUoKTtcbiAgdGhpcy5oaWRkZW5fY3R4Xy5zYXZlKCk7XG5cbiAgLy8gQ3JlYXRlIGEgbmV3IHBsb3R0ZXIuXG4gIHRoaXMucGxvdHRlcl8gPSBuZXcgRHlncmFwaENhbnZhc1JlbmRlcmVyKHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRkZW5fY3R4XyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXlvdXRfKTtcblxuICAvLyBUaGUgcm9sbGVyIHNpdHMgaW4gdGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgY2hhcnQuIFdlIGRvbid0IGtub3cgd2hlcmVcbiAgLy8gdGhpcyB3aWxsIGJlIHVudGlsIHRoZSBvcHRpb25zIGFyZSBhdmFpbGFibGUsIHNvIGl0J3MgcG9zaXRpb25lZCBoZXJlLlxuICB0aGlzLmNyZWF0ZVJvbGxJbnRlcmZhY2VfKCk7XG5cbiAgdGhpcy5jYXNjYWRlRXZlbnRzXygncHJlZHJhdycpO1xuXG4gIC8vIENvbnZlcnQgdGhlIHJhdyBkYXRhIChhIDJEIGFycmF5KSBpbnRvIHRoZSBpbnRlcm5hbCBmb3JtYXQgYW5kIGNvbXB1dGVcbiAgLy8gcm9sbGluZyBhdmVyYWdlcy5cbiAgdGhpcy5yb2xsZWRTZXJpZXNfID0gW251bGxdOyAgLy8geC1heGlzIGlzIHRoZSBmaXJzdCBzZXJpZXMgYW5kIGl0J3Mgc3BlY2lhbFxuICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMubnVtQ29sdW1ucygpOyBpKyspIHtcbiAgICAvLyB2YXIgbG9nU2NhbGUgPSB0aGlzLmF0dHJfKCdsb2dzY2FsZScsIGkpOyAvLyBUT0RPKGtsYXVzdyk6IHRoaXMgbG9va3Mgd3JvbmcgLy8ga29uaWdzYmVyZyB0aGlua3Mgc28gdG9vLlxuICAgIHZhciBzZXJpZXMgPSB0aGlzLmRhdGFIYW5kbGVyXy5leHRyYWN0U2VyaWVzKHRoaXMucmF3RGF0YV8sIGksIHRoaXMuYXR0cmlidXRlc18pO1xuICAgIGlmICh0aGlzLnJvbGxQZXJpb2RfID4gMSkge1xuICAgICAgc2VyaWVzID0gdGhpcy5kYXRhSGFuZGxlcl8ucm9sbGluZ0F2ZXJhZ2Uoc2VyaWVzLCB0aGlzLnJvbGxQZXJpb2RfLCB0aGlzLmF0dHJpYnV0ZXNfKTtcbiAgICB9XG5cbiAgICB0aGlzLnJvbGxlZFNlcmllc18ucHVzaChzZXJpZXMpO1xuICB9XG5cbiAgLy8gSWYgdGhlIGRhdGEgb3Igb3B0aW9ucyBoYXZlIGNoYW5nZWQsIHRoZW4gd2UnZCBiZXR0ZXIgcmVkcmF3LlxuICB0aGlzLmRyYXdHcmFwaF8oKTtcblxuICAvLyBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gZG8gdmFyaW91cyBhbmltYXRpb25zLlxuICB2YXIgZW5kID0gbmV3IERhdGUoKTtcbiAgdGhpcy5kcmF3aW5nVGltZU1zXyA9IChlbmQgLSBzdGFydCk7XG59O1xuXG4vKipcbiAqIFBvaW50IHN0cnVjdHVyZS5cbiAqXG4gKiB4dmFsXyogYW5kIHl2YWxfKiBhcmUgdGhlIG9yaWdpbmFsIHVuc2NhbGVkIGRhdGEgdmFsdWVzLFxuICogd2hpbGUgeF8qIGFuZCB5XyogYXJlIHNjYWxlZCB0byB0aGUgcmFuZ2UgKDAuMC0xLjApIGZvciBwbG90dGluZy5cbiAqIHl2YWxfc3RhY2tlZCBpcyB0aGUgY3VtdWxhdGl2ZSBZIHZhbHVlIHVzZWQgZm9yIHN0YWNraW5nIGdyYXBocyxcbiAqIGFuZCBib3R0b20vdG9wL21pbnVzL3BsdXMgYXJlIHVzZWQgZm9yIGVycm9yIGJhciBncmFwaHMuXG4gKlxuICogQHR5cGVkZWYge3tcbiAqICAgICBpZHg6IG51bWJlcixcbiAqICAgICBuYW1lOiBzdHJpbmcsXG4gKiAgICAgeDogP251bWJlcixcbiAqICAgICB4dmFsOiA/bnVtYmVyLFxuICogICAgIHlfYm90dG9tOiA/bnVtYmVyLFxuICogICAgIHk6ID9udW1iZXIsXG4gKiAgICAgeV9zdGFja2VkOiA/bnVtYmVyLFxuICogICAgIHlfdG9wOiA/bnVtYmVyLFxuICogICAgIHl2YWxfbWludXM6ID9udW1iZXIsXG4gKiAgICAgeXZhbDogP251bWJlcixcbiAqICAgICB5dmFsX3BsdXM6ID9udW1iZXIsXG4gKiAgICAgeXZhbF9zdGFja2VkXG4gKiB9fVxuICovXG5EeWdyYXBoLlBvaW50VHlwZSA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHBvaW50IHN0YWNraW5nIGZvciBzdGFja2VkR3JhcGg9dHJ1ZS5cbiAqXG4gKiBGb3Igc3RhY2tpbmcgcHVycG9zZXMsIGludGVycG9sYXRlIG9yIGV4dGVuZCBuZWlnaGJvcmluZyBkYXRhIGFjcm9zc1xuICogTmFOIHZhbHVlcyBiYXNlZCBvbiBzdGFja2VkR3JhcGhOYU5GaWxsIHNldHRpbmdzLiBUaGlzIGlzIGZvciBkaXNwbGF5XG4gKiBvbmx5LCB0aGUgdW5kZXJseWluZyBkYXRhIHZhbHVlIGFzIHNob3duIGluIHRoZSBsZWdlbmQgcmVtYWlucyBOYU4uXG4gKlxuICogQHBhcmFtIHtBcnJheS48RHlncmFwaC5Qb2ludFR5cGU+fSBwb2ludHMgUG9pbnQgYXJyYXkgZm9yIGEgc2luZ2xlIHNlcmllcy5cbiAqICAgICBVcGRhdGVzIGVhY2ggUG9pbnQncyB5dmFsX3N0YWNrZWQgcHJvcGVydHkuXG4gKiBAcGFyYW0ge0FycmF5LjxudW1iZXI+fSBjdW11bGF0aXZlWXZhbCBBY2N1bXVsYXRlZCB0b3Atb2YtZ3JhcGggc3RhY2tlZCBZXG4gKiAgICAgdmFsdWVzIGZvciB0aGUgc2VyaWVzIHNlZW4gc28gZmFyLiBJbmRleCBpcyB0aGUgcm93IG51bWJlci4gVXBkYXRlZFxuICogICAgIGJhc2VkIG9uIHRoZSBjdXJyZW50IHNlcmllcydzIHZhbHVlcy5cbiAqIEBwYXJhbSB7QXJyYXkuPG51bWJlcj59IHNlcmllc0V4dHJlbWVzIE1pbiBhbmQgbWF4IHZhbHVlcywgdXBkYXRlZFxuICogICAgIHRvIHJlZmxlY3QgdGhlIHN0YWNrZWQgdmFsdWVzLlxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGxNZXRob2QgSW50ZXJwb2xhdGlvbiBtZXRob2QsIG9uZSBvZiAnYWxsJywgJ2luc2lkZScsIG9yXG4gKiAgICAgJ25vbmUnLlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5zdGFja1BvaW50c18gPSBmdW5jdGlvbihcbiAgICBwb2ludHMsIGN1bXVsYXRpdmVZdmFsLCBzZXJpZXNFeHRyZW1lcywgZmlsbE1ldGhvZCkge1xuICB2YXIgbGFzdFh2YWwgPSBudWxsO1xuICB2YXIgcHJldlBvaW50ID0gbnVsbDtcbiAgdmFyIG5leHRQb2ludCA9IG51bGw7XG4gIHZhciBuZXh0UG9pbnRJZHggPSAtMTtcblxuICAvLyBGaW5kIHRoZSBuZXh0IHN0YWNrYWJsZSBwb2ludCBzdGFydGluZyBmcm9tIHRoZSBnaXZlbiBpbmRleC5cbiAgdmFyIHVwZGF0ZU5leHRQb2ludCA9IGZ1bmN0aW9uKGlkeCkge1xuICAgIC8vIElmIHdlJ3ZlIHByZXZpb3VzbHkgZm91bmQgYSBub24tTmFOIHBvaW50IGFuZCBoYXZlbid0IGdvbmUgcGFzdCBpdCB5ZXQsXG4gICAgLy8ganVzdCB1c2UgdGhhdC5cbiAgICBpZiAobmV4dFBvaW50SWR4ID49IGlkeCkgcmV0dXJuO1xuXG4gICAgLy8gV2UgaGF2ZW4ndCBmb3VuZCBhIG5vbi1OYU4gcG9pbnQgeWV0IG9yIGhhdmUgbW92ZWQgcGFzdCBpdCxcbiAgICAvLyBsb29rIHRvd2FyZHMgdGhlIHJpZ2h0IHRvIGZpbmQgYSBub24tTmFOIHBvaW50LlxuICAgIGZvciAodmFyIGogPSBpZHg7IGogPCBwb2ludHMubGVuZ3RoOyArK2opIHtcbiAgICAgIC8vIENsZWFyIG91dCBhIHByZXZpb3VzbHktZm91bmQgcG9pbnQgKGlmIGFueSkgc2luY2UgaXQncyBubyBsb25nZXJcbiAgICAgIC8vIHZhbGlkLCB3ZSBzaG91bGRuJ3QgdXNlIGl0IGZvciBpbnRlcnBvbGF0aW9uIGFueW1vcmUuXG4gICAgICBuZXh0UG9pbnQgPSBudWxsO1xuICAgICAgaWYgKCFpc05hTihwb2ludHNbal0ueXZhbCkgJiYgcG9pbnRzW2pdLnl2YWwgIT09IG51bGwpIHtcbiAgICAgICAgbmV4dFBvaW50SWR4ID0gajtcbiAgICAgICAgbmV4dFBvaW50ID0gcG9pbnRzW2pdO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgdmFyIHh2YWwgPSBwb2ludC54dmFsO1xuICAgIGlmIChjdW11bGF0aXZlWXZhbFt4dmFsXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdW11bGF0aXZlWXZhbFt4dmFsXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGFjdHVhbFl2YWwgPSBwb2ludC55dmFsO1xuICAgIGlmIChpc05hTihhY3R1YWxZdmFsKSB8fCBhY3R1YWxZdmFsID09PSBudWxsKSB7XG4gICAgICBpZihmaWxsTWV0aG9kID09ICdub25lJykge1xuICAgICAgICBhY3R1YWxZdmFsID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEludGVycG9sYXRlL2V4dGVuZCBmb3Igc3RhY2tpbmcgcHVycG9zZXMgaWYgcG9zc2libGUuXG4gICAgICAgIHVwZGF0ZU5leHRQb2ludChpKTtcbiAgICAgICAgaWYgKHByZXZQb2ludCAmJiBuZXh0UG9pbnQgJiYgZmlsbE1ldGhvZCAhPSAnbm9uZScpIHtcbiAgICAgICAgICAvLyBVc2UgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiBwcmV2UG9pbnQgYW5kIG5leHRQb2ludC5cbiAgICAgICAgICBhY3R1YWxZdmFsID0gcHJldlBvaW50Lnl2YWwgKyAobmV4dFBvaW50Lnl2YWwgLSBwcmV2UG9pbnQueXZhbCkgKlxuICAgICAgICAgICAgICAoKHh2YWwgLSBwcmV2UG9pbnQueHZhbCkgLyAobmV4dFBvaW50Lnh2YWwgLSBwcmV2UG9pbnQueHZhbCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZQb2ludCAmJiBmaWxsTWV0aG9kID09ICdhbGwnKSB7XG4gICAgICAgICAgYWN0dWFsWXZhbCA9IHByZXZQb2ludC55dmFsO1xuICAgICAgICB9IGVsc2UgaWYgKG5leHRQb2ludCAmJiBmaWxsTWV0aG9kID09ICdhbGwnKSB7XG4gICAgICAgICAgYWN0dWFsWXZhbCA9IG5leHRQb2ludC55dmFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdHVhbFl2YWwgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZQb2ludCA9IHBvaW50O1xuICAgIH1cblxuICAgIHZhciBzdGFja2VkWXZhbCA9IGN1bXVsYXRpdmVZdmFsW3h2YWxdO1xuICAgIGlmIChsYXN0WHZhbCAhPSB4dmFsKSB7XG4gICAgICAvLyBJZiBhbiB4LXZhbHVlIGlzIHJlcGVhdGVkLCB3ZSBpZ25vcmUgdGhlIGR1cGxpY2F0ZXMuXG4gICAgICBzdGFja2VkWXZhbCArPSBhY3R1YWxZdmFsO1xuICAgICAgY3VtdWxhdGl2ZVl2YWxbeHZhbF0gPSBzdGFja2VkWXZhbDtcbiAgICB9XG4gICAgbGFzdFh2YWwgPSB4dmFsO1xuXG4gICAgcG9pbnQueXZhbF9zdGFja2VkID0gc3RhY2tlZFl2YWw7XG5cbiAgICBpZiAoc3RhY2tlZFl2YWwgPiBzZXJpZXNFeHRyZW1lc1sxXSkge1xuICAgICAgc2VyaWVzRXh0cmVtZXNbMV0gPSBzdGFja2VkWXZhbDtcbiAgICB9XG4gICAgaWYgKHN0YWNrZWRZdmFsIDwgc2VyaWVzRXh0cmVtZXNbMF0pIHtcbiAgICAgIHNlcmllc0V4dHJlbWVzWzBdID0gc3RhY2tlZFl2YWw7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qKlxuICogTG9vcCBvdmVyIGFsbCBmaWVsZHMgYW5kIGNyZWF0ZSBkYXRhc2V0cywgY2FsY3VsYXRpbmcgZXh0cmVtZSB5LXZhbHVlcyBmb3JcbiAqIGVhY2ggc2VyaWVzIGFuZCBleHRyZW1lIHgtaW5kaWNlcyBhcyB3ZSBnby5cbiAqXG4gKiBkYXRlV2luZG93IGlzIHBhc3NlZCBpbiBhcyBhbiBleHBsaWNpdCBwYXJhbWV0ZXIgc28gdGhhdCB3ZSBjYW4gY29tcHV0ZVxuICogZXh0cmVtZSB2YWx1ZXMgXCJzcGVjdWxhdGl2ZWx5XCIsIGkuZS4gd2l0aG91dCBhY3R1YWxseSBzZXR0aW5nIHN0YXRlIG9uIHRoZVxuICogZHlncmFwaC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxBcnJheS48QXJyYXkuPChudW1iZXJ8QXJyYXk8bnVtYmVyPik+Pn0gcm9sbGVkU2VyaWVzLCB3aGVyZVxuICogICAgIHJvbGxlZFNlcmllc1tzZXJpZXNJbmRleF1bcm93XSA9IHJhdyBwb2ludCwgd2hlcmVcbiAqICAgICBzZXJpZXNJbmRleCBpcyB0aGUgY29sdW1uIG51bWJlciBzdGFydGluZyB3aXRoIDEsIGFuZFxuICogICAgIHJhd1BvaW50IGlzIFt4LHldIG9yIFt4LCBbeSwgZXJyXV0gb3IgW3gsIFt5LCB5bWludXMsIHlwbHVzXV0uXG4gKiBAcGFyYW0gez9BcnJheS48bnVtYmVyPn0gZGF0ZVdpbmRvdyBbeG1pbiwgeG1heF0gcGFpciwgb3IgbnVsbC5cbiAqIEByZXR1cm4ge3tcbiAqICAgICBwb2ludHM6IEFycmF5LjxBcnJheS48RHlncmFwaC5Qb2ludFR5cGU+PixcbiAqICAgICBzZXJpZXNFeHRyZW1lczogQXJyYXkuPEFycmF5LjxudW1iZXI+PixcbiAqICAgICBib3VuZGFyeUlkczogQXJyYXkuPG51bWJlcj59fVxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZ2F0aGVyRGF0YXNldHNfID0gZnVuY3Rpb24ocm9sbGVkU2VyaWVzLCBkYXRlV2luZG93KSB7XG4gIHZhciBib3VuZGFyeUlkcyA9IFtdO1xuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciBjdW11bGF0aXZlWXZhbCA9IFtdOyAgLy8gRm9yIHN0YWNrZWQgc2VyaWVzLlxuICB2YXIgZXh0cmVtZXMgPSB7fTsgIC8vIHNlcmllcyBuYW1lIC0+IFtsb3csIGhpZ2hdXG4gIHZhciBzZXJpZXNJZHgsIHNhbXBsZUlkeDtcbiAgdmFyIGZpcnN0SWR4LCBsYXN0SWR4O1xuICB2YXIgYXhpc0lkeDtcblxuICAvLyBMb29wIG92ZXIgdGhlIGZpZWxkcyAoc2VyaWVzKS4gIEdvIGZyb20gdGhlIGxhc3QgdG8gdGhlIGZpcnN0LFxuICAvLyBiZWNhdXNlIGlmIHRoZXkncmUgc3RhY2tlZCB0aGF0J3MgaG93IHdlIGFjY3VtdWxhdGUgdGhlIHZhbHVlcy5cbiAgdmFyIG51bV9zZXJpZXMgPSByb2xsZWRTZXJpZXMubGVuZ3RoIC0gMTtcbiAgdmFyIHNlcmllcztcbiAgZm9yIChzZXJpZXNJZHggPSBudW1fc2VyaWVzOyBzZXJpZXNJZHggPj0gMTsgc2VyaWVzSWR4LS0pIHtcbiAgICBpZiAoIXRoaXMudmlzaWJpbGl0eSgpW3Nlcmllc0lkeCAtIDFdKSBjb250aW51ZTtcblxuICAgIC8vIFBydW5lIGRvd24gdG8gdGhlIGRlc2lyZWQgcmFuZ2UsIGlmIG5lY2Vzc2FyeSAoZm9yIHpvb21pbmcpXG4gICAgLy8gQmVjYXVzZSB0aGVyZSBjYW4gYmUgbGluZXMgZ29pbmcgdG8gcG9pbnRzIG91dHNpZGUgb2YgdGhlIHZpc2libGUgYXJlYSxcbiAgICAvLyB3ZSBhY3R1YWxseSBwcnVuZSB0byB2aXNpYmxlIHBvaW50cywgcGx1cyBvbmUgb24gZWl0aGVyIHNpZGUuXG4gICAgaWYgKGRhdGVXaW5kb3cpIHtcbiAgICAgIHNlcmllcyA9IHJvbGxlZFNlcmllc1tzZXJpZXNJZHhdO1xuICAgICAgdmFyIGxvdyA9IGRhdGVXaW5kb3dbMF07XG4gICAgICB2YXIgaGlnaCA9IGRhdGVXaW5kb3dbMV07XG5cbiAgICAgIC8vIFRPRE8oZGFudmspOiBkbyBiaW5hcnkgc2VhcmNoIGluc3RlYWQgb2YgbGluZWFyIHNlYXJjaC5cbiAgICAgIC8vIFRPRE8oZGFudmspOiBwYXNzIGZpcnN0SWR4IGFuZCBsYXN0SWR4IGRpcmVjdGx5IHRvIHRoZSByZW5kZXJlci5cbiAgICAgIGZpcnN0SWR4ID0gbnVsbDtcbiAgICAgIGxhc3RJZHggPSBudWxsO1xuICAgICAgZm9yIChzYW1wbGVJZHggPSAwOyBzYW1wbGVJZHggPCBzZXJpZXMubGVuZ3RoOyBzYW1wbGVJZHgrKykge1xuICAgICAgICBpZiAoc2VyaWVzW3NhbXBsZUlkeF1bMF0gPj0gbG93ICYmIGZpcnN0SWR4ID09PSBudWxsKSB7XG4gICAgICAgICAgZmlyc3RJZHggPSBzYW1wbGVJZHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcmllc1tzYW1wbGVJZHhdWzBdIDw9IGhpZ2gpIHtcbiAgICAgICAgICBsYXN0SWR4ID0gc2FtcGxlSWR4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdElkeCA9PT0gbnVsbCkgZmlyc3RJZHggPSAwO1xuICAgICAgdmFyIGNvcnJlY3RlZEZpcnN0SWR4ID0gZmlyc3RJZHg7XG4gICAgICB2YXIgaXNJbnZhbGlkVmFsdWUgPSB0cnVlO1xuICAgICAgd2hpbGUgKGlzSW52YWxpZFZhbHVlICYmIGNvcnJlY3RlZEZpcnN0SWR4ID4gMCkge1xuICAgICAgICBjb3JyZWN0ZWRGaXJzdElkeC0tO1xuICAgICAgICAvLyBjaGVjayBpZiB0aGUgeSB2YWx1ZSBpcyBudWxsLlxuICAgICAgICBpc0ludmFsaWRWYWx1ZSA9IHNlcmllc1tjb3JyZWN0ZWRGaXJzdElkeF1bMV0gPT09IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXN0SWR4ID09PSBudWxsKSBsYXN0SWR4ID0gc2VyaWVzLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgY29ycmVjdGVkTGFzdElkeCA9IGxhc3RJZHg7XG4gICAgICBpc0ludmFsaWRWYWx1ZSA9IHRydWU7XG4gICAgICB3aGlsZSAoaXNJbnZhbGlkVmFsdWUgJiYgY29ycmVjdGVkTGFzdElkeCA8IHNlcmllcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNvcnJlY3RlZExhc3RJZHgrKztcbiAgICAgICAgaXNJbnZhbGlkVmFsdWUgPSBzZXJpZXNbY29ycmVjdGVkTGFzdElkeF1bMV0gPT09IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb3JyZWN0ZWRGaXJzdElkeCE9PWZpcnN0SWR4KSB7XG4gICAgICAgIGZpcnN0SWR4ID0gY29ycmVjdGVkRmlyc3RJZHg7XG4gICAgICB9XG4gICAgICBpZiAoY29ycmVjdGVkTGFzdElkeCAhPT0gbGFzdElkeCkge1xuICAgICAgICBsYXN0SWR4ID0gY29ycmVjdGVkTGFzdElkeDtcbiAgICAgIH1cblxuICAgICAgYm91bmRhcnlJZHNbc2VyaWVzSWR4LTFdID0gW2ZpcnN0SWR4LCBsYXN0SWR4XTtcblxuICAgICAgLy8gLnNsaWNlJ3MgZW5kIGlzIGV4Y2x1c2l2ZSwgd2Ugd2FudCB0byBpbmNsdWRlIGxhc3RJZHguXG4gICAgICBzZXJpZXMgPSBzZXJpZXMuc2xpY2UoZmlyc3RJZHgsIGxhc3RJZHggKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWVzID0gcm9sbGVkU2VyaWVzW3Nlcmllc0lkeF07XG4gICAgICBib3VuZGFyeUlkc1tzZXJpZXNJZHgtMV0gPSBbMCwgc2VyaWVzLmxlbmd0aC0xXTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWVzTmFtZSA9IHRoaXMuYXR0cl8oXCJsYWJlbHNcIilbc2VyaWVzSWR4XTtcbiAgICB2YXIgc2VyaWVzRXh0cmVtZXMgPSB0aGlzLmRhdGFIYW5kbGVyXy5nZXRFeHRyZW1lWVZhbHVlcyhzZXJpZXMsXG4gICAgICAgIGRhdGVXaW5kb3csIHRoaXMuZ2V0Qm9vbGVhbk9wdGlvbihcInN0ZXBQbG90XCIsc2VyaWVzTmFtZSkpO1xuXG4gICAgdmFyIHNlcmllc1BvaW50cyA9IHRoaXMuZGF0YUhhbmRsZXJfLnNlcmllc1RvUG9pbnRzKHNlcmllcyxcbiAgICAgICAgc2VyaWVzTmFtZSwgYm91bmRhcnlJZHNbc2VyaWVzSWR4LTFdWzBdKTtcblxuICAgIGlmICh0aGlzLmdldEJvb2xlYW5PcHRpb24oXCJzdGFja2VkR3JhcGhcIikpIHtcbiAgICAgIGF4aXNJZHggPSB0aGlzLmF0dHJpYnV0ZXNfLmF4aXNGb3JTZXJpZXMoc2VyaWVzTmFtZSk7XG4gICAgICBpZiAoY3VtdWxhdGl2ZVl2YWxbYXhpc0lkeF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjdW11bGF0aXZlWXZhbFtheGlzSWR4XSA9IFtdO1xuICAgICAgfVxuICAgICAgRHlncmFwaC5zdGFja1BvaW50c18oc2VyaWVzUG9pbnRzLCBjdW11bGF0aXZlWXZhbFtheGlzSWR4XSwgc2VyaWVzRXh0cmVtZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldEJvb2xlYW5PcHRpb24oXCJzdGFja2VkR3JhcGhOYU5GaWxsXCIpKTtcbiAgICB9XG5cbiAgICBleHRyZW1lc1tzZXJpZXNOYW1lXSA9IHNlcmllc0V4dHJlbWVzO1xuICAgIHBvaW50c1tzZXJpZXNJZHhdID0gc2VyaWVzUG9pbnRzO1xuICB9XG5cbiAgcmV0dXJuIHsgcG9pbnRzOiBwb2ludHMsIGV4dHJlbWVzOiBleHRyZW1lcywgYm91bmRhcnlJZHM6IGJvdW5kYXJ5SWRzIH07XG59O1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgZ3JhcGggd2l0aCBuZXcgZGF0YS4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIHZpZXdpbmcgYXJlYVxuICogaGFzIGNoYW5nZWQuIElmIHRoZSB1bmRlcmx5aW5nIGRhdGEgb3Igb3B0aW9ucyBoYXZlIGNoYW5nZWQsIHByZWRyYXdfIHdpbGxcbiAqIGJlIGNhbGxlZCBiZWZvcmUgZHJhd0dyYXBoXyBpcyBjYWxsZWQuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZHJhd0dyYXBoXyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpO1xuXG4gIC8vIFRoaXMgaXMgdXNlZCB0byBzZXQgdGhlIHNlY29uZCBwYXJhbWV0ZXIgdG8gZHJhd0NhbGxiYWNrLCBiZWxvdy5cbiAgdmFyIGlzX2luaXRpYWxfZHJhdyA9IHRoaXMuaXNfaW5pdGlhbF9kcmF3XztcbiAgdGhpcy5pc19pbml0aWFsX2RyYXdfID0gZmFsc2U7XG5cbiAgdGhpcy5sYXlvdXRfLnJlbW92ZUFsbERhdGFzZXRzKCk7XG4gIHRoaXMuc2V0Q29sb3JzXygpO1xuICB0aGlzLmF0dHJzXy5wb2ludFNpemUgPSAwLjUgKiB0aGlzLmdldE51bWVyaWNPcHRpb24oJ2hpZ2hsaWdodENpcmNsZVNpemUnKTtcblxuICB2YXIgcGFja2VkID0gdGhpcy5nYXRoZXJEYXRhc2V0c18odGhpcy5yb2xsZWRTZXJpZXNfLCB0aGlzLmRhdGVXaW5kb3dfKTtcbiAgdmFyIHBvaW50cyA9IHBhY2tlZC5wb2ludHM7XG4gIHZhciBleHRyZW1lcyA9IHBhY2tlZC5leHRyZW1lcztcbiAgdGhpcy5ib3VuZGFyeUlkc18gPSBwYWNrZWQuYm91bmRhcnlJZHM7XG5cbiAgdGhpcy5zZXRJbmRleEJ5TmFtZV8gPSB7fTtcbiAgdmFyIGxhYmVscyA9IHRoaXMuYXR0cl8oXCJsYWJlbHNcIik7XG4gIHZhciBkYXRhSWR4ID0gMDtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXRoaXMudmlzaWJpbGl0eSgpW2kgLSAxXSkgY29udGludWU7XG4gICAgdGhpcy5sYXlvdXRfLmFkZERhdGFzZXQobGFiZWxzW2ldLCBwb2ludHNbaV0pO1xuICAgIHRoaXMuZGF0YXNldEluZGV4X1tpXSA9IGRhdGFJZHgrKztcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuc2V0SW5kZXhCeU5hbWVfW2xhYmVsc1tpXV0gPSBpO1xuICB9XG5cbiAgdGhpcy5jb21wdXRlWUF4aXNSYW5nZXNfKGV4dHJlbWVzKTtcbiAgdGhpcy5sYXlvdXRfLnNldFlBeGVzKHRoaXMuYXhlc18pO1xuXG4gIHRoaXMuYWRkWFRpY2tzXygpO1xuXG4gIC8vIFRlbGwgUGxvdEtpdCB0byB1c2UgdGhpcyBuZXcgZGF0YSBhbmQgcmVuZGVyIGl0c2VsZlxuICB0aGlzLmxheW91dF8uZXZhbHVhdGUoKTtcbiAgdGhpcy5yZW5kZXJHcmFwaF8oaXNfaW5pdGlhbF9kcmF3KTtcblxuICBpZiAodGhpcy5nZXRTdHJpbmdPcHRpb24oXCJ0aW1pbmdOYW1lXCIpKSB7XG4gICAgdmFyIGVuZCA9IG5ldyBEYXRlKCk7XG4gICAgY29uc29sZS5sb2codGhpcy5nZXRTdHJpbmdPcHRpb24oXCJ0aW1pbmdOYW1lXCIpICsgXCIgLSBkcmF3R3JhcGg6IFwiICsgKGVuZCAtIHN0YXJ0KSArIFwibXNcIik7XG4gIH1cbn07XG5cbi8qKlxuICogVGhpcyBkb2VzIHRoZSB3b3JrIG9mIGRyYXdpbmcgdGhlIGNoYXJ0LiBJdCBhc3N1bWVzIHRoYXQgdGhlIGxheW91dCBhbmQgYXhpc1xuICogc2NhbGVzIGhhdmUgYWxyZWFkeSBiZWVuIHNldCAoZS5nLiBieSBwcmVkcmF3XykuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUucmVuZGVyR3JhcGhfID0gZnVuY3Rpb24oaXNfaW5pdGlhbF9kcmF3KSB7XG4gIHRoaXMuY2FzY2FkZUV2ZW50c18oJ2NsZWFyQ2hhcnQnKTtcbiAgdGhpcy5wbG90dGVyXy5jbGVhcigpO1xuXG4gIGNvbnN0IHVuZGVybGF5Q2FsbGJhY2sgPSB0aGlzLmdldEZ1bmN0aW9uT3B0aW9uKCd1bmRlcmxheUNhbGxiYWNrJyk7XG4gIGlmICh1bmRlcmxheUNhbGxiYWNrKSB7XG4gICAgLy8gTk9URTogd2UgcGFzcyB0aGUgZHlncmFwaCBvYmplY3QgdG8gdGhpcyBjYWxsYmFjayB0d2ljZSB0byBhdm9pZCBicmVha2luZ1xuICAgIC8vIHVzZXJzIHdobyBleHBlY3QgYSBkZXByZWNhdGVkIGZvcm0gb2YgdGhpcyBjYWxsYmFjay5cbiAgICB1bmRlcmxheUNhbGxiYWNrLmNhbGwodGhpcyxcbiAgICAgICAgdGhpcy5oaWRkZW5fY3R4XywgdGhpcy5sYXlvdXRfLmdldFBsb3RBcmVhKCksIHRoaXMsIHRoaXMpO1xuICB9XG5cbiAgdmFyIGUgPSB7XG4gICAgY2FudmFzOiB0aGlzLmhpZGRlbl8sXG4gICAgZHJhd2luZ0NvbnRleHQ6IHRoaXMuaGlkZGVuX2N0eF9cbiAgfTtcbiAgdGhpcy5jYXNjYWRlRXZlbnRzXygnd2lsbERyYXdDaGFydCcsIGUpO1xuICB0aGlzLnBsb3R0ZXJfLnJlbmRlcigpO1xuICB0aGlzLmNhc2NhZGVFdmVudHNfKCdkaWREcmF3Q2hhcnQnLCBlKTtcbiAgdGhpcy5sYXN0Um93XyA9IC0xOyAgLy8gYmVjYXVzZSBwbHVnaW5zL2xlZ2VuZC5qcyBjbGVhcnMgdGhlIGxlZ2VuZFxuXG4gIC8vIFRPRE8oZGFudmspOiBpcyB0aGlzIGEgcGVyZm9ybWFuY2UgYm90dGxlbmVjayB3aGVuIHBhbm5pbmc/XG4gIC8vIFRoZSBpbnRlcmFjdGlvbiBjYW52YXMgc2hvdWxkIGFscmVhZHkgYmUgZW1wdHkgaW4gdGhhdCBzaXR1YXRpb24uXG4gIHRoaXMuY2FudmFzXy5nZXRDb250ZXh0KCcyZCcpLmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoXywgdGhpcy5oZWlnaHRfKTtcblxuICBjb25zdCBkcmF3Q2FsbGJhY2sgPSB0aGlzLmdldEZ1bmN0aW9uT3B0aW9uKFwiZHJhd0NhbGxiYWNrXCIpO1xuICBpZiAoZHJhd0NhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgZHJhd0NhbGxiYWNrLmNhbGwodGhpcywgdGhpcywgaXNfaW5pdGlhbF9kcmF3KTtcbiAgfVxuICBpZiAoaXNfaW5pdGlhbF9kcmF3KSB7XG4gICAgdGhpcy5yZWFkeUZpcmVkXyA9IHRydWU7XG4gICAgd2hpbGUgKHRoaXMucmVhZHlGbnNfLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBmbiA9IHRoaXMucmVhZHlGbnNfLnBvcCgpO1xuICAgICAgZm4odGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBEZXRlcm1pbmUgcHJvcGVydGllcyBvZiB0aGUgeS1heGVzIHdoaWNoIGFyZSBpbmRlcGVuZGVudCBvZiB0aGUgZGF0YVxuICogY3VycmVudGx5IGJlaW5nIGRpc3BsYXllZC4gVGhpcyBpbmNsdWRlcyB0aGluZ3MgbGlrZSB0aGUgbnVtYmVyIG9mIGF4ZXMgYW5kXG4gKiB0aGUgc3R5bGUgb2YgdGhlIGF4ZXMuIEl0IGRvZXMgbm90IGluY2x1ZGUgdGhlIHJhbmdlIG9mIGVhY2ggYXhpcyBhbmQgaXRzXG4gKiB0aWNrIG1hcmtzLlxuICogVGhpcyBmaWxscyBpbiB0aGlzLmF4ZXNfLlxuICogYXhlc18gPSBbIHsgb3B0aW9ucyB9IF1cbiAqICAgaW5kaWNlcyBhcmUgaW50byB0aGUgYXhlc18gYXJyYXkuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmNvbXB1dGVZQXhlc18gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGF4aXMsIGluZGV4LCBvcHRzLCB2O1xuXG4gIC8vIHRoaXMuYXhlc18gZG9lc24ndCBtYXRjaCB0aGlzLmF0dHJpYnV0ZXNfLmF4ZXNfLm9wdGlvbnMuIEl0J3MgdXNlZCBmb3JcbiAgLy8gZGF0YSBjb21wdXRhdGlvbiBhcyB3ZWxsIGFzIG9wdGlvbnMgc3RvcmFnZS5cbiAgLy8gR28gdGhyb3VnaCBvbmNlIGFuZCBhZGQgYWxsIHRoZSBheGVzLlxuICB0aGlzLmF4ZXNfID0gW107XG5cbiAgZm9yIChheGlzID0gMDsgYXhpcyA8IHRoaXMuYXR0cmlidXRlc18ubnVtQXhlcygpOyBheGlzKyspIHtcbiAgICAvLyBBZGQgYSBuZXcgYXhpcywgbWFraW5nIGEgY29weSBvZiBpdHMgcGVyLWF4aXMgb3B0aW9ucy5cbiAgICBvcHRzID0geyBnIDogdGhpcyB9O1xuICAgIHV0aWxzLnVwZGF0ZShvcHRzLCB0aGlzLmF0dHJpYnV0ZXNfLmF4aXNPcHRpb25zKGF4aXMpKTtcbiAgICB0aGlzLmF4ZXNfW2F4aXNdID0gb3B0cztcbiAgfVxuXG4gIGZvciAoYXhpcyA9IDA7IGF4aXMgPCB0aGlzLmF4ZXNfLmxlbmd0aDsgYXhpcysrKSB7XG4gICAgaWYgKGF4aXMgPT09IDApIHtcbiAgICAgIG9wdHMgPSB0aGlzLm9wdGlvbnNWaWV3Rm9yQXhpc18oJ3knICsgKGF4aXMgPyAnMicgOiAnJykpO1xuICAgICAgdiA9IG9wdHMoXCJ2YWx1ZVJhbmdlXCIpO1xuICAgICAgaWYgKHYpIHRoaXMuYXhlc19bYXhpc10udmFsdWVSYW5nZSA9IHY7XG4gICAgfSBlbHNlIHsgIC8vIFRvIGtlZXAgb2xkIGJlaGF2aW9yXG4gICAgICB2YXIgYXhlcyA9IHRoaXMudXNlcl9hdHRyc18uYXhlcztcbiAgICAgIGlmIChheGVzICYmIGF4ZXMueTIpIHtcbiAgICAgICAgdiA9IGF4ZXMueTIudmFsdWVSYW5nZTtcbiAgICAgICAgaWYgKHYpIHRoaXMuYXhlc19bYXhpc10udmFsdWVSYW5nZSA9IHY7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiB5LWF4ZXMgb24gdGhlIGNoYXJ0LlxuICogQHJldHVybiB7bnVtYmVyfSB0aGUgbnVtYmVyIG9mIGF4ZXMuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLm51bUF4ZXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc18ubnVtQXhlcygpO1xufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogUmV0dXJucyBheGlzIHByb3BlcnRpZXMgZm9yIHRoZSBnaXZlbiBzZXJpZXMuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2V0TmFtZSBUaGUgbmFtZSBvZiB0aGUgc2VyaWVzIGZvciB3aGljaCB0byBnZXQgYXhpc1xuICogcHJvcGVydGllcywgZS5nLiAnWTEnLlxuICogQHJldHVybiB7T2JqZWN0fSBUaGUgYXhpcyBwcm9wZXJ0aWVzLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5heGlzUHJvcGVydGllc0ZvclNlcmllcyA9IGZ1bmN0aW9uKHNlcmllcykge1xuICAvLyBUT0RPKGRhbnZrKTogaGFuZGxlIGVycm9ycy5cbiAgcmV0dXJuIHRoaXMuYXhlc19bdGhpcy5hdHRyaWJ1dGVzXy5heGlzRm9yU2VyaWVzKHNlcmllcyldO1xufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogRGV0ZXJtaW5lIHRoZSB2YWx1ZSByYW5nZSBhbmQgdGljayBtYXJrcyBmb3IgZWFjaCBheGlzLlxuICogQHBhcmFtIHtPYmplY3R9IGV4dHJlbWVzIEEgbWFwcGluZyBmcm9tIHNlcmllc05hbWUgLT4gW2xvdywgaGlnaF1cbiAqIFRoaXMgZmlsbHMgaW4gdGhlIHZhbHVlUmFuZ2UgYW5kIHRpY2tzIGZpZWxkcyBpbiBlYWNoIGVudHJ5IG9mIHRoaXMuYXhlc18uXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmNvbXB1dGVZQXhpc1Jhbmdlc18gPSBmdW5jdGlvbihleHRyZW1lcykge1xuICB2YXIgaXNOdWxsVW5kZWZpbmVkT3JOYU4gPSBmdW5jdGlvbihudW0pIHtcbiAgICByZXR1cm4gaXNOYU4ocGFyc2VGbG9hdChudW0pKTtcbiAgfTtcbiAgdmFyIG51bUF4ZXMgPSB0aGlzLmF0dHJpYnV0ZXNfLm51bUF4ZXMoKTtcbiAgdmFyIHlwYWRDb21wYXQsIHNwYW4sIHNlcmllcywgeXBhZDtcblxuICB2YXIgcF9heGlzO1xuXG4gIC8vIENvbXB1dGUgZXh0cmVtZSB2YWx1ZXMsIGEgc3BhbiBhbmQgdGljayBtYXJrcyBmb3IgZWFjaCBheGlzLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUF4ZXM7IGkrKykge1xuICAgIHZhciBheGlzID0gdGhpcy5heGVzX1tpXTtcbiAgICB2YXIgbG9nc2NhbGUgPSB0aGlzLmF0dHJpYnV0ZXNfLmdldEZvckF4aXMoXCJsb2dzY2FsZVwiLCBpKTtcbiAgICB2YXIgaW5jbHVkZVplcm8gPSB0aGlzLmF0dHJpYnV0ZXNfLmdldEZvckF4aXMoXCJpbmNsdWRlWmVyb1wiLCBpKTtcbiAgICB2YXIgaW5kZXBlbmRlbnRUaWNrcyA9IHRoaXMuYXR0cmlidXRlc18uZ2V0Rm9yQXhpcyhcImluZGVwZW5kZW50VGlja3NcIiwgaSk7XG4gICAgc2VyaWVzID0gdGhpcy5hdHRyaWJ1dGVzXy5zZXJpZXNGb3JBeGlzKGkpO1xuXG4gICAgLy8gQWRkIHNvbWUgcGFkZGluZy4gVGhpcyBzdXBwb3J0cyB0d28gWSBwYWRkaW5nIG9wZXJhdGlvbiBtb2RlczpcbiAgICAvL1xuICAgIC8vIC0gYmFja3dhcmRzIGNvbXBhdGlibGUgKHlSYW5nZVBhZCBub3Qgc2V0KTpcbiAgICAvLyAgIDEwJSBwYWRkaW5nIGZvciBhdXRvbWF0aWMgWSByYW5nZXMsIGJ1dCBub3QgZm9yIHVzZXItc3VwcGxpZWRcbiAgICAvLyAgIHJhbmdlcywgYW5kIG1vdmUgYSBjbG9zZS10by16ZXJvIGVkZ2UgdG8gemVybywgc2luY2UgZHJhd2luZyBhdCB0aGUgZWRnZVxuICAgIC8vICAgcmVzdWx0cyBpbiBpbnZpc2libGUgbGluZXMuIFVuZm9ydHVuYXRlbHkgbGluZXMgZHJhd24gYXQgdGhlIGVkZ2Ugb2YgYVxuICAgIC8vICAgdXNlci1zdXBwbGllZCByYW5nZSB3aWxsIHN0aWxsIGJlIGludmlzaWJsZS4gSWYgbG9nc2NhbGUgaXNcbiAgICAvLyAgIHNldCwgYWRkIGEgdmFyaWFibGUgYW1vdW50IG9mIHBhZGRpbmcgYXQgdGhlIHRvcCBidXRcbiAgICAvLyAgIG5vbmUgYXQgdGhlIGJvdHRvbS5cbiAgICAvL1xuICAgIC8vIC0gbmV3LXN0eWxlICh5UmFuZ2VQYWQgc2V0IGJ5IHRoZSB1c2VyKTpcbiAgICAvLyAgIGFsd2F5cyBhZGQgdGhlIHNwZWNpZmllZCBZIHBhZGRpbmcuXG4gICAgLy9cbiAgICB5cGFkQ29tcGF0ID0gdHJ1ZTtcbiAgICB5cGFkID0gMC4xOyAvLyBhZGQgMTAlXG4gICAgY29uc3QgeVJhbmdlUGFkID0gdGhpcy5nZXROdW1lcmljT3B0aW9uKCd5UmFuZ2VQYWQnKTtcbiAgICBpZiAoeVJhbmdlUGFkICE9PSBudWxsKSB7XG4gICAgICB5cGFkQ29tcGF0ID0gZmFsc2U7XG4gICAgICAvLyBDb252ZXJ0IHBpeGVsIHBhZGRpbmcgdG8gcmF0aW9cbiAgICAgIHlwYWQgPSB5UmFuZ2VQYWQgLyB0aGlzLnBsb3R0ZXJfLmFyZWEuaDtcbiAgICB9XG5cbiAgICBpZiAoc2VyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gSWYgbm8gc2VyaWVzIGFyZSBkZWZpbmVkIG9yIHZpc2libGUgdGhlbiB1c2UgYSByZWFzb25hYmxlIGRlZmF1bHRcbiAgICAgIGF4aXMuZXh0cmVtZVJhbmdlID0gWzAsIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGV4dHJlbWVzIG9mIGV4dHJlbWVzLlxuICAgICAgdmFyIG1pblkgPSBJbmZpbml0eTsgIC8vIGV4dHJlbWVzW3Nlcmllc1swXV1bMF07XG4gICAgICB2YXIgbWF4WSA9IC1JbmZpbml0eTsgIC8vIGV4dHJlbWVzW3Nlcmllc1swXV1bMV07XG4gICAgICB2YXIgZXh0cmVtZU1pblksIGV4dHJlbWVNYXhZO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlcmllcy5sZW5ndGg7IGorKykge1xuICAgICAgICAvLyB0aGlzIHNraXBzIGludmlzaWJsZSBzZXJpZXNcbiAgICAgICAgaWYgKCFleHRyZW1lcy5oYXNPd25Qcm9wZXJ0eShzZXJpZXNbal0pKSBjb250aW51ZTtcblxuICAgICAgICAvLyBPbmx5IHVzZSB2YWxpZCBleHRyZW1lcyB0byBzdG9wIG51bGwgZGF0YSBzZXJpZXMnIGZyb20gY29ycnVwdGluZyB0aGUgc2NhbGUuXG4gICAgICAgIGV4dHJlbWVNaW5ZID0gZXh0cmVtZXNbc2VyaWVzW2pdXVswXTtcbiAgICAgICAgaWYgKGV4dHJlbWVNaW5ZICE9PSBudWxsKSB7XG4gICAgICAgICAgbWluWSA9IE1hdGgubWluKGV4dHJlbWVNaW5ZLCBtaW5ZKTtcbiAgICAgICAgfVxuICAgICAgICBleHRyZW1lTWF4WSA9IGV4dHJlbWVzW3Nlcmllc1tqXV1bMV07XG4gICAgICAgIGlmIChleHRyZW1lTWF4WSAhPT0gbnVsbCkge1xuICAgICAgICAgIG1heFkgPSBNYXRoLm1heChleHRyZW1lTWF4WSwgbWF4WSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSW5jbHVkZSB6ZXJvIGlmIHJlcXVlc3RlZCBieSB0aGUgdXNlci5cbiAgICAgIGlmIChpbmNsdWRlWmVybyAmJiAhbG9nc2NhbGUpIHtcbiAgICAgICAgaWYgKG1pblkgPiAwKSBtaW5ZID0gMDtcbiAgICAgICAgaWYgKG1heFkgPCAwKSBtYXhZID0gMDtcbiAgICAgIH1cblxuICAgICAgLy8gRW5zdXJlIHdlIGhhdmUgYSB2YWxpZCBzY2FsZSwgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gWzAsIDFdIGZvciBzYWZldHkuXG4gICAgICBpZiAobWluWSA9PSBJbmZpbml0eSkgbWluWSA9IDA7XG4gICAgICBpZiAobWF4WSA9PSAtSW5maW5pdHkpIG1heFkgPSAxO1xuXG4gICAgICBzcGFuID0gbWF4WSAtIG1pblk7XG4gICAgICAvLyBzcGVjaWFsIGNhc2U6IGlmIHdlIGhhdmUgbm8gc2Vuc2Ugb2Ygc2NhbGUsIGNlbnRlciBvbiB0aGUgc29sZSB2YWx1ZS5cbiAgICAgIGlmIChzcGFuID09PSAwKSB7XG4gICAgICAgIGlmIChtYXhZICE9PSAwKSB7XG4gICAgICAgICAgc3BhbiA9IE1hdGguYWJzKG1heFkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIC4uLiBhbmQgaWYgdGhlIHNvbGUgdmFsdWUgaXMgemVybywgdXNlIHJhbmdlIDAtMS5cbiAgICAgICAgICBtYXhZID0gMTtcbiAgICAgICAgICBzcGFuID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgbWF4QXhpc1kgPSBtYXhZLCBtaW5BeGlzWSA9IG1pblk7XG4gICAgICBpZiAoeXBhZENvbXBhdCkge1xuICAgICAgICBpZiAobG9nc2NhbGUpIHtcbiAgICAgICAgICBtYXhBeGlzWSA9IG1heFkgKyB5cGFkICogc3BhbjtcbiAgICAgICAgICBtaW5BeGlzWSA9IG1pblk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF4QXhpc1kgPSBtYXhZICsgeXBhZCAqIHNwYW47XG4gICAgICAgICAgbWluQXhpc1kgPSBtaW5ZIC0geXBhZCAqIHNwYW47XG5cbiAgICAgICAgICAvLyBCYWNrd2FyZHMtY29tcGF0aWJsZSBiZWhhdmlvcjogTW92ZSB0aGUgc3BhbiB0byBzdGFydCBvciBlbmQgYXQgemVybyBpZiBpdCdzXG4gICAgICAgICAgLy8gY2xvc2UgdG8gemVyby5cbiAgICAgICAgICBpZiAobWluQXhpc1kgPCAwICYmIG1pblkgPj0gMCkgbWluQXhpc1kgPSAwO1xuICAgICAgICAgIGlmIChtYXhBeGlzWSA+IDAgJiYgbWF4WSA8PSAwKSBtYXhBeGlzWSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGF4aXMuZXh0cmVtZVJhbmdlID0gW21pbkF4aXNZLCBtYXhBeGlzWV07XG4gICAgfVxuICAgIGlmIChheGlzLnZhbHVlUmFuZ2UpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB1c2VyLXNldCB2YWx1ZSByYW5nZSBmb3IgdGhpcyBheGlzLlxuICAgICAgdmFyIHkwID0gaXNOdWxsVW5kZWZpbmVkT3JOYU4oYXhpcy52YWx1ZVJhbmdlWzBdKSA/IGF4aXMuZXh0cmVtZVJhbmdlWzBdIDogYXhpcy52YWx1ZVJhbmdlWzBdO1xuICAgICAgdmFyIHkxID0gaXNOdWxsVW5kZWZpbmVkT3JOYU4oYXhpcy52YWx1ZVJhbmdlWzFdKSA/IGF4aXMuZXh0cmVtZVJhbmdlWzFdIDogYXhpcy52YWx1ZVJhbmdlWzFdO1xuICAgICAgYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2UgPSBbeTAsIHkxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2UgPSBheGlzLmV4dHJlbWVSYW5nZTtcbiAgICB9XG4gICAgaWYgKCF5cGFkQ29tcGF0KSB7XG4gICAgICAvLyBXaGVuIHVzaW5nIHlSYW5nZVBhZCwgYWRqdXN0IHRoZSB1cHBlci9sb3dlciBib3VuZHMgdG8gYWRkXG4gICAgICAvLyBwYWRkaW5nIHVubGVzcyB0aGUgdXNlciBoYXMgem9vbWVkL3Bhbm5lZCB0aGUgWSBheGlzIHJhbmdlLlxuICAgICAgaWYgKGxvZ3NjYWxlKSB7XG4gICAgICAgIHkwID0gYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2VbMF07XG4gICAgICAgIHkxID0gYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2VbMV07XG4gICAgICAgIHZhciB5MHBjdCA9IHlwYWQgLyAoMiAqIHlwYWQgLSAxKTtcbiAgICAgICAgdmFyIHkxcGN0ID0gKHlwYWQgLSAxKSAvICgyICogeXBhZCAtIDEpO1xuICAgICAgICBheGlzLmNvbXB1dGVkVmFsdWVSYW5nZVswXSA9IHV0aWxzLmxvZ1JhbmdlRnJhY3Rpb24oeTAsIHkxLCB5MHBjdCk7XG4gICAgICAgIGF4aXMuY29tcHV0ZWRWYWx1ZVJhbmdlWzFdID0gdXRpbHMubG9nUmFuZ2VGcmFjdGlvbih5MCwgeTEsIHkxcGN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkwID0gYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2VbMF07XG4gICAgICAgIHkxID0gYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2VbMV07XG4gICAgICAgIHNwYW4gPSB5MSAtIHkwO1xuICAgICAgICBheGlzLmNvbXB1dGVkVmFsdWVSYW5nZVswXSA9IHkwIC0gc3BhbiAqIHlwYWQ7XG4gICAgICAgIGF4aXMuY29tcHV0ZWRWYWx1ZVJhbmdlWzFdID0geTEgKyBzcGFuICogeXBhZDtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGlmIChpbmRlcGVuZGVudFRpY2tzKSB7XG4gICAgICBheGlzLmluZGVwZW5kZW50VGlja3MgPSBpbmRlcGVuZGVudFRpY2tzO1xuICAgICAgdmFyIG9wdHMgPSB0aGlzLm9wdGlvbnNWaWV3Rm9yQXhpc18oJ3knICsgKGkgPyAnMicgOiAnJykpO1xuICAgICAgdmFyIHRpY2tlciA9IG9wdHMoJ3RpY2tlcicpO1xuICAgICAgYXhpcy50aWNrcyA9IHRpY2tlcihheGlzLmNvbXB1dGVkVmFsdWVSYW5nZVswXSxcbiAgICAgICAgICAgICAgYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2VbMV0sXG4gICAgICAgICAgICAgIHRoaXMucGxvdHRlcl8uYXJlYS5oLFxuICAgICAgICAgICAgICBvcHRzLFxuICAgICAgICAgICAgICB0aGlzKTtcbiAgICAgIC8vIERlZmluZSB0aGUgZmlyc3QgaW5kZXBlbmRlbnQgYXhpcyBhcyBwcmltYXJ5IGF4aXMuXG4gICAgICBpZiAoIXBfYXhpcykgcF9heGlzID0gYXhpcztcbiAgICB9XG4gIH1cbiAgaWYgKHBfYXhpcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgKFwiQ29uZmlndXJhdGlvbiBFcnJvcjogQXQgbGVhc3Qgb25lIGF4aXMgaGFzIHRvIGhhdmUgdGhlIFxcXCJpbmRlcGVuZGVudFRpY2tzXFxcIiBvcHRpb24gYWN0aXZhdGVkLlwiKTtcbiAgfVxuICAvLyBBZGQgdGlja3MuIEJ5IGRlZmF1bHQsIGFsbCBheGVzIGluaGVyaXQgdGhlIHRpY2sgcG9zaXRpb25zIG9mIHRoZVxuICAvLyBwcmltYXJ5IGF4aXMuIEhvd2V2ZXIsIGlmIGFuIGF4aXMgaXMgc3BlY2lmaWNhbGx5IG1hcmtlZCBhcyBoYXZpbmdcbiAgLy8gaW5kZXBlbmRlbnQgdGlja3MsIHRoZW4gdGhhdCBpcyBwZXJtaXNzaWJsZSBhcyB3ZWxsLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUF4ZXM7IGkrKykge1xuICAgIHZhciBheGlzID0gdGhpcy5heGVzX1tpXTtcblxuICAgIGlmICghYXhpcy5pbmRlcGVuZGVudFRpY2tzKSB7XG4gICAgICB2YXIgb3B0cyA9IHRoaXMub3B0aW9uc1ZpZXdGb3JBeGlzXygneScgKyAoaSA/ICcyJyA6ICcnKSk7XG4gICAgICB2YXIgdGlja2VyID0gb3B0cygndGlja2VyJyk7XG4gICAgICB2YXIgcF90aWNrcyA9IHBfYXhpcy50aWNrcztcbiAgICAgIHZhciBwX3NjYWxlID0gcF9heGlzLmNvbXB1dGVkVmFsdWVSYW5nZVsxXSAtIHBfYXhpcy5jb21wdXRlZFZhbHVlUmFuZ2VbMF07XG4gICAgICB2YXIgc2NhbGUgPSBheGlzLmNvbXB1dGVkVmFsdWVSYW5nZVsxXSAtIGF4aXMuY29tcHV0ZWRWYWx1ZVJhbmdlWzBdO1xuICAgICAgdmFyIHRpY2tfdmFsdWVzID0gW107XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHBfdGlja3MubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIHlfZnJhYyA9IChwX3RpY2tzW2tdLnYgLSBwX2F4aXMuY29tcHV0ZWRWYWx1ZVJhbmdlWzBdKSAvIHBfc2NhbGU7XG4gICAgICAgIHZhciB5X3ZhbCA9IGF4aXMuY29tcHV0ZWRWYWx1ZVJhbmdlWzBdICsgeV9mcmFjICogc2NhbGU7XG4gICAgICAgIHRpY2tfdmFsdWVzLnB1c2goeV92YWwpO1xuICAgICAgfVxuXG4gICAgICBheGlzLnRpY2tzID0gdGlja2VyKGF4aXMuY29tcHV0ZWRWYWx1ZVJhbmdlWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzLmNvbXB1dGVkVmFsdWVSYW5nZVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbG90dGVyXy5hcmVhLmgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tfdmFsdWVzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRGV0ZWN0cyB0aGUgdHlwZSBvZiB0aGUgc3RyIChkYXRlIG9yIG51bWVyaWMpIGFuZCBzZXRzIHRoZSB2YXJpb3VzXG4gKiBmb3JtYXR0aW5nIGF0dHJpYnV0ZXMgaW4gdGhpcy5hdHRyc18gYmFzZWQgb24gdGhpcyB0eXBlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBbiB4IHZhbHVlLlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuZGV0ZWN0VHlwZUZyb21TdHJpbmdfID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBpc0RhdGUgPSBmYWxzZTtcbiAgdmFyIGRhc2hQb3MgPSBzdHIuaW5kZXhPZignLScpOyAgLy8gY291bGQgYmUgMjAwNi0wMS0wMSBfb3JfIDEuMGUtMlxuICBpZiAoKGRhc2hQb3MgPiAwICYmIChzdHJbZGFzaFBvcy0xXSAhPSAnZScgJiYgc3RyW2Rhc2hQb3MtMV0gIT0gJ0UnKSkgfHxcbiAgICAgIHN0ci5pbmRleE9mKCcvJykgPj0gMCB8fFxuICAgICAgaXNOYU4ocGFyc2VGbG9hdChzdHIpKSkge1xuICAgIGlzRGF0ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoc3RyLmxlbmd0aCA9PSA4ICYmIHN0ciA+ICcxOTcwMDEwMScgJiYgc3RyIDwgJzIwMzcxMjMxJykge1xuICAgIC8vIFRPRE8oZGFudmspOiByZW1vdmUgc3VwcG9ydCBmb3IgdGhpcyBmb3JtYXQuXG4gICAgaXNEYXRlID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuc2V0WEF4aXNPcHRpb25zXyhpc0RhdGUpO1xufTtcblxuRHlncmFwaC5wcm90b3R5cGUuc2V0WEF4aXNPcHRpb25zXyA9IGZ1bmN0aW9uKGlzRGF0ZSkge1xuICBpZiAoaXNEYXRlKSB7XG4gICAgdGhpcy5hdHRyc18ueFZhbHVlUGFyc2VyID0gdXRpbHMuZGF0ZVBhcnNlcjtcbiAgICB0aGlzLmF0dHJzXy5heGVzLngudmFsdWVGb3JtYXR0ZXIgPSB1dGlscy5kYXRlVmFsdWVGb3JtYXR0ZXI7XG4gICAgdGhpcy5hdHRyc18uYXhlcy54LnRpY2tlciA9IER5Z3JhcGhUaWNrZXJzLmRhdGVUaWNrZXI7XG4gICAgdGhpcy5hdHRyc18uYXhlcy54LmF4aXNMYWJlbEZvcm1hdHRlciA9IHV0aWxzLmRhdGVBeGlzTGFiZWxGb3JtYXR0ZXI7XG4gIH0gZWxzZSB7XG4gICAgLyoqIEBwcml2YXRlIChzaHV0IHVwLCBqc2RvYyEpICovXG4gICAgdGhpcy5hdHRyc18ueFZhbHVlUGFyc2VyID0gZnVuY3Rpb24oeCkgeyByZXR1cm4gcGFyc2VGbG9hdCh4KTsgfTtcbiAgICAvLyBUT0RPKGRhbnZrKTogdXNlIER5Z3JhcGgubnVtYmVyVmFsdWVGb3JtYXR0ZXIgaGVyZT9cbiAgICAvKiogQHByaXZhdGUgKHNodXQgdXAsIGpzZG9jISkgKi9cbiAgICB0aGlzLmF0dHJzXy5heGVzLngudmFsdWVGb3JtYXR0ZXIgPSBmdW5jdGlvbih4KSB7IHJldHVybiB4OyB9O1xuICAgIHRoaXMuYXR0cnNfLmF4ZXMueC50aWNrZXIgPSBEeWdyYXBoVGlja2Vycy5udW1lcmljVGlja3M7XG4gICAgdGhpcy5hdHRyc18uYXhlcy54LmF4aXNMYWJlbEZvcm1hdHRlciA9IHRoaXMuYXR0cnNfLmF4ZXMueC52YWx1ZUZvcm1hdHRlcjtcbiAgfVxufTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogUGFyc2VzIGEgc3RyaW5nIGluIGEgc3BlY2lhbCBjc3YgZm9ybWF0LiAgV2UgZXhwZWN0IGEgY3N2IGZpbGUgd2hlcmUgZWFjaFxuICogbGluZSBpcyBhIGRhdGUgcG9pbnQsIGFuZCB0aGUgZmlyc3QgZmllbGQgaW4gZWFjaCBsaW5lIGlzIHRoZSBkYXRlIHN0cmluZy5cbiAqIFdlIGFsc28gZXhwZWN0IHRoYXQgYWxsIHJlbWFpbmluZyBmaWVsZHMgcmVwcmVzZW50IHNlcmllcy5cbiAqIGlmIHRoZSBlcnJvckJhcnMgYXR0cmlidXRlIGlzIHNldCwgdGhlbiBpbnRlcnByZXQgdGhlIGZpZWxkcyBhczpcbiAqIGRhdGUsIHNlcmllczEsIHN0ZGRldjEsIHNlcmllczIsIHN0ZGRldjIsIC4uLlxuICogQHBhcmFtIHtbT2JqZWN0XX0gZGF0YSBTZWUgYWJvdmUuXG4gKlxuICogQHJldHVybiBbT2JqZWN0XSBBbiBhcnJheSB3aXRoIG9uZSBlbnRyeSBmb3IgZWFjaCByb3cuIFRoZXNlIGVudHJpZXNcbiAqIGFyZSBhbiBhcnJheSBvZiBjZWxscyBpbiB0aGF0IHJvdy4gVGhlIGZpcnN0IGVudHJ5IGlzIHRoZSBwYXJzZWQgeC12YWx1ZSBmb3JcbiAqIHRoZSByb3cuIFRoZSBzZWNvbmQsIHRoaXJkLCBldGMuIGFyZSB0aGUgeS12YWx1ZXMuIFRoZXNlIGNhbiB0YWtlIG9uIG9uZSBvZlxuICogdGhyZWUgZm9ybXMsIGRlcGVuZGluZyBvbiB0aGUgQ1NWIGFuZCBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzOlxuICogMS4gbnVtZXJpYyB2YWx1ZVxuICogMi4gWyB2YWx1ZSwgc3RkZGV2IF1cbiAqIDMuIFsgbG93IHZhbHVlLCBjZW50ZXIgdmFsdWUsIGhpZ2ggdmFsdWUgXVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5wYXJzZUNTVl8gPSBmdW5jdGlvbihkYXRhKSB7XG4gIHZhciByZXQgPSBbXTtcbiAgdmFyIGxpbmVfZGVsaW1pdGVyID0gdXRpbHMuZGV0ZWN0TGluZURlbGltaXRlcihkYXRhKTtcbiAgdmFyIGxpbmVzID0gZGF0YS5zcGxpdChsaW5lX2RlbGltaXRlciB8fCBcIlxcblwiKTtcbiAgdmFyIHZhbHMsIGo7XG5cbiAgLy8gVXNlIHRoZSBkZWZhdWx0IGRlbGltaXRlciBvciBmYWxsIGJhY2sgdG8gYSB0YWIgaWYgdGhhdCBtYWtlcyBzZW5zZS5cbiAgdmFyIGRlbGltID0gdGhpcy5nZXRTdHJpbmdPcHRpb24oJ2RlbGltaXRlcicpO1xuICBpZiAobGluZXNbMF0uaW5kZXhPZihkZWxpbSkgPT0gLTEgJiYgbGluZXNbMF0uaW5kZXhPZignXFx0JykgPj0gMCkge1xuICAgIGRlbGltID0gJ1xcdCc7XG4gIH1cblxuICB2YXIgc3RhcnQgPSAwO1xuICBpZiAoISgnbGFiZWxzJyBpbiB0aGlzLnVzZXJfYXR0cnNfKSkge1xuICAgIC8vIFVzZXIgaGFzbid0IGV4cGxpY2l0bHkgc2V0IGxhYmVscywgc28gdGhleSdyZSAocHJlc3VtYWJseSkgaW4gdGhlIENTVi5cbiAgICBzdGFydCA9IDE7XG4gICAgdGhpcy5hdHRyc18ubGFiZWxzID0gbGluZXNbMF0uc3BsaXQoZGVsaW0pOyAgLy8gTk9URTogX25vdF8gdXNlcl9hdHRyc18uXG4gICAgdGhpcy5hdHRyaWJ1dGVzXy5yZXBhcnNlU2VyaWVzKCk7XG4gIH1cbiAgdmFyIGxpbmVfbm8gPSAwO1xuXG4gIHZhciB4UGFyc2VyO1xuICB2YXIgZGVmYXVsdFBhcnNlclNldCA9IGZhbHNlOyAgLy8gYXR0ZW1wdCB0byBhdXRvLWRldGVjdCB4IHZhbHVlIHR5cGVcbiAgdmFyIGV4cGVjdGVkQ29scyA9IHRoaXMuYXR0cl8oXCJsYWJlbHNcIikubGVuZ3RoO1xuICB2YXIgb3V0T2ZPcmRlciA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBsaW5lID0gbGluZXNbaV07XG4gICAgbGluZV9ubyA9IGk7XG4gICAgaWYgKGxpbmUubGVuZ3RoID09PSAwKSBjb250aW51ZTsgIC8vIHNraXAgYmxhbmsgbGluZXNcbiAgICBpZiAobGluZVswXSA9PSAnIycpIGNvbnRpbnVlOyAgICAvLyBza2lwIGNvbW1lbnQgbGluZXNcbiAgICB2YXIgaW5GaWVsZHMgPSBsaW5lLnNwbGl0KGRlbGltKTtcbiAgICBpZiAoaW5GaWVsZHMubGVuZ3RoIDwgMikgY29udGludWU7XG5cbiAgICB2YXIgZmllbGRzID0gW107XG4gICAgaWYgKCFkZWZhdWx0UGFyc2VyU2V0KSB7XG4gICAgICB0aGlzLmRldGVjdFR5cGVGcm9tU3RyaW5nXyhpbkZpZWxkc1swXSk7XG4gICAgICB4UGFyc2VyID0gdGhpcy5nZXRGdW5jdGlvbk9wdGlvbihcInhWYWx1ZVBhcnNlclwiKTtcbiAgICAgIGRlZmF1bHRQYXJzZXJTZXQgPSB0cnVlO1xuICAgIH1cbiAgICBmaWVsZHNbMF0gPSB4UGFyc2VyKGluRmllbGRzWzBdLCB0aGlzKTtcblxuICAgIC8vIElmIGZyYWN0aW9ucyBhcmUgZXhwZWN0ZWQsIHBhcnNlIHRoZSBudW1iZXJzIGFzIFwiQS9CXCJcbiAgICBpZiAodGhpcy5mcmFjdGlvbnNfKSB7XG4gICAgICBmb3IgKGogPSAxOyBqIDwgaW5GaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgLy8gVE9ETyhkYW52ayk6IGZpZ3VyZSBvdXQgYW4gYXBwcm9wcmlhdGUgd2F5IHRvIGZsYWcgcGFyc2UgZXJyb3JzLlxuICAgICAgICB2YWxzID0gaW5GaWVsZHNbal0uc3BsaXQoXCIvXCIpO1xuICAgICAgICBpZiAodmFscy5sZW5ndGggIT0gMikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0V4cGVjdGVkIGZyYWN0aW9uYWwgXCJudW0vZGVuXCIgdmFsdWVzIGluIENTViBkYXRhICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJidXQgZm91bmQgYSB2YWx1ZSAnXCIgKyBpbkZpZWxkc1tqXSArIFwiJyBvbiBsaW5lIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICgxICsgaSkgKyBcIiAoJ1wiICsgbGluZSArIFwiJykgd2hpY2ggaXMgbm90IG9mIHRoaXMgZm9ybS5cIik7XG4gICAgICAgICAgZmllbGRzW2pdID0gWzAsIDBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpZWxkc1tqXSA9IFt1dGlscy5wYXJzZUZsb2F0Xyh2YWxzWzBdLCBpLCBsaW5lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMucGFyc2VGbG9hdF8odmFsc1sxXSwgaSwgbGluZSldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmdldEJvb2xlYW5PcHRpb24oXCJlcnJvckJhcnNcIikpIHtcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBlcnJvciBiYXJzLCB2YWx1ZXMgYXJlICh2YWx1ZSwgc3RkZGV2KSBwYWlyc1xuICAgICAgaWYgKGluRmllbGRzLmxlbmd0aCAlIDIgIT0gMSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFeHBlY3RlZCBhbHRlcm5hdGluZyAodmFsdWUsIHN0ZGV2LikgcGFpcnMgaW4gQ1NWIGRhdGEgJyArXG4gICAgICAgICAgICAgICAgICAgICAgJ2J1dCBsaW5lICcgKyAoMSArIGkpICsgJyBoYXMgYW4gb2RkIG51bWJlciBvZiB2YWx1ZXMgKCcgK1xuICAgICAgICAgICAgICAgICAgICAgIChpbkZpZWxkcy5sZW5ndGggLSAxKSArIFwiKTogJ1wiICsgbGluZSArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaiA9IDE7IGogPCBpbkZpZWxkcy5sZW5ndGg7IGogKz0gMikge1xuICAgICAgICBmaWVsZHNbKGogKyAxKSAvIDJdID0gW3V0aWxzLnBhcnNlRmxvYXRfKGluRmllbGRzW2pdLCBpLCBsaW5lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5wYXJzZUZsb2F0XyhpbkZpZWxkc1tqICsgMV0sIGksIGxpbmUpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0Qm9vbGVhbk9wdGlvbihcImN1c3RvbUJhcnNcIikpIHtcbiAgICAgIC8vIEJhcnMgYXJlIGEgbG93O2NlbnRlcjtoaWdoIHR1cGxlXG4gICAgICBmb3IgKGogPSAxOyBqIDwgaW5GaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIHZhbCA9IGluRmllbGRzW2pdO1xuICAgICAgICBpZiAoL14gKiQvLnRlc3QodmFsKSkge1xuICAgICAgICAgIGZpZWxkc1tqXSA9IFtudWxsLCBudWxsLCBudWxsXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWxzID0gdmFsLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgICBpZiAodmFscy5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgZmllbGRzW2pdID0gWyB1dGlscy5wYXJzZUZsb2F0Xyh2YWxzWzBdLCBpLCBsaW5lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMucGFyc2VGbG9hdF8odmFsc1sxXSwgaSwgbGluZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLnBhcnNlRmxvYXRfKHZhbHNbMl0sIGksIGxpbmUpIF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignV2hlbiB1c2luZyBjdXN0b21CYXJzLCB2YWx1ZXMgbXVzdCBiZSBlaXRoZXIgYmxhbmsgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ29yIFwibG93O2NlbnRlcjtoaWdoXCIgdHVwbGVzIChnb3QgXCInICsgdmFsICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnXCIgb24gbGluZSAnICsgKDEraSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBWYWx1ZXMgYXJlIGp1c3QgbnVtYmVyc1xuICAgICAgZm9yIChqID0gMTsgaiA8IGluRmllbGRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGZpZWxkc1tqXSA9IHV0aWxzLnBhcnNlRmxvYXRfKGluRmllbGRzW2pdLCBpLCBsaW5lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJldC5sZW5ndGggPiAwICYmIGZpZWxkc1swXSA8IHJldFtyZXQubGVuZ3RoIC0gMV1bMF0pIHtcbiAgICAgIG91dE9mT3JkZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChmaWVsZHMubGVuZ3RoICE9IGV4cGVjdGVkQ29scykge1xuICAgICAgY29uc29sZS5lcnJvcihcIk51bWJlciBvZiBjb2x1bW5zIGluIGxpbmUgXCIgKyBpICsgXCIgKFwiICsgZmllbGRzLmxlbmd0aCArXG4gICAgICAgICAgICAgICAgICAgIFwiKSBkb2VzIG5vdCBhZ3JlZSB3aXRoIG51bWJlciBvZiBsYWJlbHMgKFwiICsgZXhwZWN0ZWRDb2xzICtcbiAgICAgICAgICAgICAgICAgICAgXCIpIFwiICsgbGluZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHVzZXIgc3BlY2lmaWVkIHRoZSAnbGFiZWxzJyBvcHRpb24gYW5kIG5vbmUgb2YgdGhlIGNlbGxzIG9mIHRoZVxuICAgIC8vIGZpcnN0IHJvdyBwYXJzZWQgY29ycmVjdGx5LCB0aGVuIHRoZXkgcHJvYmFibHkgZG91YmxlLXNwZWNpZmllZCB0aGVcbiAgICAvLyBsYWJlbHMuIFdlIGdvIHdpdGggdGhlIHZhbHVlcyBzZXQgaW4gdGhlIG9wdGlvbiwgZGlzY2FyZCB0aGlzIHJvdyBhbmRcbiAgICAvLyBsb2cgYSB3YXJuaW5nIHRvIHRoZSBKUyBjb25zb2xlLlxuICAgIGlmIChpID09PSAwICYmIHRoaXMuYXR0cl8oJ2xhYmVscycpKSB7XG4gICAgICB2YXIgYWxsX251bGwgPSB0cnVlO1xuICAgICAgZm9yIChqID0gMDsgYWxsX251bGwgJiYgaiA8IGZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoZmllbGRzW2pdKSBhbGxfbnVsbCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGFsbF9udWxsKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoZSBkeWdyYXBocyAnbGFiZWxzJyBvcHRpb24gaXMgc2V0LCBidXQgdGhlIGZpcnN0IHJvdyBcIiArXG4gICAgICAgICAgICAgICAgICAgICBcIm9mIENTViBkYXRhICgnXCIgKyBsaW5lICsgXCInKSBhcHBlYXJzIHRvIGFsc28gY29udGFpbiBcIiArXG4gICAgICAgICAgICAgICAgICAgICBcImxhYmVscy4gV2lsbCBkcm9wIHRoZSBDU1YgbGFiZWxzIGFuZCB1c2UgdGhlIG9wdGlvbiBcIiArXG4gICAgICAgICAgICAgICAgICAgICBcImxhYmVscy5cIik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXQucHVzaChmaWVsZHMpO1xuICB9XG5cbiAgaWYgKG91dE9mT3JkZXIpIHtcbiAgICBjb25zb2xlLndhcm4oXCJDU1YgaXMgb3V0IG9mIG9yZGVyOyBvcmRlciBpdCBjb3JyZWN0bHkgdG8gc3BlZWQgbG9hZGluZy5cIik7XG4gICAgcmV0LnNvcnQoZnVuY3Rpb24oYSxiKSB7IHJldHVybiBhWzBdIC0gYlswXTsgfSk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuLy8gSW4gbmF0aXZlIGZvcm1hdCwgYWxsIHZhbHVlcyBtdXN0IGJlIGRhdGVzIG9yIG51bWJlcnMuXG4vLyBUaGlzIGNoZWNrIGlzbid0IHBlcmZlY3QgYnV0IHdpbGwgY2F0Y2ggbW9zdCBtaXN0YWtlbiB1c2VzIG9mIHN0cmluZ3MuXG5mdW5jdGlvbiB2YWxpZGF0ZU5hdGl2ZUZvcm1hdChkYXRhKSB7XG4gIGNvbnN0IGZpcnN0Um93ID0gZGF0YVswXTtcbiAgY29uc3QgZmlyc3RYID0gZmlyc3RSb3dbMF07XG4gIGlmICh0eXBlb2YgZmlyc3RYICE9PSAnbnVtYmVyJyAmJiAhdXRpbHMuaXNEYXRlTGlrZShmaXJzdFgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBudW1iZXIgb3IgZGF0ZSBidXQgZ290ICR7dHlwZW9mIGZpcnN0WH06ICR7Zmlyc3RYfS5gKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMTsgaSA8IGZpcnN0Um93Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsID0gZmlyc3RSb3dbaV07XG4gICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSBjb250aW51ZTtcbiAgICBpZiAodXRpbHMuaXNBcnJheUxpa2UodmFsKSkgY29udGludWU7ICAvLyBlLmcuIGVycm9yIGJhcnMgb3IgY3VzdG9tIGJhcnMuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBudW1iZXIgb3IgYXJyYXkgYnV0IGdvdCAke3R5cGVvZiB2YWx9OiAke3ZhbH0uYCk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgdXNlciBoYXMgcHJvdmlkZWQgdGhlaXIgZGF0YSBhcyBhIHByZS1wYWNrYWdlZCBKUyBhcnJheS4gSWYgdGhlIHggdmFsdWVzXG4gKiBhcmUgbnVtZXJpYywgdGhpcyBpcyB0aGUgc2FtZSBhcyBkeWdyYXBocycgaW50ZXJuYWwgZm9ybWF0LiBJZiB0aGUgeCB2YWx1ZXNcbiAqIGFyZSBkYXRlcywgd2UgbmVlZCB0byBjb252ZXJ0IHRoZW0gZnJvbSBEYXRlIG9iamVjdHMgdG8gbXMgc2luY2UgZXBvY2guXG4gKiBAcGFyYW0geyFBcnJheX0gZGF0YVxuICogQHJldHVybiB7T2JqZWN0fSBkYXRhIHdpdGggbnVtZXJpYyB4IHZhbHVlcy5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnBhcnNlQXJyYXlfID0gZnVuY3Rpb24oZGF0YSkge1xuICAvLyBQZWVrIGF0IHRoZSBmaXJzdCB4IHZhbHVlIHRvIHNlZSBpZiBpdCdzIG51bWVyaWMuXG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBwbG90IGVtcHR5IGRhdGEgc2V0XCIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChkYXRhWzBdLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJEYXRhIHNldCBjYW5ub3QgY29udGFpbiBhbiBlbXB0eSByb3dcIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YWxpZGF0ZU5hdGl2ZUZvcm1hdChkYXRhKTtcblxuICB2YXIgaTtcbiAgaWYgKHRoaXMuYXR0cl8oXCJsYWJlbHNcIikgPT09IG51bGwpIHtcbiAgICBjb25zb2xlLndhcm4oXCJVc2luZyBkZWZhdWx0IGxhYmVscy4gU2V0IGxhYmVscyBleHBsaWNpdGx5IHZpYSAnbGFiZWxzJyBcIiArXG4gICAgICAgICAgICAgICAgIFwiaW4gdGhlIG9wdGlvbnMgcGFyYW1ldGVyXCIpO1xuICAgIHRoaXMuYXR0cnNfLmxhYmVscyA9IFsgXCJYXCIgXTtcbiAgICBmb3IgKGkgPSAxOyBpIDwgZGF0YVswXS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5hdHRyc18ubGFiZWxzLnB1c2goXCJZXCIgKyBpKTsgLy8gTm90IHVzZXJfYXR0cnNfLlxuICAgIH1cbiAgICB0aGlzLmF0dHJpYnV0ZXNfLnJlcGFyc2VTZXJpZXMoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbnVtX2xhYmVscyA9IHRoaXMuYXR0cl8oXCJsYWJlbHNcIik7XG4gICAgaWYgKG51bV9sYWJlbHMubGVuZ3RoICE9IGRhdGFbMF0ubGVuZ3RoKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWlzbWF0Y2ggYmV0d2VlbiBudW1iZXIgb2YgbGFiZWxzIChcIiArIG51bV9sYWJlbHMgKyBcIilcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiIGFuZCBudW1iZXIgb2YgY29sdW1ucyBpbiBhcnJheSAoXCIgKyBkYXRhWzBdLmxlbmd0aCArIFwiKVwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGlmICh1dGlscy5pc0RhdGVMaWtlKGRhdGFbMF1bMF0pKSB7XG4gICAgLy8gU29tZSBpbnRlbGxpZ2VudCBkZWZhdWx0cyBmb3IgYSBkYXRlIHgtYXhpcy5cbiAgICB0aGlzLmF0dHJzXy5heGVzLngudmFsdWVGb3JtYXR0ZXIgPSB1dGlscy5kYXRlVmFsdWVGb3JtYXR0ZXI7XG4gICAgdGhpcy5hdHRyc18uYXhlcy54LnRpY2tlciA9IER5Z3JhcGhUaWNrZXJzLmRhdGVUaWNrZXI7XG4gICAgdGhpcy5hdHRyc18uYXhlcy54LmF4aXNMYWJlbEZvcm1hdHRlciA9IHV0aWxzLmRhdGVBeGlzTGFiZWxGb3JtYXR0ZXI7XG5cbiAgICAvLyBBc3N1bWUgdGhleSdyZSBhbGwgZGF0ZXMuXG4gICAgdmFyIHBhcnNlZERhdGEgPSB1dGlscy5jbG9uZShkYXRhKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBhcnNlZERhdGFbaV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJSb3cgXCIgKyAoMSArIGkpICsgXCIgb2YgZGF0YSBpcyBlbXB0eVwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAocGFyc2VkRGF0YVtpXVswXSA9PT0gbnVsbCB8fFxuICAgICAgICAgIHR5cGVvZihwYXJzZWREYXRhW2ldWzBdLmdldFRpbWUpICE9ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICBpc05hTihwYXJzZWREYXRhW2ldWzBdLmdldFRpbWUoKSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcInggdmFsdWUgaW4gcm93IFwiICsgKDEgKyBpKSArIFwiIGlzIG5vdCBhIERhdGVcIik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcGFyc2VkRGF0YVtpXVswXSA9IHBhcnNlZERhdGFbaV1bMF0uZ2V0VGltZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkRGF0YTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTb21lIGludGVsbGlnZW50IGRlZmF1bHRzIGZvciBhIG51bWVyaWMgeC1heGlzLlxuICAgIC8qKiBAcHJpdmF0ZSAoc2h1dCB1cCwganNkb2MhKSAqL1xuICAgIHRoaXMuYXR0cnNfLmF4ZXMueC52YWx1ZUZvcm1hdHRlciA9IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHg7IH07XG4gICAgdGhpcy5hdHRyc18uYXhlcy54LnRpY2tlciA9IER5Z3JhcGhUaWNrZXJzLm51bWVyaWNUaWNrcztcbiAgICB0aGlzLmF0dHJzXy5heGVzLnguYXhpc0xhYmVsRm9ybWF0dGVyID0gdXRpbHMubnVtYmVyQXhpc0xhYmVsRm9ybWF0dGVyO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG59O1xuXG4vKipcbiAqIFBhcnNlcyBhIERhdGFUYWJsZSBvYmplY3QgZnJvbSBndml6LlxuICogVGhlIGRhdGEgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBhIGZpcnN0IGNvbHVtbiB0aGF0IGlzIGVpdGhlciBhIGRhdGUgb3IgYVxuICogbnVtYmVyLiBBbGwgc3Vic2VxdWVudCBjb2x1bW5zIG11c3QgYmUgbnVtYmVycy4gSWYgdGhlcmUgaXMgYSBjbGVhciBtaXNtYXRjaFxuICogYmV0d2VlbiB0aGlzLnhWYWx1ZVBhcnNlcl8gYW5kIHRoZSB0eXBlIG9mIHRoZSBmaXJzdCBjb2x1bW4sIGl0IHdpbGwgYmVcbiAqIGZpeGVkLiBGaWxscyBvdXQgcmF3RGF0YV8uXG4gKiBAcGFyYW0geyFnb29nbGUudmlzdWFsaXphdGlvbi5EYXRhVGFibGV9IGRhdGEgU2VlIGFib3ZlLlxuICogQHByaXZhdGVcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUucGFyc2VEYXRhVGFibGVfID0gZnVuY3Rpb24oZGF0YSkge1xuICB2YXIgc2hvcnRUZXh0Rm9yQW5ub3RhdGlvbk51bSA9IGZ1bmN0aW9uKG51bSkge1xuICAgIC8vIGNvbnZlcnRzIFswLTldKyBbQS1aXVthLXpdKlxuICAgIC8vIGV4YW1wbGU6IDA9QSwgMT1CLCAyNT1aLCAyNj1BYSwgMjc9QWJcbiAgICAvLyBhbmQgY29udGludWVzIGxpa2UuLiBCYSBCYiAuLiBaYSAuLiBaei4uQWFhLi4uWnp6IEFhYWEgWnp6elxuICAgIHZhciBzaG9ydFRleHQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDY1IC8qIEEgKi8gKyBudW0gJSAyNik7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyAyNik7XG4gICAgd2hpbGUgKCBudW0gPiAwICkge1xuICAgICAgc2hvcnRUZXh0ID0gU3RyaW5nLmZyb21DaGFyQ29kZSg2NSAvKiBBICovICsgKG51bSAtIDEpICUgMjYgKSArIHNob3J0VGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgbnVtID0gTWF0aC5mbG9vcigobnVtIC0gMSkgLyAyNik7XG4gICAgfVxuICAgIHJldHVybiBzaG9ydFRleHQ7XG4gIH07XG5cbiAgdmFyIGNvbHMgPSBkYXRhLmdldE51bWJlck9mQ29sdW1ucygpO1xuICB2YXIgcm93cyA9IGRhdGEuZ2V0TnVtYmVyT2ZSb3dzKCk7XG5cbiAgdmFyIGluZGVwVHlwZSA9IGRhdGEuZ2V0Q29sdW1uVHlwZSgwKTtcbiAgaWYgKGluZGVwVHlwZSA9PSAnZGF0ZScgfHwgaW5kZXBUeXBlID09ICdkYXRldGltZScpIHtcbiAgICB0aGlzLmF0dHJzXy54VmFsdWVQYXJzZXIgPSB1dGlscy5kYXRlUGFyc2VyO1xuICAgIHRoaXMuYXR0cnNfLmF4ZXMueC52YWx1ZUZvcm1hdHRlciA9IHV0aWxzLmRhdGVWYWx1ZUZvcm1hdHRlcjtcbiAgICB0aGlzLmF0dHJzXy5heGVzLngudGlja2VyID0gRHlncmFwaFRpY2tlcnMuZGF0ZVRpY2tlcjtcbiAgICB0aGlzLmF0dHJzXy5heGVzLnguYXhpc0xhYmVsRm9ybWF0dGVyID0gdXRpbHMuZGF0ZUF4aXNMYWJlbEZvcm1hdHRlcjtcbiAgfSBlbHNlIGlmIChpbmRlcFR5cGUgPT0gJ251bWJlcicpIHtcbiAgICB0aGlzLmF0dHJzXy54VmFsdWVQYXJzZXIgPSBmdW5jdGlvbih4KSB7IHJldHVybiBwYXJzZUZsb2F0KHgpOyB9O1xuICAgIHRoaXMuYXR0cnNfLmF4ZXMueC52YWx1ZUZvcm1hdHRlciA9IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHg7IH07XG4gICAgdGhpcy5hdHRyc18uYXhlcy54LnRpY2tlciA9IER5Z3JhcGhUaWNrZXJzLm51bWVyaWNUaWNrcztcbiAgICB0aGlzLmF0dHJzXy5heGVzLnguYXhpc0xhYmVsRm9ybWF0dGVyID0gdGhpcy5hdHRyc18uYXhlcy54LnZhbHVlRm9ybWF0dGVyO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIm9ubHkgJ2RhdGUnLCAnZGF0ZXRpbWUnIGFuZCAnbnVtYmVyJyB0eXBlcyBhcmUgc3VwcG9ydGVkIFwiICtcbiAgICAgICAgICBcImZvciBjb2x1bW4gMSBvZiBEYXRhVGFibGUgaW5wdXQgKEdvdCAnXCIgKyBpbmRlcFR5cGUgKyBcIicpXCIpO1xuICB9XG5cbiAgLy8gQXJyYXkgb2YgdGhlIGNvbHVtbiBpbmRpY2VzIHdoaWNoIGNvbnRhaW4gZGF0YSAoYW5kIG5vdCBhbm5vdGF0aW9ucykuXG4gIHZhciBjb2xJZHggPSBbXTtcbiAgdmFyIGFubm90YXRpb25Db2xzID0ge307ICAvLyBkYXRhIGluZGV4IC0+IFthbm5vdGF0aW9uIGNvbHNdXG4gIHZhciBoYXNBbm5vdGF0aW9ucyA9IGZhbHNlO1xuICB2YXIgaSwgajtcbiAgZm9yIChpID0gMTsgaSA8IGNvbHM7IGkrKykge1xuICAgIHZhciB0eXBlID0gZGF0YS5nZXRDb2x1bW5UeXBlKGkpO1xuICAgIGlmICh0eXBlID09ICdudW1iZXInKSB7XG4gICAgICBjb2xJZHgucHVzaChpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3N0cmluZycgJiYgdGhpcy5nZXRCb29sZWFuT3B0aW9uKCdkaXNwbGF5QW5ub3RhdGlvbnMnKSkge1xuICAgICAgLy8gVGhpcyBpcyBPSyAtLSBpdCdzIGFuIGFubm90YXRpb24gY29sdW1uLlxuICAgICAgdmFyIGRhdGFJZHggPSBjb2xJZHhbY29sSWR4Lmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKCFhbm5vdGF0aW9uQ29scy5oYXNPd25Qcm9wZXJ0eShkYXRhSWR4KSkge1xuICAgICAgICBhbm5vdGF0aW9uQ29sc1tkYXRhSWR4XSA9IFtpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFubm90YXRpb25Db2xzW2RhdGFJZHhdLnB1c2goaSk7XG4gICAgICB9XG4gICAgICBoYXNBbm5vdGF0aW9ucyA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBcIk9ubHkgJ251bWJlcicgaXMgc3VwcG9ydGVkIGFzIGEgZGVwZW5kZW50IHR5cGUgd2l0aCBHdml6LlwiICtcbiAgICAgICAgICBcIiAnc3RyaW5nJyBpcyBvbmx5IHN1cHBvcnRlZCBpZiBkaXNwbGF5QW5ub3RhdGlvbnMgaXMgdHJ1ZVwiKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZWFkIGNvbHVtbiBsYWJlbHNcbiAgLy8gVE9ETyhkYW52ayk6IGFkZCBzdXBwb3J0IGJhY2sgZm9yIGVycm9yQmFyc1xuICB2YXIgbGFiZWxzID0gW2RhdGEuZ2V0Q29sdW1uTGFiZWwoMCldO1xuICBmb3IgKGkgPSAwOyBpIDwgY29sSWR4Lmxlbmd0aDsgaSsrKSB7XG4gICAgbGFiZWxzLnB1c2goZGF0YS5nZXRDb2x1bW5MYWJlbChjb2xJZHhbaV0pKTtcbiAgICBpZiAodGhpcy5nZXRCb29sZWFuT3B0aW9uKFwiZXJyb3JCYXJzXCIpKSBpICs9IDE7XG4gIH1cbiAgdGhpcy5hdHRyc18ubGFiZWxzID0gbGFiZWxzO1xuICBjb2xzID0gbGFiZWxzLmxlbmd0aDtcblxuICB2YXIgcmV0ID0gW107XG4gIHZhciBvdXRPZk9yZGVyID0gZmFsc2U7XG4gIHZhciBhbm5vdGF0aW9ucyA9IFtdO1xuICBmb3IgKGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgdmFyIHJvdyA9IFtdO1xuICAgIGlmICh0eXBlb2YoZGF0YS5nZXRWYWx1ZShpLCAwKSkgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgIGRhdGEuZ2V0VmFsdWUoaSwgMCkgPT09IG51bGwpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIklnbm9yaW5nIHJvdyBcIiArIGkgK1xuICAgICAgICAgICAgICAgICAgIFwiIG9mIERhdGFUYWJsZSBiZWNhdXNlIG9mIHVuZGVmaW5lZCBvciBudWxsIGZpcnN0IGNvbHVtbi5cIik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZXBUeXBlID09ICdkYXRlJyB8fCBpbmRlcFR5cGUgPT0gJ2RhdGV0aW1lJykge1xuICAgICAgcm93LnB1c2goZGF0YS5nZXRWYWx1ZShpLCAwKS5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3cucHVzaChkYXRhLmdldFZhbHVlKGksIDApKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmdldEJvb2xlYW5PcHRpb24oXCJlcnJvckJhcnNcIikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBjb2xJZHgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIGNvbCA9IGNvbElkeFtqXTtcbiAgICAgICAgcm93LnB1c2goZGF0YS5nZXRWYWx1ZShpLCBjb2wpKTtcbiAgICAgICAgaWYgKGhhc0Fubm90YXRpb25zICYmXG4gICAgICAgICAgICBhbm5vdGF0aW9uQ29scy5oYXNPd25Qcm9wZXJ0eShjb2wpICYmXG4gICAgICAgICAgICBkYXRhLmdldFZhbHVlKGksIGFubm90YXRpb25Db2xzW2NvbF1bMF0pICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGFubiA9IHt9O1xuICAgICAgICAgIGFubi5zZXJpZXMgPSBkYXRhLmdldENvbHVtbkxhYmVsKGNvbCk7XG4gICAgICAgICAgYW5uLnh2YWwgPSByb3dbMF07XG4gICAgICAgICAgYW5uLnNob3J0VGV4dCA9IHNob3J0VGV4dEZvckFubm90YXRpb25OdW0oYW5ub3RhdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgICBhbm4udGV4dCA9ICcnO1xuICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYW5ub3RhdGlvbkNvbHNbY29sXS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgaWYgKGspIGFubi50ZXh0ICs9IFwiXFxuXCI7XG4gICAgICAgICAgICBhbm4udGV4dCArPSBkYXRhLmdldFZhbHVlKGksIGFubm90YXRpb25Db2xzW2NvbF1ba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhbm5vdGF0aW9ucy5wdXNoKGFubik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU3RyaXAgb3V0IGluZmluaXRpZXMsIHdoaWNoIGdpdmUgZHlncmFwaHMgcHJvYmxlbXMgbGF0ZXIgb24uXG4gICAgICBmb3IgKGogPSAwOyBqIDwgcm93Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICghaXNGaW5pdGUocm93W2pdKSkgcm93W2pdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGNvbHMgLSAxOyBqKyspIHtcbiAgICAgICAgcm93LnB1c2goWyBkYXRhLmdldFZhbHVlKGksIDEgKyAyICogaiksIGRhdGEuZ2V0VmFsdWUoaSwgMiArIDIgKiBqKSBdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJldC5sZW5ndGggPiAwICYmIHJvd1swXSA8IHJldFtyZXQubGVuZ3RoIC0gMV1bMF0pIHtcbiAgICAgIG91dE9mT3JkZXIgPSB0cnVlO1xuICAgIH1cbiAgICByZXQucHVzaChyb3cpO1xuICB9XG5cbiAgaWYgKG91dE9mT3JkZXIpIHtcbiAgICBjb25zb2xlLndhcm4oXCJEYXRhVGFibGUgaXMgb3V0IG9mIG9yZGVyOyBvcmRlciBpdCBjb3JyZWN0bHkgdG8gc3BlZWQgbG9hZGluZy5cIik7XG4gICAgcmV0LnNvcnQoZnVuY3Rpb24oYSxiKSB7IHJldHVybiBhWzBdIC0gYlswXTsgfSk7XG4gIH1cbiAgdGhpcy5yYXdEYXRhXyA9IHJldDtcblxuICBpZiAoYW5ub3RhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgIHRoaXMuc2V0QW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMsIHRydWUpO1xuICB9XG4gIHRoaXMuYXR0cmlidXRlc18ucmVwYXJzZVNlcmllcygpO1xufTtcblxuLyoqXG4gKiBTaWduYWxzIHRvIHBsdWdpbnMgdGhhdCB0aGUgY2hhcnQgZGF0YSBoYXMgdXBkYXRlZC5cbiAqIFRoaXMgaGFwcGVucyBhZnRlciB0aGUgZGF0YSBoYXMgdXBkYXRlZCBidXQgYmVmb3JlIHRoZSBjaGFydCBoYXMgcmVkcmF3bi5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmNhc2NhZGVEYXRhRGlkVXBkYXRlRXZlbnRfID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE8oZGFudmspOiB0aGVyZSBhcmUgc29tZSBpc3N1ZXMgY2hlY2tpbmcgeEF4aXNSYW5nZSgpIGFuZCB1c2luZ1xuICAvLyB0b0RvbUNvb3JkcyBmcm9tIGhhbmRsZXJzIG9mIHRoaXMgZXZlbnQuIFRoZSB2aXNpYmxlIHJhbmdlIHNob3VsZCBiZSBzZXRcbiAgLy8gd2hlbiB0aGUgY2hhcnQgaXMgZHJhd24sIG5vdCBkZXJpdmVkIGZyb20gdGhlIGRhdGEuXG4gIHRoaXMuY2FzY2FkZUV2ZW50c18oJ2RhdGFEaWRVcGRhdGUnLCB7fSk7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgQ1NWIGRhdGEuIElmIGl0J3MgaW4gYSBmdW5jdGlvbiwgY2FsbCB0aGF0IGZ1bmN0aW9uLiBJZiBpdCdzIGluIGFcbiAqIGZpbGUsIGRvIGFuIFhNTEh0dHBSZXF1ZXN0IHRvIGdldCBpdC5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnN0YXJ0XyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgZGF0YSA9IHRoaXMuZmlsZV87XG5cbiAgLy8gRnVuY3Rpb25zIGNhbiByZXR1cm4gcmVmZXJlbmNlcyBvZiBhbGwgb3RoZXIgdHlwZXMuXG4gIGlmICh0eXBlb2YgZGF0YSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgZGF0YSA9IGRhdGEoKTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0FycmF5TGlrZShkYXRhKSkge1xuICAgIHRoaXMucmF3RGF0YV8gPSB0aGlzLnBhcnNlQXJyYXlfKGRhdGEpO1xuICAgIHRoaXMuY2FzY2FkZURhdGFEaWRVcGRhdGVFdmVudF8oKTtcbiAgICB0aGlzLnByZWRyYXdfKCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICB0eXBlb2YgZGF0YS5nZXRDb2x1bW5SYW5nZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gbXVzdCBiZSBhIERhdGFUYWJsZSBmcm9tIGd2aXouXG4gICAgdGhpcy5wYXJzZURhdGFUYWJsZV8oZGF0YSk7XG4gICAgdGhpcy5jYXNjYWRlRGF0YURpZFVwZGF0ZUV2ZW50XygpO1xuICAgIHRoaXMucHJlZHJhd18oKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykge1xuICAgIC8vIEhldXJpc3RpYzogYSBuZXdsaW5lIG1lYW5zIGl0J3MgQ1NWIGRhdGEuIE90aGVyd2lzZSBpdCdzIGFuIFVSTC5cbiAgICB2YXIgbGluZV9kZWxpbWl0ZXIgPSB1dGlscy5kZXRlY3RMaW5lRGVsaW1pdGVyKGRhdGEpO1xuICAgIGlmIChsaW5lX2RlbGltaXRlcikge1xuICAgICAgdGhpcy5sb2FkZWRFdmVudF8oZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJFTU9WRV9GT1JfSUVcbiAgICAgIHZhciByZXE7XG4gICAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgIC8vIEZpcmVmb3gsIE9wZXJhLCBJRTcsIGFuZCBvdGhlciBicm93c2VycyB3aWxsIHVzZSB0aGUgbmF0aXZlIG9iamVjdFxuICAgICAgICByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElFIDUgYW5kIDYgd2lsbCB1c2UgdGhlIEFjdGl2ZVggY29udHJvbFxuICAgICAgICByZXEgPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FsbGVyID0gdGhpcztcbiAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCB8fCAgLy8gTm9ybWFsIGh0dHBcbiAgICAgICAgICAgICAgcmVxLnN0YXR1cyA9PT0gMCkgeyAgICAvLyBDaHJvbWUgdy8gLS1hbGxvdy1maWxlLWFjY2Vzcy1mcm9tLWZpbGVzXG4gICAgICAgICAgICBjYWxsZXIubG9hZGVkRXZlbnRfKHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmVxLm9wZW4oXCJHRVRcIiwgZGF0YSwgdHJ1ZSk7XG4gICAgICByZXEuc2VuZChudWxsKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcihcIlVua25vd24gZGF0YSBmb3JtYXQ6IFwiICsgKHR5cGVvZiBkYXRhKSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hhbmdlcyB2YXJpb3VzIHByb3BlcnRpZXMgb2YgdGhlIGdyYXBoLiBUaGVzZSBjYW4gaW5jbHVkZTpcbiAqIDx1bD5cbiAqIDxsaT5maWxlOiBjaGFuZ2VzIHRoZSBzb3VyY2UgZGF0YSBmb3IgdGhlIGdyYXBoPC9saT5cbiAqIDxsaT5lcnJvckJhcnM6IGNoYW5nZXMgd2hldGhlciB0aGUgZGF0YSBjb250YWlucyBzdGRkZXY8L2xpPlxuICogPC91bD5cbiAqXG4gKiBUaGVyZSdzIGEgaHVnZSB2YXJpZXR5IG9mIG9wdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLiBGb3IgYVxuICogZnVsbCBsaXN0LCBzZWUgaHR0cDovL2R5Z3JhcGhzLmNvbS9vcHRpb25zLmh0bWwuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0X2F0dHJzIFRoZSBuZXcgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJsb2NrX3JlZHJhdyBVc3VhbGx5IHRoZSBjaGFydCBpcyByZWRyYXduIGFmdGVyIGV2ZXJ5XG4gKiAgICAgY2FsbCB0byB1cGRhdGVPcHRpb25zKCkuIElmIHlvdSBrbm93IGJldHRlciwgeW91IGNhbiBwYXNzIHRydWUgdG9cbiAqICAgICBleHBsaWNpdGx5IGJsb2NrIHRoZSByZWRyYXcuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgY2hhaW5pbmdcbiAqICAgICB1cGRhdGVPcHRpb25zKCkgY2FsbHMsIGF2b2lkaW5nIHRoZSBvY2Nhc2lvbmFsIGluZmluaXRlIGxvb3AgYW5kXG4gKiAgICAgcHJldmVudGluZyByZWRyYXdzIHdoZW4gaXQncyBub3QgbmVjZXNzYXJ5IChlLmcuIHdoZW4gdXBkYXRpbmcgYVxuICogICAgIGNhbGxiYWNrKS5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUudXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uKGlucHV0X2F0dHJzLCBibG9ja19yZWRyYXcpIHtcbiAgaWYgKHR5cGVvZihibG9ja19yZWRyYXcpID09ICd1bmRlZmluZWQnKSBibG9ja19yZWRyYXcgPSBmYWxzZTtcblxuICAvLyBjb3B5VXNlckF0dHJzXyBkcm9wcyB0aGUgXCJmaWxlXCIgcGFyYW1ldGVyIGFzIGEgY29udmVuaWVuY2UgdG8gdXMuXG4gIHZhciBmaWxlID0gaW5wdXRfYXR0cnMuZmlsZTtcbiAgdmFyIGF0dHJzID0gRHlncmFwaC5jb3B5VXNlckF0dHJzXyhpbnB1dF9hdHRycyk7XG5cbiAgLy8gVE9ETyhkYW52ayk6IHRoaXMgaXMgYSBtZXNzLiBNb3ZlIHRoZXNlIG9wdGlvbnMgaW50byBhdHRyXy5cbiAgaWYgKCdyb2xsUGVyaW9kJyBpbiBhdHRycykge1xuICAgIHRoaXMucm9sbFBlcmlvZF8gPSBhdHRycy5yb2xsUGVyaW9kO1xuICB9XG4gIGlmICgnZGF0ZVdpbmRvdycgaW4gYXR0cnMpIHtcbiAgICB0aGlzLmRhdGVXaW5kb3dfID0gYXR0cnMuZGF0ZVdpbmRvdztcbiAgfVxuXG4gIC8vIFRPRE8oZGFudmspOiB2YWxpZGF0ZSBwZXItc2VyaWVzIG9wdGlvbnMuXG4gIC8vIFN1cHBvcnRlZDpcbiAgLy8gc3Ryb2tlV2lkdGhcbiAgLy8gcG9pbnRTaXplXG4gIC8vIGRyYXdQb2ludHNcbiAgLy8gaGlnaGxpZ2h0Q2lyY2xlU2l6ZVxuXG4gIC8vIENoZWNrIGlmIHRoaXMgc2V0IG9wdGlvbnMgd2lsbCByZXF1aXJlIG5ldyBwb2ludHMuXG4gIHZhciByZXF1aXJlc05ld1BvaW50cyA9IHV0aWxzLmlzUGl4ZWxDaGFuZ2luZ09wdGlvbkxpc3QodGhpcy5hdHRyXyhcImxhYmVsc1wiKSwgYXR0cnMpO1xuXG4gIHV0aWxzLnVwZGF0ZURlZXAodGhpcy51c2VyX2F0dHJzXywgYXR0cnMpO1xuXG4gIHRoaXMuYXR0cmlidXRlc18ucmVwYXJzZVNlcmllcygpO1xuXG4gIGlmIChmaWxlKSB7XG4gICAgLy8gVGhpcyBldmVudCBpbmRpY2F0ZXMgdGhhdCB0aGUgZGF0YSBpcyBhYm91dCB0byBjaGFuZ2UsIGJ1dCBoYXNuJ3QgeWV0LlxuICAgIC8vIFRPRE8oZGFudmspOiBzdXBwb3J0IGNhbmNlbGxhdGlvbiBvZiB0aGUgdXBkYXRlIHZpYSB0aGlzIGV2ZW50LlxuICAgIHRoaXMuY2FzY2FkZUV2ZW50c18oJ2RhdGFXaWxsVXBkYXRlJywge30pO1xuXG4gICAgdGhpcy5maWxlXyA9IGZpbGU7XG4gICAgaWYgKCFibG9ja19yZWRyYXcpIHRoaXMuc3RhcnRfKCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFibG9ja19yZWRyYXcpIHtcbiAgICAgIGlmIChyZXF1aXJlc05ld1BvaW50cykge1xuICAgICAgICB0aGlzLnByZWRyYXdfKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlckdyYXBoXyhmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIE1ha2UgYSBjb3B5IG9mIGlucHV0IGF0dHJpYnV0ZXMsIHJlbW92aW5nIGZpbGUgYXMgYSBjb252ZW5pZW5jZS5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGguY29weVVzZXJBdHRyc18gPSBmdW5jdGlvbihhdHRycykge1xuICB2YXIgbXlfYXR0cnMgPSB7fTtcbiAgZm9yICh2YXIgayBpbiBhdHRycykge1xuICAgIGlmICghYXR0cnMuaGFzT3duUHJvcGVydHkoaykpIGNvbnRpbnVlO1xuICAgIGlmIChrID09ICdmaWxlJykgY29udGludWU7XG4gICAgaWYgKGF0dHJzLmhhc093blByb3BlcnR5KGspKSBteV9hdHRyc1trXSA9IGF0dHJzW2tdO1xuICB9XG4gIHJldHVybiBteV9hdHRycztcbn07XG5cbi8qKlxuICogUmVzaXplcyB0aGUgZHlncmFwaC4gSWYgbm8gcGFyYW1ldGVycyBhcmUgc3BlY2lmaWVkLCByZXNpemVzIHRvIGZpbGwgdGhlXG4gKiBjb250YWluaW5nIGRpdiAod2hpY2ggaGFzIHByZXN1bWFibHkgY2hhbmdlZCBzaXplIHNpbmNlIHRoZSBkeWdyYXBoIHdhc1xuICogaW5zdGFudGlhdGVkLiBJZiB0aGUgd2lkdGgvaGVpZ2h0IGFyZSBzcGVjaWZpZWQsIHRoZSBkaXYgd2lsbCBiZSByZXNpemVkLlxuICpcbiAqIFRoaXMgaXMgZmFyIG1vcmUgZWZmaWNpZW50IHRoYW4gZGVzdHJveWluZyBhbmQgcmUtaW5zdGFudGlhdGluZyBhXG4gKiBEeWdyYXBoLCBzaW5jZSBpdCBkb2Vzbid0IGhhdmUgdG8gcmVwYXJzZSB0aGUgdW5kZXJseWluZyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCAoaW4gcGl4ZWxzKVxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgKGluIHBpeGVscylcbiAqL1xuRHlncmFwaC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICBpZiAodGhpcy5yZXNpemVfbG9jaykge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnJlc2l6ZV9sb2NrID0gdHJ1ZTtcblxuICBpZiAoKHdpZHRoID09PSBudWxsKSAhPSAoaGVpZ2h0ID09PSBudWxsKSkge1xuICAgIGNvbnNvbGUud2FybihcIkR5Z3JhcGgucmVzaXplKCkgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHplcm8gcGFyYW1ldGVycyBvciBcIiArXG4gICAgICAgICAgICAgICAgIFwidHdvIG5vbi1OVUxMIHBhcmFtZXRlcnMuIFByZXRlbmRpbmcgaXQgd2FzIHplcm8uXCIpO1xuICAgIHdpZHRoID0gaGVpZ2h0ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBvbGRfd2lkdGggPSB0aGlzLndpZHRoXztcbiAgdmFyIG9sZF9oZWlnaHQgPSB0aGlzLmhlaWdodF87XG5cbiAgaWYgKHdpZHRoKSB7XG4gICAgdGhpcy5tYWluZGl2Xy5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJweFwiO1xuICAgIHRoaXMubWFpbmRpdl8uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJweFwiO1xuICAgIHRoaXMud2lkdGhfID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHRfID0gaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIHRoaXMud2lkdGhfID0gdGhpcy5tYWluZGl2Xy5jbGllbnRXaWR0aDtcbiAgICB0aGlzLmhlaWdodF8gPSB0aGlzLm1haW5kaXZfLmNsaWVudEhlaWdodDtcbiAgfVxuXG4gIGlmIChvbGRfd2lkdGggIT0gdGhpcy53aWR0aF8gfHwgb2xkX2hlaWdodCAhPSB0aGlzLmhlaWdodF8pIHtcbiAgICAvLyBSZXNpemluZyBhIGNhbnZhcyBlcmFzZXMgaXQsIGV2ZW4gd2hlbiB0aGUgc2l6ZSBkb2Vzbid0IGNoYW5nZSwgc29cbiAgICAvLyBhbnkgcmVzaXplIG5lZWRzIHRvIGJlIGZvbGxvd2VkIGJ5IGEgcmVkcmF3LlxuICAgIHRoaXMucmVzaXplRWxlbWVudHNfKCk7XG4gICAgdGhpcy5wcmVkcmF3XygpO1xuICB9XG5cbiAgdGhpcy5yZXNpemVfbG9jayA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBBZGp1c3RzIHRoZSBudW1iZXIgb2YgcG9pbnRzIGluIHRoZSByb2xsaW5nIGF2ZXJhZ2UuIFVwZGF0ZXMgdGhlIGdyYXBoIHRvXG4gKiByZWZsZWN0IHRoZSBuZXcgYXZlcmFnaW5nIHBlcmlvZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggTnVtYmVyIG9mIHBvaW50cyBvdmVyIHdoaWNoIHRvIGF2ZXJhZ2UgdGhlIGRhdGEuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmFkanVzdFJvbGwgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgdGhpcy5yb2xsUGVyaW9kXyA9IGxlbmd0aDtcbiAgdGhpcy5wcmVkcmF3XygpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgYm9vbGVhbiBhcnJheSBvZiB2aXNpYmlsaXR5IHN0YXR1c2VzLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG4gIC8vIERvIGxhenktaW5pdGlhbGl6YXRpb24sIHNvIHRoYXQgdGhpcyBoYXBwZW5zIGFmdGVyIHdlIGtub3cgdGhlIG51bWJlciBvZlxuICAvLyBkYXRhIHNlcmllcy5cbiAgaWYgKCF0aGlzLmdldE9wdGlvbihcInZpc2liaWxpdHlcIikpIHtcbiAgICB0aGlzLmF0dHJzXy52aXNpYmlsaXR5ID0gW107XG4gIH1cbiAgLy8gVE9ETyhkYW52ayk6IGl0IGxvb2tzIGxpa2UgdGhpcyBjb3VsZCBnbyBpbnRvIGFuIGluZmluaXRlIGxvb3Agdy8gdXNlcl9hdHRycy5cbiAgd2hpbGUgKHRoaXMuZ2V0T3B0aW9uKFwidmlzaWJpbGl0eVwiKS5sZW5ndGggPCB0aGlzLm51bUNvbHVtbnMoKSAtIDEpIHtcbiAgICB0aGlzLmF0dHJzXy52aXNpYmlsaXR5LnB1c2godHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZ2V0T3B0aW9uKFwidmlzaWJpbGl0eVwiKTtcbn07XG5cbi8qKlxuICogQ2hhbmdlcyB0aGUgdmlzaWJpbGl0eSBvZiBvbmUgb3IgbW9yZSBzZXJpZXMuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8bnVtYmVyW118b2JqZWN0fSBudW0gdGhlIHNlcmllcyBpbmRleCBvciBhbiBhcnJheSBvZiBzZXJpZXMgaW5kaWNlc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYSBib29sZWFuIGFycmF5IG9mIHZpc2liaWxpdHkgc3RhdGVzIGJ5IGluZGV4XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBvYmplY3QgbWFwcGluZyBzZXJpZXMgbnVtYmVycywgYXMga2V5cywgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHkgc3RhdGUgKGJvb2xlYW4gdmFsdWVzKVxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSB0aGUgdmlzaWJpbGl0eSBzdGF0ZSBleHByZXNzZWQgYXMgYSBib29sZWFuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnNldFZpc2liaWxpdHkgPSBmdW5jdGlvbihudW0sIHZhbHVlKSB7XG4gIHZhciB4ID0gdGhpcy52aXNpYmlsaXR5KCk7XG4gIHZhciBudW1Jc09iamVjdCA9IGZhbHNlO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShudW0pKSB7XG4gICAgaWYgKG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0Jykge1xuICAgICAgbnVtSXNPYmplY3QgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW0gPSBbbnVtXTtcbiAgICB9XG4gIH1cblxuICBpZiAobnVtSXNPYmplY3QpIHtcbiAgICBmb3IgKHZhciBpIGluIG51bSkge1xuICAgICAgaWYgKG51bS5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICBpZiAoaSA8IDAgfHwgaSA+PSB4Lmxlbmd0aCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIkludmFsaWQgc2VyaWVzIG51bWJlciBpbiBzZXRWaXNpYmlsaXR5OiBcIiArIGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhbaV0gPSBudW1baV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0eXBlb2YgbnVtW2ldID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgaWYgKGkgPj0geC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHNlcmllcyBudW1iZXIgaW4gc2V0VmlzaWJpbGl0eTogXCIgKyBpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4W2ldID0gbnVtW2ldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobnVtW2ldIDwgMCB8fCBudW1baV0gPj0geC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIHNlcmllcyBudW1iZXIgaW4gc2V0VmlzaWJpbGl0eTogXCIgKyBudW1baV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhbbnVtW2ldXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5wcmVkcmF3XygpO1xufTtcblxuLyoqXG4gKiBIb3cgbGFyZ2Ugb2YgYW4gYXJlYSB3aWxsIHRoZSBkeWdyYXBoIHJlbmRlciBpdHNlbGYgaW4/XG4gKiBUaGlzIGlzIHVzZWQgZm9yIHRlc3RpbmcuXG4gKiBAcmV0dXJuIEEge3dpZHRoOiB3LCBoZWlnaHQ6IGh9IG9iamVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHsgd2lkdGg6IHRoaXMud2lkdGhfLCBoZWlnaHQ6IHRoaXMuaGVpZ2h0XyB9O1xufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIGxpc3Qgb2YgYW5ub3RhdGlvbnMgYW5kIHJlZHJhdyB0aGUgY2hhcnQuXG4gKiBTZWUgZHlncmFwaHMuY29tL2Fubm90YXRpb25zLmh0bWwgZm9yIG1vcmUgaW5mbyBvbiBob3cgdG8gdXNlIGFubm90YXRpb25zLlxuICogQHBhcmFtIGFubiB7QXJyYXl9IEFuIGFycmF5IG9mIGFubm90YXRpb24gb2JqZWN0cy5cbiAqIEBwYXJhbSBzdXBwcmVzc0RyYXcge0Jvb2xlYW59IFNldCB0byBcInRydWVcIiB0byBibG9jayBjaGFydCByZWRyYXcgKG9wdGlvbmFsKS5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuc2V0QW5ub3RhdGlvbnMgPSBmdW5jdGlvbihhbm4sIHN1cHByZXNzRHJhdykge1xuICAvLyBPbmx5IGFkZCB0aGUgYW5ub3RhdGlvbiBDU1MgcnVsZSBvbmNlIHdlIGtub3cgaXQgd2lsbCBiZSB1c2VkLlxuICB0aGlzLmFubm90YXRpb25zXyA9IGFubjtcbiAgaWYgKCF0aGlzLmxheW91dF8pIHtcbiAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byBzZXRBbm5vdGF0aW9ucyBiZWZvcmUgZHlncmFwaCB3YXMgcmVhZHkuIFwiICtcbiAgICAgICAgICAgICAgICAgXCJUcnkgc2V0dGluZyB0aGVtIGluIGEgcmVhZHkoKSBibG9jay4gU2VlIFwiICtcbiAgICAgICAgICAgICAgICAgXCJkeWdyYXBocy5jb20vdGVzdHMvYW5ub3RhdGlvbi5odG1sXCIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMubGF5b3V0Xy5zZXRBbm5vdGF0aW9ucyh0aGlzLmFubm90YXRpb25zXyk7XG4gIGlmICghc3VwcHJlc3NEcmF3KSB7XG4gICAgdGhpcy5wcmVkcmF3XygpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgbGlzdCBvZiBhbm5vdGF0aW9ucy5cbiAqL1xuRHlncmFwaC5wcm90b3R5cGUuYW5ub3RhdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuYW5ub3RhdGlvbnNfO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGxpc3Qgb2YgbGFiZWwgbmFtZXMgZm9yIHRoaXMgZ3JhcGguIFRoZSBmaXJzdCBjb2x1bW4gaXMgdGhlXG4gKiB4LWF4aXMsIHNvIHRoZSBkYXRhIHNlcmllcyBuYW1lcyBzdGFydCBhdCBpbmRleCAxLlxuICpcbiAqIFJldHVybnMgbnVsbCB3aGVuIGxhYmVscyBoYXZlIG5vdCB5ZXQgYmVlbiBkZWZpbmVkLlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5nZXRMYWJlbHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGxhYmVscyA9IHRoaXMuYXR0cl8oXCJsYWJlbHNcIik7XG4gIHJldHVybiBsYWJlbHMgPyBsYWJlbHMuc2xpY2UoKSA6IG51bGw7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgaW5kZXggb2YgYSBzZXJpZXMgKGNvbHVtbikgZ2l2ZW4gaXRzIG5hbWUuIFRoZSBmaXJzdCBjb2x1bW4gaXMgdGhlXG4gKiB4LWF4aXMsIHNvIHRoZSBkYXRhIHNlcmllcyBzdGFydCB3aXRoIGluZGV4IDEuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmluZGV4RnJvbVNldE5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLnNldEluZGV4QnlOYW1lX1tuYW1lXTtcbn07XG5cbi8qKlxuICogRmluZCB0aGUgcm93IG51bWJlciBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiB4LXZhbHVlLlxuICogUmV0dXJucyBudWxsIGlmIHRoZXJlIGlzIG5vIHN1Y2ggeC12YWx1ZSBpbiB0aGUgZGF0YS5cbiAqIElmIHRoZXJlIGFyZSBtdWx0aXBsZSByb3dzIHdpdGggdGhlIHNhbWUgeC12YWx1ZSwgdGhpcyB3aWxsIHJldHVybiB0aGVcbiAqIGZpcnN0IG9uZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4VmFsIFRoZSB4LXZhbHVlIHRvIGxvb2sgZm9yIChlLmcuIG1pbGxpcyBzaW5jZSBlcG9jaCkuXG4gKiBAcmV0dXJuIHs/bnVtYmVyfSBUaGUgcm93IG51bWJlciwgd2hpY2ggeW91IGNhbiBwYXNzIHRvIGdldFZhbHVlKCksIG9yIG51bGwuXG4gKi9cbkR5Z3JhcGgucHJvdG90eXBlLmdldFJvd0ZvclggPSBmdW5jdGlvbih4VmFsKSB7XG4gIHZhciBsb3cgPSAwLFxuICAgICAgaGlnaCA9IHRoaXMubnVtUm93cygpIC0gMTtcblxuICB3aGlsZSAobG93IDw9IGhpZ2gpIHtcbiAgICB2YXIgaWR4ID0gKGhpZ2ggKyBsb3cpID4+IDE7XG4gICAgdmFyIHggPSB0aGlzLmdldFZhbHVlKGlkeCwgMCk7XG4gICAgaWYgKHggPCB4VmFsKSB7XG4gICAgICBsb3cgPSBpZHggKyAxO1xuICAgIH0gZWxzZSBpZiAoeCA+IHhWYWwpIHtcbiAgICAgIGhpZ2ggPSBpZHggLSAxO1xuICAgIH0gZWxzZSBpZiAobG93ICE9IGlkeCkgeyAgLy8gZXF1YWwsIGJ1dCB0aGVyZSBtYXkgYmUgYW4gZWFybGllciBtYXRjaC5cbiAgICAgIGhpZ2ggPSBpZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFRyaWdnZXIgYSBjYWxsYmFjayB3aGVuIHRoZSBkeWdyYXBoIGhhcyBkcmF3biBpdHNlbGYgYW5kIGlzIHJlYWR5IHRvIGJlXG4gKiBtYW5pcHVsYXRlZC4gVGhpcyBpcyBwcmltYXJpbHkgdXNlZnVsIHdoZW4gZHlncmFwaHMgaGFzIHRvIGRvIGFuIFhIUiBmb3IgdGhlXG4gKiBkYXRhIChpLmUuIGEgVVJMIGlzIHBhc3NlZCBhcyB0aGUgZGF0YSBzb3VyY2UpIGFuZCB0aGUgY2hhcnQgaXMgZHJhd25cbiAqIGFzeW5jaHJvbm91c2x5LiBJZiB0aGUgY2hhcnQgaGFzIGFscmVhZHkgZHJhd24sIHRoZSBjYWxsYmFjayB3aWxsIGZpcmVcbiAqIGltbWVkaWF0ZWx5LlxuICpcbiAqIFRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIGNhbGwgc2V0QW5ub3RhdGlvbigpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUR5Z3JhcGgpfSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gdHJpZ2dlciB3aGVuIHRoZSBjaGFydFxuICogICAgIGlzIHJlYWR5LlxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5yZWFkeSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLmlzX2luaXRpYWxfZHJhd18pIHtcbiAgICB0aGlzLnJlYWR5Rm5zXy5wdXNoKGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIEFkZCBhbiBldmVudCBoYW5kbGVyLiBUaGlzIGV2ZW50IGhhbmRsZXIgaXMga2VwdCB1bnRpbCB0aGUgZ3JhcGggaXNcbiAqIGRlc3Ryb3llZCB3aXRoIGEgY2FsbCB0byBncmFwaC5kZXN0cm95KCkuXG4gKlxuICogQHBhcmFtIHshTm9kZX0gZWxlbSBUaGUgZWxlbWVudCB0byBhZGQgdGhlIGV2ZW50IHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgdGhlIGV2ZW50LCBlLmcuICdjbGljaycgb3IgJ21vdXNlbW92ZScuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKEV2ZW50KTooYm9vbGVhbnx1bmRlZmluZWQpfSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbFxuICogICAgIG9uIHRoZSBldmVudC4gVGhlIGZ1bmN0aW9uIHRha2VzIG9uZSBwYXJhbWV0ZXI6IHRoZSBldmVudCBvYmplY3QuXG4gKiBAcHJpdmF0ZVxuICovXG5EeWdyYXBoLnByb3RvdHlwZS5hZGRBbmRUcmFja0V2ZW50ID0gZnVuY3Rpb24oZWxlbSwgdHlwZSwgZm4pIHtcbiAgdXRpbHMuYWRkRXZlbnQoZWxlbSwgdHlwZSwgZm4pO1xuICB0aGlzLnJlZ2lzdGVyZWRFdmVudHNfLnB1c2goe2VsZW0sIHR5cGUsIGZufSk7XG59O1xuXG5EeWdyYXBoLnByb3RvdHlwZS5yZW1vdmVUcmFja2VkRXZlbnRzXyA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZWdpc3RlcmVkRXZlbnRzXykge1xuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IHRoaXMucmVnaXN0ZXJlZEV2ZW50c18ubGVuZ3RoOyBpZHgrKykge1xuICAgICAgdmFyIHJlZyA9IHRoaXMucmVnaXN0ZXJlZEV2ZW50c19baWR4XTtcbiAgICAgIHV0aWxzLnJlbW92ZUV2ZW50KHJlZy5lbGVtLCByZWcudHlwZSwgcmVnLmZuKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLnJlZ2lzdGVyZWRFdmVudHNfID0gW107XG59O1xuXG5cbi8vIEluc3RhbGxlZCBwbHVnaW5zLCBpbiBvcmRlciBvZiBwcmVjZWRlbmNlIChtb3N0LWdlbmVyYWwgdG8gbW9zdC1zcGVjaWZpYykuXG5EeWdyYXBoLlBMVUdJTlMgPSBbXG4gIExlZ2VuZFBsdWdpbixcbiAgQXhlc1BsdWdpbixcbiAgUmFuZ2VTZWxlY3RvclBsdWdpbiwgLy8gSGFzIHRvIGJlIGJlZm9yZSBDaGFydExhYmVscyBzbyB0aGF0IGl0cyBjYWxsYmFja3MgYXJlIGNhbGxlZCBhZnRlciBDaGFydExhYmVscycgY2FsbGJhY2tzLlxuICBDaGFydExhYmVsc1BsdWdpbixcbiAgQW5ub3RhdGlvbnNQbHVnaW4sXG4gIEdyaWRQbHVnaW5cbl07XG5cbi8vIFRoZXJlIGFyZSBtYW55IHN5bWJvbHMgd2hpY2ggaGF2ZSBoaXN0b3JpY2FsbHkgYmVlbiBhdmFpbGFibGUgdGhyb3VnaCB0aGVcbi8vIER5Z3JhcGggY2xhc3MuIFRoZXNlIGFyZSBleHBvcnRlZCBoZXJlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbkR5Z3JhcGguR1ZpekNoYXJ0ID0gR1ZpekNoYXJ0O1xuRHlncmFwaC5EQVNIRURfTElORSA9IHV0aWxzLkRBU0hFRF9MSU5FO1xuRHlncmFwaC5ET1RfREFTSF9MSU5FID0gdXRpbHMuRE9UX0RBU0hfTElORTtcbkR5Z3JhcGguZGF0ZUF4aXNMYWJlbEZvcm1hdHRlciA9IHV0aWxzLmRhdGVBeGlzTGFiZWxGb3JtYXR0ZXI7XG5EeWdyYXBoLnRvUkdCXyA9IHV0aWxzLnRvUkdCXztcbkR5Z3JhcGguZmluZFBvcyA9IHV0aWxzLmZpbmRQb3M7XG5EeWdyYXBoLnBhZ2VYID0gdXRpbHMucGFnZVg7XG5EeWdyYXBoLnBhZ2VZID0gdXRpbHMucGFnZVk7XG5EeWdyYXBoLmRhdGVTdHJpbmdfID0gdXRpbHMuZGF0ZVN0cmluZ187XG5EeWdyYXBoLmRlZmF1bHRJbnRlcmFjdGlvbk1vZGVsID0gRHlncmFwaEludGVyYWN0aW9uLmRlZmF1bHRNb2RlbDtcbkR5Z3JhcGgubm9uSW50ZXJhY3RpdmVNb2RlbCA9IER5Z3JhcGgubm9uSW50ZXJhY3RpdmVNb2RlbF8gPSBEeWdyYXBoSW50ZXJhY3Rpb24ubm9uSW50ZXJhY3RpdmVNb2RlbF87XG5EeWdyYXBoLkNpcmNsZXMgPSB1dGlscy5DaXJjbGVzO1xuXG5EeWdyYXBoLlBsdWdpbnMgPSB7XG4gIExlZ2VuZDogTGVnZW5kUGx1Z2luLFxuICBBeGVzOiBBeGVzUGx1Z2luLFxuICBBbm5vdGF0aW9uczogQW5ub3RhdGlvbnNQbHVnaW4sXG4gIENoYXJ0TGFiZWxzOiBDaGFydExhYmVsc1BsdWdpbixcbiAgR3JpZDogR3JpZFBsdWdpbixcbiAgUmFuZ2VTZWxlY3RvcjogUmFuZ2VTZWxlY3RvclBsdWdpblxufTtcblxuRHlncmFwaC5EYXRhSGFuZGxlcnMgPSB7XG4gIERlZmF1bHRIYW5kbGVyLFxuICBCYXJzSGFuZGxlcixcbiAgQ3VzdG9tQmFyc0hhbmRsZXIsXG4gIERlZmF1bHRGcmFjdGlvbkhhbmRsZXIsXG4gIEVycm9yQmFyc0hhbmRsZXIsXG4gIEZyYWN0aW9uc0JhcnNIYW5kbGVyXG59O1xuXG5EeWdyYXBoLnN0YXJ0UGFuID0gRHlncmFwaEludGVyYWN0aW9uLnN0YXJ0UGFuO1xuRHlncmFwaC5zdGFydFpvb20gPSBEeWdyYXBoSW50ZXJhY3Rpb24uc3RhcnRab29tO1xuRHlncmFwaC5tb3ZlUGFuID0gRHlncmFwaEludGVyYWN0aW9uLm1vdmVQYW47XG5EeWdyYXBoLm1vdmVab29tID0gRHlncmFwaEludGVyYWN0aW9uLm1vdmVab29tO1xuRHlncmFwaC5lbmRQYW4gPSBEeWdyYXBoSW50ZXJhY3Rpb24uZW5kUGFuO1xuRHlncmFwaC5lbmRab29tID0gRHlncmFwaEludGVyYWN0aW9uLmVuZFpvb207XG5cbkR5Z3JhcGgubnVtZXJpY0xpbmVhclRpY2tzID0gRHlncmFwaFRpY2tlcnMubnVtZXJpY0xpbmVhclRpY2tzO1xuRHlncmFwaC5udW1lcmljVGlja3MgPSBEeWdyYXBoVGlja2Vycy5udW1lcmljVGlja3M7XG5EeWdyYXBoLmRhdGVUaWNrZXIgPSBEeWdyYXBoVGlja2Vycy5kYXRlVGlja2VyO1xuRHlncmFwaC5HcmFudWxhcml0eSA9IER5Z3JhcGhUaWNrZXJzLkdyYW51bGFyaXR5O1xuRHlncmFwaC5nZXREYXRlQXhpcyA9IER5Z3JhcGhUaWNrZXJzLmdldERhdGVBeGlzO1xuRHlncmFwaC5mbG9hdEZvcm1hdCA9IHV0aWxzLmZsb2F0Rm9ybWF0O1xuXG5leHBvcnQgZGVmYXVsdCBEeWdyYXBoO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///Cnnb\n");

/***/ })

}]);