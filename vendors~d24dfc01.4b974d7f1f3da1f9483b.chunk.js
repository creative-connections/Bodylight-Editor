(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~d24dfc01"],{

/***/ "3ri2":
/*!*************************************************************!*\
  !*** ./node_modules/latest-createjs/lib/soundjs/soundjs.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n* SoundJS\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n//##############################################################################\n// version.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\n\t/**\n\t * Static class holding library specific information such as the version and buildDate of the library.\n\t * The SoundJS class has been renamed {{#crossLink \"Sound\"}}{{/crossLink}}.  Please see {{#crossLink \"Sound\"}}{{/crossLink}}\n\t * for information on using sound.\n\t * @class SoundJS\n\t **/\n\tvar s = createjs.SoundJS = createjs.SoundJS || {};\n\n\t/**\n\t * The version string for this release.\n\t * @property version\n\t * @type String\n\t * @static\n\t **/\n\ts.version = /*=version*/\"1.0.0\"; // injected by build process\n\n\t/**\n\t * The build date for this release in UTC format.\n\t * @property buildDate\n\t * @type String\n\t * @static\n\t **/\n\ts.buildDate = /*=date*/\"Tue, 10 Oct 2017 12:24:35 GMT\"; // injected by build process\n\n})();\n\n//##############################################################################\n// extend.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Sets up the prototype chain and constructor property for a new class.\n *\n * This should be called right after creating the class constructor.\n *\n * \tfunction MySubClass() {}\n * \tcreatejs.extend(MySubClass, MySuperClass);\n * \tMySubClass.prototype.doSomething = function() { }\n *\n * \tvar foo = new MySubClass();\n * \tconsole.log(foo instanceof MySuperClass); // true\n * \tconsole.log(foo.prototype.constructor === MySubClass); // true\n *\n * @method extend\n * @param {Function} subclass The subclass.\n * @param {Function} superclass The superclass to extend.\n * @return {Function} Returns the subclass's new prototype.\n */\ncreatejs.extend = function(subclass, superclass) {\n\t\"use strict\";\n\n\tfunction o() { this.constructor = subclass; }\n\to.prototype = superclass.prototype;\n\treturn (subclass.prototype = new o());\n};\n\n//##############################################################################\n// promote.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\n * It is recommended to use the super class's name as the prefix.\n * An alias to the super class's constructor is always added in the format `prefix_constructor`.\n * This allows the subclass to call super class methods without using `function.call`, providing better performance.\n *\n * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\n * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\n * prototype of `MySubClass` as `MySuperClass_draw`.\n *\n * This should be called after the class's prototype is fully defined.\n *\n * \tfunction ClassA(name) {\n * \t\tthis.name = name;\n * \t}\n * \tClassA.prototype.greet = function() {\n * \t\treturn \"Hello \"+this.name;\n * \t}\n *\n * \tfunction ClassB(name, punctuation) {\n * \t\tthis.ClassA_constructor(name);\n * \t\tthis.punctuation = punctuation;\n * \t}\n * \tcreatejs.extend(ClassB, ClassA);\n * \tClassB.prototype.greet = function() {\n * \t\treturn this.ClassA_greet()+this.punctuation;\n * \t}\n * \tcreatejs.promote(ClassB, \"ClassA\");\n *\n * \tvar foo = new ClassB(\"World\", \"!?!\");\n * \tconsole.log(foo.greet()); // Hello World!?!\n *\n * @method promote\n * @param {Function} subclass The class to promote super class methods on.\n * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.\n * @return {Function} Returns the subclass.\n */\ncreatejs.promote = function(subclass, prefix) {\n\t\"use strict\";\n\n\tvar subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;\n\tif (supP) {\n\t\tsubP[(prefix+=\"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\t\tfor (var n in supP) {\n\t\t\tif (subP.hasOwnProperty(n) && (typeof supP[n] == \"function\")) { subP[prefix + n] = supP[n]; }\n\t\t}\n\t}\n\treturn subclass;\n};\n\n//##############################################################################\n// deprecate.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Wraps deprecated methods so they still be used, but throw warnings to developers.\n *\n *\tobj.deprecatedMethod = createjs.deprecate(\"Old Method Name\", obj._fallbackMethod);\n *\n * The recommended approach for deprecated properties is:\n *\n *\ttry {\n *\t\tObj\tect.defineProperties(object, {\n *\t\t\treadyOnlyProp: { get: createjs.deprecate(\"readOnlyProp\", function() { return this.alternateProp; }) },\n *\t\t\treadWriteProp: {\n *\t\t\t\tget: createjs.deprecate(\"readOnlyProp\", function() { return this.alternateProp; }),\n *\t\t\t\tset: createjs.deprecate(\"readOnlyProp\", function(val) { this.alternateProp = val; })\n *\t\t});\n *\t} catch (e) {}\n *\n * @method deprecate\n * @param {Function} [fallbackMethod=null] A method to call when the deprecated method is used. See the example for how\n * @param {String} [name=null] The name of the method or property to display in the console warning.\n * to deprecate properties.\n * @return {Function} If a fallbackMethod is supplied, returns a closure that will call the fallback method after\n * logging the warning in the console.\n */\ncreatejs.deprecate = function(fallbackMethod, name) {\n\t\"use strict\";\n\treturn function() {\n\t\tvar msg = \"Deprecated property or method '\"+name+\"'. See docs for info.\";\n\t\tconsole && (console.warn ? console.warn(msg) : console.log(msg));\n\t\treturn fallbackMethod && fallbackMethod.apply(this, arguments);\n\t}\n};\n\n//##############################################################################\n// indexOf.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\n * that value.  Returns -1 if value is not found.\n *\n *      var i = createjs.indexOf(myArray, myElementToFind);\n *\n * @method indexOf\n * @param {Array} array Array to search for searchElement\n * @param searchElement Element to find in array.\n * @return {Number} The first index of searchElement in array.\n */\ncreatejs.indexOf = function (array, searchElement){\n\t\"use strict\";\n\n\tfor (var i = 0,l=array.length; i < l; i++) {\n\t\tif (searchElement === array[i]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n\n//##############################################################################\n// proxy.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n/**\n * Various utilities that the CreateJS Suite uses. Utilities are created as separate files, and will be available on the\n * createjs namespace directly.\n *\n * <h4>Example</h4>\n *\n *      myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));\n *\n * @class Utility Methods\n * @main Utility Methods\n */\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * A function proxy for methods. By default, JavaScript methods do not maintain scope, so passing a method as a\n\t * callback will result in the method getting called in the scope of the caller. Using a proxy ensures that the\n\t * method gets called in the correct scope.\n\t *\n\t * Additional arguments can be passed that will be applied to the function when it is called.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myObject.addEventListener(\"event\", createjs.proxy(myHandler, this, arg1, arg2));\n\t *\n\t *      function myHandler(arg1, arg2) {\n\t *           // This gets called when myObject.myCallback is executed.\n\t *      }\n\t *\n\t * @method proxy\n\t * @param {Function} method The function to call\n\t * @param {Object} scope The scope to call the method name on\n\t * @param {mixed} [arg] * Arguments that are appended to the callback for additional params.\n\t * @public\n\t * @static\n\t */\n\tcreatejs.proxy = function (method, scope) {\n\t\tvar aArgs = Array.prototype.slice.call(arguments, 2);\n\t\treturn function () {\n\t\t\treturn method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));\n\t\t};\n\t}\n\n}());\n\n//##############################################################################\n// BrowserDetect.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n/**\n * @class Utility Methods\n */\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * An object that determines the current browser, version, operating system, and other environment\n\t * variables via user agent string.\n\t *\n\t * Used for audio because feature detection is unable to detect the many limitations of mobile devices.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      if (createjs.BrowserDetect.isIOS) { // do stuff }\n\t *\n\t * @property BrowserDetect\n\t * @type {Object}\n\t * @param {Boolean} isFirefox True if our browser is Firefox.\n\t * @param {Boolean} isOpera True if our browser is opera.\n\t * @param {Boolean} isChrome True if our browser is Chrome.  Note that Chrome for Android returns true, but is a\n\t * completely different browser with different abilities.\n\t * @param {Boolean} isIOS True if our browser is safari for iOS devices (iPad, iPhone, and iPod).\n\t * @param {Boolean} isAndroid True if our browser is Android.\n\t * @param {Boolean} isBlackberry True if our browser is Blackberry.\n\t * @constructor\n\t * @static\n\t */\n\tfunction BrowserDetect() {\n\t\tthrow \"BrowserDetect cannot be instantiated\";\n\t};\n\n\tvar agent = BrowserDetect.agent = window.navigator.userAgent;\n\tBrowserDetect.isWindowPhone = (agent.indexOf(\"IEMobile\") > -1) || (agent.indexOf(\"Windows Phone\") > -1);\n\tBrowserDetect.isFirefox = (agent.indexOf(\"Firefox\") > -1);\n\tBrowserDetect.isOpera = (window.opera != null);\n\tBrowserDetect.isChrome = (agent.indexOf(\"Chrome\") > -1);  // NOTE that Chrome on Android returns true but is a completely different browser with different abilities\n\tBrowserDetect.isIOS = (agent.indexOf(\"iPod\") > -1 || agent.indexOf(\"iPhone\") > -1 || agent.indexOf(\"iPad\") > -1) && !BrowserDetect.isWindowPhone;\n\tBrowserDetect.isAndroid = (agent.indexOf(\"Android\") > -1) && !BrowserDetect.isWindowPhone;\n\tBrowserDetect.isBlackberry = (agent.indexOf(\"Blackberry\") > -1);\n\n\tcreatejs.BrowserDetect = BrowserDetect;\n\n}());\n\n//##############################################################################\n// EventDispatcher.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\r\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n\r\n// constructor:\r\n\t/**\r\n\t * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\r\n\t *\r\n\t * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\r\n\t * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\r\n\t * \r\n\t * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\r\n\t * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\r\n\t * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\r\n\t * \r\n\t * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\r\n\t * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \r\n\t * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\r\n\t * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\r\n\t * \r\n\t * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\r\n\t * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also \r\n\t * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t * Add EventDispatcher capabilities to the \"MyClass\" class.\r\n\t *\r\n\t *      EventDispatcher.initialize(MyClass.prototype);\r\n\t *\r\n\t * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\r\n\t *\r\n\t *      instance.addEventListener(\"eventName\", handlerMethod);\r\n\t *      function handlerMethod(event) {\r\n\t *          console.log(event.target + \" Was Clicked\");\r\n\t *      }\r\n\t *\r\n\t * <b>Maintaining proper scope</b><br />\r\n\t * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\r\n\t * method to subscribe to events simplifies this.\r\n\t *\r\n\t *      instance.addEventListener(\"click\", function(event) {\r\n\t *          console.log(instance == this); // false, scope is ambiguous.\r\n\t *      });\r\n\t *      \r\n\t *      instance.on(\"click\", function(event) {\r\n\t *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\r\n\t *      });\r\n\t * \r\n\t * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage\r\n\t * scope.\r\n\t *\r\n\t * <b>Browser support</b>\r\n\t * The event model in CreateJS can be used separately from the suite in any project, however the inheritance model\r\n\t * requires modern browsers (IE9+).\r\n\t *      \r\n\t *\r\n\t * @class EventDispatcher\r\n\t * @constructor\r\n\t **/\r\n\tfunction EventDispatcher() {\r\n\t\r\n\t\r\n\t// private properties:\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _listeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._listeners = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _captureListeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._captureListeners = null;\r\n\t}\r\n\tvar p = EventDispatcher.prototype;\r\n\r\n// static public methods:\r\n\t/**\r\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\r\n\t * \r\n\t * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\r\n\t * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\r\n\t * \r\n\t * @method initialize\r\n\t * @static\r\n\t * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\r\n\t * prototype.\r\n\t **/\r\n\tEventDispatcher.initialize = function(target) {\r\n\t\ttarget.addEventListener = p.addEventListener;\r\n\t\ttarget.on = p.on;\r\n\t\ttarget.removeEventListener = target.off =  p.removeEventListener;\r\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\r\n\t\ttarget.hasEventListener = p.hasEventListener;\r\n\t\ttarget.dispatchEvent = p.dispatchEvent;\r\n\t\ttarget._dispatchEvent = p._dispatchEvent;\r\n\t\ttarget.willTrigger = p.willTrigger;\r\n\t};\r\n\t\r\n\r\n// public methods:\r\n\t/**\r\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\r\n\t * multiple callbacks getting fired.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.addEventListener(\"click\", handleClick);\r\n\t *      function handleClick(event) {\r\n\t *         // Click happened.\r\n\t *      }\r\n\t *\r\n\t * @method addEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function | Object} Returns the listener for chaining or assignment.\r\n\t **/\r\n\tp.addEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners;\r\n\t\tif (useCapture) {\r\n\t\t\tlisteners = this._captureListeners = this._captureListeners||{};\r\n\t\t} else {\r\n\t\t\tlisteners = this._listeners = this._listeners||{};\r\n\t\t}\r\n\t\tvar arr = listeners[type];\r\n\t\tif (arr) { this.removeEventListener(type, listener, useCapture); }\r\n\t\tarr = listeners[type]; // remove may have deleted the array\r\n\t\tif (!arr) { listeners[type] = [listener];  }\r\n\t\telse { arr.push(listener); }\r\n\t\treturn listener;\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\r\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\r\n\t * \r\n\t * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\r\n\t * The wrapper function is returned for use with `removeEventListener` (or `off`).\r\n\t * \r\n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\r\n\t * {{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\r\n\t * to `on` with the same params will create multiple listeners.\r\n\t * \r\n\t * <h4>Example</h4>\r\n\t * \r\n\t * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\r\n\t * \t\tfunction handleClick(evt, data) {\r\n\t * \t\t\tdata.count -= 1;\r\n\t * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\r\n\t * \t\t\tif (data.count == 0) {\r\n\t * \t\t\t\talert(\"clicked 3 times!\");\r\n\t * \t\t\t\tmyBtn.off(\"click\", listener);\r\n\t * \t\t\t\t// alternately: evt.remove();\r\n\t * \t\t\t}\r\n\t * \t\t}\r\n\t * \r\n\t * @method on\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\r\n\t * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\r\n\t * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\r\n\t * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\r\n\t **/\r\n\tp.on = function(type, listener, scope, once, data, useCapture) {\r\n\t\tif (listener.handleEvent) {\r\n\t\t\tscope = scope||listener;\r\n\t\t\tlistener = listener.handleEvent;\r\n\t\t}\r\n\t\tscope = scope||this;\r\n\t\treturn this.addEventListener(type, function(evt) {\r\n\t\t\t\tlistener.call(scope, evt, data);\r\n\t\t\t\tonce&&evt.remove();\r\n\t\t\t}, useCapture);\r\n\t};\r\n\r\n\t/**\r\n\t * Removes the specified event listener.\r\n\t *\r\n\t * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\r\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\r\n\t * closure will not work.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.removeEventListener(\"click\", handleClick);\r\n\t *\r\n\t * @method removeEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.removeEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners = useCapture ? this._captureListeners : this._listeners;\r\n\t\tif (!listeners) { return; }\r\n\t\tvar arr = listeners[type];\r\n\t\tif (!arr) { return; }\r\n\t\tfor (var i=0,l=arr.length; i<l; i++) {\r\n\t\t\tif (arr[i] == listener) {\r\n\t\t\t\tif (l==1) { delete(listeners[type]); } // allows for faster checks.\r\n\t\t\t\telse { arr.splice(i,1); }\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\r\n\t * .on method.\r\n\t * \r\n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \r\n\t * {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.\r\n\t *\r\n\t * @method off\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.off = p.removeEventListener;\r\n\r\n\t/**\r\n\t * Removes all listeners for the specified type, or all listeners of all types.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Remove all listeners\r\n\t *      displayObject.removeAllEventListeners();\r\n\t *\r\n\t *      // Remove all click listeners\r\n\t *      displayObject.removeAllEventListeners(\"click\");\r\n\t *\r\n\t * @method removeAllEventListeners\r\n\t * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\r\n\t **/\r\n\tp.removeAllEventListeners = function(type) {\r\n\t\tif (!type) { this._listeners = this._captureListeners = null; }\r\n\t\telse {\r\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\r\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Dispatches the specified event to all listeners.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Use a string event\r\n\t *      this.dispatchEvent(\"complete\");\r\n\t *\r\n\t *      // Use an Event instance\r\n\t *      var event = new createjs.Event(\"progress\");\r\n\t *      this.dispatchEvent(event);\r\n\t *\r\n\t * @method dispatchEvent\r\n\t * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\r\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\r\n\t * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\r\n\t * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\r\n\t * @param {Boolean} [bubbles] Specifies the `bubbles` value when a string was passed to eventObj.\r\n\t * @param {Boolean} [cancelable] Specifies the `cancelable` value when a string was passed to eventObj.\r\n\t * @return {Boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\r\n\t **/\r\n\tp.dispatchEvent = function(eventObj, bubbles, cancelable) {\r\n\t\tif (typeof eventObj == \"string\") {\r\n\t\t\t// skip everything if there's no listeners and it doesn't bubble:\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tif (!bubbles && (!listeners || !listeners[eventObj])) { return true; }\r\n\t\t\teventObj = new createjs.Event(eventObj, bubbles, cancelable);\r\n\t\t} else if (eventObj.target && eventObj.clone) {\r\n\t\t\t// redispatching an active event object, so clone it:\r\n\t\t\teventObj = eventObj.clone();\r\n\t\t}\r\n\t\t\r\n\t\t// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\r\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\r\n\r\n\t\tif (!eventObj.bubbles || !this.parent) {\r\n\t\t\tthis._dispatchEvent(eventObj, 2);\r\n\t\t} else {\r\n\t\t\tvar top=this, list=[top];\r\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\r\n\t\t\tvar i, l=list.length;\r\n\r\n\t\t\t// capture & atTarget\r\n\t\t\tfor (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\r\n\t\t\t}\r\n\t\t\t// bubbling\r\n\t\t\tfor (i=1; i<l && !eventObj.propagationStopped; i++) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn !eventObj.defaultPrevented;\r\n\t};\r\n\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type.\r\n\t * @method hasEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns true if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.hasEventListener = function(type) {\r\n\t\tvar listeners = this._listeners, captureListeners = this._captureListeners;\r\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\r\n\t};\r\n\t\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\r\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\r\n\t * specified type is dispatched from this object, it will trigger at least one listener.\r\n\t * \r\n\t * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\r\n\t * event flow for a listener, not just this object.\r\n\t * @method willTrigger\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.willTrigger = function(type) {\r\n\t\tvar o = this;\r\n\t\twhile (o) {\r\n\t\t\tif (o.hasEventListener(type)) { return true; }\r\n\t\t\to = o.parent;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @method toString\r\n\t * @return {String} a string representation of the instance.\r\n\t **/\r\n\tp.toString = function() {\r\n\t\treturn \"[EventDispatcher]\";\r\n\t};\r\n\r\n\r\n// private methods:\r\n\t/**\r\n\t * @method _dispatchEvent\r\n\t * @param {Object | Event} eventObj\r\n\t * @param {Object} eventPhase\r\n\t * @protected\r\n\t **/\r\n\tp._dispatchEvent = function(eventObj, eventPhase) {\r\n\t\tvar l, arr, listeners = (eventPhase <= 2) ? this._captureListeners : this._listeners;\r\n\t\tif (eventObj && listeners && (arr = listeners[eventObj.type]) && (l=arr.length)) {\r\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\r\n\t\t\ttry { eventObj.eventPhase = eventPhase|0; } catch (e) {}\r\n\t\t\teventObj.removed = false;\r\n\t\t\t\r\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\r\n\t\t\tfor (var i=0; i<l && !eventObj.immediatePropagationStopped; i++) {\r\n\t\t\t\tvar o = arr[i];\r\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\r\n\t\t\t\telse { o(eventObj); }\r\n\t\t\t\tif (eventObj.removed) {\r\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase==1);\r\n\t\t\t\t\teventObj.removed = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (eventPhase === 2) { this._dispatchEvent(eventObj, 2.1); }\r\n\t};\r\n\r\n\r\n\tcreatejs.EventDispatcher = EventDispatcher;\r\n}());\n\n//##############################################################################\n// Event.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n// constructor:\n\t/**\n\t * Contains properties and methods shared by all events for use with\n\t * {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\t * \n\t * Note that Event objects are often reused, so you should never\n\t * rely on an event object's state outside of the call stack it was received in.\n\t * @class Event\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @constructor\n\t **/\n\tfunction Event(type, bubbles, cancelable) {\n\t\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The type of event.\n\t\t * @property type\n\t\t * @type String\n\t\t **/\n\t\tthis.type = type;\n\t\n\t\t/**\n\t\t * The object that generated an event.\n\t\t * @property target\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.target = null;\n\t\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t * @property currentTarget\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.currentTarget = null;\n\t\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:<OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t * @property eventPhase\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.eventPhase = 0;\n\t\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t * @property bubbles\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.bubbles = !!bubbles;\n\t\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via\n\t\t * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n\t\t * @property cancelable\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.cancelable = !!cancelable;\n\t\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t * @property timeStamp\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.timeStamp = (new Date()).getTime();\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property defaultPrevented\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.defaultPrevented = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n\t\t * @property propagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.propagationStopped = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property immediatePropagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.immediatePropagationStopped = false;\n\t\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n\t\t * @property removed\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.removed = false;\n\t}\n\tvar p = Event.prototype;\n\n// public methods:\n\t/**\n\t * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\n\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t * cancel the default behaviour associated with the event.\n\t * @method preventDefault\n\t **/\n\tp.preventDefault = function() {\n\t\tthis.defaultPrevented = this.cancelable&&true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopPropagation\n\t **/\n\tp.stopPropagation = function() {\n\t\tthis.propagationStopped = true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n\t * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopImmediatePropagation\n\t **/\n\tp.stopImmediatePropagation = function() {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t};\n\t\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t * \n\t * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t * \t\t\t// do stuff...\n\t * \t\t\tevt.remove(); // removes this listener.\n\t * \t\t});\n\t * \n\t * @method remove\n\t **/\n\tp.remove = function() {\n\t\tthis.removed = true;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Event instance.\n\t * @method clone\n\t * @return {Event} a clone of the Event instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Event(this.type, this.bubbles, this.cancelable);\n\t};\n\t\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Event (type=\"+this.type+\")]\";\n\t};\n\n\tcreatejs.Event = Event;\n}());\n\n//##############################################################################\n// ErrorEvent.js\n//##############################################################################\n\nwindow.createjs = window.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * A general error {{#crossLink \"Event\"}}{{/crossLink}}, that describes an error that occurred, as well as any details.\n\t * @class ErrorEvent\n\t * @param {String} [title] The error title\n\t * @param {String} [message] The error description\n\t * @param {Object} [data] Additional error data\n\t * @constructor\n\t */\n\tfunction ErrorEvent(title, message, data) {\n\t\tthis.Event_constructor(\"error\");\n\n\t\t/**\n\t\t * The short error title, which indicates the type of error that occurred.\n\t\t * @property title\n\t\t * @type String\n\t\t */\n\t\tthis.title = title;\n\n\t\t/**\n\t\t * The verbose error message, containing details about the error.\n\t\t * @property message\n\t\t * @type String\n\t\t */\n\t\tthis.message = message;\n\n\t\t/**\n\t\t * Additional data attached to an error.\n\t\t * @property data\n\t\t * @type {Object}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\tvar p = createjs.extend(ErrorEvent, createjs.Event);\n\n\tp.clone = function() {\n\t\treturn new createjs.ErrorEvent(this.title, this.message, this.data);\n\t};\n\n\tcreatejs.ErrorEvent = createjs.promote(ErrorEvent, \"Event\");\n\n}());\n\n//##############################################################################\n// ProgressEvent.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function (scope) {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A CreateJS {{#crossLink \"Event\"}}{{/crossLink}} that is dispatched when progress changes.\n\t * @class ProgressEvent\n\t * @param {Number} loaded The amount that has been loaded. This can be any number relative to the total.\n\t * @param {Number} [total=1] The total amount that will load. This will default to 1, so if the `loaded` value is\n\t * a percentage (between 0 and 1), it can be omitted.\n\t * @todo Consider having this event be a \"fileprogress\" event as well\n\t * @constructor\n\t */\n\tfunction ProgressEvent(loaded, total) {\n\t\tthis.Event_constructor(\"progress\");\n\n\t\t/**\n\t\t * The amount that has been loaded (out of a total amount)\n\t\t * @property loaded\n\t\t * @type {Number}\n\t\t */\n\t\tthis.loaded = loaded;\n\n\t\t/**\n\t\t * The total \"size\" of the load.\n\t\t * @property total\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis.total = (total == null) ? 1 : total;\n\n\t\t/**\n\t\t * The percentage (out of 1) that the load has been completed. This is calculated using `loaded/total`.\n\t\t * @property progress\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.progress = (total == 0) ? 0 : this.loaded / this.total;\n\t};\n\n\tvar p = createjs.extend(ProgressEvent, createjs.Event);\n\n\t/**\n\t * Returns a clone of the ProgressEvent instance.\n\t * @method clone\n\t * @return {ProgressEvent} a clone of the Event instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new createjs.ProgressEvent(this.loaded, this.total);\n\t};\n\n\tcreatejs.ProgressEvent = createjs.promote(ProgressEvent, \"Event\");\n\n}(window));\n\n//##############################################################################\n// LoadItem.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * All loaders accept an item containing the properties defined in this class. If a raw object is passed instead,\n\t * it will not be affected, but it must contain at least a {{#crossLink \"src:property\"}}{{/crossLink}} property. A\n\t * string path or HTML tag is also acceptable, but it will be automatically converted to a LoadItem using the\n\t * {{#crossLink \"create\"}}{{/crossLink}} method by {{#crossLink \"AbstractLoader\"}}{{/crossLink}}\n\t * @class LoadItem\n\t * @constructor\n\t * @since 0.6.0\n\t */\n\tfunction LoadItem() {\n\t\t/**\n\t\t * The source of the file that is being loaded. This property is <b>required</b>. The source can either be a\n\t\t * string (recommended), or an HTML tag.\n\t\t * This can also be an object, but in that case it has to include a type and be handled by a plugin.\n\t\t * @property src\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.src = null;\n\n\t\t/**\n\t\t * The type file that is being loaded. The type of the file is usually inferred by the extension, but can also\n\t\t * be set manually. This is helpful in cases where a file does not have an extension.\n\t\t * @property type\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.type = null;\n\n\t\t/**\n\t\t * A string identifier which can be used to reference the loaded object. If none is provided, this will be\n\t\t * automatically set to the {{#crossLink \"src:property\"}}{{/crossLink}}.\n\t\t * @property id\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.id = null;\n\n\t\t/**\n\t\t * Determines if a manifest will maintain the order of this item, in relation to other items in the manifest\n\t\t * that have also set the `maintainOrder` property to `true`. This only applies when the max connections has\n\t\t * been set above 1 (using {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}). Everything with this\n\t\t * property set to `false` will finish as it is loaded. Ordered items are combined with script tags loading in\n\t\t * order when {{#crossLink \"LoadQueue/maintainScriptOrder:property\"}}{{/crossLink}} is set to `true`.\n\t\t * @property maintainOrder\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.maintainOrder = false;\n\n\t\t/**\n\t\t * A callback used by JSONP requests that defines what global method to call when the JSONP content is loaded.\n\t\t * @property callback\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.callback = null;\n\n\t\t/**\n\t\t * An arbitrary data object, which is included with the loaded object.\n\t\t * @property data\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.data = null;\n\n\t\t/**\n\t\t * The request method used for HTTP calls. Both {{#crossLink \"Methods/GET:property\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Methods/POST:property\"}}{{/crossLink}} request types are supported, and are defined as\n\t\t * constants on {{#crossLink \"AbstractLoader\"}}{{/crossLink}}.\n\t\t * @property method\n\t\t * @type {String}\n\t\t * @default GET\n\t\t */\n\t\tthis.method = createjs.Methods.GET;\n\n\t\t/**\n\t\t * An object hash of name/value pairs to send to the server.\n\t\t * @property values\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.values = null;\n\n\t\t/**\n\t\t * An object hash of headers to attach to an XHR request. PreloadJS will automatically attach some default\n\t\t * headers when required, including \"Origin\", \"Content-Type\", and \"X-Requested-With\". You may override the\n\t\t * default headers by including them in your headers object.\n\t\t * @property headers\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.headers = null;\n\n\t\t/**\n\t\t * Enable credentials for XHR requests.\n\t\t * @property withCredentials\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.withCredentials = false;\n\n\t\t/**\n\t\t * Set the mime type of XHR-based requests. This is automatically set to \"text/plain; charset=utf-8\" for text\n\t\t * based files (json, xml, text, css, js).\n\t\t * @property mimeType\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.mimeType = null;\n\n\t\t/**\n\t\t * Sets the crossOrigin attribute for CORS-enabled images loading cross-domain.\n\t\t * @property crossOrigin\n\t\t * @type {boolean}\n\t\t * @default Anonymous\n\t\t */\n\t\tthis.crossOrigin = null;\n\n\t\t/**\n\t\t * The duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n\t\t * (level one) loading, as XHR (level 2) provides its own timeout event.\n\t\t * @property loadTimeout\n\t\t * @type {Number}\n\t\t * @default 8000 (8 seconds)\n\t\t */\n\t\tthis.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;\n\t};\n\n\tvar p = LoadItem.prototype = {};\n\tvar s = LoadItem;\n\n\t/**\n\t * Default duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n\t * (level one) loading, as XHR (level 2) provides its own timeout event.\n\t * @property LOAD_TIMEOUT_DEFAULT\n\t * @type {number}\n\t * @static\n\t */\n\ts.LOAD_TIMEOUT_DEFAULT = 8000;\n\n\t/**\n\t * Create a LoadItem.\n\t * <ul>\n\t *     <li>String-based items are converted to a LoadItem with a populated {{#crossLink \"src:property\"}}{{/crossLink}}.</li>\n\t *     <li>LoadItem instances are returned as-is</li>\n\t *     <li>Objects are returned with any needed properties added</li>\n\t * </ul>\n\t * @method create\n\t * @param {LoadItem|String|Object} value The load item value\n\t * @returns {LoadItem|Object}\n\t * @static\n\t */\n\ts.create = function (value) {\n\t\tif (typeof value == \"string\") {\n\t\t\tvar item = new LoadItem();\n\t\t\titem.src = value;\n\t\t\treturn item;\n\t\t} else if (value instanceof s) {\n\t\t\treturn value;\n\t\t} else if (value instanceof Object && value.src) {\n\t\t\tif (value.loadTimeout == null) {\n\t\t\t\tvalue.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;\n\t\t\t}\n\t\t\treturn value;\n\t\t} else {\n\t\t\tthrow new Error(\"Type not recognized.\");\n\t\t}\n\t};\n\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var loadItem = new createjs.LoadItem().set({src:\"image.png\", maintainOrder:true});\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the LoadItem instance.\n\t * @return {LoadItem} Returns the instance the method is called on (useful for chaining calls.)\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\n\tcreatejs.LoadItem = s;\n\n}());\n\n//##############################################################################\n// Methods.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function() {\n\tvar s = {};\n\n\t/**\n\t * Defines a POST request, use for a method value when loading data.\n\t * @property POST\n\t * @type {string}\n\t * @default post\n\t * @static\n\t */\n\ts.POST = \"POST\";\n\n\t/**\n\t * Defines a GET request, use for a method value when loading data.\n\t * @property GET\n\t * @type {string}\n\t * @default get\n\t * @static\n\t */\n\ts.GET = \"GET\";\n\n\tcreatejs.Methods = s;\n}());\n\n//##############################################################################\n// Types.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function() {\n\tvar s = {};\n\n\t/**\n\t * The preload type for generic binary types. Note that images are loaded as binary files when using XHR.\n\t * @property BINARY\n\t * @type {String}\n\t * @default binary\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.BINARY = \"binary\";\n\n\t/**\n\t * The preload type for css files. CSS files are loaded using a &lt;link&gt; when loaded with XHR, or a\n\t * &lt;style&gt; tag when loaded with tags.\n\t * @property CSS\n\t * @type {String}\n\t * @default css\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.CSS = \"css\";\n\n\t/**\n\t * The preload type for font files.\n\t * @property FONT\n\t * @type {String}\n\t * @default font\n\t * @static\n\t * @since 0.9.0\n\t */\n\ts.FONT = \"font\";\n\n\t/**\n\t * The preload type for fonts specified with CSS (such as Google fonts)\n\t * @property FONTCSS\n\t * @type {String}\n\t * @default fontcss\n\t * @static\n\t * @since 0.9.0\n\t */\n\ts.FONTCSS = \"fontcss\";\n\n\t/**\n\t * The preload type for image files, usually png, gif, or jpg/jpeg. Images are loaded into an &lt;image&gt; tag.\n\t * @property IMAGE\n\t * @type {String}\n\t * @default image\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.IMAGE = \"image\";\n\n\t/**\n\t * The preload type for javascript files, usually with the \"js\" file extension. JavaScript files are loaded into a\n\t * &lt;script&gt; tag.\n\t *\n\t * Since version 0.4.1+, due to how tag-loaded scripts work, all JavaScript files are automatically injected into\n\t * the body of the document to maintain parity between XHR and tag-loaded scripts. In version 0.4.0 and earlier,\n\t * only tag-loaded scripts are injected.\n\t * @property JAVASCRIPT\n\t * @type {String}\n\t * @default javascript\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.JAVASCRIPT = \"javascript\";\n\n\t/**\n\t * The preload type for json files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\n\t * JavaScript object. Note that if a `callback` is present on the load item, the file will be loaded with JSONP,\n\t * no matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to, and the JSON\n\t * must contain a matching wrapper function.\n\t * @property JSON\n\t * @type {String}\n\t * @default json\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.JSON = \"json\";\n\n\t/**\n\t * The preload type for jsonp files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\n\t * JavaScript object. You are required to pass a callback parameter that matches the function wrapper in the JSON.\n\t * Note that JSONP will always be used if there is a callback present, no matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}}\n\t * property is set to.\n\t * @property JSONP\n\t * @type {String}\n\t * @default jsonp\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.JSONP = \"jsonp\";\n\n\t/**\n\t * The preload type for json-based manifest files, usually with the \"json\" file extension. The JSON data is loaded\n\t * and parsed into a JavaScript object. PreloadJS will then look for a \"manifest\" property in the JSON, which is an\n\t * Array of files to load, following the same format as the {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\n\t * method. If a \"callback\" is specified on the manifest object, then it will be loaded using JSONP instead,\n\t * regardless of what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to.\n\t * @property MANIFEST\n\t * @type {String}\n\t * @default manifest\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.MANIFEST = \"manifest\";\n\n\t/**\n\t * The preload type for sound files, usually mp3, ogg, or wav. When loading via tags, audio is loaded into an\n\t * &lt;audio&gt; tag.\n\t * @property SOUND\n\t * @type {String}\n\t * @default sound\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.SOUND = \"sound\";\n\n\t/**\n\t * The preload type for video files, usually mp4, ts, or ogg. When loading via tags, video is loaded into an\n\t * &lt;video&gt; tag.\n\t * @property VIDEO\n\t * @type {String}\n\t * @default video\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.VIDEO = \"video\";\n\n\t/**\n\t * The preload type for SpriteSheet files. SpriteSheet files are JSON files that contain string image paths.\n\t * @property SPRITESHEET\n\t * @type {String}\n\t * @default spritesheet\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.SPRITESHEET = \"spritesheet\";\n\n\t/**\n\t * The preload type for SVG files.\n\t * @property SVG\n\t * @type {String}\n\t * @default svg\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.SVG = \"svg\";\n\n\t/**\n\t * The preload type for text files, which is also the default file type if the type can not be determined. Text is\n\t * loaded as raw text.\n\t * @property TEXT\n\t * @type {String}\n\t * @default text\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.TEXT = \"text\";\n\n\t/**\n\t * The preload type for xml files. XML is loaded into an XML document.\n\t * @property XML\n\t * @type {String}\n\t * @default xml\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.XML = \"xml\";\n\n\tcreatejs.Types = s;\n}());\n\n//##############################################################################\n// Elements.js\n//##############################################################################\n\n(function () {\n\n\t/**\n\t * Convenience methods for creating various elements used by PrelaodJS.\n\t *\n\t * @class DomUtils\n\t */\n\tvar s = {};\n\n\ts.a = function() {\n\t\treturn s.el(\"a\");\n\t}\n\n\ts.svg = function() {\n\t\treturn s.el(\"svg\");\n\t}\n\n\ts.object = function() {\n\t\treturn s.el(\"object\");\n\t}\n\n\ts.image = function() {\n\t\treturn s.el(\"image\");\n\t}\n\n\ts.img = function() {\n\t\treturn s.el(\"img\");\n\t}\n\n\ts.style = function() {\n\t\treturn s.el(\"style\");\n\t}\n\n\ts.link = function() {\n\t\treturn s.el(\"link\");\n\t}\n\n\ts.script = function() {\n\t\treturn s.el(\"script\");\n\t}\n\n\ts.audio = function() {\n\t\treturn s.el(\"audio\");\n\t}\n\n\ts.video = function() {\n\t\treturn s.el(\"video\");\n\t}\n\n\ts.text = function(value) {\n\t\treturn document.createTextNode(value);\n\t}\n\n\ts.el = function(name) {\n\t\treturn document.createElement(name);\n\t}\n\n\tcreatejs.Elements = s;\n\n}());\n\n//##############################################################################\n// DomUtils.js\n//##############################################################################\n\n(function () {\n\n\t/**\n\t * A few utilities for interacting with the dom.\n\t * @class DomUtils\n\t */\n\tvar s = {\n\t\tcontainer: null\n\t};\n\n\ts.appendToHead = function (el) {\n\t\ts.getHead().appendChild(el);\n\t}\n\n\ts.appendToBody = function (el) {\n\t\tif (s.container == null) {\n\t\t\ts.container = document.createElement(\"div\");\n\t\t\ts.container.id = \"preloadjs-container\";\n\t\t\tvar style = s.container.style;\n\t\t\tstyle.visibility = \"hidden\";\n\t\t\tstyle.position = \"absolute\";\n\t\t\tstyle.width = s.container.style.height = \"10px\";\n\t\t\tstyle.overflow = \"hidden\";\n\t\t\tstyle.transform = style.msTransform = style.webkitTransform = style.oTransform = \"translate(-10px, -10px)\"; //LM: Not working\n\t\t\ts.getBody().appendChild(s.container);\n\t\t}\n\t\ts.container.appendChild(el);\n\t}\n\n\ts.getHead = function () {\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t}\n\n\ts.getBody = function () {\n\t\treturn document.body || document.getElementsByTagName(\"body\")[0];\n\t}\n\n\ts.removeChild = function(el) {\n\t\tif (el.parent) {\n\t\t\tel.parent.removeChild(el);\n\t\t}\n\t}\n\n\t/**\n\t * Check if item is a valid HTMLImageElement\n\t * @method isImageTag\n\t * @param {Object} item\n\t * @returns {Boolean}\n\t * @static\n\t */\n\ts.isImageTag = function(item) {\n\t\treturn item instanceof HTMLImageElement;\n\t};\n\n\t/**\n\t * Check if item is a valid HTMLAudioElement\n\t * @method isAudioTag\n\t * @param {Object} item\n\t * @returns {Boolean}\n\t * @static\n\t */\n\ts.isAudioTag = function(item) {\n\t\tif (window.HTMLAudioElement) {\n\t\t\treturn item instanceof HTMLAudioElement;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Check if item is a valid HTMLVideoElement\n\t * @method isVideoTag\n\t * @param {Object} item\n\t * @returns {Boolean}\n\t * @static\n\t */\n\ts.isVideoTag = function(item) {\n\t\tif (window.HTMLVideoElement) {\n\t\t\treturn item instanceof HTMLVideoElement;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\tcreatejs.DomUtils = s;\n\n}());\n\n//##############################################################################\n// RequestUtils.js\n//##############################################################################\n\n(function () {\n\n\t/**\n\t * Utilities that assist with parsing load items, and determining file types, etc.\n\t * @class RequestUtils\n\t */\n\tvar s = {};\n\n\t/**\n\t * Determine if a specific type should be loaded as a binary file. Currently, only images and items marked\n\t * specifically as \"binary\" are loaded as binary. Note that audio is <b>not</b> a binary type, as we can not play\n\t * back using an audio tag if it is loaded as binary. Plugins can change the item type to binary to ensure they get\n\t * a binary result to work with. Binary files are loaded using XHR2. Types are defined as static constants on\n\t * {{#crossLink \"AbstractLoader\"}}{{/crossLink}}.\n\t * @method isBinary\n\t * @param {String} type The item type.\n\t * @return {Boolean} If the specified type is binary.\n\t * @static\n\t */\n\ts.isBinary = function (type) {\n\t\tswitch (type) {\n\t\t\tcase createjs.Types.IMAGE:\n\t\t\tcase createjs.Types.BINARY:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Determine if a specific type is a text-based asset, and should be loaded as UTF-8.\n\t * @method isText\n\t * @param {String} type The item type.\n\t * @return {Boolean} If the specified type is text.\n\t * @static\n\t */\n\ts.isText = function (type) {\n\t\tswitch (type) {\n\t\t\tcase createjs.Types.TEXT:\n\t\t\tcase createjs.Types.JSON:\n\t\t\tcase createjs.Types.MANIFEST:\n\t\t\tcase createjs.Types.XML:\n\t\t\tcase createjs.Types.CSS:\n\t\t\tcase createjs.Types.SVG:\n\t\t\tcase createjs.Types.JAVASCRIPT:\n\t\t\tcase createjs.Types.SPRITESHEET:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Determine the type of the object using common extensions. Note that the type can be passed in with the load item\n\t * if it is an unusual extension.\n\t * @method getTypeByExtension\n\t * @param {String} extension The file extension to use to determine the load type.\n\t * @return {String} The determined load type (for example, `createjs.Types.IMAGE`). Will return `null` if\n\t * the type can not be determined by the extension.\n\t * @static\n\t */\n\ts.getTypeByExtension = function (extension) {\n\t\tif (extension == null) {\n\t\t\treturn createjs.Types.TEXT;\n\t\t}\n\n\t\tswitch (extension.toLowerCase()) {\n\t\t\tcase \"jpeg\":\n\t\t\tcase \"jpg\":\n\t\t\tcase \"gif\":\n\t\t\tcase \"png\":\n\t\t\tcase \"webp\":\n\t\t\tcase \"bmp\":\n\t\t\t\treturn createjs.Types.IMAGE;\n\t\t\tcase \"ogg\":\n\t\t\tcase \"mp3\":\n\t\t\tcase \"webm\":\n\t\t\t\treturn createjs.Types.SOUND;\n\t\t\tcase \"mp4\":\n\t\t\tcase \"webm\":\n\t\t\tcase \"ts\":\n\t\t\t\treturn createjs.Types.VIDEO;\n\t\t\tcase \"json\":\n\t\t\t\treturn createjs.Types.JSON;\n\t\t\tcase \"xml\":\n\t\t\t\treturn createjs.Types.XML;\n\t\t\tcase \"css\":\n\t\t\t\treturn createjs.Types.CSS;\n\t\t\tcase \"js\":\n\t\t\t\treturn createjs.Types.JAVASCRIPT;\n\t\t\tcase 'svg':\n\t\t\t\treturn createjs.Types.SVG;\n\t\t\tdefault:\n\t\t\t\treturn createjs.Types.TEXT;\n\t\t}\n\t};\n\n\tcreatejs.RequestUtils = s;\n\n}());\n\n//##############################################################################\n// URLUtils.js\n//##############################################################################\n\n(function () {\n\n\t/**\n\t * Utilities that assist with parsing load items, and determining file types, etc.\n\t * @class URLUtils\n\t */\n\tvar s = {};\n\n\t/**\n\t * The Regular Expression used to test file URLS for an absolute path.\n\t * @property ABSOLUTE_PATH\n\t * @type {RegExp}\n\t * @static\n\t */\n\ts.ABSOLUTE_PATT = /^(?:\\w+:)?\\/{2}/i;\n\n\t/**\n\t * The Regular Expression used to test file URLS for a relative path.\n\t * @property RELATIVE_PATH\n\t * @type {RegExp}\n\t * @static\n\t */\n\ts.RELATIVE_PATT = (/^[./]*?\\//i);\n\n\t/**\n\t * The Regular Expression used to test file URLS for an extension. Note that URIs must already have the query string\n\t * removed.\n\t * @property EXTENSION_PATT\n\t * @type {RegExp}\n\t * @static\n\t */\n\ts.EXTENSION_PATT = /\\/?[^/]+\\.(\\w{1,5})$/i;\n\n\t/**\n\t * Parse a file path to determine the information we need to work with it. Currently, PreloadJS needs to know:\n\t * <ul>\n\t *     <li>If the path is absolute. Absolute paths start with a protocol (such as `http://`, `file://`, or\n\t *     `//networkPath`)</li>\n\t *     <li>If the path is relative. Relative paths start with `../` or `/path` (or similar)</li>\n\t *     <li>The file extension. This is determined by the filename with an extension. Query strings are dropped, and\n\t *     the file path is expected to follow the format `name.ext`.</li>\n\t * </ul>\n\t *\n\t * @method parseURI\n\t * @param {String} path\n\t * @returns {Object} An Object with an `absolute` and `relative` Boolean values,\n\t * \tthe pieces of the path (protocol, hostname, port, pathname, search, hash, host)\n\t * \tas well as an optional 'extension` property, which is the lowercase extension.\n\t *\n\t * @static\n\t */\n\ts.parseURI = function (path) {\n\t\tvar info = {\n\t\t\tabsolute: false,\n\t\t\trelative: false,\n\t\t\tprotocol: null,\n\t\t\thostname: null,\n\t\t\tport: null,\n\t\t\tpathname: null,\n\t\t\tsearch: null,\n\t\t\thash: null,\n\t\t\thost: null\n\t\t};\n\n\t\tif (path == null) { return info; }\n\n\t\t// Inject the path parts.\n\t\tvar parser = createjs.Elements.a();\n\t\tparser.href = path;\n\n\t\tfor (var n in info) {\n\t\t\tif (n in parser) {\n\t\t\t\tinfo[n] = parser[n];\n\t\t\t}\n\t\t}\n\n\t\t// Drop the query string\n\t\tvar queryIndex = path.indexOf(\"?\");\n\t\tif (queryIndex > -1) {\n\t\t\tpath = path.substr(0, queryIndex);\n\t\t}\n\n\t\t// Absolute\n\t\tvar match;\n\t\tif (s.ABSOLUTE_PATT.test(path)) {\n\t\t\tinfo.absolute = true;\n\n\t\t\t// Relative\n\t\t} else if (s.RELATIVE_PATT.test(path)) {\n\t\t\tinfo.relative = true;\n\t\t}\n\n\t\t// Extension\n\t\tif (match = path.match(s.EXTENSION_PATT)) {\n\t\t\tinfo.extension = match[1].toLowerCase();\n\t\t}\n\n\t\treturn info;\n\t};\n\n\t/**\n\t * Formats an object into a query string for either a POST or GET request.\n\t * @method formatQueryString\n\t * @param {Object} data The data to convert to a query string.\n\t * @param {Array} [query] Existing name/value pairs to append on to this query.\n\t * @static\n\t */\n\ts.formatQueryString = function (data, query) {\n\t\tif (data == null) {\n\t\t\tthrow new Error(\"You must specify data.\");\n\t\t}\n\t\tvar params = [];\n\t\tfor (var n in data) {\n\t\t\tparams.push(n + \"=\" + escape(data[n]));\n\t\t}\n\t\tif (query) {\n\t\t\tparams = params.concat(query);\n\t\t}\n\t\treturn params.join(\"&\");\n\t};\n\n\t/**\n\t * A utility method that builds a file path using a source and a data object, and formats it into a new path.\n\t * @method buildURI\n\t * @param {String} src The source path to add values to.\n\t * @param {Object} [data] Object used to append values to this request as a query string. Existing parameters on the\n\t * path will be preserved.\n\t * @returns {string} A formatted string that contains the path and the supplied parameters.\n\t * @static\n\t */\n\ts.buildURI = function (src, data) {\n\t\tif (data == null) {\n\t\t\treturn src;\n\t\t}\n\n\t\tvar query = [];\n\t\tvar idx = src.indexOf(\"?\");\n\n\t\tif (idx != -1) {\n\t\t\tvar q = src.slice(idx + 1);\n\t\t\tquery = query.concat(q.split(\"&\"));\n\t\t}\n\n\t\tif (idx != -1) {\n\t\t\treturn src.slice(0, idx) + \"?\" + this.formatQueryString(data, query);\n\t\t} else {\n\t\t\treturn src + \"?\" + this.formatQueryString(data, query);\n\t\t}\n\t};\n\n\t/**\n\t * @method isCrossDomain\n\t * @param {LoadItem|Object} item A load item with a `src` property.\n\t * @return {Boolean} If the load item is loading from a different domain than the current location.\n\t * @static\n\t */\n\ts.isCrossDomain = function (item) {\n\t\tvar target = createjs.Elements.a();\n\t\ttarget.href = item.src;\n\n\t\tvar host = createjs.Elements.a();\n\t\thost.href = location.href;\n\n\t\tvar crossdomain = (target.hostname != \"\") &&\n\t\t\t(target.port != host.port ||\n\t\t\ttarget.protocol != host.protocol ||\n\t\t\ttarget.hostname != host.hostname);\n\t\treturn crossdomain;\n\t};\n\n\t/**\n\t * @method isLocal\n\t * @param {LoadItem|Object} item A load item with a `src` property\n\t * @return {Boolean} If the load item is loading from the \"file:\" protocol. Assume that the host must be local as\n\t * well.\n\t * @static\n\t */\n\ts.isLocal = function (item) {\n\t\tvar target = createjs.Elements.a();\n\t\ttarget.href = item.src;\n\t\treturn target.hostname == \"\" && target.protocol == \"file:\";\n\t};\n\n\tcreatejs.URLUtils = s;\n\n}());\n\n//##############################################################################\n// AbstractLoader.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n// constructor\n\t/**\n\t * The base loader, which defines all the generic methods, properties, and events. All loaders extend this class,\n\t * including the {{#crossLink \"LoadQueue\"}}{{/crossLink}}.\n\t * @class AbstractLoader\n\t * @param {LoadItem|object|string} loadItem The item to be loaded.\n\t * @param {Boolean} [preferXHR] Determines if the LoadItem should <em>try</em> and load using XHR, or take a\n\t * tag-based approach, which can be better in cross-domain situations. Not all loaders can load using one or the\n\t * other, so this is a suggested directive.\n\t * @param {String} [type] The type of loader. Loader types are defined as constants on the AbstractLoader class,\n\t * such as {{#crossLink \"IMAGE:property\"}}{{/crossLink}}, {{#crossLink \"CSS:property\"}}{{/crossLink}}, etc.\n\t * @extends EventDispatcher\n\t */\n\tfunction AbstractLoader(loadItem, preferXHR, type) {\n\t\tthis.EventDispatcher_constructor();\n\n\t\t// public properties\n\t\t/**\n\t\t * If the loader has completed loading. This provides a quick check, but also ensures that the different approaches\n\t\t * used for loading do not pile up resulting in more than one `complete` {{#crossLink \"Event\"}}{{/crossLink}}.\n\t\t * @property loaded\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.loaded = false;\n\n\t\t/**\n\t\t * Determine if the loader was canceled. Canceled loads will not fire complete events. Note that this property\n\t\t * is readonly, so {{#crossLink \"LoadQueue\"}}{{/crossLink}} queues should be closed using {{#crossLink \"LoadQueue/close\"}}{{/crossLink}}\n\t\t * instead.\n\t\t * @property canceled\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.canceled = false;\n\n\t\t/**\n\t\t * The current load progress (percentage) for this item. This will be a number between 0 and 1.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *     var queue = new createjs.LoadQueue();\n\t\t *     queue.loadFile(\"largeImage.png\");\n\t\t *     queue.on(\"progress\", function() {\n\t\t *         console.log(\"Progress:\", queue.progress, event.progress);\n\t\t *     });\n\t\t *\n\t\t * @property progress\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.progress = 0;\n\n\t\t/**\n\t\t * The type of item this loader will load. See {{#crossLink \"AbstractLoader\"}}{{/crossLink}} for a full list of\n\t\t * supported types.\n\t\t * @property type\n\t\t * @type {String}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * A formatter function that converts the loaded raw result into the final result. For example, the JSONLoader\n\t\t * converts a string of text into a JavaScript object. Not all loaders have a resultFormatter, and this property\n\t\t * can be overridden to provide custom formatting.\n\t\t *\n\t\t * Optionally, a resultFormatter can return a callback function in cases where the formatting needs to be\n\t\t * asynchronous, such as creating a new image. The callback function is passed 2 parameters, which are callbacks\n\t\t * to handle success and error conditions in the resultFormatter. Note that the resultFormatter method is\n\t\t * called in the current scope, as well as the success and error callbacks.\n\t\t *\n\t\t * <h4>Example asynchronous resultFormatter</h4>\n\t\t *\n\t\t * \tfunction _formatResult(loader) {\n\t\t * \t\treturn function(success, error) {\n\t\t * \t\t\tif (errorCondition) { error(errorDetailEvent); }\n\t\t * \t\t\tsuccess(result);\n\t\t * \t\t}\n\t\t * \t}\n\t\t * @property resultFormatter\n\t\t * @type {Function}\n\t\t * @default null\n\t\t */\n\t\tthis.resultFormatter = null;\n\n\t\t// protected properties\n\t\t/**\n\t\t * The {{#crossLink \"LoadItem\"}}{{/crossLink}} this loader represents. Note that this is null in a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\n\t\t * but will be available on loaders such as {{#crossLink \"XMLLoader\"}}{{/crossLink}} and {{#crossLink \"ImageLoader\"}}{{/crossLink}}.\n\t\t * @property _item\n\t\t * @type {LoadItem|Object}\n\t\t * @private\n\t\t */\n\t\tif (loadItem) {\n\t\t\tthis._item = createjs.LoadItem.create(loadItem);\n\t\t} else {\n\t\t\tthis._item = null;\n\t\t}\n\n\t\t/**\n\t\t * Whether the loader will try and load content using XHR (true) or HTML tags (false).\n\t\t * @property _preferXHR\n\t\t * @type {Boolean}\n\t\t * @private\n\t\t */\n\t\tthis._preferXHR = preferXHR;\n\n\t\t/**\n\t\t * The loaded result after it is formatted by an optional {{#crossLink \"resultFormatter\"}}{{/crossLink}}. For\n\t\t * items that are not formatted, this will be the same as the {{#crossLink \"_rawResult:property\"}}{{/crossLink}}.\n\t\t * The result is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}} method.\n\t\t * @property _result\n\t\t * @type {Object|String}\n\t\t * @private\n\t\t */\n\t\tthis._result = null;\n\n\t\t/**\n\t\t * The loaded result before it is formatted. The rawResult is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}}\n\t\t * method, and passing `true`.\n\t\t * @property _rawResult\n\t\t * @type {Object|String}\n\t\t * @private\n\t\t */\n\t\tthis._rawResult = null;\n\n\t\t/**\n\t\t * A list of items that loaders load behind the scenes. This does not include the main item the loader is\n\t\t * responsible for loading. Examples of loaders that have sub-items include the {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}} and\n\t\t * {{#crossLink \"ManifestLoader\"}}{{/crossLink}}.\n\t\t * @property _loadItems\n\t\t * @type {null}\n\t\t * @protected\n\t\t */\n\t\tthis._loadedItems = null;\n\n\t\t/**\n\t\t * The attribute the items loaded using tags use for the source.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @private\n\t\t */\n\t\tthis._tagSrcAttribute = null;\n\n\t\t/**\n\t\t * An HTML tag (or similar) that a loader may use to load HTML content, such as images, scripts, etc.\n\t\t * @property _tag\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._tag = null;\n\t};\n\n\tvar p = createjs.extend(AbstractLoader, createjs.EventDispatcher);\n\tvar s = AbstractLoader;\n\n\t// Remove these @deprecated properties after 1.0\n\ttry {\n\t\tObject.defineProperties(s, {\n\t\t\tPOST: { get: createjs.deprecate(function() { return createjs.Methods.POST; }, \"AbstractLoader.POST\") },\n\t\t\tGET: { get: createjs.deprecate(function() { return createjs.Methods.GET; }, \"AbstractLoader.GET\") },\n\n\t\t\tBINARY: { get: createjs.deprecate(function() { return createjs.Types.BINARY; }, \"AbstractLoader.BINARY\") },\n\t\t\tCSS: { get: createjs.deprecate(function() { return createjs.Types.CSS; }, \"AbstractLoader.CSS\") },\n\t\t\tFONT: { get: createjs.deprecate(function() { return createjs.Types.FONT; }, \"AbstractLoader.FONT\") },\n\t\t\tFONTCSS: { get: createjs.deprecate(function() { return createjs.Types.FONTCSS; }, \"AbstractLoader.FONTCSS\") },\n\t\t\tIMAGE: { get: createjs.deprecate(function() { return createjs.Types.IMAGE; }, \"AbstractLoader.IMAGE\") },\n\t\t\tJAVASCRIPT: { get: createjs.deprecate(function() { return createjs.Types.JAVASCRIPT; }, \"AbstractLoader.JAVASCRIPT\") },\n\t\t\tJSON: { get: createjs.deprecate(function() { return createjs.Types.JSON; }, \"AbstractLoader.JSON\") },\n\t\t\tJSONP: { get: createjs.deprecate(function() { return createjs.Types.JSONP; }, \"AbstractLoader.JSONP\") },\n\t\t\tMANIFEST: { get: createjs.deprecate(function() { return createjs.Types.MANIFEST; }, \"AbstractLoader.MANIFEST\") },\n\t\t\tSOUND: { get: createjs.deprecate(function() { return createjs.Types.SOUND; }, \"AbstractLoader.SOUND\") },\n\t\t\tVIDEO: { get: createjs.deprecate(function() { return createjs.Types.VIDEO; }, \"AbstractLoader.VIDEO\") },\n\t\t\tSPRITESHEET: { get: createjs.deprecate(function() { return createjs.Types.SPRITESHEET; }, \"AbstractLoader.SPRITESHEET\") },\n\t\t\tSVG: { get: createjs.deprecate(function() { return createjs.Types.SVG; }, \"AbstractLoader.SVG\") },\n\t\t\tTEXT: { get: createjs.deprecate(function() { return createjs.Types.TEXT; }, \"AbstractLoader.TEXT\") },\n\t\t\tXML: { get: createjs.deprecate(function() { return createjs.Types.XML; }, \"AbstractLoader.XML\") }\n\t\t});\n\t} catch (e) {}\n\n// Events\n\t/**\n\t * The {{#crossLink \"ProgressEvent\"}}{{/crossLink}} that is fired when the overall progress changes. Prior to\n\t * version 0.6.0, this was just a regular {{#crossLink \"Event\"}}{{/crossLink}}.\n\t * @event progress\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a load starts.\n\t * @event loadstart\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.3.1\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the entire queue has been loaded.\n\t * @event complete\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"ErrorEvent\"}}{{/crossLink}} that is fired when the loader encounters an error. If the error was\n\t * encountered by a file, the event will contain the item that caused the error. Prior to version 0.6.0, this was\n\t * just a regular {{#crossLink \"Event\"}}{{/crossLink}}.\n\t * @event error\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the loader encounters an internal file load error.\n\t * This enables loaders to maintain internal queues, and surface file load errors.\n\t * @event fileerror\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type (\"fileerror\")\n\t * @param {LoadItem|object} The item that encountered the error\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a loader internally loads a file. This enables\n\t * loaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}} to maintain internal {{#crossLink \"LoadQueue\"}}{{/crossLink}}s\n\t * and notify when they have loaded a file. The {{#crossLink \"LoadQueue\"}}{{/crossLink}} class dispatches a\n\t * slightly different {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event.\n\t * @event fileload\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type (\"fileload\")\n\t * @param {Object} item The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n\t * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\n\t * object will contain that value as a `src` property.\n\t * @param {Object} result The HTML tag or parsed result of the loaded item.\n\t * @param {Object} rawResult The unprocessed result, usually the raw text or binary data before it is converted\n\t * to a usable object.\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired after the internal request is created, but before a load.\n\t * This allows updates to the loader for specific loading needs, such as binary or XHR image loading.\n\t * @event initialize\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type (\"initialize\")\n\t * @param {AbstractLoader} loader The loader that has been initialized.\n\t */\n\n\n\t/**\n\t * Get a reference to the manifest item that is loaded by this loader. In some cases this will be the value that was\n\t * passed into {{#crossLink \"LoadQueue\"}}{{/crossLink}} using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or\n\t * {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. However if only a String path was passed in, then it will\n\t * be a {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\t * @method getItem\n\t * @return {Object} The manifest item that this loader is responsible for loading.\n\t * @since 0.6.0\n\t */\n\tp.getItem = function () {\n\t\treturn this._item;\n\t};\n\n\t/**\n\t * Get a reference to the content that was loaded by the loader (only available after the {{#crossLink \"complete:event\"}}{{/crossLink}}\n\t * event is dispatched.\n\t * @method getResult\n\t * @param {Boolean} [raw=false] Determines if the returned result will be the formatted content, or the raw loaded\n\t * data (if it exists).\n\t * @return {Object}\n\t * @since 0.6.0\n\t */\n\tp.getResult = function (raw) {\n\t\treturn raw ? this._rawResult : this._result;\n\t};\n\n\t/**\n\t * Return the `tag` this object creates or uses for loading.\n\t * @method getTag\n\t * @return {Object} The tag instance\n\t * @since 0.6.0\n\t */\n\tp.getTag = function () {\n\t\treturn this._tag;\n\t};\n\n\t/**\n\t * Set the `tag` this item uses for loading.\n\t * @method setTag\n\t * @param {Object} tag The tag instance\n\t * @since 0.6.0\n\t */\n\tp.setTag = function(tag) {\n\t  this._tag = tag;\n\t};\n\n\t/**\n\t * Begin loading the item. This method is required when using a loader by itself.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var queue = new createjs.LoadQueue();\n\t *      queue.on(\"complete\", handleComplete);\n\t *      queue.loadManifest(fileArray, false); // Note the 2nd argument that tells the queue not to start loading yet\n\t *      queue.load();\n\t *\n\t * @method load\n\t */\n\tp.load = function () {\n\t\tthis._createRequest();\n\n\t\tthis._request.on(\"complete\", this, this);\n\t\tthis._request.on(\"progress\", this, this);\n\t\tthis._request.on(\"loadStart\", this, this);\n\t\tthis._request.on(\"abort\", this, this);\n\t\tthis._request.on(\"timeout\", this, this);\n\t\tthis._request.on(\"error\", this, this);\n\n\t\tvar evt = new createjs.Event(\"initialize\");\n\t\tevt.loader = this._request;\n\t\tthis.dispatchEvent(evt);\n\n\t\tthis._request.load();\n\t};\n\n\t/**\n\t * Close the the item. This will stop any open requests (although downloads using HTML tags may still continue in\n\t * the background), but events will not longer be dispatched.\n\t * @method cancel\n\t */\n\tp.cancel = function () {\n\t\tthis.canceled = true;\n\t\tthis.destroy();\n\t};\n\n\t/**\n\t * Clean up the loader.\n\t * @method destroy\n\t */\n\tp.destroy = function() {\n\t\tif (this._request) {\n\t\t\tthis._request.removeAllEventListeners();\n\t\t\tthis._request.destroy();\n\t\t}\n\n\t\tthis._request = null;\n\n\t\tthis._item = null;\n\t\tthis._rawResult = null;\n\t\tthis._result = null;\n\n\t\tthis._loadItems = null;\n\n\t\tthis.removeAllEventListeners();\n\t};\n\n\t/**\n\t * Get any items loaded internally by the loader. The enables loaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\n\t * to expose items it loads internally.\n\t * @method getLoadedItems\n\t * @return {Array} A list of the items loaded by the loader.\n\t * @since 0.6.0\n\t */\n\tp.getLoadedItems = function () {\n\t\treturn this._loadedItems;\n\t};\n\n\n\t// Private methods\n\t/**\n\t * Create an internal request used for loading. By default, an {{#crossLink \"XHRRequest\"}}{{/crossLink}} or\n\t * {{#crossLink \"TagRequest\"}}{{/crossLink}} is created, depending on the value of {{#crossLink \"preferXHR:property\"}}{{/crossLink}}.\n\t * Other loaders may override this to use different request types, such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}},\n\t * which uses {{#crossLink \"JSONLoader\"}}{{/crossLink}} or {{#crossLink \"JSONPLoader\"}}{{/crossLink}} under the hood.\n\t * @method _createRequest\n\t * @protected\n\t */\n\tp._createRequest = function() {\n\t\tif (!this._preferXHR) {\n\t\t\tthis._request = new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);\n\t\t} else {\n\t\t\tthis._request = new createjs.XHRRequest(this._item);\n\t\t}\n\t};\n\n\t/**\n\t * Create the HTML tag used for loading. This method does nothing by default, and needs to be implemented\n\t * by loaders that require tag loading.\n\t * @method _createTag\n\t * @param {String} src The tag source\n\t * @return {HTMLElement} The tag that was created\n\t * @protected\n\t */\n\tp._createTag = function(src) { return null; };\n\n\t/**\n\t * Dispatch a loadstart {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/loadstart:event\"}}{{/crossLink}}\n\t * event for details on the event payload.\n\t * @method _sendLoadStart\n\t * @protected\n\t */\n\tp._sendLoadStart = function () {\n\t\tif (this._isCanceled()) { return; }\n\t\tthis.dispatchEvent(\"loadstart\");\n\t};\n\n\t/**\n\t * Dispatch a {{#crossLink \"ProgressEvent\"}}{{/crossLink}}.\n\t * @method _sendProgress\n\t * @param {Number | Object} value The progress of the loaded item, or an object containing <code>loaded</code>\n\t * and <code>total</code> properties.\n\t * @protected\n\t */\n\tp._sendProgress = function (value) {\n\t\tif (this._isCanceled()) { return; }\n\t\tvar event = null;\n\t\tif (typeof(value) == \"number\") {\n\t\t\tthis.progress = value;\n\t\t\tevent = new createjs.ProgressEvent(this.progress);\n\t\t} else {\n\t\t\tevent = value;\n\t\t\tthis.progress = value.loaded / value.total;\n\t\t\tevent.progress = this.progress;\n\t\t\tif (isNaN(this.progress) || this.progress == Infinity) { this.progress = 0; }\n\t\t}\n\t\tthis.hasEventListener(\"progress\") && this.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Dispatch a complete {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}} event\n\t * @method _sendComplete\n\t * @protected\n\t */\n\tp._sendComplete = function () {\n\t\tif (this._isCanceled()) { return; }\n\n\t\tthis.loaded = true;\n\n\t\tvar event = new createjs.Event(\"complete\");\n\t\tevent.rawResult = this._rawResult;\n\n\t\tif (this._result != null) {\n\t\t\tevent.result = this._result;\n\t\t}\n\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Dispatch an error {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}\n\t * event for details on the event payload.\n\t * @method _sendError\n\t * @param {ErrorEvent} event The event object containing specific error properties.\n\t * @protected\n\t */\n\tp._sendError = function (event) {\n\t\tif (this._isCanceled() || !this.hasEventListener(\"error\")) { return; }\n\t\tif (event == null) {\n\t\t\tevent = new createjs.ErrorEvent(\"PRELOAD_ERROR_EMPTY\"); // TODO: Populate error\n\t\t}\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Determine if the load has been canceled. This is important to ensure that method calls or asynchronous events\n\t * do not cause issues after the queue has been cleaned up.\n\t * @method _isCanceled\n\t * @return {Boolean} If the loader has been canceled.\n\t * @protected\n\t */\n\tp._isCanceled = function () {\n\t\tif (window.createjs == null || this.canceled) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * A custom result formatter function, which is called just before a request dispatches its complete event. Most\n\t * loader types already have an internal formatter, but this can be user-overridden for custom formatting. The\n\t * formatted result will be available on Loaders using {{#crossLink \"getResult\"}}{{/crossLink}}, and passing `true`.\n\t * @property resultFormatter\n\t * @type Function\n\t * @return {Object} The formatted result\n\t * @since 0.6.0\n\t */\n\tp.resultFormatter = null;\n\n\t/**\n\t * Handle events from internal requests. By default, loaders will handle, and redispatch the necessary events, but\n\t * this method can be overridden for custom behaviours.\n\t * @method handleEvent\n\t * @param {Event} event The event that the internal request dispatches.\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp.handleEvent = function (event) {\n\t\tswitch (event.type) {\n\t\t\tcase \"complete\":\n\t\t\t\tthis._rawResult = event.target._response;\n\t\t\t\tvar result = this.resultFormatter && this.resultFormatter(this);\n\t\t\t\t// The resultFormatter is asynchronous\n\t\t\t\tif (result instanceof Function) {\n\t\t\t\t\tresult.call(this,\n\t\t\t\t\t\t\tcreatejs.proxy(this._resultFormatSuccess, this),\n\t\t\t\t\t\t\tcreatejs.proxy(this._resultFormatFailed, this)\n\t\t\t\t\t);\n\t\t\t\t// The result formatter is synchronous\n\t\t\t\t} else {\n\t\t\t\t\tthis._result =  result || this._rawResult;\n\t\t\t\t\tthis._sendComplete();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"progress\":\n\t\t\t\tthis._sendProgress(event);\n\t\t\t\tbreak;\n\t\t\tcase \"error\":\n\t\t\t\tthis._sendError(event);\n\t\t\t\tbreak;\n\t\t\tcase \"loadstart\":\n\t\t\t\tthis._sendLoadStart();\n\t\t\t\tbreak;\n\t\t\tcase \"abort\":\n\t\t\tcase \"timeout\":\n\t\t\t\tif (!this._isCanceled()) {\n\t\t\t\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"PRELOAD_\" + event.type.toUpperCase() + \"_ERROR\"));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t/**\n\t * The \"success\" callback passed to {{#crossLink \"AbstractLoader/resultFormatter\"}}{{/crossLink}} asynchronous\n\t * functions.\n\t * @method _resultFormatSuccess\n\t * @param {Object} result The formatted result\n\t * @private\n\t */\n\tp._resultFormatSuccess = function (result) {\n\t\tthis._result = result;\n\t\tthis._sendComplete();\n\t};\n\n\t/**\n\t * The \"error\" callback passed to {{#crossLink \"AbstractLoader/resultFormatter\"}}{{/crossLink}} asynchronous\n\t * functions.\n\t * @method _resultFormatSuccess\n\t * @param {Object} error The error event\n\t * @private\n\t */\n\tp._resultFormatFailed = function (event) {\n\t\tthis._sendError(event);\n\t};\n\n\t/**\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\tp.toString = function () {\n\t\treturn \"[PreloadJS AbstractLoader]\";\n\t};\n\n\tcreatejs.AbstractLoader = createjs.promote(AbstractLoader, \"EventDispatcher\");\n\n}());\n\n//##############################################################################\n// AbstractMediaLoader.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * The AbstractMediaLoader is a base class that handles some of the shared methods and properties of loaders that\n\t * handle HTML media elements, such as Video and Audio.\n\t * @class AbstractMediaLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @param {String} type The type of media to load. Usually \"video\" or \"audio\".\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction AbstractMediaLoader(loadItem, preferXHR, type) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, type);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\n\t\t// protected properties\n\t\tthis._tagSrcAttribute = \"src\";\n\n        this.on(\"initialize\", this._updateXHR, this);\n\t};\n\n\tvar p = createjs.extend(AbstractMediaLoader, createjs.AbstractLoader);\n\n\t// static properties\n\t// public methods\n\tp.load = function () {\n\t\t// TagRequest will handle most of this, but Sound / Video need a few custom properties, so just handle them here.\n\t\tif (!this._tag) {\n\t\t\tthis._tag = this._createTag(this._item.src);\n\t\t}\n\n\t\tthis._tag.preload = \"auto\";\n\t\tthis._tag.load();\n\n\t\tthis.AbstractLoader_load();\n\t};\n\n\t// protected methods\n\t/**\n\t * Creates a new tag for loading if it doesn't exist yet.\n\t * @method _createTag\n\t * @private\n\t */\n\tp._createTag = function () {};\n\n\n\tp._createRequest = function() {\n\t\tif (!this._preferXHR) {\n\t\t\tthis._request = new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);\n\t\t} else {\n\t\t\tthis._request = new createjs.XHRRequest(this._item);\n\t\t}\n\t};\n\n    // protected methods\n    /**\n     * Before the item loads, set its mimeType and responseType.\n     * @property _updateXHR\n     * @param {Event} event\n     * @private\n     */\n    p._updateXHR = function (event) {\n        // Only exists for XHR\n        if (event.loader.setResponseType) {\n            event.loader.setResponseType(\"blob\");\n        }\n    };\n\n\t/**\n\t * The result formatter for media files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {HTMLVideoElement|HTMLAudioElement}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\tthis._tag.removeEventListener && this._tag.removeEventListener(\"canplaythrough\", this._loadedHandler);\n\t\tthis._tag.onstalled = null;\n\t\tif (this._preferXHR) {\n            var URL = window.URL || window.webkitURL;\n            var result = loader.getResult(true);\n\n\t\t\tloader.getTag().src = URL.createObjectURL(result);\n\t\t}\n\t\treturn loader.getTag();\n\t};\n\n\tcreatejs.AbstractMediaLoader = createjs.promote(AbstractMediaLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// AbstractRequest.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * A base class for actual data requests, such as {{#crossLink \"XHRRequest\"}}{{/crossLink}}, {{#crossLink \"TagRequest\"}}{{/crossLink}},\n\t * and {{#crossLink \"MediaRequest\"}}{{/crossLink}}. PreloadJS loaders will typically use a data loader under the\n\t * hood to get data.\n\t * @class AbstractRequest\n\t * @param {LoadItem} item\n\t * @constructor\n\t */\n\tvar AbstractRequest = function (item) {\n\t\tthis._item = item;\n\t};\n\n\tvar p = createjs.extend(AbstractRequest, createjs.EventDispatcher);\n\n\t// public methods\n\t/**\n\t * Begin a load.\n\t * @method load\n\t */\n\tp.load =  function() {};\n\n\t/**\n\t * Clean up a request.\n\t * @method destroy\n\t */\n\tp.destroy = function() {};\n\n\t/**\n\t * Cancel an in-progress request.\n\t * @method cancel\n\t */\n\tp.cancel = function() {};\n\n\tcreatejs.AbstractRequest = createjs.promote(AbstractRequest, \"EventDispatcher\");\n\n}());\n\n//##############################################################################\n// TagRequest.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * An {{#crossLink \"AbstractRequest\"}}{{/crossLink}} that loads HTML tags, such as images and scripts.\n\t * @class TagRequest\n\t * @param {LoadItem} loadItem\n\t * @param {HTMLElement} tag\n\t * @param {String} srcAttribute The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n\t */\n\tfunction TagRequest(loadItem, tag, srcAttribute) {\n\t\tthis.AbstractRequest_constructor(loadItem);\n\n\t\t// protected properties\n\t\t/**\n\t\t * The HTML tag instance that is used to load.\n\t\t * @property _tag\n\t\t * @type {HTMLElement}\n\t\t * @protected\n\t\t */\n\t\tthis._tag = tag;\n\n\t\t/**\n\t\t * The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n\t\t * @property _tagSrcAttribute\n\t\t * @type {String}\n\t\t * @protected\n\t\t */\n\t\tthis._tagSrcAttribute = srcAttribute;\n\n\t\t/**\n\t\t * A method closure used for handling the tag load event.\n\t\t * @property _loadedHandler\n\t\t * @type {Function}\n\t\t * @private\n\t\t */\n\t\tthis._loadedHandler = createjs.proxy(this._handleTagComplete, this);\n\n\t\t/**\n\t\t * Determines if the element was added to the DOM automatically by PreloadJS, so it can be cleaned up after.\n\t\t * @property _addedToDOM\n\t\t * @type {Boolean}\n\t\t * @private\n\t\t */\n\t\tthis._addedToDOM = false;\n\n\t};\n\n\tvar p = createjs.extend(TagRequest, createjs.AbstractRequest);\n\n\t// public methods\n\tp.load = function () {\n\t\tthis._tag.onload = createjs.proxy(this._handleTagComplete, this);\n\t\tthis._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);\n\t\tthis._tag.onerror = createjs.proxy(this._handleError, this);\n\n\t\tvar evt = new createjs.Event(\"initialize\");\n\t\tevt.loader = this._tag;\n\n\t\tthis.dispatchEvent(evt);\n\n\t\tthis._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);\n\n\t\tthis._tag[this._tagSrcAttribute] = this._item.src;\n\n\t\t// wdg:: Append the tag AFTER setting the src, or SVG loading on iOS will fail.\n\t\tif (this._tag.parentNode == null) {\n\t\t\tcreatejs.DomUtils.appendToBody(this._tag);\n\t\t\tthis._addedToDOM = true;\n\t\t}\n\t};\n\n\tp.destroy = function() {\n\t\tthis._clean();\n\t\tthis._tag = null;\n\n\t\tthis.AbstractRequest_destroy();\n\t};\n\n\t// private methods\n\t/**\n\t * Handle the readyStateChange event from a tag. We need this in place of the `onload` callback (mainly SCRIPT\n\t * and LINK tags), but other cases may exist.\n\t * @method _handleReadyStateChange\n\t * @private\n\t */\n\tp._handleReadyStateChange = function () {\n\t\tclearTimeout(this._loadTimeout);\n\t\t// This is strictly for tags in browsers that do not support onload.\n\t\tvar tag = this._tag;\n\n\t\t// Complete is for old IE support.\n\t\tif (tag.readyState == \"loaded\" || tag.readyState == \"complete\") {\n\t\t\tthis._handleTagComplete();\n\t\t}\n\t};\n\n\t/**\n\t * Handle any error events from the tag.\n\t * @method _handleError\n\t * @protected\n\t */\n\tp._handleError = function() {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(\"error\");\n\t};\n\n\t/**\n\t * Handle the tag's onload callback.\n\t * @method _handleTagComplete\n\t * @private\n\t */\n\tp._handleTagComplete = function () {\n\t\tthis._rawResult = this._tag;\n\t\tthis._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult;\n\n\t\tthis._clean();\n\n\t\tthis.dispatchEvent(\"complete\");\n\t};\n\n\t/**\n\t * The tag request has not loaded within the time specified in loadTimeout.\n\t * @method _handleError\n\t * @param {Object} event The XHR error event.\n\t * @private\n\t */\n\tp._handleTimeout = function () {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(new createjs.Event(\"timeout\"));\n\t};\n\n\t/**\n\t * Remove event listeners, but don't destroy the request object\n\t * @method _clean\n\t * @private\n\t */\n\tp._clean = function() {\n\t\tthis._tag.onload = null;\n\t\tthis._tag.onreadystatechange = null;\n\t\tthis._tag.onerror = null;\n\t\tif (this._addedToDOM && this._tag.parentNode != null) {\n\t\t\tthis._tag.parentNode.removeChild(this._tag);\n\t\t}\n\t\tclearTimeout(this._loadTimeout);\n\t};\n\n\t/**\n\t * Handle a stalled audio event. The main place this happens is with HTMLAudio in Chrome when playing back audio\n\t * that is already in a load, but not complete.\n\t * @method _handleStalled\n\t * @private\n\t */\n\tp._handleStalled = function () {\n\t\t//Ignore, let the timeout take care of it. Sometimes its not really stopped.\n\t};\n\n\tcreatejs.TagRequest = createjs.promote(TagRequest, \"AbstractRequest\");\n\n}());\n\n//##############################################################################\n// MediaTagRequest.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * An {{#crossLink \"TagRequest\"}}{{/crossLink}} that loads HTML tags for video and audio.\n\t * @class MediaTagRequest\n\t * @param {LoadItem} loadItem\n\t * @param {HTMLAudioElement|HTMLVideoElement} tag\n\t * @param {String} srcAttribute The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n\t * @constructor\n\t */\n\tfunction MediaTagRequest(loadItem, tag, srcAttribute) {\n\t\tthis.AbstractRequest_constructor(loadItem);\n\n\t\t// protected properties\n\t\tthis._tag = tag;\n\t\tthis._tagSrcAttribute = srcAttribute;\n\t\tthis._loadedHandler = createjs.proxy(this._handleTagComplete, this);\n\t};\n\n\tvar p = createjs.extend(MediaTagRequest, createjs.TagRequest);\n\tvar s = MediaTagRequest;\n\n\t// public methods\n\tp.load = function () {\n\t\tvar sc = createjs.proxy(this._handleStalled, this);\n\t\tthis._stalledCallback = sc;\n\n\t\tvar pc = createjs.proxy(this._handleProgress, this);\n\t\tthis._handleProgress = pc;\n\n\t\tthis._tag.addEventListener(\"stalled\", sc);\n\t\tthis._tag.addEventListener(\"progress\", pc);\n\n\t\t// This will tell us when audio is buffered enough to play through, but not when its loaded.\n\t\t// The tag doesn't keep loading in Chrome once enough has buffered, and we have decided that behaviour is sufficient.\n\t\tthis._tag.addEventListener && this._tag.addEventListener(\"canplaythrough\", this._loadedHandler, false); // canplaythrough callback doesn't work in Chrome, so we use an event.\n\n\t\tthis.TagRequest_load();\n\t};\n\n\t// private methods\n\tp._handleReadyStateChange = function () {\n\t\tclearTimeout(this._loadTimeout);\n\t\t// This is strictly for tags in browsers that do not support onload.\n\t\tvar tag = this._tag;\n\n\t\t// Complete is for old IE support.\n\t\tif (tag.readyState == \"loaded\" || tag.readyState == \"complete\") {\n\t\t\tthis._handleTagComplete();\n\t\t}\n\t};\n\n\tp._handleStalled = function () {\n\t\t//Ignore, let the timeout take care of it. Sometimes its not really stopped.\n\t};\n\n\t/**\n\t * An XHR request has reported progress.\n\t * @method _handleProgress\n\t * @param {Object} event The XHR progress event.\n\t * @private\n\t */\n\tp._handleProgress = function (event) {\n\t\tif (!event || event.loaded > 0 && event.total == 0) {\n\t\t\treturn; // Sometimes we get no \"total\", so just ignore the progress event.\n\t\t}\n\n\t\tvar newEvent = new createjs.ProgressEvent(event.loaded, event.total);\n\t\tthis.dispatchEvent(newEvent);\n\t};\n\n\t// protected methods\n\tp._clean = function () {\n\t\tthis._tag.removeEventListener && this._tag.removeEventListener(\"canplaythrough\", this._loadedHandler);\n\t\tthis._tag.removeEventListener(\"stalled\", this._stalledCallback);\n\t\tthis._tag.removeEventListener(\"progress\", this._progressCallback);\n\n\t\tthis.TagRequest__clean();\n\t};\n\n\tcreatejs.MediaTagRequest = createjs.promote(MediaTagRequest, \"TagRequest\");\n\n}());\n\n//##############################################################################\n// XHRRequest.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n// constructor\n\t/**\n\t * A preloader that loads items using XHR requests, usually XMLHttpRequest. However XDomainRequests will be used\n\t * for cross-domain requests if possible, and older versions of IE fall back on to ActiveX objects when necessary.\n\t * XHR requests load the content as text or binary data, provide progress and consistent completion events, and\n\t * can be canceled during load. Note that XHR is not supported in IE 6 or earlier, and is not recommended for\n\t * cross-domain loading.\n\t * @class XHRRequest\n\t * @constructor\n\t * @param {Object} item The object that defines the file to load. Please see the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n\t * for an overview of supported file properties.\n\t * @extends AbstractLoader\n\t */\n\tfunction XHRRequest (item) {\n\t\tthis.AbstractRequest_constructor(item);\n\n\t\t// protected properties\n\t\t/**\n\t\t * A reference to the XHR request used to load the content.\n\t\t * @property _request\n\t\t * @type {XMLHttpRequest | XDomainRequest | ActiveX.XMLHTTP}\n\t\t * @private\n\t\t */\n\t\tthis._request = null;\n\n\t\t/**\n\t\t * A manual load timeout that is used for browsers that do not support the onTimeout event on XHR (XHR level 1,\n\t\t * typically IE9).\n\t\t * @property _loadTimeout\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._loadTimeout = null;\n\n\t\t/**\n\t\t * The browser's XHR (XMLHTTPRequest) version. Supported versions are 1 and 2. There is no official way to detect\n\t\t * the version, so we use capabilities to make a best guess.\n\t\t * @property _xhrLevel\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t * @private\n\t\t */\n\t\tthis._xhrLevel = 1;\n\n\t\t/**\n\t\t * The response of a loaded file. This is set because it is expensive to look up constantly. This property will be\n\t\t * null until the file is loaded.\n\t\t * @property _response\n\t\t * @type {mixed}\n\t\t * @private\n\t\t */\n\t\tthis._response = null;\n\n\t\t/**\n\t\t * The response of the loaded file before it is modified. In most cases, content is converted from raw text to\n\t\t * an HTML tag or a formatted object which is set to the <code>result</code> property, but the developer may still\n\t\t * want to access the raw content as it was loaded.\n\t\t * @property _rawResponse\n\t\t * @type {String|Object}\n\t\t * @private\n\t\t */\n\t\tthis._rawResponse = null;\n\n\t\tthis._canceled = false;\n\n\t\t// Setup our event handlers now.\n\t\tthis._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);\n\t\tthis._handleProgressProxy = createjs.proxy(this._handleProgress, this);\n\t\tthis._handleAbortProxy = createjs.proxy(this._handleAbort, this);\n\t\tthis._handleErrorProxy = createjs.proxy(this._handleError, this);\n\t\tthis._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);\n\t\tthis._handleLoadProxy = createjs.proxy(this._handleLoad, this);\n\t\tthis._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);\n\n\t\tif (!this._createXHR(item)) {\n\t\t\t//TODO: Throw error?\n\t\t}\n\t};\n\n\tvar p = createjs.extend(XHRRequest, createjs.AbstractRequest);\n\n// static properties\n\t/**\n\t * A list of XMLHTTP object IDs to try when building an ActiveX object for XHR requests in earlier versions of IE.\n\t * @property ACTIVEX_VERSIONS\n\t * @type {Array}\n\t * @since 0.4.2\n\t * @private\n\t */\n\tXHRRequest.ACTIVEX_VERSIONS = [\n\t\t\"Msxml2.XMLHTTP.6.0\",\n\t\t\"Msxml2.XMLHTTP.5.0\",\n\t\t\"Msxml2.XMLHTTP.4.0\",\n\t\t\"MSXML2.XMLHTTP.3.0\",\n\t\t\"MSXML2.XMLHTTP\",\n\t\t\"Microsoft.XMLHTTP\"\n\t];\n\n// Public methods\n\t/**\n\t * Look up the loaded result.\n\t * @method getResult\n\t * @param {Boolean} [raw=false] Return a raw result instead of a formatted result. This applies to content\n\t * loaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be\n\t * returned instead.\n\t * @return {Object} A result object containing the content that was loaded, such as:\n\t * <ul>\n\t *      <li>An image tag (&lt;image /&gt;) for images</li>\n\t *      <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts loaded with tags may be added to the\n\t *      HTML head.</li>\n\t *      <li>A style tag for CSS (&lt;style /&gt;)</li>\n\t *      <li>Raw text for TEXT</li>\n\t *      <li>A formatted JavaScript object defined by JSON</li>\n\t *      <li>An XML document</li>\n\t *      <li>An binary arraybuffer loaded by XHR</li>\n\t * </ul>\n\t * Note that if a raw result is requested, but not found, the result will be returned instead.\n\t */\n\tp.getResult = function (raw) {\n\t\tif (raw && this._rawResponse) {\n\t\t\treturn this._rawResponse;\n\t\t}\n\t\treturn this._response;\n\t};\n\n\t// Overrides abstract method in AbstractRequest\n\tp.cancel = function () {\n\t\tthis.canceled = true;\n\t\tthis._clean();\n\t\tthis._request.abort();\n\t};\n\n\t// Overrides abstract method in AbstractLoader\n\tp.load = function () {\n\t\tif (this._request == null) {\n\t\t\tthis._handleError();\n\t\t\treturn;\n\t\t}\n\n\t\t//Events\n\t\tif (this._request.addEventListener != null) {\n\t\t\tthis._request.addEventListener(\"loadstart\", this._handleLoadStartProxy, false);\n\t\t\tthis._request.addEventListener(\"progress\", this._handleProgressProxy, false);\n\t\t\tthis._request.addEventListener(\"abort\", this._handleAbortProxy, false);\n\t\t\tthis._request.addEventListener(\"error\", this._handleErrorProxy, false);\n\t\t\tthis._request.addEventListener(\"timeout\", this._handleTimeoutProxy, false);\n\n\t\t\t// Note: We don't get onload in all browsers (earlier FF and IE). onReadyStateChange handles these.\n\t\t\tthis._request.addEventListener(\"load\", this._handleLoadProxy, false);\n\t\t\tthis._request.addEventListener(\"readystatechange\", this._handleReadyStateChangeProxy, false);\n\t\t} else {\n\t\t\t// IE9 support\n\t\t\tthis._request.onloadstart = this._handleLoadStartProxy;\n\t\t\tthis._request.onprogress = this._handleProgressProxy;\n\t\t\tthis._request.onabort = this._handleAbortProxy;\n\t\t\tthis._request.onerror = this._handleErrorProxy;\n\t\t\tthis._request.ontimeout = this._handleTimeoutProxy;\n\n\t\t\t// Note: We don't get onload in all browsers (earlier FF and IE). onReadyStateChange handles these.\n\t\t\tthis._request.onload = this._handleLoadProxy;\n\t\t\tthis._request.onreadystatechange = this._handleReadyStateChangeProxy;\n\t\t}\n\n\t\t// Set up a timeout if we don't have XHR2\n\t\tif (this._xhrLevel == 1) {\n\t\t\tthis._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);\n\t\t}\n\n\t\t// Sometimes we get back 404s immediately, particularly when there is a cross origin request.  // note this does not catch in Chrome\n\t\ttry {\n\t\t\tif (!this._item.values) {\n\t\t\t\tthis._request.send();\n\t\t\t} else {\n\t\t\t\tthis._request.send(createjs.URLUtils.formatQueryString(this._item.values));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"XHR_SEND\", null, error));\n\t\t}\n\t};\n\n\tp.setResponseType = function (type) {\n\t\t// Some old browsers doesn't support blob, so we convert arraybuffer to blob after response is downloaded\n\t\tif (type === 'blob') {\n\t\t\ttype = window.URL ? 'blob' : 'arraybuffer';\n\t\t\tthis._responseType = type;\n\t\t}\n\t\tthis._request.responseType = type;\n\t};\n\n\t/**\n\t * Get all the response headers from the XmlHttpRequest.\n\t *\n\t * <strong>From the docs:</strong> Return all the HTTP headers, excluding headers that are a case-insensitive match\n\t * for Set-Cookie or Set-Cookie2, as a single string, with each header line separated by a U+000D CR U+000A LF pair,\n\t * excluding the status line, and with each header name and header value separated by a U+003A COLON U+0020 SPACE\n\t * pair.\n\t * @method getAllResponseHeaders\n\t * @return {String}\n\t * @since 0.4.1\n\t */\n\tp.getAllResponseHeaders = function () {\n\t\tif (this._request.getAllResponseHeaders instanceof Function) {\n\t\t\treturn this._request.getAllResponseHeaders();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t * Get a specific response header from the XmlHttpRequest.\n\t *\n\t * <strong>From the docs:</strong> Returns the header field value from the response of which the field name matches\n\t * header, unless the field name is Set-Cookie or Set-Cookie2.\n\t * @method getResponseHeader\n\t * @param {String} header The header name to retrieve.\n\t * @return {String}\n\t * @since 0.4.1\n\t */\n\tp.getResponseHeader = function (header) {\n\t\tif (this._request.getResponseHeader instanceof Function) {\n\t\t\treturn this._request.getResponseHeader(header);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n// protected methods\n\t/**\n\t * The XHR request has reported progress.\n\t * @method _handleProgress\n\t * @param {Object} event The XHR progress event.\n\t * @private\n\t */\n\tp._handleProgress = function (event) {\n\t\tif (!event || event.loaded > 0 && event.total == 0) {\n\t\t\treturn; // Sometimes we get no \"total\", so just ignore the progress event.\n\t\t}\n\n\t\tvar newEvent = new createjs.ProgressEvent(event.loaded, event.total);\n\t\tthis.dispatchEvent(newEvent);\n\t};\n\n\t/**\n\t * The XHR request has reported a load start.\n\t * @method _handleLoadStart\n\t * @param {Object} event The XHR loadStart event.\n\t * @private\n\t */\n\tp._handleLoadStart = function (event) {\n\t\tclearTimeout(this._loadTimeout);\n\t\tthis.dispatchEvent(\"loadstart\");\n\t};\n\n\t/**\n\t * The XHR request has reported an abort event.\n\t * @method handleAbort\n\t * @param {Object} event The XHR abort event.\n\t * @private\n\t */\n\tp._handleAbort = function (event) {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"XHR_ABORTED\", null, event));\n\t};\n\n\t/**\n\t * The XHR request has reported an error event.\n\t * @method _handleError\n\t * @param {Object} event The XHR error event.\n\t * @private\n\t */\n\tp._handleError = function (event) {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(new createjs.ErrorEvent(event.message));\n\t};\n\n\t/**\n\t * The XHR request has reported a readyState change. Note that older browsers (IE 7 & 8) do not provide an onload\n\t * event, so we must monitor the readyStateChange to determine if the file is loaded.\n\t * @method _handleReadyStateChange\n\t * @param {Object} event The XHR readyStateChange event.\n\t * @private\n\t */\n\tp._handleReadyStateChange = function (event) {\n\t\tif (this._request.readyState == 4) {\n\t\t\tthis._handleLoad();\n\t\t}\n\t};\n\n\t/**\n\t * The XHR request has completed. This is called by the XHR request directly, or by a readyStateChange that has\n\t * <code>request.readyState == 4</code>. Only the first call to this method will be processed.\n\t *\n\t * Note that This method uses {{#crossLink \"_checkError\"}}{{/crossLink}} to determine if the server has returned an\n\t * error code.\n\t * @method _handleLoad\n\t * @param {Object} event The XHR load event.\n\t * @private\n\t */\n\tp._handleLoad = function (event) {\n\t\tif (this.loaded) {\n\t\t\treturn;\n\t\t}\n\t\tthis.loaded = true;\n\n\t\tvar error = this._checkError();\n\t\tif (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._response = this._getResponse();\n\t\t// Convert arraybuffer back to blob\n\t\tif (this._responseType === 'arraybuffer') {\n\t\t\ttry {\n\t\t\t\tthis._response = new Blob([this._response]);\n\t\t\t} catch (e) {\n\t\t\t\t// Fallback to use BlobBuilder if Blob constructor is not supported\n\t\t\t\t// Tested on Android 2.3 ~ 4.2 and iOS5 safari\n\t\t\t\twindow.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\t\t\t\tif (e.name === 'TypeError' && window.BlobBuilder) {\n\t\t\t\t\tvar builder = new BlobBuilder();\n\t\t\t\t\tbuilder.append(this._response);\n\t\t\t\t\tthis._response = builder.getBlob();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._clean();\n\n\t\tthis.dispatchEvent(new createjs.Event(\"complete\"));\n\t};\n\n\t/**\n\t * The XHR request has timed out. This is called by the XHR request directly, or via a <code>setTimeout</code>\n\t * callback.\n\t * @method _handleTimeout\n\t * @param {Object} [event] The XHR timeout event. This is occasionally null when called by the backup setTimeout.\n\t * @private\n\t */\n\tp._handleTimeout = function (event) {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"PRELOAD_TIMEOUT\", null, event));\n\t};\n\n// Protected\n\t/**\n\t * Determine if there is an error in the current load.\n\t * Currently this checks the status of the request for problem codes, and not actual response content:\n\t * <ul>\n\t *     <li>Status codes between 400 and 599 (HTTP error range)</li>\n\t *     <li>A status of 0, but *only when the application is running on a server*. If the application is running\n\t *     on `file:`, then it may incorrectly treat an error on local (or embedded applications) as a successful\n\t *     load.</li>\n\t * </ul>\n\t * @method _checkError\n\t * @return {Error} An error with the status code in the `message` argument.\n\t * @private\n\t */\n\tp._checkError = function () {\n\t\tvar status = parseInt(this._request.status);\n\t\tif (status >= 400 && status <= 599) {\n\t\t\treturn new Error(status);\n\t\t} else if (status == 0) {\n\t\t\tif ((/^https?:/).test(location.protocol)) { return new Error(0); }\n\t\t\treturn null; // Likely an embedded app.\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\n\t/**\n\t * Validate the response. Different browsers have different approaches, some of which throw errors when accessed\n\t * in other browsers. If there is no response, the <code>_response</code> property will remain null.\n\t * @method _getResponse\n\t * @private\n\t */\n\tp._getResponse = function () {\n\t\tif (this._response != null) {\n\t\t\treturn this._response;\n\t\t}\n\n\t\tif (this._request.response != null) {\n\t\t\treturn this._request.response;\n\t\t}\n\n\t\t// Android 2.2 uses .responseText\n\t\ttry {\n\t\t\tif (this._request.responseText != null) {\n\t\t\t\treturn this._request.responseText;\n\t\t\t}\n\t\t} catch (e) {\n\t\t}\n\n\t\t// When loading XML, IE9 does not return .response, instead it returns responseXML.xml\n\t\ttry {\n\t\t\tif (this._request.responseXML != null) {\n\t\t\t\treturn this._request.responseXML;\n\t\t\t}\n\t\t} catch (e) {\n\t\t}\n\n\t\treturn null;\n\t};\n\n\t/**\n\t * Create an XHR request. Depending on a number of factors, we get totally different results.\n\t * <ol><li>Some browsers get an <code>XDomainRequest</code> when loading cross-domain.</li>\n\t *      <li>XMLHttpRequest are created when available.</li>\n\t *      <li>ActiveX.XMLHTTP objects are used in older IE browsers.</li>\n\t *      <li>Text requests override the mime type if possible</li>\n\t *      <li>Origin headers are sent for crossdomain requests in some browsers.</li>\n\t *      <li>Binary loads set the response type to \"arraybuffer\"</li></ol>\n\t * @method _createXHR\n\t * @param {Object} item The requested item that is being loaded.\n\t * @return {Boolean} If an XHR request or equivalent was successfully created.\n\t * @private\n\t */\n\tp._createXHR = function (item) {\n\t\t// Check for cross-domain loads. We can't fully support them, but we can try.\n\t\tvar crossdomain = createjs.URLUtils.isCrossDomain(item);\n\t\tvar headers = {};\n\n\t\t// Create the request. Fallback to whatever support we have.\n\t\tvar req = null;\n\t\tif (window.XMLHttpRequest) {\n\t\t\treq = new XMLHttpRequest();\n\t\t\t// This is 8 or 9, so use XDomainRequest instead.\n\t\t\tif (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {\n\t\t\t\treq = new XDomainRequest();\n\t\t\t}\n\t\t} else { // Old IE versions use a different approach\n\t\t\tfor (var i = 0, l = s.ACTIVEX_VERSIONS.length; i < l; i++) {\n\t\t\t\tvar axVersion = s.ACTIVEX_VERSIONS[i];\n\t\t\t\ttry {\n\t\t\t\t\treq = new ActiveXObject(axVersion);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (e) {\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (req == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Default to utf-8 for Text requests.\n\t\tif (item.mimeType == null && createjs.RequestUtils.isText(item.type)) {\n\t\t\titem.mimeType = \"text/plain; charset=utf-8\";\n\t\t}\n\n\t\t// IE9 doesn't support overrideMimeType(), so we need to check for it.\n\t\tif (item.mimeType && req.overrideMimeType) {\n\t\t\treq.overrideMimeType(item.mimeType);\n\t\t}\n\n\t\t// Determine the XHR level\n\t\tthis._xhrLevel = (typeof req.responseType === \"string\") ? 2 : 1;\n\n\t\tvar src = null;\n\t\tif (item.method == createjs.Methods.GET) {\n\t\t\tsrc = createjs.URLUtils.buildURI(item.src, item.values);\n\t\t} else {\n\t\t\tsrc = item.src;\n\t\t}\n\n\t\t// Open the request.  Set cross-domain flags if it is supported (XHR level 1 only)\n\t\treq.open(item.method || createjs.Methods.GET, src, true);\n\n\t\tif (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {\n\t\t\theaders[\"Origin\"] = location.origin;\n\t\t}\n\n\t\t// To send data we need to set the Content-type header)\n\t\tif (item.values && item.method == createjs.Methods.POST) {\n\t\t\theaders[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\t\t}\n\n\t\tif (!crossdomain && !headers[\"X-Requested-With\"]) {\n\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t}\n\n\t\tif (item.headers) {\n\t\t\tfor (var n in item.headers) {\n\t\t\t\theaders[n] = item.headers[n];\n\t\t\t}\n\t\t}\n\n\t\tfor (n in headers) {\n\t\t\treq.setRequestHeader(n, headers[n])\n\t\t}\n\n\t\tif (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {\n\t\t\treq.withCredentials = item.withCredentials;\n\t\t}\n\n\t\tthis._request = req;\n\n\t\treturn true;\n\t};\n\n\t/**\n\t * A request has completed (or failed or canceled), and needs to be disposed.\n\t * @method _clean\n\t * @private\n\t */\n\tp._clean = function () {\n\t\tclearTimeout(this._loadTimeout);\n\n\t\tif (this._request.removeEventListener != null) {\n\t\t\tthis._request.removeEventListener(\"loadstart\", this._handleLoadStartProxy);\n\t\t\tthis._request.removeEventListener(\"progress\", this._handleProgressProxy);\n\t\t\tthis._request.removeEventListener(\"abort\", this._handleAbortProxy);\n\t\t\tthis._request.removeEventListener(\"error\", this._handleErrorProxy);\n\t\t\tthis._request.removeEventListener(\"timeout\", this._handleTimeoutProxy);\n\t\t\tthis._request.removeEventListener(\"load\", this._handleLoadProxy);\n\t\t\tthis._request.removeEventListener(\"readystatechange\", this._handleReadyStateChangeProxy);\n\t\t} else {\n\t\t\tthis._request.onloadstart = null;\n\t\t\tthis._request.onprogress = null;\n\t\t\tthis._request.onabort = null;\n\t\t\tthis._request.onerror = null;\n\t\t\tthis._request.ontimeout = null;\n\t\t\tthis._request.onload = null;\n\t\t\tthis._request.onreadystatechange = null;\n\t\t}\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[PreloadJS XHRRequest]\";\n\t};\n\n\tcreatejs.XHRRequest = createjs.promote(XHRRequest, \"AbstractRequest\");\n\n}());\n\n//##############################################################################\n// SoundLoader.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for HTML audio files. PreloadJS can not load WebAudio files, as a WebAudio context is required, which\n\t * should be created by either a library playing the sound (such as <a href=\"http://soundjs.com\">SoundJS</a>, or an\n\t * external framework that handles audio playback. To load content that can be played by WebAudio, use the\n\t * {{#crossLink \"BinaryLoader\"}}{{/crossLink}}, and handle the audio context decoding manually.\n\t * @class SoundLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @extends AbstractMediaLoader\n\t * @constructor\n\t */\n\tfunction SoundLoader(loadItem, preferXHR) {\n\t\tthis.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.Types.SOUND);\n\n\t\t// protected properties\n\t\tif (createjs.DomUtils.isAudioTag(loadItem)) {\n\t\t\tthis._tag = loadItem;\n\t\t} else if (createjs.DomUtils.isAudioTag(loadItem.src)) {\n\t\t\tthis._tag = loadItem;\n\t\t} else if (createjs.DomUtils.isAudioTag(loadItem.tag)) {\n\t\t\tthis._tag = createjs.DomUtils.isAudioTag(loadItem) ? loadItem : loadItem.src;\n\t\t}\n\n\t\tif (this._tag != null) {\n\t\t\tthis._preferXHR = false;\n\t\t}\n\t};\n\n\tvar p = createjs.extend(SoundLoader, createjs.AbstractMediaLoader);\n\tvar s = SoundLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"Types/SOUND:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.Types.SOUND;\n\t};\n\n\t// protected methods\n\tp._createTag = function (src) {\n\t\tvar tag = createjs.Elements.audio();\n\t\ttag.autoplay = false;\n\t\ttag.preload = \"none\";\n\n\t\t//LM: Firefox fails when this the preload=\"none\" for other tags, but it needs to be \"none\" to ensure PreloadJS works.\n\t\ttag.src = src;\n\t\treturn tag;\n\t};\n\n\tcreatejs.SoundLoader = createjs.promote(SoundLoader, \"AbstractMediaLoader\");\n\n}());\n\n//##############################################################################\n// AudioSprite.js\n//##############################################################################\n\n//  NOTE this is \"Class\" is purely to document audioSprite Setup and usage.\n\n\n/**\n * <strong>Note: AudioSprite is not a class, but its usage is easily lost in the documentation, so it has been called\n * out here for quick reference.</strong>\n *\n * Audio sprites are much like CSS sprites or image sprite sheets: multiple audio assets grouped into a single file.\n * Audio sprites work around limitations in certain browsers, where only a single sound can be loaded and played at a\n * time. We recommend at least 300ms of silence between audio clips to deal with HTML audio tag inaccuracy, and to prevent\n * accidentally playing bits of the neighbouring clips.\n *\n * <strong>Benefits of Audio Sprites:</strong>\n * <ul>\n *     <li>More robust support for older browsers and devices that only allow a single audio instance, such as iOS 5.</li>\n *     <li>They provide a work around for the Internet Explorer 9 audio tag limit, which restricts how many different\n *     sounds that could be loaded at once.</li>\n *     <li>Faster loading by only requiring a single network request for several sounds, especially on mobile devices\n * where the network round trip for each file can add significant latency.</li>\n * </ul>\n *\n * <strong>Drawbacks of Audio Sprites</strong>\n * <ul>\n *     <li>No guarantee of smooth looping when using HTML or Flash audio. If you have a track that needs to loop\n * \t\tsmoothly and you are supporting non-web audio browsers, do not use audio sprites for that sound if you can avoid\n * \t\tit.</li>\n *     <li>No guarantee that HTML audio will play back immediately, especially the first time. In some browsers\n *     (Chrome!), HTML audio will only load enough to play through at the current download speed – so we rely on the\n *     `canplaythrough` event to determine if the audio is loaded. Since audio sprites must jump ahead to play specific\n *     sounds, the audio may not yet have downloaded fully.</li>\n *     <li>Audio sprites share the same core source, so if you have a sprite with 5 sounds and are limited to 2\n * \t\tconcurrently playing instances, you can only play 2 of the sounds at the same time.</li>\n * </ul>\n *\n * <h4>Example</h4>\n *\n *\t\tcreatejs.Sound.initializeDefaultPlugins();\n *\t\tvar assetsPath = \"./assets/\";\n *\t\tvar sounds = [{\n *\t\t\tsrc:\"MyAudioSprite.ogg\", data: {\n *\t\t\t\taudioSprite: [\n *\t\t\t\t\t{id:\"sound1\", startTime:0, duration:500},\n *\t\t\t\t\t{id:\"sound2\", startTime:1000, duration:400},\n *\t\t\t\t\t{id:\"sound3\", startTime:1700, duration: 1000}\n *\t\t\t\t]}\n *\t\t\t}\n *\t\t];\n *\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n *\t\tcreatejs.Sound.on(\"fileload\", loadSound);\n *\t\tcreatejs.Sound.registerSounds(sounds, assetsPath);\n *\t\t// after load is complete\n *\t\tcreatejs.Sound.play(\"sound2\");\n *\n * You can also create audio sprites on the fly by setting the startTime and duration when creating an new AbstractSoundInstance.\n *\n * \t\tcreatejs.Sound.play(\"MyAudioSprite\", {startTime: 1000, duration: 400});\n *\n * The excellent CreateJS community has created a tool to create audio sprites, available at\n * <a href=\"https://github.com/tonistiigi/audiosprite\" target=\"_blank\">https://github.com/tonistiigi/audiosprite</a>,\n * as well as a <a href=\"http://jsfiddle.net/bharat_battu/g8fFP/12/\" target=\"_blank\">jsfiddle</a> to convert the output\n * to SoundJS format.\n *\n * @class AudioSprite\n * @since 0.6.0\n */\n\n//##############################################################################\n// PlayPropsConfig.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\t/**\n\t * A class to store the optional play properties passed in {{#crossLink \"Sound/play\"}}{{/crossLink}} and\n\t * {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}} calls.\n\t *\n\t * Optional Play Properties Include:\n\t * <ul>\n\t * <li>interrupt - How to interrupt any currently playing instances of audio with the same source,\n\t * if the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>\n\t * constants on the Sound class, with the default defined by {{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.</li>\n\t * <li>delay - The amount of time to delay the start of audio playback, in milliseconds.</li>\n\t * <li>offset - The offset from the start of the audio to begin playback, in milliseconds.</li>\n\t * <li>loop - How many times the audio loops when it reaches the end of playback. The default is 0 (no\n\t * loops), and -1 can be used for infinite playback.</li>\n\t * <li>volume - The volume of the sound, between 0 and 1. Note that the master volume is applied\n\t * against the individual volume.</li>\n\t * <li>pan - The left-right pan of the sound (if supported), between -1 (left) and 1 (right).</li>\n\t * <li>startTime - To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.</li>\n\t * <li>duration - To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.</li>\n\t * </ul>\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \tvar props = new createjs.PlayPropsConfig().set({interrupt: createjs.Sound.INTERRUPT_ANY, loop: -1, volume: 0.5})\n\t * \tcreatejs.Sound.play(\"mySound\", props);\n\t * \t// OR\n\t * \tmySoundInstance.play(props);\n\t *\n\t * @class PlayPropsConfig\n\t * @constructor\n\t * @since 0.6.1\n\t */\n\t// TODO think of a better name for this class\n\tvar PlayPropsConfig = function () {\n// Public Properties\n\t\t/**\n\t\t * How to interrupt any currently playing instances of audio with the same source,\n\t\t * if the maximum number of instances of the sound are already playing. Values are defined as\n\t\t * <code>INTERRUPT_TYPE</code> constants on the Sound class, with the default defined by\n\t\t * {{#crossLink \"Sound/defaultInterruptBehavior:property\"}}{{/crossLink}}.\n\t\t * @property interrupt\n\t\t * @type {string}\n\t\t * @default null\n\t\t */\n\t\tthis.interrupt = null;\n\n\t\t/**\n\t\t * The amount of time to delay the start of audio playback, in milliseconds.\n\t\t * @property delay\n\t\t * @type {Number}\n\t\t * @default null\n\t\t */\n\t\tthis.delay = null;\n\n\t\t/**\n\t\t * The offset from the start of the audio to begin playback, in milliseconds.\n\t\t * @property offset\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis.offset = null;\n\n\t\t/**\n\t\t * How many times the audio loops when it reaches the end of playback. The default is 0 (no\n\t\t * loops), and -1 can be used for infinite playback.\n\t\t * @property loop\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis.loop = null;\n\n\t\t/**\n\t\t * The volume of the sound, between 0 and 1. Note that the master volume is applied\n\t\t * against the individual volume.\n\t\t * @property volume\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis.volume = null;\n\n\t\t/**\n\t\t * The left-right pan of the sound (if supported), between -1 (left) and 1 (right).\n\t\t * @property pan\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis.pan = null;\n\n\t\t/**\n\t\t * Used to create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.\n\t\t * @property startTime\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis.startTime = null;\n\n\t\t/**\n\t\t * Used to create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.\n\t\t * @property duration\n\t\t * @type {number}\n\t\t * @default null\n\t\t */\n\t\tthis.duration = null;\n\t};\n\tvar p = PlayPropsConfig.prototype = {};\n\tvar s = PlayPropsConfig;\n\n\n// Static Methods\n\t/**\n\t * Creates a PlayPropsConfig from another PlayPropsConfig or an Object.\n\t *\n\t * @method create\n\t * @param {PlayPropsConfig|Object} value The play properties\n\t * @returns {PlayPropsConfig}\n\t * @static\n\t */\n\ts.create = function (value) {\n\t\tif (typeof(value) === \"string\") {\n\t\t\t// Handle the old API gracefully.\n\t\t\tconsole && (console.warn || console.log)(\"Deprecated behaviour. Sound.play takes a configuration object instead of individual arguments. See docs for info.\");\n\t\t\treturn new createjs.PlayPropsConfig().set({interrupt:value});\n\t\t} else if (value == null || value instanceof s || value instanceof Object) {\n\t\t\treturn new createjs.PlayPropsConfig().set(value);\n\t\t} else if (value == null) {\n\t\t\tthrow new Error(\"PlayProps configuration not recognized.\");\n\t\t}\n\t};\n\n// Public Methods\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var PlayPropsConfig = new createjs.PlayPropsConfig().set({loop:-1, volume:0.7});\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the PlayPropsConfig instance.\n\t * @return {PlayPropsConfig} Returns the instance the method is called on (useful for chaining calls.)\n\t*/\n\tp.set = function(props) {\n\t\tif (props != null) {\n\t\t\tfor (var n in props) { this[n] = props[n]; }\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.toString = function() {\n\t\treturn \"[PlayPropsConfig]\";\n\t};\n\n\tcreatejs.PlayPropsConfig = s;\n\n}());\n\n//##############################################################################\n// Sound.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * The Sound class is the public API for creating sounds, controlling the overall sound levels, and managing plugins.\n\t * All Sound APIs on this class are static.\n\t *\n\t * <b>Registering and Preloading</b><br />\n\t * Before you can play a sound, it <b>must</b> be registered. You can do this with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}},\n\t * or register multiple sounds using {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}. If you don't register a\n\t * sound prior to attempting to play it using {{#crossLink \"Sound/play\"}}{{/crossLink}} or create it using {{#crossLink \"Sound/createInstance\"}}{{/crossLink}},\n\t * the sound source will be automatically registered but playback will fail as the source will not be ready. If you use\n\t * <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>, registration is handled for you when the sound is\n\t * preloaded. It is recommended to preload sounds either internally using the register functions or externally using\n\t * PreloadJS so they are ready when you want to use them.\n\t *\n\t * <b>Playback</b><br />\n\t * To play a sound once it's been registered and preloaded, use the {{#crossLink \"Sound/play\"}}{{/crossLink}} method.\n\t * This method returns a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} which can be paused, resumed, muted, etc.\n\t * Please see the {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} documentation for more on the instance control APIs.\n\t *\n\t * <b>Plugins</b><br />\n\t * By default, the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} or the {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}\n\t * are used (when available), although developers can change plugin priority or add new plugins (such as the\n\t * provided {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}). Please see the {{#crossLink \"Sound\"}}{{/crossLink}} API\n\t * methods for more on the playback and plugin APIs. To install plugins, or specify a different plugin order, see\n\t * {{#crossLink \"Sound/installPlugins\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio\";\n\t *      createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.FlashAudioPlugin]);\n\t *      createjs.Sound.alternateExtensions = [\"mp3\"];\n\t *      createjs.Sound.on(\"fileload\", this.loadHandler, this);\n\t *      createjs.Sound.registerSound(\"path/to/mySound.ogg\", \"sound\");\n\t *      function loadHandler(event) {\n     *          // This is fired for each sound that is registered.\n     *          var instance = createjs.Sound.play(\"sound\");  // play using id.  Could also use full source path or event.src.\n     *          instance.on(\"complete\", this.handleComplete, this);\n     *          instance.volume = 0.5;\n\t *      }\n\t *\n\t * The maximum number of concurrently playing instances of the same sound can be specified in the \"data\" argument\n\t * of {{#crossLink \"Sound/registerSound\"}}{{/crossLink}}.  Note that if not specified, the active plugin will apply\n\t * a default limit.  Currently HTMLAudioPlugin sets a default limit of 2, while WebAudioPlugin and FlashAudioPlugin set a\n\t * default limit of 100.\n\t *\n\t *      createjs.Sound.registerSound(\"sound.mp3\", \"soundId\", 4);\n\t *\n\t * Sound can be used as a plugin with PreloadJS to help preload audio properly. Audio preloaded with PreloadJS is\n\t * automatically registered with the Sound class. When audio is not preloaded, Sound will do an automatic internal\n\t * load. As a result, it may fail to play the first time play is called if the audio is not finished loading. Use\n\t * the {{#crossLink \"Sound/fileload:event\"}}{{/crossLink}} event to determine when a sound has finished internally\n\t * preloading. It is recommended that all audio is preloaded before it is played.\n\t *\n\t *      var queue = new createjs.LoadQueue();\n\t *\t\tqueue.installPlugin(createjs.Sound);\n\t *\n\t * <b>Audio Sprites</b><br />\n\t * SoundJS has added support for {{#crossLink \"AudioSprite\"}}{{/crossLink}}, available as of version 0.6.0.\n\t * For those unfamiliar with audio sprites, they are much like CSS sprites or sprite sheets: multiple audio assets\n\t * grouped into a single file.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *\t\tvar assetsPath = \"./assets/\";\n\t *\t\tvar sounds = [{\n\t *\t\t\tsrc:\"MyAudioSprite.ogg\", data: {\n\t *\t\t\t\taudioSprite: [\n\t *\t\t\t\t\t{id:\"sound1\", startTime:0, duration:500},\n\t *\t\t\t\t\t{id:\"sound2\", startTime:1000, duration:400},\n\t *\t\t\t\t\t{id:\"sound3\", startTime:1700, duration: 1000}\n\t *\t\t\t\t]}\n \t *\t\t\t}\n\t *\t\t];\n\t *\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n\t *\t\tcreatejs.Sound.on(\"fileload\", loadSound);\n\t *\t\tcreatejs.Sound.registerSounds(sounds, assetsPath);\n\t *\t\t// after load is complete\n\t *\t\tcreatejs.Sound.play(\"sound2\");\n\t *\n\t * <b>Mobile Playback</b><br />\n\t * Devices running iOS require the WebAudio context to be \"unlocked\" by playing at least one sound inside of a user-\n\t * initiated event (such as touch/click). Earlier versions of SoundJS included a \"MobileSafe\" sample, but this is no\n\t * longer necessary as of SoundJS 0.6.2.\n\t * <ul>\n\t *     <li>\n\t *         In SoundJS 0.4.1 and above, you can either initialize plugins or use the {{#crossLink \"WebAudioPlugin/playEmptySound\"}}{{/crossLink}}\n\t *         method in the call stack of a user input event to manually unlock the audio context.\n\t *     </li>\n\t *     <li>\n\t *         In SoundJS 0.6.2 and above, SoundJS will automatically listen for the first document-level \"mousedown\"\n\t *         and \"touchend\" event, and unlock WebAudio. This will continue to check these events until the WebAudio\n\t *         context becomes \"unlocked\" (changes from \"suspended\" to \"running\")\n\t *     </li>\n\t *     <li>\n\t *         Both the \"mousedown\" and \"touchend\" events can be used to unlock audio in iOS9+, the \"touchstart\" event\n\t *         will work in iOS8 and below. The \"touchend\" event will only work in iOS9 when the gesture is interpreted\n\t *         as a \"click\", so if the user long-presses the button, it will no longer work.\n\t *     </li>\n\t *     <li>\n\t *         When using the <a href=\"http://www.createjs.com/docs/easeljs/classes/Touch.html\">EaselJS Touch class</a>,\n\t *         the \"mousedown\" event will not fire when a canvas is clicked, since MouseEvents are prevented, to ensure\n\t *         only touch events fire. To get around this, you can either rely on \"touchend\", or:\n\t *         <ol>\n\t *             <li>Set the `allowDefault` property on the Touch class constructor to `true` (defaults to `false`).</li>\n\t *             <li>Set the `preventSelection` property on the EaselJS `Stage` to `false`.</li>\n\t *         </ol>\n\t *         These settings may change how your application behaves, and are not recommended.\n\t *     </li>\n\t * </ul>\n\t *\n\t * <b>Loading Alternate Paths and Extension-less Files</b><br />\n\t * SoundJS supports loading alternate paths and extension-less files by passing an object instead of a string for\n\t * the `src` property, which is a hash using the format `{extension:\"path\", extension2:\"path2\"}`. These labels are\n\t * how SoundJS determines if the browser will support the sound. This also enables multiple formats to live in\n\t * different folders, or on CDNs, which often has completely different filenames for each file.\n\t *\n\t * Priority is determined by the property order (first property is tried first).  This is supported by both internal loading\n\t * and loading with PreloadJS.\n\t *\n\t * <em>Note: an id is required for playback.</em>\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *\t\tvar sounds = {path:\"./audioPath/\",\n\t * \t\t\t\tmanifest: [\n\t *\t\t\t\t{id: \"cool\", src: {mp3:\"mp3/awesome.mp3\", ogg:\"noExtensionOggFile\"}}\n\t *\t\t]};\n\t *\n\t *\t\tcreatejs.Sound.alternateExtensions = [\"mp3\"];\n\t *\t\tcreatejs.Sound.addEventListener(\"fileload\", handleLoad);\n\t *\t\tcreatejs.Sound.registerSounds(sounds);\n\t *\n\t * <h3>Known Browser and OS issues</h3>\n\t * <b>IE 9 HTML Audio limitations</b><br />\n\t * <ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\n\t * muted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\n\t * when or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n     * <li>MP3 encoding will not always work for audio tags, particularly in Internet Explorer. We've found default\n\t * encoding with 64kbps works.</li>\n\t * <li>Occasionally very short samples will get cut off.</li>\n\t * <li>There is a limit to how many audio tags you can load and play at once, which appears to be determined by\n\t * hardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe\n\t * estimate.</li></ul>\n\t *\n\t * <b>Firefox 25 Web Audio limitations</b>\n\t * <ul><li>mp3 audio files do not load properly on all windows machines, reported\n\t * <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=929969\" target=\"_blank\">here</a>. </br>\n\t * For this reason it is recommended to pass another FF supported type (ie ogg) first until this bug is resolved, if\n\t * possible.</li></ul>\n\n\t * <b>Safari limitations</b><br />\n\t * <ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n\t *\n\t * <b>iOS 6 Web Audio limitations</b><br />\n\t * <ul><li>Sound is initially locked, and must be unlocked via a user-initiated event. Please see the section on\n\t * Mobile Playback above.</li>\n\t * <li>A bug exists that will distort un-cached web audio when a video element is present in the DOM that has audio\n\t * at a different sampleRate.</li>\n\t * </ul>\n\t *\n\t * <b>Android HTML Audio limitations</b><br />\n\t * <ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n\t * <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use\n\t * a delay.</li></ul>\n\t *\n\t * <b>Web Audio and PreloadJS</b><br />\n\t * <ul><li>Web Audio must be loaded through XHR, therefore when used with PreloadJS, tag loading is not possible.\n\t * This means that tag loading can not be used to avoid cross domain issues.</li><ul>\n\t *\n\t * @class Sound\n\t * @static\n\t * @uses EventDispatcher\n\t */\n\tfunction Sound() {\n\t\tthrow \"Sound cannot be instantiated\";\n\t}\n\n\tvar s = Sound;\n\n\n// Static Properties\n\t/**\n\t * The interrupt value to interrupt any currently playing instance with the same source, if the maximum number of\n\t * instances of the sound are already playing.\n\t * @property INTERRUPT_ANY\n\t * @type {String}\n\t * @default any\n\t * @static\n\t */\n\ts.INTERRUPT_ANY = \"any\";\n\n\t/**\n\t * The interrupt value to interrupt the earliest currently playing instance with the same source that progressed the\n\t * least distance in the audio track, if the maximum number of instances of the sound are already playing.\n\t * @property INTERRUPT_EARLY\n\t * @type {String}\n\t * @default early\n\t * @static\n\t */\n\ts.INTERRUPT_EARLY = \"early\";\n\n\t/**\n\t * The interrupt value to interrupt the currently playing instance with the same source that progressed the most\n\t * distance in the audio track, if the maximum number of instances of the sound are already playing.\n\t * @property INTERRUPT_LATE\n\t * @type {String}\n\t * @default late\n\t * @static\n\t */\n\ts.INTERRUPT_LATE = \"late\";\n\n\t/**\n\t * The interrupt value to not interrupt any currently playing instances with the same source, if the maximum number of\n\t * instances of the sound are already playing.\n\t * @property INTERRUPT_NONE\n\t * @type {String}\n\t * @default none\n\t * @static\n\t */\n\ts.INTERRUPT_NONE = \"none\";\n\n\t/**\n\t * Defines the playState of an instance that is still initializing.\n\t * @property PLAY_INITED\n\t * @type {String}\n\t * @default playInited\n\t * @static\n\t */\n\ts.PLAY_INITED = \"playInited\";\n\n\t/**\n\t * Defines the playState of an instance that is currently playing or paused.\n\t * @property PLAY_SUCCEEDED\n\t * @type {String}\n\t * @default playSucceeded\n\t * @static\n\t */\n\ts.PLAY_SUCCEEDED = \"playSucceeded\";\n\n\t/**\n\t * Defines the playState of an instance that was interrupted by another instance.\n\t * @property PLAY_INTERRUPTED\n\t * @type {String}\n\t * @default playInterrupted\n\t * @static\n\t */\n\ts.PLAY_INTERRUPTED = \"playInterrupted\";\n\n\t/**\n\t * Defines the playState of an instance that completed playback.\n\t * @property PLAY_FINISHED\n\t * @type {String}\n\t * @default playFinished\n\t * @static\n\t */\n\ts.PLAY_FINISHED = \"playFinished\";\n\n\t/**\n\t * Defines the playState of an instance that failed to play. This is usually caused by a lack of available channels\n\t * when the interrupt mode was \"INTERRUPT_NONE\", the playback stalled, or the sound could not be found.\n\t * @property PLAY_FAILED\n\t * @type {String}\n\t * @default playFailed\n\t * @static\n\t */\n\ts.PLAY_FAILED = \"playFailed\";\n\n\t/**\n\t * A list of the default supported extensions that Sound will <i>try</i> to play. Plugins will check if the browser\n\t * can play these types, so modifying this list before a plugin is initialized will allow the plugins to try to\n\t * support additional media types.\n\t *\n\t * NOTE this does not currently work for {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}.\n\t *\n\t * More details on file formats can be found at <a href=\"http://en.wikipedia.org/wiki/Audio_file_format\" target=\"_blank\">http://en.wikipedia.org/wiki/Audio_file_format</a>.<br />\n\t * A very detailed list of file formats can be found at <a href=\"http://www.fileinfo.com/filetypes/audio\" target=\"_blank\">http://www.fileinfo.com/filetypes/audio</a>.\n\t * @property SUPPORTED_EXTENSIONS\n\t * @type {Array[String]}\n\t * @default [\"mp3\", \"ogg\", \"opus\", \"mpeg\", \"wav\", \"m4a\", \"mp4\", \"aiff\", \"wma\", \"mid\"]\n\t * @since 0.4.0\n\t * @static\n\t */\n\ts.SUPPORTED_EXTENSIONS = [\"mp3\", \"ogg\", \"opus\", \"mpeg\", \"wav\", \"m4a\", \"mp4\", \"aiff\", \"wma\", \"mid\"];\n\n\t/**\n\t * Some extensions use another type of extension support to play (one of them is a codex).  This allows you to map\n\t * that support so plugins can accurately determine if an extension is supported.  Adding to this list can help\n\t * plugins determine more accurately if an extension is supported.\n\t *\n \t * A useful list of extensions for each format can be found at <a href=\"http://html5doctor.com/html5-audio-the-state-of-play/\" target=\"_blank\">http://html5doctor.com/html5-audio-the-state-of-play/</a>.\n\t * @property EXTENSION_MAP\n\t * @type {Object}\n\t * @since 0.4.0\n\t * @default {m4a:\"mp4\"}\n\t * @static\n\t */\n\ts.EXTENSION_MAP = {\n\t\tm4a:\"mp4\"\n\t};\n\n\t/**\n\t * The RegExp pattern used to parse file URIs. This supports simple file names, as well as full domain URIs with\n\t * query strings. The resulting match is: protocol:$1 domain:$2 path:$3 file:$4 extension:$5 query:$6.\n\t * @property FILE_PATTERN\n\t * @type {RegExp}\n\t * @static\n\t * @private\n\t */\n\ts.FILE_PATTERN = /^(?:(\\w+:)\\/{2}(\\w+(?:\\.\\w+)*\\/?))?([/.]*?(?:[^?]+)?\\/)?((?:[^/?]+)\\.(\\w+))(?:\\?(\\S+)?)?$/;\n\n\n// Class Public properties\n\t/**\n\t * Determines the default behavior for interrupting other currently playing instances with the same source, if the\n\t * maximum number of instances of the sound are already playing.  Currently the default is {{#crossLink \"Sound/INTERRUPT_NONE:property\"}}{{/crossLink}}\n\t * but this can be set and will change playback behavior accordingly.  This is only used when {{#crossLink \"Sound/play\"}}{{/crossLink}}\n\t * is called without passing a value for interrupt.\n\t * @property defaultInterruptBehavior\n\t * @type {String}\n\t * @default Sound.INTERRUPT_NONE, or \"none\"\n\t * @static\n\t * @since 0.4.0\n\t */\n\ts.defaultInterruptBehavior = s.INTERRUPT_NONE;  // OJR does s.INTERRUPT_ANY make more sense as default?  Needs game dev testing to see which case makes more sense.\n\n\t/**\n\t * An array of extensions to attempt to use when loading sound, if the default is unsupported by the active plugin.\n\t * These are applied in order, so if you try to Load Thunder.ogg in a browser that does not support ogg, and your\n\t * extensions array is [\"mp3\", \"m4a\", \"wav\"] it will check mp3 support, then m4a, then wav. The audio files need\n\t * to exist in the same location, as only the extension is altered.\n\t *\n\t * Note that regardless of which file is loaded, you can call {{#crossLink \"Sound/createInstance\"}}{{/crossLink}}\n\t * and {{#crossLink \"Sound/play\"}}{{/crossLink}} using the same id or full source path passed for loading.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *\tvar sounds = [\n\t *\t\t{src:\"myPath/mySound.ogg\", id:\"example\"},\n\t *\t];\n\t *\tcreatejs.Sound.alternateExtensions = [\"mp3\"]; // now if ogg is not supported, SoundJS will try asset0.mp3\n\t *\tcreatejs.Sound.on(\"fileload\", handleLoad); // call handleLoad when each sound loads\n\t *\tcreatejs.Sound.registerSounds(sounds, assetPath);\n\t *\t// ...\n\t *\tcreatejs.Sound.play(\"myPath/mySound.ogg\"); // works regardless of what extension is supported.  Note calling with ID is a better approach\n\t *\n\t * @property alternateExtensions\n\t * @type {Array}\n\t * @since 0.5.2\n\t * @static\n\t */\n\ts.alternateExtensions = [];\n\n\t/**\n\t * The currently active plugin. If this is null, then no plugin could be initialized. If no plugin was specified,\n\t * Sound attempts to apply the default plugins: {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by\n\t * {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n\t * @property activePlugin\n\t * @type {Object}\n\t * @static\n\t */\n    s.activePlugin = null;\n\n\n// class getter / setter properties\n\n\t/**\n\t * Set the master volume of Sound. The master volume is multiplied against each sound's individual volume.  For\n\t * example, if master volume is 0.5 and a sound's volume is 0.5, the resulting volume is 0.25. To set individual\n\t * sound volume, use AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}}\n\t * instead.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *     createjs.Sound.volume = 0.5;\n\t *\n\t * @property volume\n\t * @type {Number}\n\t * @default 1\n\t * @since 0.6.1\n\t */\n\n\t/**\n\t * The internal volume level. Use {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} to adjust the master volume.\n\t * @property _masterVolume\n\t * @type {number}\n\t * @default 1\n\t * @private\n\t */\n\ts._masterVolume = 1;\n\n\t/**\n\t * Use the {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} property instead.\n\t * @method _getMasterVolume\n\t * @private\n\t * @static\n\t * @return {Number}\n\t **/\n\ts._getMasterVolume = function() {\n\t\treturn this._masterVolume;\n\t};\n\t// Sound.getMasterVolume is @deprecated. Remove for 1.1+\n\ts.getVolume = createjs.deprecate(s._getMasterVolume, \"Sound.getVolume\");\n\t/**\n\t * Use the {{#crossLink \"Sound/volume:property\"}}{{/crossLink}} property instead.\n\t * @method _setMasterVolume\n\t * @static\n\t * @private\n\t **/\n\ts._setMasterVolume = function(value) {\n\t\tif (Number(value) == null) { return; }\n\t\tvalue = Math.max(0, Math.min(1, value));\n\t\ts._masterVolume = value;\n\t\tif (!this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(value)) {\n\t\t\tvar instances = this._instances;\n\t\t\tfor (var i = 0, l = instances.length; i < l; i++) {\n\t\t\t\tinstances[i].setMasterVolume(value);\n\t\t\t}\n\t\t}\n\t};\n\t// Sound.stMasterVolume is @deprecated. Remove for 1.1+\n\ts.setVolume = createjs.deprecate(s._setMasterVolume, \"Sound.setVolume\");\n\n\t/**\n\t * Mute/Unmute all audio. Note that muted audio still plays at 0 volume. This global mute value is maintained\n\t * separately and when set will override, but not change the mute property of individual instances. To mute an individual\n\t * instance, use AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} instead.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *     createjs.Sound.muted = true;\n\t *\n\t *\n\t * @property muted\n\t * @type {Boolean}\n\t * @default false\n\t * @since 0.6.1\n\t */\n\ts._masterMute = false;\n\n\t/**\n\t * Use the {{#crossLink \"Sound/muted:property\"}}{{/crossLink}} property instead.\n\t * @method _getMute\n\t * @returns {Boolean}\n\t * @static\n\t * @private\n\t */\n\ts._getMute = function () {\n\t\treturn this._masterMute;\n\t};\n\t// Sound.getMute is @deprecated. Remove for 1.1+\n\ts.getMute = createjs.deprecate(s._getMute, \"Sound.getMute\");\n\n\t/**\n\t * Use the {{#crossLink \"Sound/muted:property\"}}{{/crossLink}} property instead.\n\t * @method _setMute\n\t * @param {Boolean} value The muted value\n\t * @static\n\t * @private\n\t */\n\ts._setMute = function (value) {\n\t\tif (value == null) { return; }\n\t\tthis._masterMute = value;\n\t\tif (!this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(value)) {\n\t\t\tvar instances = this._instances;\n\t\t\tfor (var i = 0, l = instances.length; i < l; i++) {\n\t\t\t\tinstances[i].setMasterMute(value);\n\t\t\t}\n\t\t}\n\t};\n\t// Sound.setMute is @deprecated. Remove for 1.1+\n\ts.setMute = createjs.deprecate(s._setMute, \"Sound.setMute\");\n\n\t/**\n\t * Get the active plugins capabilities, which help determine if a plugin can be used in the current environment,\n\t * or if the plugin supports a specific feature. Capabilities include:\n\t * <ul>\n\t *     <li><b>panning:</b> If the plugin can pan audio from left to right</li>\n\t *     <li><b>volume;</b> If the plugin can control audio volume.</li>\n\t *     <li><b>tracks:</b> The maximum number of audio tracks that can be played back at a time. This will be -1\n\t *     if there is no known limit.</li>\n\t * <br />An entry for each file type in {{#crossLink \"Sound/SUPPORTED_EXTENSIONS:property\"}}{{/crossLink}}:\n\t *     <li><b>mp3:</b> If MP3 audio is supported.</li>\n\t *     <li><b>ogg:</b> If OGG audio is supported.</li>\n\t *     <li><b>wav:</b> If WAV audio is supported.</li>\n\t *     <li><b>mpeg:</b> If MPEG audio is supported.</li>\n\t *     <li><b>m4a:</b> If M4A audio is supported.</li>\n\t *     <li><b>mp4:</b> If MP4 audio is supported.</li>\n\t *     <li><b>aiff:</b> If aiff audio is supported.</li>\n\t *     <li><b>wma:</b> If wma audio is supported.</li>\n\t *     <li><b>mid:</b> If mid audio is supported.</li>\n\t * </ul>\n\t *\n\t * You can get a specific capability of the active plugin using standard object notation\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var mp3 = createjs.Sound.capabilities.mp3;\n\t *\n\t * Note this property is read only.\n\t *\n\t * @property capabilities\n\t * @type {Object}\n\t * @static\n\t * @readOnly\n\t * @since 0.6.1\n\t */\n\n\t/**\n\t * Use the {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} property instead.\n\t * @returns {null}\n\t * @private\n\t */\n\ts._getCapabilities = function() {\n\t\tif (s.activePlugin == null) { return null; }\n\t\treturn s.activePlugin._capabilities;\n\t};\n\t// Sound.getCapabilities is @deprecated. Remove for 1.1+\n\ts.getCapabilities = createjs.deprecate(s._getCapabilities, \"Sound.getCapabilities\");\n\n\tObject.defineProperties(s, {\n\t\tvolume: { get: s._getMasterVolume, set: s._setMasterVolume },\n\t\tmuted: { get: s._getMute, set: s._setMute },\n\t\tcapabilities: { get: s._getCapabilities }\n\t});\n\n\n// Class Private properties\n\t/**\n\t * Determines if the plugins have been registered. If false, the first call to {{#crossLink \"play\"}}{{/crossLink}} will instantiate the default\n\t * plugins ({{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}, followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}).\n\t * If plugins have been registered, but none are applicable, then sound playback will fail.\n\t * @property _pluginsRegistered\n\t * @type {Boolean}\n\t * @default false\n\t * @static\n\t * @private\n\t */\n\ts._pluginsRegistered = false;\n\n\t/**\n\t * Used internally to assign unique IDs to each AbstractSoundInstance.\n\t * @property _lastID\n\t * @type {Number}\n\t * @static\n\t * @private\n\t */\n\ts._lastID = 0;\n\n\t/**\n\t * An array containing all currently playing instances. This allows Sound to control the volume, mute, and playback of\n\t * all instances when using static APIs like {{#crossLink \"Sound/stop\"}}{{/crossLink}} and {{#crossLink \"Sound/volume:property\"}}{{/crossLink}}.\n\t * When an instance has finished playback, it gets removed via the {{#crossLink \"Sound/finishedPlaying\"}}{{/crossLink}}\n\t * method. If the user replays an instance, it gets added back in via the {{#crossLink \"Sound/_beginPlaying\"}}{{/crossLink}}\n\t * method.\n\t * @property _instances\n\t * @type {Array}\n\t * @private\n\t * @static\n\t */\n\ts._instances = [];\n\n\t/**\n\t * An object hash storing objects with sound sources, startTime, and duration via there corresponding ID.\n\t * @property _idHash\n\t * @type {Object}\n\t * @private\n\t * @static\n\t */\n\ts._idHash = {};\n\n\t/**\n\t * An object hash that stores preloading sound sources via the parsed source that is passed to the plugin.  Contains the\n\t * source, id, and data that was passed in by the user.  Parsed sources can contain multiple instances of source, id,\n\t * and data.\n\t * @property _preloadHash\n\t * @type {Object}\n\t * @private\n\t * @static\n\t */\n\ts._preloadHash = {};\n\n\t/**\n\t * An object hash storing {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} via the parsed source that is passed as defaultPlayProps in\n\t * {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} and {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n\t * @property _defaultPlayPropsHash\n\t * @type {Object}\n\t * @private\n\t * @static\n\t * @since 0.6.1\n\t */\n\ts._defaultPlayPropsHash = {};\n\n\n// EventDispatcher methods:\n\ts.addEventListener = null;\n\ts.removeEventListener = null;\n\ts.removeAllEventListeners = null;\n\ts.dispatchEvent = null;\n\ts.hasEventListener = null;\n\ts._listeners = null;\n\n\tcreatejs.EventDispatcher.initialize(s); // inject EventDispatcher methods.\n\n\n// Events\n\t/**\n\t * This event is fired when a file finishes loading internally. This event is fired for each loaded sound,\n\t * so any handler methods should look up the <code>event.src</code> to handle a particular sound.\n\t * @event fileload\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {String} src The source of the sound that was loaded.\n\t * @param {String} [id] The id passed in when the sound was registered. If one was not provided, it will be null.\n\t * @param {Number|Object} [data] Any additional data associated with the item. If not provided, it will be undefined.\n\t * @since 0.4.1\n\t */\n\n\t/**\n\t * This event is fired when a file fails loading internally. This event is fired for each loaded sound,\n\t * so any handler methods should look up the <code>event.src</code> to handle a particular sound.\n\t * @event fileerror\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {String} src The source of the sound that was loaded.\n\t * @param {String} [id] The id passed in when the sound was registered. If one was not provided, it will be null.\n\t * @param {Number|Object} [data] Any additional data associated with the item. If not provided, it will be undefined.\n\t * @since 0.6.0\n\t */\n\n\n// Class Public Methods\n\t/**\n\t * Get the preload rules to allow Sound to be used as a plugin by <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\n\t * Any load calls that have the matching type or extension will fire the callback method, and use the resulting\n\t * object, which is potentially modified by Sound. This helps when determining the correct path, as well as\n\t * registering the audio instance(s) with Sound. This method should not be called, except by PreloadJS.\n\t * @method getPreloadHandlers\n\t * @return {Object} An object containing:\n\t * <ul><li>callback: A preload callback that is fired when a file is added to PreloadJS, which provides\n\t *      Sound a mechanism to modify the load parameters, select the correct file format, register the sound, etc.</li>\n\t *      <li>types: A list of file types that are supported by Sound (currently supports \"sound\").</li>\n\t *      <li>extensions: A list of file extensions that are supported by Sound (see {{#crossLink \"Sound/SUPPORTED_EXTENSIONS:property\"}}{{/crossLink}}).</li></ul>\n\t * @static\n\t * @private\n\t */\n\ts.getPreloadHandlers = function () {\n\t\treturn {\n\t\t\tcallback:createjs.proxy(s.initLoad, s),\n\t\t\ttypes:[\"sound\"],\n\t\t\textensions:s.SUPPORTED_EXTENSIONS\n\t\t};\n\t};\n\n\t/**\n\t * Used to dispatch fileload events from internal loading.\n\t * @method _handleLoadComplete\n\t * @param event A loader event.\n\t * @private\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts._handleLoadComplete = function(event) {\n\t\tvar src = event.target.getItem().src;\n\t\tif (!s._preloadHash[src]) {return;}\n\n\t\tfor (var i = 0, l = s._preloadHash[src].length; i < l; i++) {\n\t\t\tvar item = s._preloadHash[src][i];\n\t\t\ts._preloadHash[src][i] = true;\n\n\t\t\tif (!s.hasEventListener(\"fileload\")) { continue; }\n\n\t\t\tvar event = new createjs.Event(\"fileload\");\n\t\t\tevent.src = item.src;\n\t\t\tevent.id = item.id;\n\t\t\tevent.data = item.data;\n\t\t\tevent.sprite = item.sprite;\n\n\t\t\ts.dispatchEvent(event);\n\t\t}\n\t};\n\n\t/**\n\t * Used to dispatch error events from internal preloading.\n\t * @param event\n\t * @private\n\t * @since 0.6.0\n\t * @static\n\t */\n\ts._handleLoadError = function(event) {\n\t\tvar src = event.target.getItem().src;\n\t\tif (!s._preloadHash[src]) {return;}\n\n\t\tfor (var i = 0, l = s._preloadHash[src].length; i < l; i++) {\n\t\t\tvar item = s._preloadHash[src][i];\n\t\t\ts._preloadHash[src][i] = false;\n\n\t\t\tif (!s.hasEventListener(\"fileerror\")) { continue; }\n\n\t\t\tvar event = new createjs.Event(\"fileerror\");\n\t\t\tevent.src = item.src;\n\t\t\tevent.id = item.id;\n\t\t\tevent.data = item.data;\n\t\t\tevent.sprite = item.sprite;\n\n\t\t\ts.dispatchEvent(event);\n\t\t}\n\t};\n\n\t/**\n\t * Used by {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} to register a Sound plugin.\n\t *\n\t * @method _registerPlugin\n\t * @param {Object} plugin The plugin class to install.\n\t * @return {Boolean} Whether the plugin was successfully initialized.\n\t * @static\n\t * @private\n\t */\n\ts._registerPlugin = function (plugin) {\n\t\t// Note: Each plugin is passed in as a class reference, but we store the activePlugin as an instance\n\t\tif (plugin.isSupported()) {\n\t\t\ts.activePlugin = new plugin();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Register a list of Sound plugins, in order of precedence. To register a single plugin, pass a single element in the array.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio/\";\n\t *      createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);\n\t *\n\t * @method registerPlugins\n\t * @param {Array} plugins An array of plugins classes to install.\n\t * @return {Boolean} Whether a plugin was successfully initialized.\n\t * @static\n\t */\n\ts.registerPlugins = function (plugins) {\n\t\ts._pluginsRegistered = true;\n\t\tfor (var i = 0, l = plugins.length; i < l; i++) {\n\t\t\tif (s._registerPlugin(plugins[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Initialize the default plugins. This method is automatically called when any audio is played or registered before\n\t * the user has manually registered plugins, and enables Sound to work without manual plugin setup. Currently, the\n\t * default plugins are {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} followed by {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \tif (!createjs.initializeDefaultPlugins()) { return; }\n\t *\n\t * @method initializeDefaultPlugins\n\t * @returns {Boolean} True if a plugin was initialized, false otherwise.\n\t * @since 0.4.0\n\t * @static\n\t */\n\ts.initializeDefaultPlugins = function () {\n\t\tif (s.activePlugin != null) {return true;}\n\t\tif (s._pluginsRegistered) {return false;}\n\t\tif (s.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin])) {return true;}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Determines if Sound has been initialized, and a plugin has been activated.\n\t *\n\t * <h4>Example</h4>\n\t * This example sets up a Flash fallback, but only if there is no plugin specified yet.\n\t *\n\t * \tif (!createjs.Sound.isReady()) {\n\t *\t\tcreatejs.FlashAudioPlugin.swfPath = \"../src/soundjs/flashaudio/\";\n\t * \t\tcreatejs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);\n\t *\t}\n\t *\n\t * @method isReady\n\t * @return {Boolean} If Sound has initialized a plugin.\n\t * @static\n\t */\n\ts.isReady = function () {\n\t\treturn (s.activePlugin != null);\n\t};\n\n\t/**\n\t * Process manifest items from <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>. This method is intended\n\t * for usage by a plugin, and not for direct interaction.\n\t * @method initLoad\n\t * @param {Object} src The object to load.\n\t * @return {Object|AbstractLoader} An instance of AbstractLoader.\n\t * @private\n\t * @static\n\t */\n\ts.initLoad = function (loadItem) {\n\t\tif (loadItem.type == \"video\") { return true; } // Don't handle video. PreloadJS's plugin model is really aggressive.\n\t\treturn s._registerSound(loadItem);\n\t};\n\n\t/**\n\t * Internal method for loading sounds.  This should not be called directly.\n\t *\n\t * @method _registerSound\n\t * @param {Object} src The object to load, containing src property and optionally containing id and data.\n\t * @return {Object} An object with the modified values that were passed in, which defines the sound.\n\t * Returns false if the source cannot be parsed or no plugins can be initialized.\n\t * Returns true if the source is already loaded.\n\t * @static\n\t * @private\n\t * @since 0.6.0\n\t */\n\n\ts._registerSound = function (loadItem) {\n\t\tif (!s.initializeDefaultPlugins()) {return false;}\n\n\t\tvar details;\n\t\tif (loadItem.src instanceof Object) {\n\t\t\tdetails = s._parseSrc(loadItem.src);\n\t\t\tdetails.src = loadItem.path + details.src;\n\t\t} else {\n\t\t\tdetails = s._parsePath(loadItem.src);\n\t\t}\n\t\tif (details == null) {return false;}\n\t\tloadItem.src = details.src;\n\t\tloadItem.type = \"sound\";\n\n\t\tvar data = loadItem.data;\n\t\tvar numChannels = null;\n\t\tif (data != null) {\n\t\t\tif (!isNaN(data.channels)) {\n\t\t\t\tnumChannels = parseInt(data.channels);\n\t\t\t} else if (!isNaN(data)) {\n\t\t\t\tnumChannels = parseInt(data);\n\t\t\t}\n\n\t\t\tif(data.audioSprite) {\n\t\t\t\tvar sp;\n\t\t\t\tfor(var i = data.audioSprite.length; i--; ) {\n\t\t\t\t\tsp = data.audioSprite[i];\n\t\t\t\t\ts._idHash[sp.id] = {src: loadItem.src, startTime: parseInt(sp.startTime), duration: parseInt(sp.duration)};\n\n\t\t\t\t\tif (sp.defaultPlayProps) {\n\t\t\t\t\t\ts._defaultPlayPropsHash[sp.id] = createjs.PlayPropsConfig.create(sp.defaultPlayProps);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (loadItem.id != null) {s._idHash[loadItem.id] = {src: loadItem.src}};\n\t\tvar loader = s.activePlugin.register(loadItem);\n\n\t\tSoundChannel.create(loadItem.src, numChannels);\n\n\t\t// return the number of instances to the user.  This will also be returned in the load event.\n\t\tif (data == null || !isNaN(data)) {\n\t\t\tloadItem.data = numChannels || SoundChannel.maxPerChannel();\n\t\t} else {\n\t\t\tloadItem.data.channels = numChannels || SoundChannel.maxPerChannel();\n\t\t}\n\n\t\tif (loader.type) {loadItem.type = loader.type;}\n\n\t\tif (loadItem.defaultPlayProps) {\n\t\t\ts._defaultPlayPropsHash[loadItem.src] = createjs.PlayPropsConfig.create(loadItem.defaultPlayProps);\n\t\t}\n\t\treturn loader;\n\t};\n\n\t/**\n\t * Register an audio file for loading and future playback in Sound. This is automatically called when using\n\t * <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.  It is recommended to register all sounds that\n\t * need to be played back in order to properly prepare and preload them. Sound does internal preloading when required.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Sound.alternateExtensions = [\"mp3\"];\n\t *      createjs.Sound.on(\"fileload\", handleLoad); // add an event listener for when load is completed\n\t *      createjs.Sound.registerSound(\"myAudioPath/mySound.ogg\", \"myID\", 3);\n\t *      createjs.Sound.registerSound({ogg:\"path1/mySound.ogg\", mp3:\"path2/mySoundNoExtension\"}, \"myID\", 3);\n\t *\n\t *\n\t * @method registerSound\n\t * @param {String | Object} src The source or an Object with a \"src\" property or an Object with multiple extension labeled src properties.\n\t * @param {String} [id] An id specified by the user to play the sound later.  Note id is required for when src is multiple extension labeled src properties.\n\t * @param {Number | Object} [data] Data associated with the item. Sound uses the data parameter as the number of\n\t * channels for an audio instance, however a \"channels\" property can be appended to the data object if it is used\n\t * for other information. The audio channels will set a default based on plugin if no value is found.\n\t * Sound also uses the data property to hold an {{#crossLink \"AudioSprite\"}}{{/crossLink}} array of objects in the following format {id, startTime, duration}.<br/>\n\t *   id used to play the sound later, in the same manner as a sound src with an id.<br/>\n\t *   startTime is the initial offset to start playback and loop from, in milliseconds.<br/>\n\t *   duration is the amount of time to play the clip for, in milliseconds.<br/>\n\t * This allows Sound to support audio sprites that are played back by id.\n\t * @param {string} basePath Set a path that will be prepended to src for loading.\n\t * @param {Object | PlayPropsConfig} defaultPlayProps Optional Playback properties that will be set as the defaults on any new AbstractSoundInstance.\n\t * See {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for options.\n\t * @return {Object} An object with the modified values that were passed in, which defines the sound.\n\t * Returns false if the source cannot be parsed or no plugins can be initialized.\n\t * Returns true if the source is already loaded.\n\t * @static\n\t * @since 0.4.0\n\t */\n\ts.registerSound = function (src, id, data, basePath, defaultPlayProps) {\n\t\tvar loadItem = {src: src, id: id, data:data, defaultPlayProps:defaultPlayProps};\n\t\tif (src instanceof Object && src.src) {\n\t\t\tbasePath = id;\n\t\t\tloadItem = src;\n\t\t}\n\t\tloadItem = createjs.LoadItem.create(loadItem);\n\t\tloadItem.path = basePath;\n\n\t\tif (basePath != null && !(loadItem.src instanceof Object)) {loadItem.src = basePath + loadItem.src;}\n\n\t\tvar loader = s._registerSound(loadItem);\n\t\tif(!loader) {return false;}\n\n\t\tif (!s._preloadHash[loadItem.src]) { s._preloadHash[loadItem.src] = [];}\n\t\ts._preloadHash[loadItem.src].push(loadItem);\n\t\tif (s._preloadHash[loadItem.src].length == 1) {\n\t\t\t// OJR note this will disallow reloading a sound if loading fails or the source changes\n\t\t\tloader.on(\"complete\", this._handleLoadComplete, this);\n\t\t\tloader.on(\"error\", this._handleLoadError, this);\n\t\t\ts.activePlugin.preload(loader);\n\t\t} else {\n\t\t\tif (s._preloadHash[loadItem.src][0] == true) {return true;}\n\t\t}\n\n\t\treturn loadItem;\n\t};\n\n\t/**\n\t * Register an array of audio files for loading and future playback in Sound. It is recommended to register all\n\t * sounds that need to be played back in order to properly prepare and preload them. Sound does internal preloading\n\t * when required.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \t\tvar assetPath = \"./myAudioPath/\";\n\t *      var sounds = [\n\t *          {src:\"asset0.ogg\", id:\"example\"},\n\t *          {src:\"asset1.ogg\", id:\"1\", data:6},\n\t *          {src:\"asset2.mp3\", id:\"works\"}\n\t *          {src:{mp3:\"path1/asset3.mp3\", ogg:\"path2/asset3NoExtension\"}, id:\"better\"}\n\t *      ];\n\t *      createjs.Sound.alternateExtensions = [\"mp3\"];\t// if the passed extension is not supported, try this extension\n\t *      createjs.Sound.on(\"fileload\", handleLoad); // call handleLoad when each sound loads\n\t *      createjs.Sound.registerSounds(sounds, assetPath);\n\t *\n\t * @method registerSounds\n\t * @param {Array} sounds An array of objects to load. Objects are expected to be in the format needed for\n\t * {{#crossLink \"Sound/registerSound\"}}{{/crossLink}}: <code>{src:srcURI, id:ID, data:Data}</code>\n\t * with \"id\" and \"data\" being optional.\n\t * You can also pass an object with path and manifest properties, where path is a basePath and manifest is an array of objects to load.\n\t * Note id is required if src is an object with extension labeled src properties.\n\t * @param {string} basePath Set a path that will be prepended to each src when loading.  When creating, playing, or removing\n\t * audio that was loaded with a basePath by src, the basePath must be included.\n\t * @return {Object} An array of objects with the modified values that were passed in, which defines each sound.\n\t * Like registerSound, it will return false for any values when the source cannot be parsed or if no plugins can be initialized.\n\t * Also, it will return true for any values when the source is already loaded.\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.registerSounds = function (sounds, basePath) {\n\t\tvar returnValues = [];\n\t\tif (sounds.path) {\n\t\t\tif (!basePath) {\n\t\t\t\tbasePath = sounds.path;\n\t\t\t} else {\n\t\t\t\tbasePath = basePath + sounds.path;\n\t\t\t}\n\t\t\tsounds = sounds.manifest;\n\t\t\t// TODO document this feature\n\t\t}\n\t\tfor (var i = 0, l = sounds.length; i < l; i++) {\n\t\t\treturnValues[i] = createjs.Sound.registerSound(sounds[i].src, sounds[i].id, sounds[i].data, basePath, sounds[i].defaultPlayProps);\n\t\t}\n\t\treturn returnValues;\n\t};\n\n\t/**\n\t * Remove a sound that has been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n\t * {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n\t * <br />Note this will stop playback on active instances playing this sound before deleting them.\n\t * <br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Sound.removeSound(\"myID\");\n\t *      createjs.Sound.removeSound(\"myAudioBasePath/mySound.ogg\");\n\t *      createjs.Sound.removeSound(\"myPath/myOtherSound.mp3\", \"myBasePath/\");\n\t *      createjs.Sound.removeSound({mp3:\"musicNoExtension\", ogg:\"music.ogg\"}, \"myBasePath/\");\n\t *\n\t * @method removeSound\n\t * @param {String | Object} src The src or ID of the audio, or an Object with a \"src\" property, or an Object with multiple extension labeled src properties.\n\t * @param {string} basePath Set a path that will be prepended to each src when removing.\n\t * @return {Boolean} True if sound is successfully removed.\n\t * @static\n\t * @since 0.4.1\n\t */\n\ts.removeSound = function(src, basePath) {\n\t\tif (s.activePlugin == null) {return false;}\n\n\t\tif (src instanceof Object && src.src) {src = src.src;}\n\n\t\tvar details;\n\t\tif (src instanceof Object) {\n\t\t\tdetails = s._parseSrc(src);\n\t\t} else {\n\t\t\tsrc = s._getSrcById(src).src;\n\t\t\tdetails = s._parsePath(src);\n\t\t}\n\t\tif (details == null) {return false;}\n\t\tsrc = details.src;\n\t\tif (basePath != null) {src = basePath + src;}\n\n\t\tfor(var prop in s._idHash){\n\t\t\tif(s._idHash[prop].src == src) {\n\t\t\t\tdelete(s._idHash[prop]);\n\t\t\t}\n\t\t}\n\n\t\t// clear from SoundChannel, which also stops and deletes all instances\n\t\tSoundChannel.removeSrc(src);\n\n\t\tdelete(s._preloadHash[src]);\n\n\t\ts.activePlugin.removeSound(src);\n\n\t\treturn true;\n\t};\n\n\t/**\n\t * Remove an array of audio files that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n\t * {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n\t * <br />Note this will stop playback on active instances playing this audio before deleting them.\n\t * <br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t * \t\tassetPath = \"./myPath/\";\n\t *      var sounds = [\n\t *          {src:\"asset0.ogg\", id:\"example\"},\n\t *          {src:\"asset1.ogg\", id:\"1\", data:6},\n\t *          {src:\"asset2.mp3\", id:\"works\"}\n\t *      ];\n\t *      createjs.Sound.removeSounds(sounds, assetPath);\n\t *\n\t * @method removeSounds\n\t * @param {Array} sounds An array of objects to remove. Objects are expected to be in the format needed for\n\t * {{#crossLink \"Sound/removeSound\"}}{{/crossLink}}: <code>{srcOrID:srcURIorID}</code>.\n\t * You can also pass an object with path and manifest properties, where path is a basePath and manifest is an array of objects to remove.\n\t * @param {string} basePath Set a path that will be prepended to each src when removing.\n\t * @return {Object} An array of Boolean values representing if the sounds with the same array index were\n\t * successfully removed.\n\t * @static\n\t * @since 0.4.1\n\t */\n\ts.removeSounds = function (sounds, basePath) {\n\t\tvar returnValues = [];\n\t\tif (sounds.path) {\n\t\t\tif (!basePath) {\n\t\t\t\tbasePath = sounds.path;\n\t\t\t} else {\n\t\t\t\tbasePath = basePath + sounds.path;\n\t\t\t}\n\t\t\tsounds = sounds.manifest;\n\t\t}\n\t\tfor (var i = 0, l = sounds.length; i < l; i++) {\n\t\t\treturnValues[i] = createjs.Sound.removeSound(sounds[i].src, basePath);\n\t\t}\n\t\treturn returnValues;\n\t};\n\n\t/**\n\t * Remove all sounds that have been registered with {{#crossLink \"Sound/registerSound\"}}{{/crossLink}} or\n\t * {{#crossLink \"Sound/registerSounds\"}}{{/crossLink}}.\n\t * <br />Note this will stop playback on all active sound instances before deleting them.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *     createjs.Sound.removeAllSounds();\n\t *\n\t * @method removeAllSounds\n\t * @static\n\t * @since 0.4.1\n\t */\n\ts.removeAllSounds = function() {\n\t\ts._idHash = {};\n\t\ts._preloadHash = {};\n\t\tSoundChannel.removeAll();\n\t\tif (s.activePlugin) {s.activePlugin.removeAllSounds();}\n\t};\n\n\t/**\n\t * Check if a source has been loaded by internal preloaders. This is necessary to ensure that sounds that are\n\t * not completed preloading will not kick off a new internal preload if they are played.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *     var mySound = \"assetPath/asset0.ogg\";\n\t *     if(createjs.Sound.loadComplete(mySound) {\n\t *         createjs.Sound.play(mySound);\n\t *     }\n\t *\n\t * @method loadComplete\n\t * @param {String} src The src or id that is being loaded.\n\t * @return {Boolean} If the src is already loaded.\n\t * @since 0.4.0\n\t * @static\n\t */\n\ts.loadComplete = function (src) {\n\t\tif (!s.isReady()) { return false; }\n\t\tvar details = s._parsePath(src);\n\t\tif (details) {\n\t\t\tsrc = s._getSrcById(details.src).src;\n\t\t} else {\n\t\t\tsrc = s._getSrcById(src).src;\n\t\t}\n\t\tif(s._preloadHash[src] == undefined) {return false;}\n\t\treturn (s._preloadHash[src][0] == true);  // src only loads once, so if it's true for the first it's true for all\n\t};\n\n\t/**\n\t * Parse the path of a sound. Alternate extensions will be attempted in order if the\n\t * current extension is not supported\n\t * @method _parsePath\n\t * @param {String} value The path to an audio source.\n\t * @return {Object} A formatted object that can be registered with the {{#crossLink \"Sound/activePlugin:property\"}}{{/crossLink}}\n\t * and returned to a preloader like <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\n\t * @private\n\t * @static\n\t */\n\ts._parsePath = function (value) {\n\t\tif (typeof(value) != \"string\") {value = value.toString();}\n\n\t\tvar match = value.match(s.FILE_PATTERN);\n\t\tif (match == null) {return false;}\n\n\t\tvar name = match[4];\n\t\tvar ext = match[5];\n\t\tvar c = s.capabilities;\n\t\tvar i = 0;\n\t\twhile (!c[ext]) {\n\t\t\text = s.alternateExtensions[i++];\n\t\t\tif (i > s.alternateExtensions.length) { return null;}\t// no extensions are supported\n\t\t}\n\t\tvalue = value.replace(\".\"+match[5], \".\"+ext);\n\n\t\tvar ret = {name:name, src:value, extension:ext};\n\t\treturn ret;\n\t};\n\n\t/**\n\t * Parse the path of a sound based on properties of src matching with supported extensions.\n\t * Returns false if none of the properties are supported\n\t * @method _parseSrc\n\t * @param {Object} value The paths to an audio source, indexed by extension type.\n\t * @return {Object} A formatted object that can be registered with the {{#crossLink \"Sound/activePlugin:property\"}}{{/crossLink}}\n\t * and returned to a preloader like <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>.\n\t * @private\n\t * @static\n\t */\n\ts._parseSrc = function (value) {\n\t\tvar ret = {name:undefined, src:undefined, extension:undefined};\n\t\tvar c = s.capabilities;\n\n\t\tfor (var prop in value) {\n\t\t  if(value.hasOwnProperty(prop) && c[prop]) {\n\t\t\t\tret.src = value[prop];\n\t\t\t\tret.extension = prop;\n\t\t\t\tbreak;\n\t\t  }\n\t\t}\n\t\tif (!ret.src) {return false;}\t// no matches\n\n\t\tvar i = ret.src.lastIndexOf(\"/\");\n\t\tif (i != -1) {\n\t\t\tret.name = ret.src.slice(i+1);\n\t\t} else {\n\t\t\tret.name = ret.src;\n\t\t}\n\n\t\treturn ret;\n\t};\n\n\t/* ---------------\n\t Static API.\n\t --------------- */\n\t/**\n\t * Play a sound and get a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to control. If the sound fails to\n\t * play, an AbstractSoundInstance will still be returned, and have a playState of {{#crossLink \"Sound/PLAY_FAILED:property\"}}{{/crossLink}}.\n\t * Note that even on sounds with failed playback, you may still be able to call the {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}},\n\t * method, since the failure could be due to lack of available channels. If the src does not have a supported\n\t * extension or if there is no available plugin, a default AbstractSoundInstance will still be returned, which will\n\t * not play any audio, but will not generate errors.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Sound.on(\"fileload\", handleLoad);\n\t *      createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n\t *      function handleLoad(event) {\n\t *      \tcreatejs.Sound.play(\"myID\");\n\t *      \t// store off AbstractSoundInstance for controlling\n\t *      \tvar myInstance = createjs.Sound.play(\"myID\", {interrupt: createjs.Sound.INTERRUPT_ANY, loop:-1});\n\t *      }\n\t *\n\t * NOTE: To create an audio sprite that has not already been registered, both startTime and duration need to be set.\n\t * This is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.\n\t *\n\t * @method play\n\t * @param {String} src The src or ID of the audio.\n\t * @param {Object | PlayPropsConfig} props A PlayPropsConfig instance, or an object that contains the parameters to\n\t * play a sound. See the {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for more info.\n\t * @return {AbstractSoundInstance} A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} that can be controlled\n\t * after it is created.\n\t * @static\n\t */\n\ts.play = function (src, props) {\n\t\tvar playProps = createjs.PlayPropsConfig.create(props);\n\t\tvar instance = s.createInstance(src, playProps.startTime, playProps.duration);\n\t\tvar ok = s._playInstance(instance, playProps);\n\t\tif (!ok) {instance._playFailed();}\n\t\treturn instance;\n\t};\n\n\t/**\n\t * Creates a {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} using the passed in src. If the src does not have a\n\t * supported extension or if there is no available plugin, a default AbstractSoundInstance will be returned that can be\n\t * called safely but does nothing.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var myInstance = null;\n\t *      createjs.Sound.on(\"fileload\", handleLoad);\n\t *      createjs.Sound.registerSound(\"myAudioPath/mySound.mp3\", \"myID\", 3);\n\t *      function handleLoad(event) {\n\t *      \tmyInstance = createjs.Sound.createInstance(\"myID\");\n\t *      \t// alternately we could call the following\n\t *      \tmyInstance = createjs.Sound.createInstance(\"myAudioPath/mySound.mp3\");\n\t *      }\n\t *\n\t * NOTE to create an audio sprite that has not already been registered, both startTime and duration need to be set.\n\t * This is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.\n\t *\n\t * @method createInstance\n\t * @param {String} src The src or ID of the audio.\n\t * @param {Number} [startTime=null] To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.\n\t * @param {Number} [duration=null] To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.\n\t * @return {AbstractSoundInstance} A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} that can be controlled after it is created.\n\t * Unsupported extensions will return the default AbstractSoundInstance.\n\t * @since 0.4.0\n\t * @static\n\t */\n\ts.createInstance = function (src, startTime, duration) {\n\t\tif (!s.initializeDefaultPlugins()) { return new createjs.DefaultSoundInstance(src, startTime, duration); }\n\n\t\tvar defaultPlayProps = s._defaultPlayPropsHash[src];\t// for audio sprites, which create and store defaults by id\n\t\tsrc = s._getSrcById(src);\n\n\t\tvar details = s._parsePath(src.src);\n\n\t\tvar instance = null;\n\t\tif (details != null && details.src != null) {\n\t\t\tSoundChannel.create(details.src);\n\t\t\tif (startTime == null) { startTime = src.startTime; }\n\t\t\tinstance = s.activePlugin.create(details.src, startTime, duration || src.duration);\n\n\t\t\tdefaultPlayProps = defaultPlayProps || s._defaultPlayPropsHash[details.src];\n\t\t\tif (defaultPlayProps) {\n\t\t\t\tinstance.applyPlayProps(defaultPlayProps);\n\t\t\t}\n\t\t} else {\n\t\t\tinstance = new createjs.DefaultSoundInstance(src, startTime, duration);\n\t\t}\n\n\t\tinstance.uniqueId = s._lastID++;\n\n\t\treturn instance;\n\t};\n\n\t/**\n\t * Stop all audio (global stop). Stopped audio is reset, and not paused. To play audio that has been stopped,\n\t * call AbstractSoundInstance {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *     createjs.Sound.stop();\n\t *\n\t * @method stop\n\t * @static\n\t */\n\ts.stop = function () {\n\t\tvar instances = this._instances;\n\t\tfor (var i = instances.length; i--; ) {\n\t\t\tinstances[i].stop();  // NOTE stop removes instance from this._instances\n\t\t}\n\t};\n\n\t/**\n\t * Set the default playback properties for all new SoundInstances of the passed in src or ID.\n\t * See {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for available properties.\n\t *\n\t * @method setDefaultPlayProps\n\t * @param {String} src The src or ID used to register the audio.\n\t * @param {Object | PlayPropsConfig} playProps The playback properties you would like to set.\n\t * @since 0.6.1\n\t */\n\ts.setDefaultPlayProps = function(src, playProps) {\n\t\tsrc = s._getSrcById(src);\n\t\ts._defaultPlayPropsHash[s._parsePath(src.src).src] = createjs.PlayPropsConfig.create(playProps);\n\t};\n\n\t/**\n\t * Get the default playback properties for the passed in src or ID.  These properties are applied to all\n\t * new SoundInstances.  Returns null if default does not exist.\n\t *\n\t * @method getDefaultPlayProps\n\t * @param {String} src The src or ID used to register the audio.\n\t * @returns {PlayPropsConfig} returns an existing PlayPropsConfig or null if one does not exist\n\t * @since 0.6.1\n\t */\n\ts.getDefaultPlayProps = function(src) {\n\t\tsrc = s._getSrcById(src);\n\t\treturn s._defaultPlayPropsHash[s._parsePath(src.src).src];\n\t};\n\n\n\t/* ---------------\n\t Internal methods\n\t --------------- */\n\t/**\n\t * Play an instance. This is called by the static API, as well as from plugins. This allows the core class to\n\t * control delays.\n\t * @method _playInstance\n\t * @param {AbstractSoundInstance} instance The {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to start playing.\n\t * @param {PlayPropsConfig} playProps A PlayPropsConfig object.\n\t * @return {Boolean} If the sound can start playing. Sounds that fail immediately will return false. Sounds that\n\t * have a delay will return true, but may still fail to play.\n\t * @private\n\t * @static\n\t */\n\ts._playInstance = function (instance, playProps) {\n\t\tvar defaultPlayProps = s._defaultPlayPropsHash[instance.src] || {};\n\t\tif (playProps.interrupt == null) {playProps.interrupt = defaultPlayProps.interrupt || s.defaultInterruptBehavior};\n\t\tif (playProps.delay == null) {playProps.delay = defaultPlayProps.delay || 0;}\n\t\tif (playProps.offset == null) {playProps.offset = instance.position;}\n\t\tif (playProps.loop == null) {playProps.loop = instance.loop;}\n\t\tif (playProps.volume == null) {playProps.volume = instance.volume;}\n\t\tif (playProps.pan == null) {playProps.pan = instance.pan;}\n\n\t\tif (playProps.delay == 0) {\n\t\t\tvar ok = s._beginPlaying(instance, playProps);\n\t\t\tif (!ok) {return false;}\n\t\t} else {\n\t\t\t//Note that we can't pass arguments to proxy OR setTimeout (IE only), so just wrap the function call.\n\t\t\t// OJR WebAudio may want to handle this differently, so it might make sense to move this functionality into the plugins in the future\n\t\t\tvar delayTimeoutId = setTimeout(function () {\n\t\t\t\ts._beginPlaying(instance, playProps);\n\t\t\t}, playProps.delay);\n\t\t\tinstance.delayTimeoutId = delayTimeoutId;\n\t\t}\n\n\t\tthis._instances.push(instance);\n\n\t\treturn true;\n\t};\n\n\t/**\n\t * Begin playback. This is called immediately or after delay by {{#crossLink \"Sound/playInstance\"}}{{/crossLink}}.\n\t * @method _beginPlaying\n\t * @param {AbstractSoundInstance} instance A {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} to begin playback.\n\t * @param {PlayPropsConfig} playProps A PlayPropsConfig object.\n\t * @return {Boolean} If the sound can start playing. If there are no available channels, or the instance fails to\n\t * start, this will return false.\n\t * @private\n\t * @static\n\t */\n\ts._beginPlaying = function (instance, playProps) {\n\t\tif (!SoundChannel.add(instance, playProps.interrupt)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar result = instance._beginPlaying(playProps);\n\t\tif (!result) {\n\t\t\tvar index = createjs.indexOf(this._instances, instance);\n\t\t\tif (index > -1) {this._instances.splice(index, 1);}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t};\n\n\t/**\n\t * Get the source of a sound via the ID passed in with a register call. If no ID is found the value is returned\n\t * instead.\n\t * @method _getSrcById\n\t * @param {String} value The ID the sound was registered with.\n\t * @return {String} The source of the sound if it has been registered with this ID or the value that was passed in.\n\t * @private\n\t * @static\n\t */\n\ts._getSrcById = function (value) {\n\t\treturn s._idHash[value] || {src: value};\n\t};\n\n\t/**\n\t * A sound has completed playback, been interrupted, failed, or been stopped. This method removes the instance from\n\t * Sound management. It will be added again, if the sound re-plays. Note that this method is called from the\n\t * instances themselves.\n\t * @method _playFinished\n\t * @param {AbstractSoundInstance} instance The instance that finished playback.\n\t * @private\n\t * @static\n\t */\n\ts._playFinished = function (instance) {\n\t\tSoundChannel.remove(instance);\n\t\tvar index = createjs.indexOf(this._instances, instance);\n\t\tif (index > -1) {this._instances.splice(index, 1);}\t// OJR this will always be > -1, there is no way for an instance to exist without being added to this._instances\n\t};\n\n\tcreatejs.Sound = Sound;\n\n\t/**\n\t * An internal class that manages the number of active {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} instances for\n\t * each sound type. This method is only used internally by the {{#crossLink \"Sound\"}}{{/crossLink}} class.\n\t *\n\t * The number of sounds is artificially limited by Sound in order to prevent over-saturation of a\n\t * single sound, as well as to stay within hardware limitations, although the latter may disappear with better\n\t * browser support.\n\t *\n\t * When a sound is played, this class ensures that there is an available instance, or interrupts an appropriate\n\t * sound that is already playing.\n\t * #class SoundChannel\n\t * @param {String} src The source of the instances\n\t * @param {Number} [max=1] The number of instances allowed\n\t * @constructor\n\t * @protected\n\t */\n\tfunction SoundChannel(src, max) {\n\t\tthis.init(src, max);\n\t}\n\n\t/* ------------\n\t Static API\n\t ------------ */\n\t/**\n\t * A hash of channel instances indexed by source.\n\t * #property channels\n\t * @type {Object}\n\t * @static\n\t */\n\tSoundChannel.channels = {};\n\n\t/**\n\t * Create a sound channel. Note that if the sound channel already exists, this will fail.\n\t * #method create\n\t * @param {String} src The source for the channel\n\t * @param {Number} max The maximum amount this channel holds. The default is {{#crossLink \"SoundChannel.maxDefault\"}}{{/crossLink}}.\n\t * @return {Boolean} If the channels were created.\n\t * @static\n\t */\n\tSoundChannel.create = function (src, max) {\n\t\tvar channel = SoundChannel.get(src);\n\t\tif (channel == null) {\n\t\t\tSoundChannel.channels[src] = new SoundChannel(src, max);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\t/**\n\t * Delete a sound channel, stop and delete all related instances. Note that if the sound channel does not exist, this will fail.\n\t * #method remove\n\t * @param {String} src The source for the channel\n\t * @return {Boolean} If the channels were deleted.\n\t * @static\n\t */\n\tSoundChannel.removeSrc = function (src) {\n\t\tvar channel = SoundChannel.get(src);\n\t\tif (channel == null) {return false;}\n\t\tchannel._removeAll();\t// this stops and removes all active instances\n\t\tdelete(SoundChannel.channels[src]);\n\t\treturn true;\n\t};\n\t/**\n\t * Delete all sound channels, stop and delete all related instances.\n\t * #method removeAll\n\t * @static\n\t */\n\tSoundChannel.removeAll = function () {\n\t\tfor(var channel in SoundChannel.channels) {\n\t\t\tSoundChannel.channels[channel]._removeAll();\t// this stops and removes all active instances\n\t\t}\n\t\tSoundChannel.channels = {};\n\t};\n\t/**\n\t * Add an instance to a sound channel.\n\t * #method add\n\t * @param {AbstractSoundInstance} instance The instance to add to the channel\n\t * @param {String} interrupt The interrupt value to use. Please see the {{#crossLink \"Sound/play\"}}{{/crossLink}}\n\t * for details on interrupt modes.\n\t * @return {Boolean} The success of the method call. If the channel is full, it will return false.\n\t * @static\n\t */\n\tSoundChannel.add = function (instance, interrupt) {\n\t\tvar channel = SoundChannel.get(instance.src);\n\t\tif (channel == null) {return false;}\n\t\treturn channel._add(instance, interrupt);\n\t};\n\t/**\n\t * Remove an instance from the channel.\n\t * #method remove\n\t * @param {AbstractSoundInstance} instance The instance to remove from the channel\n\t * @return The success of the method call. If there is no channel, it will return false.\n\t * @static\n\t */\n\tSoundChannel.remove = function (instance) {\n\t\tvar channel = SoundChannel.get(instance.src);\n\t\tif (channel == null) {return false;}\n\t\tchannel._remove(instance);\n\t\treturn true;\n\t};\n\t/**\n\t * Get the maximum number of sounds you can have in a channel.\n\t * #method maxPerChannel\n\t * @return {Number} The maximum number of sounds you can have in a channel.\n\t */\n\tSoundChannel.maxPerChannel = function () {\n\t\treturn p.maxDefault;\n\t};\n\t/**\n\t * Get a channel instance by its src.\n\t * #method get\n\t * @param {String} src The src to use to look up the channel\n\t * @static\n\t */\n\tSoundChannel.get = function (src) {\n\t\treturn SoundChannel.channels[src];\n\t};\n\n\tvar p = SoundChannel.prototype;\n\tp.constructor = SoundChannel;\n\n\t/**\n\t * The source of the channel.\n\t * #property src\n\t * @type {String}\n\t */\n\tp.src = null;\n\n\t/**\n\t * The maximum number of instances in this channel.  -1 indicates no limit\n\t * #property max\n\t * @type {Number}\n\t */\n\tp.max = null;\n\n\t/**\n\t * The default value to set for max, if it isn't passed in.  Also used if -1 is passed.\n\t * #property maxDefault\n\t * @type {Number}\n\t * @default 100\n\t * @since 0.4.0\n\t */\n\tp.maxDefault = 100;\n\n\t/**\n\t * The current number of active instances.\n\t * #property length\n\t * @type {Number}\n\t */\n\tp.length = 0;\n\n\t/**\n\t * Initialize the channel.\n\t * #method init\n\t * @param {String} src The source of the channel\n\t * @param {Number} max The maximum number of instances in the channel\n\t * @protected\n\t */\n\tp.init = function (src, max) {\n\t\tthis.src = src;\n\t\tthis.max = max || this.maxDefault;\n\t\tif (this.max == -1) {this.max = this.maxDefault;}\n\t\tthis._instances = [];\n\t};\n\n\t/**\n\t * Get an instance by index.\n\t * #method get\n\t * @param {Number} index The index to return.\n\t * @return {AbstractSoundInstance} The AbstractSoundInstance at a specific instance.\n\t */\n\tp._get = function (index) {\n\t\treturn this._instances[index];\n\t};\n\n\t/**\n\t * Add a new instance to the channel.\n\t * #method add\n\t * @param {AbstractSoundInstance} instance The instance to add.\n\t * @return {Boolean} The success of the method call. If the channel is full, it will return false.\n\t */\n\tp._add = function (instance, interrupt) {\n\t\tif (!this._getSlot(interrupt, instance)) {return false;}\n\t\tthis._instances.push(instance);\n\t\tthis.length++;\n\t\treturn true;\n\t};\n\n\t/**\n\t * Remove an instance from the channel, either when it has finished playing, or it has been interrupted.\n\t * #method remove\n\t * @param {AbstractSoundInstance} instance The instance to remove\n\t * @return {Boolean} The success of the remove call. If the instance is not found in this channel, it will\n\t * return false.\n\t */\n\tp._remove = function (instance) {\n\t\tvar index = createjs.indexOf(this._instances, instance);\n\t\tif (index == -1) {return false;}\n\t\tthis._instances.splice(index, 1);\n\t\tthis.length--;\n\t\treturn true;\n\t};\n\n\t/**\n\t * Stop playback and remove all instances from the channel.  Usually in response to a delete call.\n\t * #method removeAll\n\t */\n\tp._removeAll = function () {\n\t\t// Note that stop() removes the item from the list\n\t\tfor (var i=this.length-1; i>=0; i--) {\n\t\t\tthis._instances[i].stop();\n\t\t}\n\t};\n\n\t/**\n\t * Get an available slot depending on interrupt value and if slots are available.\n\t * #method getSlot\n\t * @param {String} interrupt The interrupt value to use.\n\t * @param {AbstractSoundInstance} instance The sound instance that will go in the channel if successful.\n\t * @return {Boolean} Determines if there is an available slot. Depending on the interrupt mode, if there are no slots,\n\t * an existing AbstractSoundInstance may be interrupted. If there are no slots, this method returns false.\n\t */\n\tp._getSlot = function (interrupt, instance) {\n\t\tvar target, replacement;\n\n\t\tif (interrupt != Sound.INTERRUPT_NONE) {\n\t\t\t// First replacement candidate\n\t\t\treplacement = this._get(0);\n\t\t\tif (replacement == null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0, l = this.max; i < l; i++) {\n\t\t\ttarget = this._get(i);\n\n\t\t\t// Available Space\n\t\t\tif (target == null) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Audio is complete or not playing\n\t\t\tif (target.playState == Sound.PLAY_FINISHED ||\n\t\t\t\ttarget.playState == Sound.PLAY_INTERRUPTED ||\n\t\t\t\ttarget.playState == Sound.PLAY_FAILED) {\n\t\t\t\treplacement = target;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (interrupt == Sound.INTERRUPT_NONE) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Audio is a better candidate than the current target, according to playhead\n\t\t\tif ((interrupt == Sound.INTERRUPT_EARLY && target.position < replacement.position) ||\n\t\t\t\t(interrupt == Sound.INTERRUPT_LATE && target.position > replacement.position)) {\n\t\t\t\t\treplacement = target;\n\t\t\t}\n\t\t}\n\n\t\tif (replacement != null) {\n\t\t\treplacement._interrupt();\n\t\t\tthis._remove(replacement);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[Sound SoundChannel]\";\n\t};\n\t// do not add SoundChannel to namespace\n\n}());\n\n//##############################################################################\n// AbstractSoundInstance.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n/**\n * A AbstractSoundInstance is created when any calls to the Sound API method {{#crossLink \"Sound/play\"}}{{/crossLink}} or\n * {{#crossLink \"Sound/createInstance\"}}{{/crossLink}} are made. The AbstractSoundInstance is returned by the active plugin\n * for control by the user.\n *\n * <h4>Example</h4>\n *\n *      var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n *\n * A number of additional parameters provide a quick way to determine how a sound is played. Please see the Sound\n * API method {{#crossLink \"Sound/play\"}}{{/crossLink}} for a list of arguments.\n *\n * Once a AbstractSoundInstance is created, a reference can be stored that can be used to control the audio directly through\n * the AbstractSoundInstance. If the reference is not stored, the AbstractSoundInstance will play out its audio (and any loops), and\n * is then de-referenced from the {{#crossLink \"Sound\"}}{{/crossLink}} class so that it can be cleaned up. If audio\n * playback has completed, a simple call to the {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}} instance method\n * will rebuild the references the Sound class need to control it.\n *\n *      var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\", {loop:2});\n *      myInstance.on(\"loop\", handleLoop);\n *      function handleLoop(event) {\n *          myInstance.volume = myInstance.volume * 0.5;\n *      }\n *\n * Events are dispatched from the instance to notify when the sound has completed, looped, or when playback fails\n *\n *      var myInstance = createjs.Sound.play(\"myAssetPath/mySrcFile.mp3\");\n *      myInstance.on(\"complete\", handleComplete);\n *      myInstance.on(\"loop\", handleLoop);\n *      myInstance.on(\"failed\", handleFailed);\n *\n *\n * @class AbstractSoundInstance\n * @param {String} src The path to and file name of the sound.\n * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n * @param {Object} playbackResource Any resource needed by plugin to support audio playback.\n * @extends EventDispatcher\n * @constructor\n */\n\n(function () {\n\t\"use strict\";\n\n\n// Constructor:\n\tvar AbstractSoundInstance = function (src, startTime, duration, playbackResource) {\n\t\tthis.EventDispatcher_constructor();\n\n\n\t// public properties:\n\t\t/**\n\t\t * The source of the sound.\n\t\t * @property src\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.src = src;\n\n\t\t/**\n\t\t * The unique ID of the instance. This is set by {{#crossLink \"Sound\"}}{{/crossLink}}.\n\t\t * @property uniqueId\n\t\t * @type {String} | Number\n\t\t * @default -1\n\t\t */\n\t\tthis.uniqueId = -1;\n\n\t\t/**\n\t\t * The play state of the sound. Play states are defined as constants on {{#crossLink \"Sound\"}}{{/crossLink}}.\n\t\t * @property playState\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.playState = null;\n\n\t\t/**\n\t\t * A Timeout created by {{#crossLink \"Sound\"}}{{/crossLink}} when this AbstractSoundInstance is played with a delay.\n\t\t * This allows AbstractSoundInstance to remove the delay if stop, pause, or cleanup are called before playback begins.\n\t\t * @property delayTimeoutId\n\t\t * @type {timeoutVariable}\n\t\t * @default null\n\t\t * @protected\n\t\t * @since 0.4.0\n\t\t */\n\t\tthis.delayTimeoutId = null;\n\t\t// TODO consider moving delay into AbstractSoundInstance so it can be handled by plugins\n\n\n\t// private properties\n\t// Getter / Setter Properties\n\t\t// OJR TODO find original reason that we didn't use defined functions.  I think it was performance related\n\t\t/**\n\t\t * The volume of the sound, between 0 and 1.\n\t\t *\n\t\t * The actual output volume of a sound can be calculated using:\n\t\t * <code>myInstance.volume * createjs.Sound._getVolume();</code>\n\t\t *\n\t\t * @property volume\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis._volume =  1;\n\t\tObject.defineProperty(this, \"volume\", {\n\t\t\tget: this._getVolume,\n\t\t\tset: this._setVolume\n\t\t});\n\n\t\t/**\n\t\t * The pan of the sound, between -1 (left) and 1 (right). Note that pan is not supported by HTML Audio.\n\t\t *\n\t\t * Note in WebAudioPlugin this only gives us the \"x\" value of what is actually 3D audio\n\t\t * @property pan\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis._pan =  0;\n\t\tObject.defineProperty(this, \"pan\", {\n\t\t\tget: this._getPan,\n\t\t\tset: this._setPan\n\t\t});\n\n\t\t/**\n\t\t * Audio sprite property used to determine the starting offset.\n\t\t * @property startTime\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @since 0.6.1\n\t\t */\n\t\tthis._startTime = Math.max(0, startTime || 0);\n\t\tObject.defineProperty(this, \"startTime\", {\n\t\t\tget: this._getStartTime,\n\t\t\tset: this._setStartTime\n\t\t});\n\n\t\t/**\n\t\t * Sets or gets the length of the audio clip, value is in milliseconds.\n\t\t *\n\t\t * @property duration\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis._duration = Math.max(0, duration || 0);\n\t\tObject.defineProperty(this, \"duration\", {\n\t\t\tget: this._getDuration,\n\t\t\tset: this._setDuration\n\t\t});\n\n\t\t/**\n\t\t * Object that holds plugin specific resource need for audio playback.\n\t\t * This is set internally by the plugin.  For example, WebAudioPlugin will set an array buffer,\n\t\t * HTMLAudioPlugin will set a tag, FlashAudioPlugin will set a flash reference.\n\t\t *\n\t\t * @property playbackResource\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis._playbackResource = null;\n\t\tObject.defineProperty(this, \"playbackResource\", {\n\t\t\tget: this._getPlaybackResource,\n\t\t\tset: this._setPlaybackResource\n\t\t});\n\t\tif(playbackResource !== false && playbackResource !== true) { this._setPlaybackResource(playbackResource); }\n\n\t\t/**\n\t\t * The position of the playhead in milliseconds. This can be set while a sound is playing, paused, or stopped.\n\t\t *\n\t\t * @property position\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis._position = 0;\n\t\tObject.defineProperty(this, \"position\", {\n\t\t\tget: this._getPosition,\n\t\t\tset: this._setPosition\n\t\t});\n\n\t\t/**\n\t\t * The number of play loops remaining. Negative values will loop infinitely.\n\t\t *\n\t\t * @property loop\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @public\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis._loop = 0;\n\t\tObject.defineProperty(this, \"loop\", {\n\t\t\tget: this._getLoop,\n\t\t\tset: this._setLoop\n\t\t});\n\n\t\t/**\n\t\t * Mutes or unmutes the current audio instance.\n\t\t *\n\t\t * @property muted\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis._muted = false;\n\t\tObject.defineProperty(this, \"muted\", {\n\t\t\tget: this._getMuted,\n\t\t\tset: this._setMuted\n\t\t});\n\n\t\t/**\n\t\t * Pauses or resumes the current audio instance.\n\t\t *\n\t\t * @property paused\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis._paused = false;\n\t\tObject.defineProperty(this, \"paused\", {\n\t\t\tget: this._getPaused,\n\t\t\tset: this._setPaused\n\t\t});\n\n\n\t// Events\n\t\t/**\n\t\t * The event that is fired when playback has started successfully.\n\t\t * @event succeeded\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @since 0.4.0\n\t\t */\n\n\t\t/**\n\t\t * The event that is fired when playback is interrupted. This happens when another sound with the same\n\t\t * src property is played using an interrupt value that causes this instance to stop playing.\n\t\t * @event interrupted\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @since 0.4.0\n\t\t */\n\n\t\t/**\n\t\t * The event that is fired when playback has failed. This happens when there are too many channels with the same\n\t\t * src property already playing (and the interrupt value doesn't cause an interrupt of another instance), or\n\t\t * the sound could not be played, perhaps due to a 404 error.\n\t\t * @event failed\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @since 0.4.0\n\t\t */\n\n\t\t/**\n\t\t * The event that is fired when a sound has completed playing but has loops remaining.\n\t\t * @event loop\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @since 0.4.0\n\t\t */\n\n\t\t/**\n\t\t * The event that is fired when playback completes. This means that the sound has finished playing in its\n\t\t * entirety, including its loop iterations.\n\t\t * @event complete\n\t\t * @param {Object} target The object that dispatched the event.\n\t\t * @param {String} type The event type.\n\t\t * @since 0.4.0\n\t\t */\n\t};\n\n\tvar p = createjs.extend(AbstractSoundInstance, createjs.EventDispatcher);\n\n// Public Methods:\n\t/**\n\t * Play an instance. This method is intended to be called on SoundInstances that already exist (created\n\t * with the Sound API {{#crossLink \"Sound/createInstance\"}}{{/crossLink}} or {{#crossLink \"Sound/play\"}}{{/crossLink}}).\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var myInstance = createjs.Sound.createInstance(mySrc);\n\t *      myInstance.play({interrupt:createjs.Sound.INTERRUPT_ANY, loop:2, pan:0.5});\n\t *\n\t * Note that if this sound is already playing, this call will still set the passed in parameters.\n\n\t * <b>Parameters Deprecated</b><br />\n\t * The parameters for this method are deprecated in favor of a single parameter that is an Object or {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}}.\n\t *\n\t * @method play\n\t * @param {Object | PlayPropsConfig} props A PlayPropsConfig instance, or an object that contains the parameters to\n\t * play a sound. See the {{#crossLink \"PlayPropsConfig\"}}{{/crossLink}} for more info.\n\t * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n\t */\n\tp.play = function (props) {\n\t\tvar playProps = createjs.PlayPropsConfig.create(props);\n\t\tif (this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n\t\t\tthis.applyPlayProps(playProps);\n\t\t\tif (this._paused) {\tthis._setPaused(false); }\n\t\t\treturn;\n\t\t}\n\t\tthis._cleanUp();\n\t\tcreatejs.Sound._playInstance(this, playProps);\t// make this an event dispatch??\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stop playback of the instance. Stopped sounds will reset their position to 0, and calls to {{#crossLink \"AbstractSoundInstance/resume\"}}{{/crossLink}}\n\t * will fail. To start playback again, call {{#crossLink \"AbstractSoundInstance/play\"}}{{/crossLink}}.\n     *\n     * If you don't want to lose your position use yourSoundInstance.paused = true instead. {{#crossLink \"AbstractSoundInstance/paused\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *     myInstance.stop();\n\t *\n\t * @method stop\n\t * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n\t */\n\tp.stop = function () {\n\t\tthis._position = 0;\n\t\tthis._paused = false;\n\t\tthis._handleStop();\n\t\tthis._cleanUp();\n\t\tthis.playState = createjs.Sound.PLAY_FINISHED;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Remove all external references and resources from AbstractSoundInstance.  Note this is irreversible and AbstractSoundInstance will no longer work\n\t * @method destroy\n\t * @since 0.6.0\n\t */\n\tp.destroy = function() {\n\t\tthis._cleanUp();\n\t\tthis.src = null;\n\t\tthis.playbackResource = null;\n\n\t\tthis.removeAllEventListeners();\n\t};\n\n\t/**\n\t * Takes an PlayPropsConfig or Object with the same properties and sets them on this instance.\n\t * @method applyPlayProps\n\t * @param {PlayPropsConfig | Object} playProps A PlayPropsConfig or object containing the same properties.\n\t * @since 0.6.1\n\t * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n\t */\n\tp.applyPlayProps = function(playProps) {\n\t\tif (playProps.offset != null) { this._setPosition(playProps.offset) }\n\t\tif (playProps.loop != null) { this._setLoop(playProps.loop); }\n\t\tif (playProps.volume != null) { this._setVolume(playProps.volume); }\n\t\tif (playProps.pan != null) { this._setPan(playProps.pan); }\n\t\tif (playProps.startTime != null) {\n\t\t\tthis._setStartTime(playProps.startTime);\n\t\t\tthis._setDuration(playProps.duration);\n\t\t}\n\t\treturn this;\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[AbstractSoundInstance]\";\n\t};\n\n// get/set methods that allow support for IE8\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/paused:property\"}}{{/crossLink}} directly as a property.\n\t * @method _getPaused\n\t * @protected\n\t * @return {boolean} If the instance is currently paused\n\t * @since 0.6.0\n\t */\n\tp._getPaused = function() {\n\t\treturn this._paused;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/paused:property\"}}{{/crossLink}} directly as a property\n\t * @method _setPaused\n\t * @protected\n\t * @param {boolean} value\n\t * @since 0.6.0\n\t * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n\t */\n\tp._setPaused = function (value) {\n\t\tif ((value !== true && value !== false) || this._paused == value) {return;}\n\t\tif (value == true && this.playState != createjs.Sound.PLAY_SUCCEEDED) {return;}\n\t\tthis._paused = value;\n\t\tif(value) {\n\t\t\tthis._pause();\n\t\t} else {\n\t\t\tthis._resume();\n\t\t}\n\t\tclearTimeout(this.delayTimeoutId);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}} directly as a property\n\t * @method _setVolume\n\t * @protected\n\t * @param {Number} value The volume to set, between 0 and 1.\n\t * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n\t */\n\tp._setVolume = function (value) {\n\t\tif (value == this._volume) { return this; }\n\t\tthis._volume = Math.max(0, Math.min(1, value));\n\t\tif (!this._muted) {\n\t\t\tthis._updateVolume();\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/volume:property\"}}{{/crossLink}} directly as a property\n\t * @method _getVolume\n\t * @protected\n\t * @return {Number} The current volume of the sound instance.\n\t */\n\tp._getVolume = function () {\n\t\treturn this._volume;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} directly as a property\n\t * @method _setMuted\n\t * @protected\n\t * @param {Boolean} value If the sound should be muted.\n\t * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.\n\t * @since 0.6.0\n\t */\n\tp._setMuted = function (value) {\n\t\tif (value !== true && value !== false) {return;}\n\t\tthis._muted = value;\n\t\tthis._updateVolume();\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/muted:property\"}}{{/crossLink}} directly as a property\n\t * @method _getMuted\n\t * @protected\n\t * @return {Boolean} If the sound is muted.\n\t * @since 0.6.0\n\t */\n\tp._getMuted = function () {\n\t\treturn this._muted;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/pan:property\"}}{{/crossLink}} directly as a property\n\t * @method _setPan\n\t * @protected\n\t * @param {Number} value The pan value, between -1 (left) and 1 (right).\n\t * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n\t */\n\tp._setPan = function (value) {\n\t\tif(value == this._pan) { return this; }\n\t\tthis._pan = Math.max(-1, Math.min(1, value));\n\t\tthis._updatePan();\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/pan:property\"}}{{/crossLink}} directly as a property\n\t * @method _getPan\n\t * @protected\n\t * @return {Number} The value of the pan, between -1 (left) and 1 (right).\n\t */\n\tp._getPan = function () {\n\t\treturn this._pan;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/position:property\"}}{{/crossLink}} directly as a property\n\t * @method _getPosition\n\t * @protected\n\t * @return {Number} The position of the playhead in the sound, in milliseconds.\n\t */\n\tp._getPosition = function () {\n\t\tif (!this._paused && this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n\t\t\tthis._position = this._calculateCurrentPosition();\n\t\t}\n\t\treturn this._position;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/position:property\"}}{{/crossLink}} directly as a property\n\t * @method _setPosition\n\t * @protected\n\t * @param {Number} value The position to place the playhead, in milliseconds.\n\t * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n\t */\n\tp._setPosition = function (value) {\n\t\tthis._position = Math.max(0, value);\n\t\tif (this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n\t\t\tthis._updatePosition();\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/startTime:property\"}}{{/crossLink}} directly as a property\n\t * @method _getStartTime\n\t * @protected\n\t * @return {Number} The startTime of the sound instance in milliseconds.\n\t */\n\tp._getStartTime = function () {\n\t\treturn this._startTime;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/startTime:property\"}}{{/crossLink}} directly as a property\n\t * @method _setStartTime\n\t * @protected\n\t * @param {number} value The new startTime time in milli seconds.\n\t * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n\t */\n\tp._setStartTime = function (value) {\n\t\tif (value == this._startTime) { return this; }\n\t\tthis._startTime = Math.max(0, value || 0);\n\t\tthis._updateStartTime();\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/duration:property\"}}{{/crossLink}} directly as a property\n\t * @method _getDuration\n\t * @protected\n\t * @return {Number} The duration of the sound instance in milliseconds.\n\t */\n\tp._getDuration = function () {\n\t\treturn this._duration;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/duration:property\"}}{{/crossLink}} directly as a property\n\t * @method _setDuration\n\t * @protected\n\t * @param {number} value The new duration time in milli seconds.\n\t * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n\t * @since 0.6.0\n\t */\n\tp._setDuration = function (value) {\n\t\tif (value == this._duration) { return this; }\n\t\tthis._duration = Math.max(0, value || 0);\n\t\tthis._updateDuration();\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/playbackResource:property\"}}{{/crossLink}} directly as a property\n\t * @method _setPlaybackResource\n\t * @protected\n\t * @param {Object} value The new playback resource.\n\t * @return {AbstractSoundInstance} Returns reference to itself for chaining calls\n\t * @since 0.6.0\n\t **/\n\tp._setPlaybackResource = function (value) {\n\t\tthis._playbackResource = value;\n\t\tif (this._duration == 0 && this._playbackResource) { this._setDurationFromSource(); }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/playbackResource:property\"}}{{/crossLink}} directly as a property\n\t * @method _getPlaybackResource\n\t * @protected\n\t * @param {Object} value The new playback resource.\n\t * @return {Object} playback resource used for playing audio\n\t * @since 0.6.0\n\t **/\n\tp._getPlaybackResource = function () {\n\t\treturn this._playbackResource;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/loop:property\"}}{{/crossLink}} directly as a property\n\t * @method _getLoop\n\t * @protected\n\t * @return {number}\n\t * @since 0.6.0\n\t **/\n\tp._getLoop = function () {\n\t\treturn this._loop;\n\t};\n\n\t/**\n\t * Please use {{#crossLink \"AbstractSoundInstance/loop:property\"}}{{/crossLink}} directly as a property\n\t * @method _setLoop\n\t * @protected\n\t * @param {number} value The number of times to loop after play.\n\t * @since 0.6.0\n\t */\n\tp._setLoop = function (value) {\n\t\tif(this._playbackResource != null) {\n\t\t\t// remove looping\n\t\t\tif (this._loop != 0 && value == 0) {\n\t\t\t\tthis._removeLooping(value);\n\t\t\t}\n\t\t\t// add looping\n\t\t\telse if (this._loop == 0 && value != 0) {\n\t\t\t\tthis._addLooping(value);\n\t\t\t}\n\t\t}\n\t\tthis._loop = value;\n\t};\n\n\n// Private Methods:\n\t/**\n\t * A helper method that dispatches all events for AbstractSoundInstance.\n\t * @method _sendEvent\n\t * @param {String} type The event type\n\t * @protected\n\t */\n\tp._sendEvent = function (type) {\n\t\tvar event = new createjs.Event(type);\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Clean up the instance. Remove references and clean up any additional properties such as timers.\n\t * @method _cleanUp\n\t * @protected\n\t */\n\tp._cleanUp = function () {\n\t\tclearTimeout(this.delayTimeoutId); // clear timeout that plays delayed sound\n\t\tthis._handleCleanUp();\n\t\tthis._paused = false;\n\n\t\tcreatejs.Sound._playFinished(this);\t// TODO change to an event\n\t};\n\n\t/**\n\t * The sound has been interrupted.\n\t * @method _interrupt\n\t * @protected\n\t */\n\tp._interrupt = function () {\n\t\tthis._cleanUp();\n\t\tthis.playState = createjs.Sound.PLAY_INTERRUPTED;\n\t\tthis._sendEvent(\"interrupted\");\n\t};\n\n\t/**\n\t * Called by the Sound class when the audio is ready to play (delay has completed). Starts sound playing if the\n\t * src is loaded, otherwise playback will fail.\n\t * @method _beginPlaying\n\t * @param {PlayPropsConfig} playProps A PlayPropsConfig object.\n\t * @return {Boolean} If playback succeeded.\n\t * @protected\n\t */\n\t// OJR FlashAudioSoundInstance overwrites\n\tp._beginPlaying = function (playProps) {\n\t\tthis._setPosition(playProps.offset);\n\t\tthis._setLoop(playProps.loop);\n\t\tthis._setVolume(playProps.volume);\n\t\tthis._setPan(playProps.pan);\n\t\tif (playProps.startTime != null) {\n\t\t\tthis._setStartTime(playProps.startTime);\n\t\t\tthis._setDuration(playProps.duration);\n\t\t}\n\n\t\tif (this._playbackResource != null && this._position < this._duration) {\n\t\t\tthis._paused = false;\n\t\t\tthis._handleSoundReady();\n\t\t\tthis.playState = createjs.Sound.PLAY_SUCCEEDED;\n\t\t\tthis._sendEvent(\"succeeded\");\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthis._playFailed();\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Play has failed, which can happen for a variety of reasons.\n\t * Cleans up instance and dispatches failed event\n\t * @method _playFailed\n\t * @private\n\t */\n\tp._playFailed = function () {\n\t\tthis._cleanUp();\n\t\tthis.playState = createjs.Sound.PLAY_FAILED;\n\t\tthis._sendEvent(\"failed\");\n\t};\n\n\t/**\n\t * Audio has finished playing. Manually loop it if required.\n\t * @method _handleSoundComplete\n\t * @param event\n\t * @protected\n\t */\n\tp._handleSoundComplete = function (event) {\n\t\tthis._position = 0;  // have to set this as it can be set by pause during playback\n\n\t\tif (this._loop != 0) {\n\t\t\tthis._loop--;  // NOTE this introduces a theoretical limit on loops = float max size x 2 - 1\n\t\t\tthis._handleLoop();\n\t\t\tthis._sendEvent(\"loop\");\n\t\t\treturn;\n\t\t}\n\n\t\tthis._cleanUp();\n\t\tthis.playState = createjs.Sound.PLAY_FINISHED;\n\t\tthis._sendEvent(\"complete\");\n\t};\n\n// Plugin specific code\n\t/**\n\t * Handles starting playback when the sound is ready for playing.\n\t * @method _handleSoundReady\n\t * @protected\n \t */\n\tp._handleSoundReady = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function used to update the volume based on the instance volume, master volume, instance mute value,\n\t * and master mute value.\n\t * @method _updateVolume\n\t * @protected\n\t */\n\tp._updateVolume = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function used to update the pan\n\t * @method _updatePan\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._updatePan = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function used to update the startTime of the audio.\n\t * @method _updateStartTime\n\t * @protected\n\t * @since 0.6.1\n\t */\n\tp._updateStartTime = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function used to update the duration of the audio.\n\t * @method _updateDuration\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._updateDuration = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function used to get the duration of the audio from the source we'll be playing.\n\t * @method _updateDuration\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._setDurationFromSource = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function that calculates the current position of the playhead and sets this._position to that value\n\t * @method _calculateCurrentPosition\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._calculateCurrentPosition = function () {\n\t\t// plugin specific code that sets this.position\n\t};\n\n\t/**\n\t * Internal function used to update the position of the playhead.\n\t * @method _updatePosition\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._updatePosition = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function called when looping is removed during playback.\n\t * @method _removeLooping\n\t * @param {number} value The number of times to loop after play.\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._removeLooping = function (value) {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function called when looping is added during playback.\n\t * @method _addLooping\n\t * @param {number} value The number of times to loop after play.\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._addLooping = function (value) {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function called when pausing playback\n\t * @method _pause\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._pause = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function called when resuming playback\n\t * @method _resume\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._resume = function () {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function called when stopping playback\n\t * @method _handleStop\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._handleStop = function() {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function called when AbstractSoundInstance is being cleaned up\n\t * @method _handleCleanUp\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._handleCleanUp = function() {\n\t\t// plugin specific code\n\t};\n\n\t/**\n\t * Internal function called when AbstractSoundInstance has played to end and is looping\n\t * @method _handleLoop\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._handleLoop = function () {\n\t\t// plugin specific code\n\t};\n\n\tcreatejs.AbstractSoundInstance = createjs.promote(AbstractSoundInstance, \"EventDispatcher\");\n\tcreatejs.DefaultSoundInstance = createjs.AbstractSoundInstance;\t// used when no plugin is supported\n}());\n\n//##############################################################################\n// AbstractPlugin.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\n// constructor:\n \t/**\n\t * A default plugin class used as a base for all other plugins.\n\t * @class AbstractPlugin\n\t * @constructor\n\t * @since 0.6.0\n\t */\n\n\tvar AbstractPlugin = function () {\n\t// private properties:\n\t\t/**\n\t\t * The capabilities of the plugin.\n\t\t * method and is used internally.\n\t\t * @property _capabilities\n\t\t * @type {Object}\n\t\t * @default null\n\t\t * @protected\n\t\t * @static\n\t\t */\n\t\tthis._capabilities = null;\n\n\t\t/**\n\t\t * Object hash indexed by the source URI of all created loaders, used to properly destroy them if sources are removed.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._loaders = {};\n\n\t\t/**\n\t\t * Object hash indexed by the source URI of each file to indicate if an audio source has begun loading,\n\t\t * is currently loading, or has completed loading.  Can be used to store non boolean data after loading\n\t\t * is complete (for example arrayBuffers for web audio).\n\t\t * @property _audioSources\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._audioSources = {};\n\n\t\t/**\n\t\t * Object hash indexed by the source URI of all created SoundInstances, updates the playbackResource if it loads after they are created,\n\t\t * and properly destroy them if sources are removed\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._soundInstances = {};\n\n\t\t/**\n\t\t * The internal master volume value of the plugin.\n\t\t * @property _volume\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t * @protected\n\t\t */\n\t\tthis._volume = 1;\n\n\t\t/**\n\t\t * A reference to a loader class used by a plugin that must be set.\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._loaderClass;\n\n\t\t/**\n\t\t * A reference to an AbstractSoundInstance class used by a plugin that must be set.\n\t\t * @type {Object}\n\t\t * @protected;\n\t\t */\n\t\tthis._soundInstanceClass;\n\t};\n\tvar p = AbstractPlugin.prototype;\n\n// Static Properties:\n// NOTE THESE PROPERTIES NEED TO BE ADDED TO EACH PLUGIN\n\t/**\n\t * The capabilities of the plugin. This is generated via the _generateCapabilities method and is used internally.\n\t * @property _capabilities\n\t * @type {Object}\n\t * @default null\n\t * @private\n\t * @static\n\t */\n\tAbstractPlugin._capabilities = null;\n\n\t/**\n\t * Determine if the plugin can be used in the current browser/OS.\n\t * @method isSupported\n\t * @return {Boolean} If the plugin can be initialized.\n\t * @static\n\t */\n\tAbstractPlugin.isSupported = function () {\n\t\treturn true;\n\t};\n\n\n// public methods:\n\t/**\n\t * Pre-register a sound for preloading and setup. This is called by {{#crossLink \"Sound\"}}{{/crossLink}}.\n\t * Note all plugins provide a <code>Loader</code> instance, which <a href=\"http://preloadjs.com\" target=\"_blank\">PreloadJS</a>\n\t * can use to assist with preloading.\n\t * @method register\n\t * @param {String} loadItem An Object containing the source of the audio\n\t * Note that not every plugin will manage this value.\n\t * @return {Object} A result object, containing a \"tag\" for preloading purposes.\n\t */\n\tp.register = function (loadItem) {\n\t\tvar loader = this._loaders[loadItem.src];\n\t\tif(loader && !loader.canceled) {return this._loaders[loadItem.src];}\t// already loading/loaded this, so don't load twice\n\t\t// OJR potential issue that we won't be firing loaded event, might need to trigger if this is already loaded?\n\t\tthis._audioSources[loadItem.src] = true;\n\t\tthis._soundInstances[loadItem.src] = [];\n\t\tloader = new this._loaderClass(loadItem);\n\t\tloader.on(\"complete\", this._handlePreloadComplete, this);\n\t\tthis._loaders[loadItem.src] = loader;\n\t\treturn loader;\n\t};\n\n\t// note sound calls register before calling preload\n\t/**\n\t * Internally preload a sound.\n\t * @method preload\n\t * @param {Loader} loader The sound URI to load.\n\t */\n\tp.preload = function (loader) {\n\t\tloader.on(\"error\", this._handlePreloadError, this);\n\t\tloader.load();\n\t};\n\n\t/**\n\t * Checks if preloading has started for a specific source. If the source is found, we can assume it is loading,\n\t * or has already finished loading.\n\t * @method isPreloadStarted\n\t * @param {String} src The sound URI to check.\n\t * @return {Boolean}\n\t */\n\tp.isPreloadStarted = function (src) {\n\t\treturn (this._audioSources[src] != null);\n\t};\n\n\t/**\n\t * Checks if preloading has finished for a specific source.\n\t * @method isPreloadComplete\n\t * @param {String} src The sound URI to load.\n\t * @return {Boolean}\n\t */\n\tp.isPreloadComplete = function (src) {\n\t\treturn (!(this._audioSources[src] == null || this._audioSources[src] == true));\n\t};\n\n\t/**\n\t * Remove a sound added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.\n\t * @method removeSound\n\t * @param {String} src The sound URI to unload.\n\t */\n\tp.removeSound = function (src) {\n\t\tif (!this._soundInstances[src]) { return; }\n\t\tfor (var i = this._soundInstances[src].length; i--; ) {\n\t\t\tvar item = this._soundInstances[src][i];\n\t\t\titem.destroy();\n\t\t}\n\t\tdelete(this._soundInstances[src]);\n\t\tdelete(this._audioSources[src]);\n\t\tif(this._loaders[src]) { this._loaders[src].destroy(); }\n\t\tdelete(this._loaders[src]);\n\t};\n\n\t/**\n\t * Remove all sounds added using {{#crossLink \"WebAudioPlugin/register\"}}{{/crossLink}}. Note this does not cancel a preload.\n\t * @method removeAllSounds\n\t * @param {String} src The sound URI to unload.\n\t */\n\tp.removeAllSounds = function () {\n\t\tfor(var key in this._audioSources) {\n\t\t\tthis.removeSound(key);\n\t\t}\n\t};\n\n\t/**\n\t * Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.\n\t * @method create\n\t * @param {String} src The sound source to use.\n\t * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n\t * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n\t * @return {AbstractSoundInstance} A sound instance for playback and control.\n\t */\n\tp.create = function (src, startTime, duration) {\n\t\tif (!this.isPreloadStarted(src)) {\n\t\t\tthis.preload(this.register(src));\n\t\t}\n\t\tvar si = new this._soundInstanceClass(src, startTime, duration, this._audioSources[src]);\n\t\tif(this._soundInstances[src]){\n\t\t\tthis._soundInstances[src].push(si);\n\t\t}\n\n\t\t// Plugins that don't have a setVolume should implement a setMasterVolune/setMasterMute\n\t\t// So we have to check that here.\n\t\tsi.setMasterVolume && si.setMasterVolume(createjs.Sound.volume);\n\t\tsi.setMasterMute && si.setMasterMute(createjs.Sound.muted);\n\n\t\treturn si;\n\t};\n\n\t// if a plugin does not support volume and mute, it should set these to null\n\t/**\n\t * Set the master volume of the plugin, which affects all SoundInstances.\n\t * @method setVolume\n\t * @param {Number} value The volume to set, between 0 and 1.\n\t * @return {Boolean} If the plugin processes the setVolume call (true). The Sound class will affect all the\n\t * instances manually otherwise.\n\t */\n\tp.setVolume = function (value) {\n\t\tthis._volume = value;\n\t\tthis._updateVolume();\n\t\treturn true;\n\t};\n\n\t/**\n\t * Get the master volume of the plugin, which affects all SoundInstances.\n\t * @method getVolume\n\t * @return {Number} The volume level, between 0 and 1.\n\t */\n\tp.getVolume = function () {\n\t\treturn this._volume;\n\t};\n\n\t/**\n\t * Mute all sounds via the plugin.\n\t * @method setMute\n\t * @param {Boolean} value If all sound should be muted or not. Note that plugin-level muting just looks up\n\t * the mute value of Sound {{#crossLink \"Sound/muted:property\"}}{{/crossLink}}, so this property is not used here.\n\t * @return {Boolean} If the mute call succeeds.\n\t */\n\tp.setMute = function (value) {\n\t\tthis._updateVolume();\n\t\treturn true;\n\t};\n\n\t// plugins should overwrite this method\n\tp.toString = function () {\n\t\treturn \"[AbstractPlugin]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * Handles internal preload completion.\n\t * @method _handlePreloadComplete\n\t * @param event\n\t * @protected\n\t */\n\tp._handlePreloadComplete = function (event) {\n\t\tvar src = event.target.getItem().src;\n\t\tthis._audioSources[src] = event.result;\n\t\tif (!this._soundInstances[src]) { return; }\n\t\tfor (var i = 0, l = this._soundInstances[src].length; i < l; i++) {\n\t\t\tvar item = this._soundInstances[src][i];\n\t\t\titem.playbackResource = this._audioSources[src];\n\t\t\t// ToDo consider adding play call here if playstate == playfailed\n\t\t\tthis._soundInstances[src] = null;\n\t\t}\n\t};\n\n\t/**\n\t * Handles internal preload errors\n\t * @method _handlePreloadError\n\t * @param event\n\t * @protected\n\t */\n\tp._handlePreloadError = function(event) {\n\t\t//delete(this._audioSources[src]);\n\t};\n\n\t/**\n\t * Set the gain value for master audio. Should not be called externally.\n\t * @method _updateVolume\n\t * @protected\n\t */\n\tp._updateVolume = function () {\n\t\t// Plugin Specific code\n\t};\n\n\tcreatejs.AbstractPlugin = AbstractPlugin;\n}());\n\n//##############################################################################\n// WebAudioLoader.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * Loader provides a mechanism to preload Web Audio content via PreloadJS or internally. Instances are returned to\n\t * the preloader, and the load method is called when the asset needs to be requested.\n\t *\n\t * @class WebAudioLoader\n\t * @param {String} loadItem The item to be loaded\n\t * @extends XHRRequest\n\t * @protected\n\t */\n\tfunction Loader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, true, createjs.Types.SOUND);\n\n\t};\n\tvar p = createjs.extend(Loader, createjs.AbstractLoader);\n\n\t/**\n\t * web audio context required for decoding audio\n\t * @property context\n\t * @type {AudioContext}\n\t * @static\n\t */\n\tLoader.context = null;\n\n\n// public methods\n\tp.toString = function () {\n\t\treturn \"[WebAudioLoader]\";\n\t};\n\n\n// private methods\n\tp._createRequest = function() {\n\t\tthis._request = new createjs.XHRRequest(this._item, false);\n\t\tthis._request.setResponseType(\"arraybuffer\");\n\t};\n\n\tp._sendComplete = function (event) {\n\t\t// OJR we leave this wrapped in Loader because we need to reference src and the handler only receives a single argument, the decodedAudio\n\t\tLoader.context.decodeAudioData(this._rawResult,\n\t         createjs.proxy(this._handleAudioDecoded, this),\n\t         createjs.proxy(this._sendError, this));\n\t};\n\n\n\t/**\n\t* The audio has been decoded.\n\t* @method handleAudioDecoded\n\t* @param decoded\n\t* @protected\n\t*/\n\tp._handleAudioDecoded = function (decodedAudio) {\n\t\tthis._result = decodedAudio;\n\t\tthis.AbstractLoader__sendComplete();\n\t};\n\n\tcreatejs.WebAudioLoader = createjs.promote(Loader, \"AbstractLoader\");\n}());\n\n//##############################################################################\n// WebAudioSoundInstance.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n/**\n * WebAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n * {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\n *\n * WebAudioSoundInstance exposes audioNodes for advanced users.\n *\n * @param {String} src The path to and file name of the sound.\n * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n * @param {Object} playbackResource Any resource needed by plugin to support audio playback.\n * @class WebAudioSoundInstance\n * @extends AbstractSoundInstance\n * @constructor\n */\n(function () {\n\t\"use strict\";\n\n\tfunction WebAudioSoundInstance(src, startTime, duration, playbackResource) {\n\t\tthis.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);\n\n\n// public properties\n\t\t/**\n\t\t * NOTE this is only intended for use by advanced users.\n\t\t * <br />GainNode for controlling <code>WebAudioSoundInstance</code> volume. Connected to the {{#crossLink \"WebAudioSoundInstance/destinationNode:property\"}}{{/crossLink}}.\n\t\t * @property gainNode\n\t\t * @type {AudioGainNode}\n\t\t * @since 0.4.0\n\t\t *\n\t\t */\n\t\tthis.gainNode = s.context.createGain();\n\n\t\t/**\n\t\t * NOTE this is only intended for use by advanced users.\n\t\t * <br />A panNode allowing left and right audio channel panning only. Connected to WebAudioSoundInstance {{#crossLink \"WebAudioSoundInstance/gainNode:property\"}}{{/crossLink}}.\n\t\t * @property panNode\n\t\t * @type {AudioPannerNode}\n\t\t * @since 0.4.0\n\t\t */\n\t\tthis.panNode = s.context.createPanner();\n\t\tthis.panNode.panningModel = s._panningModel;\n\t\tthis.panNode.connect(this.gainNode);\n\t\tthis._updatePan();\n\n\t\t/**\n\t\t * NOTE this is only intended for use by advanced users.\n\t\t * <br />sourceNode is the audio source. Connected to WebAudioSoundInstance {{#crossLink \"WebAudioSoundInstance/panNode:property\"}}{{/crossLink}}.\n\t\t * @property sourceNode\n\t\t * @type {AudioNode}\n\t\t * @since 0.4.0\n\t\t *\n\t\t */\n\t\tthis.sourceNode = null;\n\n\n// private properties\n\t\t/**\n\t\t * Timeout that is created internally to handle sound playing to completion.\n\t\t * Stored so we can remove it when stop, pause, or cleanup are called\n\t\t * @property _soundCompleteTimeout\n\t\t * @type {timeoutVariable}\n\t\t * @default null\n\t\t * @protected\n\t\t * @since 0.4.0\n\t\t */\n\t\tthis._soundCompleteTimeout = null;\n\n\t\t/**\n\t\t * NOTE this is only intended for use by very advanced users.\n\t\t * _sourceNodeNext is the audio source for the next loop, inserted in a look ahead approach to allow for smooth\n\t\t * looping. Connected to {{#crossLink \"WebAudioSoundInstance/gainNode:property\"}}{{/crossLink}}.\n\t\t * @property _sourceNodeNext\n\t\t * @type {AudioNode}\n\t\t * @default null\n\t\t * @protected\n\t\t * @since 0.4.1\n\t\t *\n\t\t */\n\t\tthis._sourceNodeNext = null;\n\n\t\t/**\n\t\t * Time audio started playback, in seconds. Used to handle set position, get position, and resuming from paused.\n\t\t * @property _playbackStartTime\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t * @since 0.4.0\n\t\t */\n\t\tthis._playbackStartTime = 0;\n\n\t\t// Proxies, make removing listeners easier.\n\t\tthis._endedHandler = createjs.proxy(this._handleSoundComplete, this);\n\t};\n\tvar p = createjs.extend(WebAudioSoundInstance, createjs.AbstractSoundInstance);\n\tvar s = WebAudioSoundInstance;\n\n\t/**\n\t * Note this is only intended for use by advanced users.\n\t * <br />Audio context used to create nodes.  This is and needs to be the same context used by {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\n  \t * @property context\n\t * @type {AudioContext}\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.context = null;\n\n\t/**\n\t * Note this is only intended for use by advanced users.\n\t * <br />The scratch buffer that will be assigned to the buffer property of a source node on close.  \n\t * This is and should be the same scratch buffer referenced by {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.\n  \t * @property _scratchBuffer\n\t * @type {AudioBufferSourceNode}\n\t * @static\n\t */\n\ts._scratchBuffer = null;\n\n\t/**\n\t * Note this is only intended for use by advanced users.\n\t * <br /> Audio node from WebAudioPlugin that sequences to <code>context.destination</code>\n\t * @property destinationNode\n\t * @type {AudioNode}\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.destinationNode = null;\n\n\t/**\n\t * Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.\n\t * @property _panningModel\n\t * @type {Number / String}\n\t * @protected\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts._panningModel = \"equalpower\";\n\n\n// Public methods\n\tp.destroy = function() {\n\t\tthis.AbstractSoundInstance_destroy();\n\n\t\tthis.panNode.disconnect(0);\n\t\tthis.panNode = null;\n\t\tthis.gainNode.disconnect(0);\n\t\tthis.gainNode = null;\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[WebAudioSoundInstance]\";\n\t};\n\n\n// Private Methods\n\tp._updatePan = function() {\n\t\tthis.panNode.setPosition(this._pan, 0, -0.5);\n\t\t// z need to be -0.5 otherwise the sound only plays in left, right, or center\n\t};\n\n\tp._removeLooping = function(value) {\n\t\tthis._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n\t};\n\n\tp._addLooping = function(value) {\n\t\tif (this.playState != createjs.Sound.PLAY_SUCCEEDED) { return; }\n\t\tthis._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);\n\t};\n\n\tp._setDurationFromSource = function () {\n\t\tthis._duration = this.playbackResource.duration * 1000;\n\t};\n\n\tp._handleCleanUp = function () {\n\t\tif (this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n\t\t\tthis.sourceNode = this._cleanUpAudioNode(this.sourceNode);\n\t\t\tthis._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n\t\t}\n\n\t\tif (this.gainNode.numberOfOutputs != 0) {this.gainNode.disconnect(0);}\n\t\t// OJR there appears to be a bug that this doesn't always work in webkit (Chrome and Safari). According to the documentation, this should work.\n\n\t\tclearTimeout(this._soundCompleteTimeout);\n\n\t\tthis._playbackStartTime = 0;\t// This is used by _getPosition\n\t};\n\n\t/**\n\t * Turn off and disconnect an audioNode, then set reference to null to release it for garbage collection\n\t * @method _cleanUpAudioNode\n\t * @param audioNode\n\t * @return {audioNode}\n\t * @protected\n\t * @since 0.4.1\n\t */\n\tp._cleanUpAudioNode = function(audioNode) {\n\t\tif(audioNode) {\n\t\t\taudioNode.stop(0);\n\t\t\taudioNode.disconnect(0);\n\t\t\t// necessary to prevent leak on iOS Safari 7-9. will throw in almost all other\n\t\t\t// browser implementations.\n\t\t\tif ( createjs.BrowserDetect.isIOS ) {\n\t\t\t\ttry { audioNode.buffer = s._scratchBuffer; } catch(e) {}\n\t\t\t}\n\t\t\taudioNode = null;\n\t\t}\n\t\treturn audioNode;\n\t};\n\n\tp._handleSoundReady = function (event) {\n\t\tthis.gainNode.connect(s.destinationNode);  // this line can cause a memory leak.  Nodes need to be disconnected from the audioDestination or any sequence that leads to it.\n\n\t\tvar dur = this._duration * 0.001,\n\t\t\tpos = Math.min(Math.max(0, this._position) * 0.001, dur);\n\t\tthis.sourceNode = this._createAndPlayAudioNode((s.context.currentTime - dur), pos);\n\t\tthis._playbackStartTime = this.sourceNode.startTime - pos;\n\n\t\tthis._soundCompleteTimeout = setTimeout(this._endedHandler, (dur - pos) * 1000);\n\n\t\tif(this._loop != 0) {\n\t\t\tthis._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);\n\t\t}\n\t};\n\n\t/**\n\t * Creates an audio node using the current src and context, connects it to the gain node, and starts playback.\n\t * @method _createAndPlayAudioNode\n\t * @param {Number} startTime The time to add this to the web audio context, in seconds.\n\t * @param {Number} offset The amount of time into the src audio to start playback, in seconds.\n\t * @return {audioNode}\n\t * @protected\n\t * @since 0.4.1\n\t */\n\tp._createAndPlayAudioNode = function(startTime, offset) {\n\t\tvar audioNode = s.context.createBufferSource();\n\t\taudioNode.buffer = this.playbackResource;\n\t\taudioNode.connect(this.panNode);\n\t\tvar dur = this._duration * 0.001;\n\t\taudioNode.startTime = startTime + dur;\n\t\taudioNode.start(audioNode.startTime, offset+(this._startTime*0.001), dur - offset);\n\t\treturn audioNode;\n\t};\n\n\tp._pause = function () {\n\t\tthis._position = (s.context.currentTime - this._playbackStartTime) * 1000;  // * 1000 to give milliseconds, lets us restart at same point\n\t\tthis.sourceNode = this._cleanUpAudioNode(this.sourceNode);\n\t\tthis._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n\n\t\tif (this.gainNode.numberOfOutputs != 0) {this.gainNode.disconnect(0);}\n\n\t\tclearTimeout(this._soundCompleteTimeout);\n\t};\n\n\tp._resume = function () {\n\t\tthis._handleSoundReady();\n\t};\n\n\t/*\n\tp._handleStop = function () {\n\t\t// web audio does not need to do anything extra\n\t};\n\t*/\n\n\tp._updateVolume = function () {\n\t\tvar newVolume = this._muted ? 0 : this._volume;\n\t  \tif (newVolume != this.gainNode.gain.value) {\n\t\t  this.gainNode.gain.value = newVolume;\n  \t\t}\n\t};\n\n\tp._calculateCurrentPosition = function () {\n\t\treturn ((s.context.currentTime - this._playbackStartTime) * 1000); // pos in seconds * 1000 to give milliseconds\n\t};\n\n\tp._updatePosition = function () {\n\t\tthis.sourceNode = this._cleanUpAudioNode(this.sourceNode);\n\t\tthis._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);\n\t\tclearTimeout(this._soundCompleteTimeout);\n\n\t\tif (!this._paused) {this._handleSoundReady();}\n\t};\n\n\t// OJR we are using a look ahead approach to ensure smooth looping.\n\t// We add _sourceNodeNext to the audio context so that it starts playing even if this callback is delayed.\n\t// This technique is described here:  http://www.html5rocks.com/en/tutorials/audio/scheduling/\n\t// NOTE the cost of this is that our audio loop may not always match the loop event timing precisely.\n\tp._handleLoop = function () {\n\t\tthis._cleanUpAudioNode(this.sourceNode);\n\t\tthis.sourceNode = this._sourceNodeNext;\n\t\tthis._playbackStartTime = this.sourceNode.startTime;\n\t\tthis._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);\n\t\tthis._soundCompleteTimeout = setTimeout(this._endedHandler, this._duration);\n\t};\n\n\tp._updateDuration = function () {\n\t\tif(this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n\t\t\tthis._pause();\n\t\t\tthis._resume();\n\t\t}\n\t};\n\n\tcreatejs.WebAudioSoundInstance = createjs.promote(WebAudioSoundInstance, \"AbstractSoundInstance\");\n}());\n\n//##############################################################################\n// WebAudioPlugin.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\n\t\"use strict\";\n\n\t/**\n\t * Play sounds using Web Audio in the browser. The WebAudioPlugin is currently the default plugin, and will be used\n\t * anywhere that it is supported. To change plugin priority, check out the Sound API\n\t * {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} method.\n\n\t * <h4>Known Browser and OS issues for Web Audio</h4>\n\t * <b>Firefox 25</b>\n\t * <li>\n\t *     mp3 audio files do not load properly on all windows machines, reported <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=929969\" target=\"_blank\">here</a>.\n\t *     <br />For this reason it is recommended to pass another FireFox-supported type (i.e. ogg) as the default\n\t *     extension, until this bug is resolved\n\t * </li>\n\t *\n\t * <b>Webkit (Chrome and Safari)</b>\n\t * <li>\n\t *     AudioNode.disconnect does not always seem to work.  This can cause the file size to grow over time if you\n\t * \t   are playing a lot of audio files.\n\t * </li>\n\t *\n\t * <b>iOS 6 limitations</b>\n\t * <ul>\n\t *     <li>\n\t *         Sound is initially muted and will only unmute through play being called inside a user initiated event\n\t *         (touch/click). Please read the mobile playback notes in the the {{#crossLink \"Sound\"}}{{/crossLink}}\n\t *         class for a full overview of the limitations, and how to get around them.\n\t *     </li>\n\t *\t   <li>\n\t *\t       A bug exists that will distort un-cached audio when a video element is present in the DOM. You can avoid\n\t *\t       this bug by ensuring the audio and video audio share the same sample rate.\n\t *\t   </li>\n\t * </ul>\n\t * @class WebAudioPlugin\n\t * @extends AbstractPlugin\n\t * @constructor\n\t * @since 0.4.0\n\t */\n\tfunction WebAudioPlugin() {\n\t\tthis.AbstractPlugin_constructor();\n\n\n// Private Properties\n\t\t/**\n\t\t * Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.\n\t\t * @property _panningModel\n\t\t * @type {Number / String}\n\t\t * @protected\n\t\t */\n\t\tthis._panningModel = s._panningModel;;\n\n\t\t/**\n\t\t * The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin\n\t\t * need to be created within this context.\n\t\t * @property context\n\t\t * @type {AudioContext}\n\t\t */\n\t\tthis.context = s.context;\n\n\t\t/**\n\t\t * A DynamicsCompressorNode, which is used to improve sound quality and prevent audio distortion.\n\t\t * It is connected to <code>context.destination</code>.\n\t\t *\n\t\t * Can be accessed by advanced users through createjs.Sound.activePlugin.dynamicsCompressorNode.\n\t\t * @property dynamicsCompressorNode\n\t\t * @type {AudioNode}\n\t\t */\n\t\tthis.dynamicsCompressorNode = this.context.createDynamicsCompressor();\n\t\tthis.dynamicsCompressorNode.connect(this.context.destination);\n\n\t\t/**\n\t\t * A GainNode for controlling master volume. It is connected to {{#crossLink \"WebAudioPlugin/dynamicsCompressorNode:property\"}}{{/crossLink}}.\n\t\t *\n\t\t * Can be accessed by advanced users through createjs.Sound.activePlugin.gainNode.\n\t\t * @property gainNode\n\t\t * @type {AudioGainNode}\n\t\t */\n\t\tthis.gainNode = this.context.createGain();\n\t\tthis.gainNode.connect(this.dynamicsCompressorNode);\n\t\tcreatejs.WebAudioSoundInstance.destinationNode = this.gainNode;\n\n\t\tthis._capabilities = s._capabilities;\n\n\t\tthis._loaderClass = createjs.WebAudioLoader;\n\t\tthis._soundInstanceClass = createjs.WebAudioSoundInstance;\n\n\t\tthis._addPropsToClasses();\n\t}\n\tvar p = createjs.extend(WebAudioPlugin, createjs.AbstractPlugin);\n\n// Static Properties\n\tvar s = WebAudioPlugin;\n\t/**\n\t * The capabilities of the plugin. This is generated via the {{#crossLink \"WebAudioPlugin/_generateCapabilities:method\"}}{{/crossLink}}\n\t * method and is used internally.\n\t * @property _capabilities\n\t * @type {Object}\n\t * @default null\n\t * @private\n\t * @static\n\t */\n\ts._capabilities = null;\n\n\t/**\n\t * Value to set panning model to equal power for WebAudioSoundInstance.  Can be \"equalpower\" or 0 depending on browser implementation.\n\t * @property _panningModel\n\t * @type {Number / String}\n\t * @private\n\t * @static\n\t */\n\ts._panningModel = \"equalpower\";\n\n\t/**\n\t * The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin\n\t * need to be created within this context.\n\t *\n\t * Advanced users can set this to an existing context, but <b>must</b> do so before they call\n\t * {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} or {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}.\n\t *\n\t * @property context\n\t * @type {AudioContext}\n\t * @static\n\t */\n\ts.context = null;\n\n\t/**\n\t * The scratch buffer that will be assigned to the buffer property of a source node on close.\n\t * Works around an iOS Safari bug: https://github.com/CreateJS/SoundJS/issues/102\n\t *\n\t * Advanced users can set this to an existing source node, but <b>must</b> do so before they call\n\t * {{#crossLink \"Sound/registerPlugins\"}}{{/crossLink}} or {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}.\n\t *\n\t * @property _scratchBuffer\n\t * @type {AudioBuffer}\n\t * @private\n\t * @static\n\t */\n\t s._scratchBuffer = null;\n\n\t/**\n\t * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n\t * empty sound.\n\t * @property _unlocked\n\t * @type {boolean}\n\t * @since 0.6.2\n\t * @private\n\t */\n\ts._unlocked = false;\n\n\t/**\n\t * The default sample rate used when checking for iOS compatibility. See {{#crossLink \"WebAudioPlugin/_createAudioContext\"}}{{/crossLink}}.\n\t * @property DEFAULT_SAMPLE_REATE\n\t * @type {number}\n\t * @default 44100\n\t * @static\n\t */\n\ts.DEFAULT_SAMPLE_RATE = 44100;\n\n// Static Public Methods\n\t/**\n\t * Determine if the plugin can be used in the current browser/OS.\n\t * @method isSupported\n\t * @return {Boolean} If the plugin can be initialized.\n\t * @static\n\t */\n\ts.isSupported = function () {\n\t\t// check if this is some kind of mobile device, Web Audio works with local protocol under PhoneGap and it is unlikely someone is trying to run a local file\n\t\tvar isMobilePhoneGap = createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry;\n\t\t// OJR isMobile may be redundant with _isFileXHRSupported available.  Consider removing.\n\t\tif (location.protocol == \"file:\" && !isMobilePhoneGap && !this._isFileXHRSupported()) { return false; }  // Web Audio requires XHR, which is not usually available locally\n\t\ts._generateCapabilities();\n\t\tif (s.context == null) {return false;}\n\t\treturn true;\n\t};\n\n\t/**\n\t * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n\t * require the first sound to be played inside of a user initiated event (touch/click).  This is called when\n\t * {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} is initialized (by Sound {{#crossLink \"Sound/initializeDefaultPlugins\"}}{{/crossLink}}\n\t * for example).\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *     function handleTouch(event) {\n\t *         createjs.WebAudioPlugin.playEmptySound();\n\t *     }\n\t *\n\t * @method playEmptySound\n\t * @static\n\t * @since 0.4.1\n\t */\n\ts.playEmptySound = function() {\n\t\tif (s.context == null) {return;}\n\t\tvar source = s.context.createBufferSource();\n\t\tsource.buffer = s._scratchBuffer;\n\t\tsource.connect(s.context.destination);\n\t\tsource.start(0, 0, 0);\n\t};\n\n\n// Static Private Methods\n\t/**\n\t * Determine if XHR is supported, which is necessary for web audio.\n\t * @method _isFileXHRSupported\n\t * @return {Boolean} If XHR is supported.\n\t * @since 0.4.2\n\t * @private\n\t * @static\n\t */\n\ts._isFileXHRSupported = function() {\n\t\t// it's much easier to detect when something goes wrong, so let's start optimistically\n\t\tvar supported = true;\n\n\t\tvar xhr = new XMLHttpRequest();\n\t\ttry {\n\t\t\txhr.open(\"GET\", \"WebAudioPluginTest.fail\", false); // loading non-existant file triggers 404 only if it could load (synchronous call)\n\t\t} catch (error) {\n\t\t\t// catch errors in cases where the onerror is passed by\n\t\t\tsupported = false;\n\t\t\treturn supported;\n\t\t}\n\t\txhr.onerror = function() { supported = false; }; // cause irrelevant\n\t\t// with security turned off, we can get empty success results, which is actually a failed read (status code 0?)\n\t\txhr.onload = function() { supported = this.status == 404 || (this.status == 200 || (this.status == 0 && this.response != \"\")); };\n\t\ttry {\n\t\t\txhr.send();\n\t\t} catch (error) {\n\t\t\t// catch errors in cases where the onerror is passed by\n\t\t\tsupported = false;\n\t\t}\n\n\t\treturn supported;\n\t};\n\n\t/**\n\t * Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}}\n\t * method for an overview of plugin capabilities.\n\t * @method _generateCapabilities\n\t * @static\n\t * @private\n\t */\n\ts._generateCapabilities = function () {\n\t\tif (s._capabilities != null) {return;}\n\t\t// Web Audio can be in any formats supported by the audio element, from http://www.w3.org/TR/webaudio/#AudioContext-section\n\t\tvar t = document.createElement(\"audio\");\n\t\tif (t.canPlayType == null) {return null;}\n\n\t\tif (s.context == null) {\n\t\t\ts.context = s._createAudioContext();\n\t\t\tif (s.context == null) { return null; }\n\t\t}\n\t\tif (s._scratchBuffer == null) {\n\t\t\ts._scratchBuffer = s.context.createBuffer(1, 1, 22050);\n\t\t}\n\n\t\ts._compatibilitySetUp();\n\n\t\t// Listen for document level clicks to unlock WebAudio on iOS. See the _unlock method.\n\t\tif (\"ontouchstart\" in window && s.context.state != \"running\") {\n\t\t\ts._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n\t\t\tdocument.addEventListener(\"mousedown\", s._unlock, true);\n\t\t\tdocument.addEventListener(\"touchstart\", s._unlock, true);\n\t\t\tdocument.addEventListener(\"touchend\", s._unlock, true);\n\t\t}\n\n\t\ts._capabilities = {\n\t\t\tpanning:true,\n\t\t\tvolume:true,\n\t\t\ttracks:-1\n\t\t};\n\n\t\t// determine which extensions our browser supports for this plugin by iterating through Sound.SUPPORTED_EXTENSIONS\n\t\tvar supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;\n\t\tvar extensionMap = createjs.Sound.EXTENSION_MAP;\n\t\tfor (var i = 0, l = supportedExtensions.length; i < l; i++) {\n\t\t\tvar ext = supportedExtensions[i];\n\t\t\tvar playType = extensionMap[ext] || ext;\n\t\t\ts._capabilities[ext] = (t.canPlayType(\"audio/\" + ext) != \"no\" && t.canPlayType(\"audio/\" + ext) != \"\") || (t.canPlayType(\"audio/\" + playType) != \"no\" && t.canPlayType(\"audio/\" + playType) != \"\");\n\t\t}  // OJR another way to do this might be canPlayType:\"m4a\", codex: mp4\n\n\t\t// 0=no output, 1=mono, 2=stereo, 4=surround, 6=5.1 surround.\n\t\t// See http://www.w3.org/TR/webaudio/#AudioChannelSplitter for more details on channels.\n\t\tif (s.context.destination.numberOfChannels < 2) {\n\t\t\ts._capabilities.panning = false;\n\t\t}\n\t};\n\n\t/**\n\t * Create an audio context for the sound.\n\t *\n\t * This method handles both vendor prefixes (specifically webkit support), as well as a case on iOS where\n\t * audio played with a different sample rate may play garbled when first started. The default sample rate is\n\t * 44,100, however it can be changed using the {{#crossLink \"WebAudioPlugin/DEFAULT_SAMPLE_RATE:property\"}}{{/crossLink}}.\n\t * @method _createAudioContext\n\t * @return {AudioContext | webkitAudioContext}\n\t * @private\n\t * @static\n\t * @since 1.0.0\n\t */\n\ts._createAudioContext = function() {\n\t\t// Slightly modified version of https://github.com/Jam3/ios-safe-audio-context\n\t\t// Resolves issues with first-run contexts playing garbled on iOS.\n\t\tvar AudioCtor = (window.AudioContext || window.webkitAudioContext);\n\t\tif (AudioCtor == null) { return null; }\n\t\tvar context = new AudioCtor();\n\n\t\t// Check if hack is necessary. Only occurs in iOS6+ devices\n\t\t// and only when you first boot the iPhone, or play a audio/video\n\t\t// with a different sample rate\n\t\tif (/(iPhone|iPad)/i.test(navigator.userAgent)\n\t\t\t\t&& context.sampleRate !== s.DEFAULT_SAMPLE_RATE) {\n\t\t\tvar buffer = context.createBuffer(1, 1, s.DEFAULT_SAMPLE_RATE),\n\t\t\t\t\tdummy = context.createBufferSource();\n\t\t\tdummy.buffer = buffer;\n\t\t\tdummy.connect(context.destination);\n\t\t\tdummy.start(0);\n\t\t\tdummy.disconnect();\n\t\t\tcontext.close() // dispose old context\n\n\t\t\tcontext = new AudioCtor();\n\t\t}\n\t\treturn context;\n\t}\n\n\t/**\n\t * Set up compatibility if only deprecated web audio calls are supported.\n\t * See http://www.w3.org/TR/webaudio/#DeprecationNotes\n\t * Needed so we can support new browsers that don't support deprecated calls (Firefox) as well as old browsers that\n\t * don't support new calls.\n\t *\n\t * @method _compatibilitySetUp\n\t * @static\n\t * @private\n\t * @since 0.4.2\n\t */\n\ts._compatibilitySetUp = function() {\n\t\ts._panningModel = \"equalpower\";\n\t\t//assume that if one new call is supported, they all are\n\t\tif (s.context.createGain) { return; }\n\n\t\t// simple name change, functionality the same\n\t\ts.context.createGain = s.context.createGainNode;\n\n\t\t// source node, add to prototype\n\t\tvar audioNode = s.context.createBufferSource();\n\t\taudioNode.__proto__.start = audioNode.__proto__.noteGrainOn;\t// note that noteGrainOn requires all 3 parameters\n\t\taudioNode.__proto__.stop = audioNode.__proto__.noteOff;\n\n\t\t// panningModel\n\t\ts._panningModel = 0;\n\t};\n\n\t/**\n\t * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n\t * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n\t * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n\t *\n\t * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n\t * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n\t * stick with `mousedown` and `touchend`.\n\t * @method _unlock\n\t * @since 0.6.2\n\t * @private\n\t */\n\ts._unlock = function() {\n\t\tif (s._unlocked) { return; }\n\t\ts.playEmptySound();\n\t\tif (s.context.state == \"running\") {\n\t\t\tdocument.removeEventListener(\"mousedown\", s._unlock, true);\n\t\t\tdocument.removeEventListener(\"touchend\", s._unlock, true);\n\t\t\tdocument.removeEventListener(\"touchstart\", s._unlock, true);\n\t\t\ts._unlocked = true;\n\t\t}\n\t};\n\n\n// Public Methods\n\tp.toString = function () {\n\t\treturn \"[WebAudioPlugin]\";\n\t};\n\n\n// Private Methods\n\t/**\n\t * Set up needed properties on supported classes WebAudioSoundInstance and WebAudioLoader.\n\t * @method _addPropsToClasses\n\t * @static\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._addPropsToClasses = function() {\n\t\tvar c = this._soundInstanceClass;\n\t\tc.context = this.context;\n\t\tc._scratchBuffer = s._scratchBuffer;\n\t\tc.destinationNode = this.gainNode;\n\t\tc._panningModel = this._panningModel;\n\n\t\tthis._loaderClass.context = this.context;\n\t};\n\n\n\t/**\n\t * Set the gain value for master audio. Should not be called externally.\n\t * @method _updateVolume\n\t * @protected\n\t */\n\tp._updateVolume = function () {\n\t\tvar newVolume = createjs.Sound._masterMute ? 0 : this._volume;\n\t\tif (newVolume != this.gainNode.gain.value) {\n\t\t\tthis.gainNode.gain.value = newVolume;\n\t\t}\n\t};\n\n\tcreatejs.WebAudioPlugin = createjs.promote(WebAudioPlugin, \"AbstractPlugin\");\n}());\n\n//##############################################################################\n// HTMLAudioTagPool.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * HTMLAudioTagPool is an object pool for HTMLAudio tag instances.\n\t * @class HTMLAudioTagPool\n\t * @param {String} src The source of the channel.\n\t * @protected\n\t */\n\tfunction HTMLAudioTagPool() {\n\t\t\tthrow \"HTMLAudioTagPool cannot be instantiated\";\n\t}\n\n\tvar s = HTMLAudioTagPool;\n\n// Static Properties\n\t/**\n\t * A hash lookup of each base audio tag, indexed by the audio source.\n\t * @property _tags\n\t * @type {{}}\n\t * @static\n\t * @private\n\t */\n\ts._tags = {};\n\n\t/**\n\t * An object pool for html audio tags\n\t * @property _tagPool\n\t * @type {TagPool}\n\t * @static\n\t * @private\n\t */\n\ts._tagPool = new TagPool();\n\n\t/**\n\t * A hash lookup of if a base audio tag is available, indexed by the audio source\n\t * @property _tagsUsed\n\t * @type {{}}\n\t * @private\n\t * @static\n\t */\n\ts._tagUsed = {};\n\n// Static Methods\n\t/**\n\t  * Get an audio tag with the given source.\n\t  * @method get\n\t  * @param {String} src The source file used by the audio tag.\n\t  * @static\n\t  */\n\t s.get = function (src) {\n\t\tvar t = s._tags[src];\n\t\tif (t == null) {\n\t\t\t// create new base tag\n\t\t\tt = s._tags[src] = s._tagPool.get();\n\t\t\tt.src = src;\n\t\t} else {\n\t\t\t// get base or pool\n\t\t\tif (s._tagUsed[src]) {\n\t\t\t\tt = s._tagPool.get();\n\t\t\t\tt.src = src;\n\t\t\t} else {\n\t\t\t\ts._tagUsed[src] = true;\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t };\n\n\t /**\n\t  * Return an audio tag to the pool.\n\t  * @method set\n\t  * @param {String} src The source file used by the audio tag.\n\t  * @param {HTMLElement} tag Audio tag to set.\n\t  * @static\n\t  */\n\t s.set = function (src, tag) {\n\t\t // check if this is base, if yes set boolean if not return to pool\n\t\t if(tag == s._tags[src]) {\n\t\t\t s._tagUsed[src] = false;\n\t\t } else {\n\t\t\t s._tagPool.set(tag);\n\t\t }\n\t };\n\n\t/**\n\t * Delete stored tag reference and return them to pool. Note that if the tag reference does not exist, this will fail.\n\t * @method remove\n\t * @param {String} src The source for the tag\n\t * @return {Boolean} If the TagPool was deleted.\n\t * @static\n\t */\n\ts.remove = function (src) {\n\t\tvar tag = s._tags[src];\n\t\tif (tag == null) {return false;}\n\t\ts._tagPool.set(tag);\n\t\tdelete(s._tags[src]);\n\t\tdelete(s._tagUsed[src]);\n\t\treturn true;\n\t};\n\n\t/**\n\t * Gets the duration of the src audio in milliseconds\n\t * @method getDuration\n\t * @param {String} src The source file used by the audio tag.\n\t * @return {Number} Duration of src in milliseconds\n\t * @static\n\t */\n\ts.getDuration= function (src) {\n\t\tvar t = s._tags[src];\n\t\tif (t == null || !t.duration) {return 0;}\t// OJR duration is NaN if loading has not completed\n\t\treturn t.duration * 1000;\n\t};\n\n\tcreatejs.HTMLAudioTagPool = HTMLAudioTagPool;\n\n\n// ************************************************************************************************************\n\t/**\n\t * The TagPool is an object pool for HTMLAudio tag instances.\n\t * #class TagPool\n\t * @param {String} src The source of the channel.\n\t * @protected\n\t */\n\tfunction TagPool(src) {\n\n// Public Properties\n\t\t/**\n\t\t * A list of all available tags in the pool.\n\t\t * #property tags\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis._tags = [];\n\t};\n\n\tvar p = TagPool.prototype;\n\tp.constructor = TagPool;\n\n\n// Public Methods\n\t/**\n\t * Get an HTMLAudioElement for immediate playback. This takes it out of the pool.\n\t * #method get\n\t * @return {HTMLAudioElement} An HTML audio tag.\n\t */\n\tp.get = function () {\n\t\tvar tag;\n\t\tif (this._tags.length == 0) {\n\t\t\ttag = this._createTag();\n\t\t} else {\n\t\t\ttag = this._tags.pop();\n\t\t}\n\t\tif (tag.parentNode == null) {document.body.appendChild(tag);}\n\t\treturn tag;\n\t};\n\n\t/**\n\t * Put an HTMLAudioElement back in the pool for use.\n\t * #method set\n\t * @param {HTMLAudioElement} tag HTML audio tag\n\t */\n\tp.set = function (tag) {\n\t\t// OJR this first step seems unnecessary\n\t\tvar index = createjs.indexOf(this._tags, tag);\n\t\tif (index == -1) {\n\t\t\tthis._tags.src = null;\n\t\t\tthis._tags.push(tag);\n\t\t}\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[TagPool]\";\n\t};\n\n\n// Private Methods\n\t/**\n\t * Create an HTML audio tag.\n\t * #method _createTag\n\t * @param {String} src The source file to set for the audio tag.\n\t * @return {HTMLElement} Returns an HTML audio tag.\n\t * @protected\n\t */\n\tp._createTag = function () {\n\t\tvar tag = document.createElement(\"audio\");\n\t\ttag.autoplay = false;\n\t\ttag.preload = \"none\";\n\t\t//LM: Firefox fails when this the preload=\"none\" for other tags, but it needs to be \"none\" to ensure PreloadJS works.\n\t\treturn tag;\n\t};\n\n}());\n\n//##############################################################################\n// HTMLAudioSoundInstance.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * HTMLAudioSoundInstance extends the base api of {{#crossLink \"AbstractSoundInstance\"}}{{/crossLink}} and is used by\n\t * {{#crossLink \"HTMLAudioPlugin\"}}{{/crossLink}}.\n\t *\n\t * @param {String} src The path to and file name of the sound.\n\t * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.\n\t * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.\n\t * @param {Object} playbackResource Any resource needed by plugin to support audio playback.\n\t * @class HTMLAudioSoundInstance\n\t * @extends AbstractSoundInstance\n\t * @constructor\n\t */\n\tfunction HTMLAudioSoundInstance(src, startTime, duration, playbackResource) {\n\t\tthis.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);\n\n\n// Private Properties\n\t\tthis._audioSpriteStopTime = null;\n\t\tthis._delayTimeoutId = null;\n\n\t\t// Proxies, make removing listeners easier.\n\t\tthis._endedHandler = createjs.proxy(this._handleSoundComplete, this);\n\t\tthis._readyHandler = createjs.proxy(this._handleTagReady, this);\n\t\tthis._stalledHandler = createjs.proxy(this._playFailed, this);\n\t\tthis._audioSpriteEndHandler = createjs.proxy(this._handleAudioSpriteLoop, this);\n\t\tthis._loopHandler = createjs.proxy(this._handleSoundComplete, this);\n\n\t\tif (duration) {\n\t\t\tthis._audioSpriteStopTime = (startTime + duration) * 0.001;\n\t\t} else {\n\t\t\tthis._duration = createjs.HTMLAudioTagPool.getDuration(this.src);\n\t\t}\n\t}\n\tvar p = createjs.extend(HTMLAudioSoundInstance, createjs.AbstractSoundInstance);\n\n// Public Methods\n\t/**\n\t * Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master volume.\n\t * undoc'd because it is not meant to be used outside of Sound\n\t * #method setMasterVolume\n\t * @param value\n\t */\n\tp.setMasterVolume = function (value) {\n\t\tthis._updateVolume();\n\t};\n\n\t/**\n\t * Called by {{#crossLink \"Sound\"}}{{/crossLink}} when plugin does not handle master mute.\n\t * undoc'd because it is not meant to be used outside of Sound\n\t * #method setMasterMute\n\t * @param value\n\t */\n\tp.setMasterMute = function (isMuted) {\n\t\tthis._updateVolume();\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[HTMLAudioSoundInstance]\";\n\t};\n\n//Private Methods\n\tp._removeLooping = function() {\n\t\tif(this._playbackResource == null) {return;}\n\t\tthis._playbackResource.loop = false;\n\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\t};\n\n\tp._addLooping = function() {\n\t\tif(this._playbackResource == null  || this._audioSpriteStopTime) {return;}\n\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\t\tthis._playbackResource.loop = true;\n\t};\n\n\tp._handleCleanUp = function () {\n\t\tvar tag = this._playbackResource;\n\t\tif (tag != null) {\n\t\t\ttag.pause();\n\t\t\ttag.loop = false;\n\t\t\ttag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n\t\t\ttag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);\n\t\t\ttag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);\n\t\t\ttag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\t\t\ttag.removeEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n\n\t\t\ttry {\n\t\t\t\ttag.currentTime = this._startTime;\n\t\t\t} catch (e) {\n\t\t\t} // Reset Position\n\t\t\tcreatejs.HTMLAudioTagPool.set(this.src, tag);\n\t\t\tthis._playbackResource = null;\n\t\t}\n\t};\n\n\tp._beginPlaying = function (playProps) {\n\t\tthis._playbackResource = createjs.HTMLAudioTagPool.get(this.src);\n\t\treturn this.AbstractSoundInstance__beginPlaying(playProps);\n\t};\n\n\tp._handleSoundReady = function (event) {\n\t\tif (this._playbackResource.readyState !== 4) {\n\t\t\tvar tag = this._playbackResource;\n\t\t\ttag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);\n\t\t\ttag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);\n\t\t\ttag.preload = \"auto\"; // This is necessary for Firefox, as it won't ever \"load\" until this is set.\n\t\t\ttag.load();\n\t\t\treturn;\n\t\t}\n\n\t\tthis._updateVolume();\n\t\tthis._playbackResource.currentTime = (this._startTime + this._position) * 0.001;\n\t\tif (this._audioSpriteStopTime) {\n\t\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n\t\t} else {\n\t\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n\t\t\tif(this._loop != 0) {\n\t\t\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\t\t\t\tthis._playbackResource.loop = true;\n\t\t\t}\n\t\t}\n\n\t\tthis._playbackResource.play();\n\t};\n\n\t/**\n\t * Used to handle when a tag is not ready for immediate playback when it is returned from the HTMLAudioTagPool.\n\t * @method _handleTagReady\n\t * @param event\n\t * @protected\n\t */\n\tp._handleTagReady = function (event) {\n\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);\n\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);\n\n\t\tthis._handleSoundReady();\n\t};\n\n\tp._pause = function () {\n\t\tthis._playbackResource.pause();\n\t};\n\n\tp._resume = function () {\n\t\tthis._playbackResource.play();\n\t};\n\n\tp._updateVolume = function () {\n\t\tif (this._playbackResource != null) {\n\t\t\tvar newVolume = (this._muted || createjs.Sound._masterMute) ? 0 : this._volume * createjs.Sound._masterVolume;\n\t\t\tif (newVolume != this._playbackResource.volume) {this._playbackResource.volume = newVolume;}\n\t\t}\n\t};\n\n\tp._calculateCurrentPosition = function() {\n\t\treturn (this._playbackResource.currentTime * 1000) - this._startTime;\n\t};\n\n\tp._updatePosition = function() {\n\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);\n\t\ttry {\n\t\t\tthis._playbackResource.currentTime = (this._position + this._startTime) * 0.001;\n\t\t} catch (error) { // Out of range\n\t\t\tthis._handleSetPositionSeek(null);\n\t\t}\n\t};\n\n\t/**\n\t * Used to enable setting position, as we need to wait for that seek to be done before we add back our loop handling seek listener\n\t * @method _handleSetPositionSeek\n\t * @param event\n\t * @protected\n\t */\n\tp._handleSetPositionSeek = function(event) {\n\t\tif (this._playbackResource == null) { return; }\n\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);\n\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\t};\n\n\t/**\n\t * Timer used to loop audio sprites.\n\t * NOTE because of the inaccuracies in the timeupdate event (15 - 250ms) and in setting the tag to the desired timed\n\t * (up to 300ms), it is strongly recommended not to loop audio sprites with HTML Audio if smooth looping is desired\n\t *\n\t * @method _handleAudioSpriteLoop\n\t * @param event\n\t * @private\n\t */\n\tp._handleAudioSpriteLoop = function (event) {\n\t\tif(this._playbackResource.currentTime <= this._audioSpriteStopTime) {return;}\n\t\tthis._playbackResource.pause();\n\t\tif(this._loop == 0) {\n\t\t\tthis._handleSoundComplete(null);\n\t\t} else {\n\t\t\tthis._position = 0;\n\t\t\tthis._loop--;\n\t\t\tthis._playbackResource.currentTime = this._startTime * 0.001;\n\t\t\tif(!this._paused) {this._playbackResource.play();}\n\t\t\tthis._sendEvent(\"loop\");\n\t\t}\n\t};\n\n\t// NOTE with this approach audio will loop as reliably as the browser allows\n\t// but we could end up sending the loop event after next loop playback begins\n\tp._handleLoop = function (event) {\n\t\tif(this._loop == 0) {\n\t\t\tthis._playbackResource.loop = false;\n\t\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);\n\t\t}\n\t};\n\n\tp._updateStartTime = function () {\n\t\tthis._audioSpriteStopTime = (this._startTime + this._duration) * 0.001;\n\n\t\tif(this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n\t\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n\t\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n\t\t}\n\t};\n\n\tp._updateDuration = function () {\n\t\tthis._audioSpriteStopTime = (this._startTime + this._duration) * 0.001;\n\n\t\tif(this.playState == createjs.Sound.PLAY_SUCCEEDED) {\n\t\t\tthis._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);\n\t\t\tthis._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);\n\t\t}\n\t};\n\n\tp._setDurationFromSource = function () {\n\t\tthis._duration = createjs.HTMLAudioTagPool.getDuration(this.src);\n\t\tthis._playbackResource = null;\n\t};\n\n\tcreatejs.HTMLAudioSoundInstance = createjs.promote(HTMLAudioSoundInstance, \"AbstractSoundInstance\");\n}());\n\n//##############################################################################\n// HTMLAudioPlugin.js\n//##############################################################################\n\nwindow.createjs = window.createjs || {};\n\n(function () {\n\n\t\"use strict\";\n\n\t/**\n\t * Play sounds using HTML &lt;audio&gt; tags in the browser. This plugin is the second priority plugin installed\n\t * by default, after the {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}}.  For older browsers that do not support html\n\t * audio, include and install the {{#crossLink \"FlashAudioPlugin\"}}{{/crossLink}}.\n\t *\n\t * <h4>Known Browser and OS issues for HTML Audio</h4>\n\t * <b>All browsers</b><br />\n\t * Testing has shown in all browsers there is a limit to how many audio tag instances you are allowed.  If you exceed\n\t * this limit, you can expect to see unpredictable results. Please use {{#crossLink \"Sound.MAX_INSTANCES\"}}{{/crossLink}} as\n\t * a guide to how many total audio tags you can safely use in all browsers.  This issue is primarily limited to IE9.\n\t *\n     * <b>IE html limitations</b><br />\n     * <ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have\n     * muted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of\n     * when or how you apply the volume change, as the tag seems to need to play to apply it.</li>\n     * <li>MP3 encoding will not always work for audio tags if it's not default.  We've found default encoding with\n     * 64kbps works.</li>\n\t * <li>Occasionally very short samples will get cut off.</li>\n\t * <li>There is a limit to how many audio tags you can load or play at once, which appears to be determined by\n\t * hardware and browser settings.  See {{#crossLink \"HTMLAudioPlugin.MAX_INSTANCES\"}}{{/crossLink}} for a safe estimate.\n\t * Note that audio sprites can be used as a solution to this issue.</li></ul>\n\t *\n\t * <b>Safari limitations</b><br />\n\t * <ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>\n\t *\n\t * <b>iOS 6 limitations</b><br />\n\t * <ul><li>can only have one &lt;audio&gt; tag</li>\n\t * \t\t<li>can not preload or autoplay the audio</li>\n\t * \t\t<li>can not cache the audio</li>\n\t * \t\t<li>can not play the audio except inside a user initiated event.</li>\n\t *\t\t<li>Note it is recommended to use {{#crossLink \"WebAudioPlugin\"}}{{/crossLink}} for iOS (6+)</li>\n\t * \t\t<li>audio sprites can be used to mitigate some of these issues and are strongly recommended on iOS</li>\n\t * </ul>\n\t *\n\t * <b>Android Native Browser limitations</b><br />\n\t * <ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>\n\t *      <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use a delay.</li></ul>\n\t * <b> Android Chrome 26.0.1410.58 specific limitations</b><br />\n\t * <ul> <li>Can only play 1 sound at a time.</li>\n\t *      <li>Sound is not cached.</li>\n\t *      <li>Sound can only be loaded in a user initiated touch/click event.</li>\n\t *      <li>There is a delay before a sound is played, presumably while the src is loaded.</li>\n\t * </ul>\n\t *\n\t * See {{#crossLink \"Sound\"}}{{/crossLink}} for general notes on known issues.\n\t *\n\t * @class HTMLAudioPlugin\n\t * @extends AbstractPlugin\n\t * @constructor\n\t */\n\tfunction HTMLAudioPlugin() {\n\t\tthis.AbstractPlugin_constructor();\n\n\n\t// Public Properties\n\t\tthis._capabilities = s._capabilities;\n\n\t\tthis._loaderClass = createjs.SoundLoader;\n\t\tthis._soundInstanceClass = createjs.HTMLAudioSoundInstance;\n\t}\n\n\tvar p = createjs.extend(HTMLAudioPlugin, createjs.AbstractPlugin);\n\tvar s = HTMLAudioPlugin;\n\n// Static Properties\n\t/**\n\t * The maximum number of instances that can be loaded or played. This is a browser limitation, primarily limited to IE9.\n\t * The actual number varies from browser to browser (and is largely hardware dependant), but this is a safe estimate.\n\t * Audio sprites work around this limitation.\n\t * @property MAX_INSTANCES\n\t * @type {Number}\n\t * @default 30\n\t * @static\n\t */\n\ts.MAX_INSTANCES = 30;\n\n\t/**\n\t * Event constant for the \"canPlayThrough\" event for cleaner code.\n\t * @property _AUDIO_READY\n\t * @type {String}\n\t * @default canplaythrough\n\t * @static\n\t * @private\n\t */\n\ts._AUDIO_READY = \"canplaythrough\";\n\n\t/**\n\t * Event constant for the \"ended\" event for cleaner code.\n\t * @property _AUDIO_ENDED\n\t * @type {String}\n\t * @default ended\n\t * @static\n\t * @private\n\t */\n\ts._AUDIO_ENDED = \"ended\";\n\n\t/**\n\t * Event constant for the \"seeked\" event for cleaner code.  We utilize this event for maintaining loop events.\n\t * @property _AUDIO_SEEKED\n\t * @type {String}\n\t * @default seeked\n\t * @static\n\t * @private\n\t */\n\ts._AUDIO_SEEKED = \"seeked\";\n\n\t/**\n\t * Event constant for the \"stalled\" event for cleaner code.\n\t * @property _AUDIO_STALLED\n\t * @type {String}\n\t * @default stalled\n\t * @static\n\t * @private\n\t */\n\ts._AUDIO_STALLED = \"stalled\";\n\n\t/**\n\t * Event constant for the \"timeupdate\" event for cleaner code.  Utilized for looping audio sprites.\n\t * This event callsback ever 15 to 250ms and can be dropped by the browser for performance.\n\t * @property _TIME_UPDATE\n\t * @type {String}\n\t * @default timeupdate\n\t * @static\n\t * @private\n\t */\n\ts._TIME_UPDATE = \"timeupdate\";\n\n\t/**\n\t * The capabilities of the plugin. This is generated via the {{#crossLink \"HTMLAudioPlugin/_generateCapabilities\"}}{{/crossLink}}\n\t * method. Please see the Sound {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}} method for an overview of all\n\t * of the available properties.\n\t * @property _capabilities\n\t * @type {Object}\n\t * @private\n\t * @static\n\t */\n\ts._capabilities = null;\n\n\n// Static Methods\n\t/**\n\t * Determine if the plugin can be used in the current browser/OS. Note that HTML audio is available in most modern\n\t * browsers, but is disabled in iOS because of its limitations.\n\t * @method isSupported\n\t * @return {Boolean} If the plugin can be initialized.\n\t * @static\n\t */\n\ts.isSupported = function () {\n\t\ts._generateCapabilities();\n\t\treturn (s._capabilities != null);\n\t};\n\n\t/**\n\t * Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink \"Sound/capabilities:property\"}}{{/crossLink}}\n\t * method for an overview of plugin capabilities.\n\t * @method _generateCapabilities\n\t * @static\n\t * @private\n\t */\n\ts._generateCapabilities = function () {\n\t\tif (s._capabilities != null) {return;}\n\t\tvar t = document.createElement(\"audio\");\n\t\tif (t.canPlayType == null) {return null;}\n\n\t\ts._capabilities = {\n\t\t\tpanning:false,\n\t\t\tvolume:true,\n\t\t\ttracks:-1\n\t\t};\n\n\t\t// determine which extensions our browser supports for this plugin by iterating through Sound.SUPPORTED_EXTENSIONS\n\t\tvar supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;\n\t\tvar extensionMap = createjs.Sound.EXTENSION_MAP;\n\t\tfor (var i = 0, l = supportedExtensions.length; i < l; i++) {\n\t\t\tvar ext = supportedExtensions[i];\n\t\t\tvar playType = extensionMap[ext] || ext;\n\t\t\ts._capabilities[ext] = (t.canPlayType(\"audio/\" + ext) != \"no\" && t.canPlayType(\"audio/\" + ext) != \"\") || (t.canPlayType(\"audio/\" + playType) != \"no\" && t.canPlayType(\"audio/\" + playType) != \"\");\n\t\t}  // OJR another way to do this might be canPlayType:\"m4a\", codex: mp4\n\t};\n\n\n// public methods\n\tp.register = function (loadItem) {\n\t\tvar tag = createjs.HTMLAudioTagPool.get(loadItem.src);\n\t\tvar loader = this.AbstractPlugin_register(loadItem);\n\t\tloader.setTag(tag);\n\n\t\treturn loader;\n\t};\n\n\tp.removeSound = function (src) {\n\t\tthis.AbstractPlugin_removeSound(src);\n\t\tcreatejs.HTMLAudioTagPool.remove(src);\n\t};\n\n\tp.create = function (src, startTime, duration) {\n\t\tvar si = this.AbstractPlugin_create(src, startTime, duration);\n\t\tsi.playbackResource = null;\n\t\treturn si;\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[HTMLAudioPlugin]\";\n\t};\n\n\t// plugin does not support these\n\tp.setVolume = p.getVolume = p.setMute = null;\n\n\n\tcreatejs.HTMLAudioPlugin = createjs.promote(HTMLAudioPlugin, \"AbstractPlugin\");\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiM3JpMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sYXRlc3QtY3JlYXRlanMvbGliL3NvdW5kanMvc291bmRqcy5qcz9kZWI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuKiBTb3VuZEpTXG4qIFZpc2l0IGh0dHA6Ly9jcmVhdGVqcy5jb20vIGZvciBkb2N1bWVudGF0aW9uLCB1cGRhdGVzIGFuZCBleGFtcGxlcy5cbipcbiogQ29weXJpZ2h0IChjKSAyMDEwIGdza2lubmVyLmNvbSwgaW5jLlxuKlxuKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXRcbiogcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4qIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4qIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZVxuKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuKiBjb25kaXRpb25zOlxuKlxuKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbipcbiogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTXG4qIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4qIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4qIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLFxuKiBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuKiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4qL1xuXG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyB2ZXJzaW9uLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanMgfHwge307XG5cbihmdW5jdGlvbiAoKSB7XG5cblx0LyoqXG5cdCAqIFN0YXRpYyBjbGFzcyBob2xkaW5nIGxpYnJhcnkgc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgdmVyc2lvbiBhbmQgYnVpbGREYXRlIG9mIHRoZSBsaWJyYXJ5LlxuXHQgKiBUaGUgU291bmRKUyBjbGFzcyBoYXMgYmVlbiByZW5hbWVkIHt7I2Nyb3NzTGluayBcIlNvdW5kXCJ9fXt7L2Nyb3NzTGlua319LiAgUGxlYXNlIHNlZSB7eyNjcm9zc0xpbmsgXCJTb3VuZFwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBmb3IgaW5mb3JtYXRpb24gb24gdXNpbmcgc291bmQuXG5cdCAqIEBjbGFzcyBTb3VuZEpTXG5cdCAqKi9cblx0dmFyIHMgPSBjcmVhdGVqcy5Tb3VuZEpTID0gY3JlYXRlanMuU291bmRKUyB8fCB7fTtcblxuXHQvKipcblx0ICogVGhlIHZlcnNpb24gc3RyaW5nIGZvciB0aGlzIHJlbGVhc2UuXG5cdCAqIEBwcm9wZXJ0eSB2ZXJzaW9uXG5cdCAqIEB0eXBlIFN0cmluZ1xuXHQgKiBAc3RhdGljXG5cdCAqKi9cblx0cy52ZXJzaW9uID0gLyo9dmVyc2lvbiovXCIxLjAuMFwiOyAvLyBpbmplY3RlZCBieSBidWlsZCBwcm9jZXNzXG5cblx0LyoqXG5cdCAqIFRoZSBidWlsZCBkYXRlIGZvciB0aGlzIHJlbGVhc2UgaW4gVVRDIGZvcm1hdC5cblx0ICogQHByb3BlcnR5IGJ1aWxkRGF0ZVxuXHQgKiBAdHlwZSBTdHJpbmdcblx0ICogQHN0YXRpY1xuXHQgKiovXG5cdHMuYnVpbGREYXRlID0gLyo9ZGF0ZSovXCJUdWUsIDEwIE9jdCAyMDE3IDEyOjI0OjM1IEdNVFwiOyAvLyBpbmplY3RlZCBieSBidWlsZCBwcm9jZXNzXG5cbn0pKCk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBleHRlbmQuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqc3x8e307XG5cbi8qKlxuICogQGNsYXNzIFV0aWxpdHkgTWV0aG9kc1xuICovXG5cbi8qKlxuICogU2V0cyB1cCB0aGUgcHJvdG90eXBlIGNoYWluIGFuZCBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBmb3IgYSBuZXcgY2xhc3MuXG4gKlxuICogVGhpcyBzaG91bGQgYmUgY2FsbGVkIHJpZ2h0IGFmdGVyIGNyZWF0aW5nIHRoZSBjbGFzcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBcdGZ1bmN0aW9uIE15U3ViQ2xhc3MoKSB7fVxuICogXHRjcmVhdGVqcy5leHRlbmQoTXlTdWJDbGFzcywgTXlTdXBlckNsYXNzKTtcbiAqIFx0TXlTdWJDbGFzcy5wcm90b3R5cGUuZG9Tb21ldGhpbmcgPSBmdW5jdGlvbigpIHsgfVxuICpcbiAqIFx0dmFyIGZvbyA9IG5ldyBNeVN1YkNsYXNzKCk7XG4gKiBcdGNvbnNvbGUubG9nKGZvbyBpbnN0YW5jZW9mIE15U3VwZXJDbGFzcyk7IC8vIHRydWVcbiAqIFx0Y29uc29sZS5sb2coZm9vLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9PT0gTXlTdWJDbGFzcyk7IC8vIHRydWVcbiAqXG4gKiBAbWV0aG9kIGV4dGVuZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ViY2xhc3MgVGhlIHN1YmNsYXNzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3VwZXJjbGFzcyBUaGUgc3VwZXJjbGFzcyB0byBleHRlbmQuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgc3ViY2xhc3MncyBuZXcgcHJvdG90eXBlLlxuICovXG5jcmVhdGVqcy5leHRlbmQgPSBmdW5jdGlvbihzdWJjbGFzcywgc3VwZXJjbGFzcykge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRmdW5jdGlvbiBvKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gc3ViY2xhc3M7IH1cblx0by5wcm90b3R5cGUgPSBzdXBlcmNsYXNzLnByb3RvdHlwZTtcblx0cmV0dXJuIChzdWJjbGFzcy5wcm90b3R5cGUgPSBuZXcgbygpKTtcbn07XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBwcm9tb3RlLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanN8fHt9O1xuXG4vKipcbiAqIEBjbGFzcyBVdGlsaXR5IE1ldGhvZHNcbiAqL1xuXG4vKipcbiAqIFByb21vdGVzIGFueSBtZXRob2RzIG9uIHRoZSBzdXBlciBjbGFzcyB0aGF0IHdlcmUgb3ZlcnJpZGRlbiwgYnkgY3JlYXRpbmcgYW4gYWxpYXMgaW4gdGhlIGZvcm1hdCBgcHJlZml4X21ldGhvZE5hbWVgLlxuICogSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBzdXBlciBjbGFzcydzIG5hbWUgYXMgdGhlIHByZWZpeC5cbiAqIEFuIGFsaWFzIHRvIHRoZSBzdXBlciBjbGFzcydzIGNvbnN0cnVjdG9yIGlzIGFsd2F5cyBhZGRlZCBpbiB0aGUgZm9ybWF0IGBwcmVmaXhfY29uc3RydWN0b3JgLlxuICogVGhpcyBhbGxvd3MgdGhlIHN1YmNsYXNzIHRvIGNhbGwgc3VwZXIgY2xhc3MgbWV0aG9kcyB3aXRob3V0IHVzaW5nIGBmdW5jdGlvbi5jYWxsYCwgcHJvdmlkaW5nIGJldHRlciBwZXJmb3JtYW5jZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaWYgYE15U3ViQ2xhc3NgIGV4dGVuZHMgYE15U3VwZXJDbGFzc2AsIGFuZCBib3RoIGRlZmluZSBhIGBkcmF3YCBtZXRob2QsIHRoZW4gY2FsbGluZyBgcHJvbW90ZShNeVN1YkNsYXNzLCBcIk15U3VwZXJDbGFzc1wiKWBcbiAqIHdvdWxkIGFkZCBhIGBNeVN1cGVyQ2xhc3NfY29uc3RydWN0b3JgIG1ldGhvZCB0byBNeVN1YkNsYXNzIGFuZCBwcm9tb3RlIHRoZSBgZHJhd2AgbWV0aG9kIG9uIGBNeVN1cGVyQ2xhc3NgIHRvIHRoZVxuICogcHJvdG90eXBlIG9mIGBNeVN1YkNsYXNzYCBhcyBgTXlTdXBlckNsYXNzX2RyYXdgLlxuICpcbiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciB0aGUgY2xhc3MncyBwcm90b3R5cGUgaXMgZnVsbHkgZGVmaW5lZC5cbiAqXG4gKiBcdGZ1bmN0aW9uIENsYXNzQShuYW1lKSB7XG4gKiBcdFx0dGhpcy5uYW1lID0gbmFtZTtcbiAqIFx0fVxuICogXHRDbGFzc0EucHJvdG90eXBlLmdyZWV0ID0gZnVuY3Rpb24oKSB7XG4gKiBcdFx0cmV0dXJuIFwiSGVsbG8gXCIrdGhpcy5uYW1lO1xuICogXHR9XG4gKlxuICogXHRmdW5jdGlvbiBDbGFzc0IobmFtZSwgcHVuY3R1YXRpb24pIHtcbiAqIFx0XHR0aGlzLkNsYXNzQV9jb25zdHJ1Y3RvcihuYW1lKTtcbiAqIFx0XHR0aGlzLnB1bmN0dWF0aW9uID0gcHVuY3R1YXRpb247XG4gKiBcdH1cbiAqIFx0Y3JlYXRlanMuZXh0ZW5kKENsYXNzQiwgQ2xhc3NBKTtcbiAqIFx0Q2xhc3NCLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogXHRcdHJldHVybiB0aGlzLkNsYXNzQV9ncmVldCgpK3RoaXMucHVuY3R1YXRpb247XG4gKiBcdH1cbiAqIFx0Y3JlYXRlanMucHJvbW90ZShDbGFzc0IsIFwiQ2xhc3NBXCIpO1xuICpcbiAqIFx0dmFyIGZvbyA9IG5ldyBDbGFzc0IoXCJXb3JsZFwiLCBcIiE/IVwiKTtcbiAqIFx0Y29uc29sZS5sb2coZm9vLmdyZWV0KCkpOyAvLyBIZWxsbyBXb3JsZCE/IVxuICpcbiAqIEBtZXRob2QgcHJvbW90ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ViY2xhc3MgVGhlIGNsYXNzIHRvIHByb21vdGUgc3VwZXIgY2xhc3MgbWV0aG9kcyBvbi5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggVGhlIHByZWZpeCB0byBhZGQgdG8gdGhlIHByb21vdGVkIG1ldGhvZCBuYW1lcy4gVXN1YWxseSB0aGUgbmFtZSBvZiB0aGUgc3VwZXJjbGFzcy5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBzdWJjbGFzcy5cbiAqL1xuY3JlYXRlanMucHJvbW90ZSA9IGZ1bmN0aW9uKHN1YmNsYXNzLCBwcmVmaXgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHN1YlAgPSBzdWJjbGFzcy5wcm90b3R5cGUsIHN1cFAgPSAoT2JqZWN0LmdldFByb3RvdHlwZU9mJiZPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc3ViUCkpfHxzdWJQLl9fcHJvdG9fXztcblx0aWYgKHN1cFApIHtcblx0XHRzdWJQWyhwcmVmaXgrPVwiX1wiKSArIFwiY29uc3RydWN0b3JcIl0gPSBzdXBQLmNvbnN0cnVjdG9yOyAvLyBjb25zdHJ1Y3RvciBpcyBub3QgYWx3YXlzIGlubnVtZXJhYmxlXG5cdFx0Zm9yICh2YXIgbiBpbiBzdXBQKSB7XG5cdFx0XHRpZiAoc3ViUC5oYXNPd25Qcm9wZXJ0eShuKSAmJiAodHlwZW9mIHN1cFBbbl0gPT0gXCJmdW5jdGlvblwiKSkgeyBzdWJQW3ByZWZpeCArIG5dID0gc3VwUFtuXTsgfVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gc3ViY2xhc3M7XG59O1xuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gZGVwcmVjYXRlLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanN8fHt9O1xuXG4vKipcbiAqIEBjbGFzcyBVdGlsaXR5IE1ldGhvZHNcbiAqL1xuXG4vKipcbiAqIFdyYXBzIGRlcHJlY2F0ZWQgbWV0aG9kcyBzbyB0aGV5IHN0aWxsIGJlIHVzZWQsIGJ1dCB0aHJvdyB3YXJuaW5ncyB0byBkZXZlbG9wZXJzLlxuICpcbiAqXHRvYmouZGVwcmVjYXRlZE1ldGhvZCA9IGNyZWF0ZWpzLmRlcHJlY2F0ZShcIk9sZCBNZXRob2QgTmFtZVwiLCBvYmouX2ZhbGxiYWNrTWV0aG9kKTtcbiAqXG4gKiBUaGUgcmVjb21tZW5kZWQgYXBwcm9hY2ggZm9yIGRlcHJlY2F0ZWQgcHJvcGVydGllcyBpczpcbiAqXG4gKlx0dHJ5IHtcbiAqXHRcdE9ialx0ZWN0LmRlZmluZVByb3BlcnRpZXMob2JqZWN0LCB7XG4gKlx0XHRcdHJlYWR5T25seVByb3A6IHsgZ2V0OiBjcmVhdGVqcy5kZXByZWNhdGUoXCJyZWFkT25seVByb3BcIiwgZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmFsdGVybmF0ZVByb3A7IH0pIH0sXG4gKlx0XHRcdHJlYWRXcml0ZVByb3A6IHtcbiAqXHRcdFx0XHRnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShcInJlYWRPbmx5UHJvcFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuYWx0ZXJuYXRlUHJvcDsgfSksXG4gKlx0XHRcdFx0c2V0OiBjcmVhdGVqcy5kZXByZWNhdGUoXCJyZWFkT25seVByb3BcIiwgZnVuY3Rpb24odmFsKSB7IHRoaXMuYWx0ZXJuYXRlUHJvcCA9IHZhbDsgfSlcbiAqXHRcdH0pO1xuICpcdH0gY2F0Y2ggKGUpIHt9XG4gKlxuICogQG1ldGhvZCBkZXByZWNhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmYWxsYmFja01ldGhvZD1udWxsXSBBIG1ldGhvZCB0byBjYWxsIHdoZW4gdGhlIGRlcHJlY2F0ZWQgbWV0aG9kIGlzIHVzZWQuIFNlZSB0aGUgZXhhbXBsZSBmb3IgaG93XG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWU9bnVsbF0gVGhlIG5hbWUgb2YgdGhlIG1ldGhvZCBvciBwcm9wZXJ0eSB0byBkaXNwbGF5IGluIHRoZSBjb25zb2xlIHdhcm5pbmcuXG4gKiB0byBkZXByZWNhdGUgcHJvcGVydGllcy5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBJZiBhIGZhbGxiYWNrTWV0aG9kIGlzIHN1cHBsaWVkLCByZXR1cm5zIGEgY2xvc3VyZSB0aGF0IHdpbGwgY2FsbCB0aGUgZmFsbGJhY2sgbWV0aG9kIGFmdGVyXG4gKiBsb2dnaW5nIHRoZSB3YXJuaW5nIGluIHRoZSBjb25zb2xlLlxuICovXG5jcmVhdGVqcy5kZXByZWNhdGUgPSBmdW5jdGlvbihmYWxsYmFja01ldGhvZCwgbmFtZSkge1xuXHRcInVzZSBzdHJpY3RcIjtcblx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtc2cgPSBcIkRlcHJlY2F0ZWQgcHJvcGVydHkgb3IgbWV0aG9kICdcIituYW1lK1wiJy4gU2VlIGRvY3MgZm9yIGluZm8uXCI7XG5cdFx0Y29uc29sZSAmJiAoY29uc29sZS53YXJuID8gY29uc29sZS53YXJuKG1zZykgOiBjb25zb2xlLmxvZyhtc2cpKTtcblx0XHRyZXR1cm4gZmFsbGJhY2tNZXRob2QgJiYgZmFsbGJhY2tNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0fVxufTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIGluZGV4T2YuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqc3x8e307XG5cbi8qKlxuICogQGNsYXNzIFV0aWxpdHkgTWV0aG9kc1xuICovXG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYSBzcGVjaWZpZWQgdmFsdWUgc2VhcmNoRWxlbWVudCBpbiB0aGUgcGFzc2VkIGluIGFycmF5LCBhbmQgcmV0dXJucyB0aGUgaW5kZXggb2ZcbiAqIHRoYXQgdmFsdWUuICBSZXR1cm5zIC0xIGlmIHZhbHVlIGlzIG5vdCBmb3VuZC5cbiAqXG4gKiAgICAgIHZhciBpID0gY3JlYXRlanMuaW5kZXhPZihteUFycmF5LCBteUVsZW1lbnRUb0ZpbmQpO1xuICpcbiAqIEBtZXRob2QgaW5kZXhPZlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgdG8gc2VhcmNoIGZvciBzZWFyY2hFbGVtZW50XG4gKiBAcGFyYW0gc2VhcmNoRWxlbWVudCBFbGVtZW50IHRvIGZpbmQgaW4gYXJyYXkuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBmaXJzdCBpbmRleCBvZiBzZWFyY2hFbGVtZW50IGluIGFycmF5LlxuICovXG5jcmVhdGVqcy5pbmRleE9mID0gZnVuY3Rpb24gKGFycmF5LCBzZWFyY2hFbGVtZW50KXtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0Zm9yICh2YXIgaSA9IDAsbD1hcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRpZiAoc2VhcmNoRWxlbWVudCA9PT0gYXJyYXlbaV0pIHtcblx0XHRcdHJldHVybiBpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gLTE7XG59O1xuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gcHJveHkuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqc3x8e307XG5cbi8qKlxuICogVmFyaW91cyB1dGlsaXRpZXMgdGhhdCB0aGUgQ3JlYXRlSlMgU3VpdGUgdXNlcy4gVXRpbGl0aWVzIGFyZSBjcmVhdGVkIGFzIHNlcGFyYXRlIGZpbGVzLCBhbmQgd2lsbCBiZSBhdmFpbGFibGUgb24gdGhlXG4gKiBjcmVhdGVqcyBuYW1lc3BhY2UgZGlyZWN0bHkuXG4gKlxuICogPGg0PkV4YW1wbGU8L2g0PlxuICpcbiAqICAgICAgbXlPYmplY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBjcmVhdGVqcy5wcm94eShteU1ldGhvZCwgc2NvcGUpKTtcbiAqXG4gKiBAY2xhc3MgVXRpbGl0eSBNZXRob2RzXG4gKiBAbWFpbiBVdGlsaXR5IE1ldGhvZHNcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBBIGZ1bmN0aW9uIHByb3h5IGZvciBtZXRob2RzLiBCeSBkZWZhdWx0LCBKYXZhU2NyaXB0IG1ldGhvZHMgZG8gbm90IG1haW50YWluIHNjb3BlLCBzbyBwYXNzaW5nIGEgbWV0aG9kIGFzIGFcblx0ICogY2FsbGJhY2sgd2lsbCByZXN1bHQgaW4gdGhlIG1ldGhvZCBnZXR0aW5nIGNhbGxlZCBpbiB0aGUgc2NvcGUgb2YgdGhlIGNhbGxlci4gVXNpbmcgYSBwcm94eSBlbnN1cmVzIHRoYXQgdGhlXG5cdCAqIG1ldGhvZCBnZXRzIGNhbGxlZCBpbiB0aGUgY29ycmVjdCBzY29wZS5cblx0ICpcblx0ICogQWRkaXRpb25hbCBhcmd1bWVudHMgY2FuIGJlIHBhc3NlZCB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZnVuY3Rpb24gd2hlbiBpdCBpcyBjYWxsZWQuXG5cdCAqXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cblx0ICpcblx0ICogICAgICBteU9iamVjdC5hZGRFdmVudExpc3RlbmVyKFwiZXZlbnRcIiwgY3JlYXRlanMucHJveHkobXlIYW5kbGVyLCB0aGlzLCBhcmcxLCBhcmcyKSk7XG5cdCAqXG5cdCAqICAgICAgZnVuY3Rpb24gbXlIYW5kbGVyKGFyZzEsIGFyZzIpIHtcblx0ICogICAgICAgICAgIC8vIFRoaXMgZ2V0cyBjYWxsZWQgd2hlbiBteU9iamVjdC5teUNhbGxiYWNrIGlzIGV4ZWN1dGVkLlxuXHQgKiAgICAgIH1cblx0ICpcblx0ICogQG1ldGhvZCBwcm94eVxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2QgVGhlIGZ1bmN0aW9uIHRvIGNhbGxcblx0ICogQHBhcmFtIHtPYmplY3R9IHNjb3BlIFRoZSBzY29wZSB0byBjYWxsIHRoZSBtZXRob2QgbmFtZSBvblxuXHQgKiBAcGFyYW0ge21peGVkfSBbYXJnXSAqIEFyZ3VtZW50cyB0aGF0IGFyZSBhcHBlbmRlZCB0byB0aGUgY2FsbGJhY2sgZm9yIGFkZGl0aW9uYWwgcGFyYW1zLlxuXHQgKiBAcHVibGljXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdGNyZWF0ZWpzLnByb3h5ID0gZnVuY3Rpb24gKG1ldGhvZCwgc2NvcGUpIHtcblx0XHR2YXIgYUFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gbWV0aG9kLmFwcGx5KHNjb3BlLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApLmNvbmNhdChhQXJncykpO1xuXHRcdH07XG5cdH1cblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEJyb3dzZXJEZXRlY3QuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqc3x8e307XG5cbi8qKlxuICogQGNsYXNzIFV0aWxpdHkgTWV0aG9kc1xuICovXG4oZnVuY3Rpb24oKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBBbiBvYmplY3QgdGhhdCBkZXRlcm1pbmVzIHRoZSBjdXJyZW50IGJyb3dzZXIsIHZlcnNpb24sIG9wZXJhdGluZyBzeXN0ZW0sIGFuZCBvdGhlciBlbnZpcm9ubWVudFxuXHQgKiB2YXJpYWJsZXMgdmlhIHVzZXIgYWdlbnQgc3RyaW5nLlxuXHQgKlxuXHQgKiBVc2VkIGZvciBhdWRpbyBiZWNhdXNlIGZlYXR1cmUgZGV0ZWN0aW9uIGlzIHVuYWJsZSB0byBkZXRlY3QgdGhlIG1hbnkgbGltaXRhdGlvbnMgb2YgbW9iaWxlIGRldmljZXMuXG5cdCAqXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cblx0ICpcblx0ICogICAgICBpZiAoY3JlYXRlanMuQnJvd3NlckRldGVjdC5pc0lPUykgeyAvLyBkbyBzdHVmZiB9XG5cdCAqXG5cdCAqIEBwcm9wZXJ0eSBCcm93c2VyRGV0ZWN0XG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNGaXJlZm94IFRydWUgaWYgb3VyIGJyb3dzZXIgaXMgRmlyZWZveC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBpc09wZXJhIFRydWUgaWYgb3VyIGJyb3dzZXIgaXMgb3BlcmEuXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNDaHJvbWUgVHJ1ZSBpZiBvdXIgYnJvd3NlciBpcyBDaHJvbWUuICBOb3RlIHRoYXQgQ2hyb21lIGZvciBBbmRyb2lkIHJldHVybnMgdHJ1ZSwgYnV0IGlzIGFcblx0ICogY29tcGxldGVseSBkaWZmZXJlbnQgYnJvd3NlciB3aXRoIGRpZmZlcmVudCBhYmlsaXRpZXMuXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNJT1MgVHJ1ZSBpZiBvdXIgYnJvd3NlciBpcyBzYWZhcmkgZm9yIGlPUyBkZXZpY2VzIChpUGFkLCBpUGhvbmUsIGFuZCBpUG9kKS5cblx0ICogQHBhcmFtIHtCb29sZWFufSBpc0FuZHJvaWQgVHJ1ZSBpZiBvdXIgYnJvd3NlciBpcyBBbmRyb2lkLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGlzQmxhY2tiZXJyeSBUcnVlIGlmIG91ciBicm93c2VyIGlzIEJsYWNrYmVycnkuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRmdW5jdGlvbiBCcm93c2VyRGV0ZWN0KCkge1xuXHRcdHRocm93IFwiQnJvd3NlckRldGVjdCBjYW5ub3QgYmUgaW5zdGFudGlhdGVkXCI7XG5cdH07XG5cblx0dmFyIGFnZW50ID0gQnJvd3NlckRldGVjdC5hZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXHRCcm93c2VyRGV0ZWN0LmlzV2luZG93UGhvbmUgPSAoYWdlbnQuaW5kZXhPZihcIklFTW9iaWxlXCIpID4gLTEpIHx8IChhZ2VudC5pbmRleE9mKFwiV2luZG93cyBQaG9uZVwiKSA+IC0xKTtcblx0QnJvd3NlckRldGVjdC5pc0ZpcmVmb3ggPSAoYWdlbnQuaW5kZXhPZihcIkZpcmVmb3hcIikgPiAtMSk7XG5cdEJyb3dzZXJEZXRlY3QuaXNPcGVyYSA9ICh3aW5kb3cub3BlcmEgIT0gbnVsbCk7XG5cdEJyb3dzZXJEZXRlY3QuaXNDaHJvbWUgPSAoYWdlbnQuaW5kZXhPZihcIkNocm9tZVwiKSA+IC0xKTsgIC8vIE5PVEUgdGhhdCBDaHJvbWUgb24gQW5kcm9pZCByZXR1cm5zIHRydWUgYnV0IGlzIGEgY29tcGxldGVseSBkaWZmZXJlbnQgYnJvd3NlciB3aXRoIGRpZmZlcmVudCBhYmlsaXRpZXNcblx0QnJvd3NlckRldGVjdC5pc0lPUyA9IChhZ2VudC5pbmRleE9mKFwiaVBvZFwiKSA+IC0xIHx8IGFnZW50LmluZGV4T2YoXCJpUGhvbmVcIikgPiAtMSB8fCBhZ2VudC5pbmRleE9mKFwiaVBhZFwiKSA+IC0xKSAmJiAhQnJvd3NlckRldGVjdC5pc1dpbmRvd1Bob25lO1xuXHRCcm93c2VyRGV0ZWN0LmlzQW5kcm9pZCA9IChhZ2VudC5pbmRleE9mKFwiQW5kcm9pZFwiKSA+IC0xKSAmJiAhQnJvd3NlckRldGVjdC5pc1dpbmRvd1Bob25lO1xuXHRCcm93c2VyRGV0ZWN0LmlzQmxhY2tiZXJyeSA9IChhZ2VudC5pbmRleE9mKFwiQmxhY2tiZXJyeVwiKSA+IC0xKTtcblxuXHRjcmVhdGVqcy5Ccm93c2VyRGV0ZWN0ID0gQnJvd3NlckRldGVjdDtcblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEV2ZW50RGlzcGF0Y2hlci5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzfHx7fTtcclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblxyXG4vLyBjb25zdHJ1Y3RvcjpcclxuXHQvKipcclxuXHQgKiBFdmVudERpc3BhdGNoZXIgcHJvdmlkZXMgbWV0aG9kcyBmb3IgbWFuYWdpbmcgcXVldWVzIG9mIGV2ZW50IGxpc3RlbmVycyBhbmQgZGlzcGF0Y2hpbmcgZXZlbnRzLlxyXG5cdCAqXHJcblx0ICogWW91IGNhbiBlaXRoZXIgZXh0ZW5kIEV2ZW50RGlzcGF0Y2hlciBvciBtaXggaXRzIG1ldGhvZHMgaW50byBhbiBleGlzdGluZyBwcm90b3R5cGUgb3IgaW5zdGFuY2UgYnkgdXNpbmcgdGhlXHJcblx0ICogRXZlbnREaXNwYXRjaGVyIHt7I2Nyb3NzTGluayBcIkV2ZW50RGlzcGF0Y2hlci9pbml0aWFsaXplXCJ9fXt7L2Nyb3NzTGlua319IG1ldGhvZC5cclxuXHQgKiBcclxuXHQgKiBUb2dldGhlciB3aXRoIHRoZSBDcmVhdGVKUyBFdmVudCBjbGFzcywgRXZlbnREaXNwYXRjaGVyIHByb3ZpZGVzIGFuIGV4dGVuZGVkIGV2ZW50IG1vZGVsIHRoYXQgaXMgYmFzZWQgb24gdGhlXHJcblx0ICogRE9NIExldmVsIDIgZXZlbnQgbW9kZWwsIGluY2x1ZGluZyBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBhbmQgZGlzcGF0Y2hFdmVudC4gSXQgc3VwcG9ydHNcclxuXHQgKiBidWJibGluZyAvIGNhcHR1cmUsIHByZXZlbnREZWZhdWx0LCBzdG9wUHJvcGFnYXRpb24sIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiwgYW5kIGhhbmRsZUV2ZW50LlxyXG5cdCAqIFxyXG5cdCAqIEV2ZW50RGlzcGF0Y2hlciBhbHNvIGV4cG9zZXMgYSB7eyNjcm9zc0xpbmsgXCJFdmVudERpc3BhdGNoZXIvb25cIn19e3svY3Jvc3NMaW5rfX0gbWV0aG9kLCB3aGljaCBtYWtlcyBpdCBlYXNpZXJcclxuXHQgKiB0byBjcmVhdGUgc2NvcGVkIGxpc3RlbmVycywgbGlzdGVuZXJzIHRoYXQgb25seSBydW4gb25jZSwgYW5kIGxpc3RlbmVycyB3aXRoIGFzc29jaWF0ZWQgYXJiaXRyYXJ5IGRhdGEuIFRoZSBcclxuXHQgKiB7eyNjcm9zc0xpbmsgXCJFdmVudERpc3BhdGNoZXIvb2ZmXCJ9fXt7L2Nyb3NzTGlua319IG1ldGhvZCBpcyBtZXJlbHkgYW4gYWxpYXMgdG9cclxuXHQgKiB7eyNjcm9zc0xpbmsgXCJFdmVudERpc3BhdGNoZXIvcmVtb3ZlRXZlbnRMaXN0ZW5lclwifX17ey9jcm9zc0xpbmt9fS5cclxuXHQgKiBcclxuXHQgKiBBbm90aGVyIGFkZGl0aW9uIHRvIHRoZSBET00gTGV2ZWwgMiBtb2RlbCBpcyB0aGUge3sjY3Jvc3NMaW5rIFwiRXZlbnREaXNwYXRjaGVyL3JlbW92ZUFsbEV2ZW50TGlzdGVuZXJzXCJ9fXt7L2Nyb3NzTGlua319XHJcblx0ICogbWV0aG9kLCB3aGljaCBjYW4gYmUgdXNlZCB0byBsaXN0ZW5lcnMgZm9yIGFsbCBldmVudHMsIG9yIGxpc3RlbmVycyBmb3IgYSBzcGVjaWZpYyBldmVudC4gVGhlIEV2ZW50IG9iamVjdCBhbHNvIFxyXG5cdCAqIGluY2x1ZGVzIGEge3sjY3Jvc3NMaW5rIFwiRXZlbnQvcmVtb3ZlXCJ9fXt7L2Nyb3NzTGlua319IG1ldGhvZCB3aGljaCByZW1vdmVzIHRoZSBhY3RpdmUgbGlzdGVuZXIuXHJcblx0ICpcclxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XHJcblx0ICogQWRkIEV2ZW50RGlzcGF0Y2hlciBjYXBhYmlsaXRpZXMgdG8gdGhlIFwiTXlDbGFzc1wiIGNsYXNzLlxyXG5cdCAqXHJcblx0ICogICAgICBFdmVudERpc3BhdGNoZXIuaW5pdGlhbGl6ZShNeUNsYXNzLnByb3RvdHlwZSk7XHJcblx0ICpcclxuXHQgKiBBZGQgYW4gZXZlbnQgKHNlZSB7eyNjcm9zc0xpbmsgXCJFdmVudERpc3BhdGNoZXIvYWRkRXZlbnRMaXN0ZW5lclwifX17ey9jcm9zc0xpbmt9fSkuXHJcblx0ICpcclxuXHQgKiAgICAgIGluc3RhbmNlLmFkZEV2ZW50TGlzdGVuZXIoXCJldmVudE5hbWVcIiwgaGFuZGxlck1ldGhvZCk7XHJcblx0ICogICAgICBmdW5jdGlvbiBoYW5kbGVyTWV0aG9kKGV2ZW50KSB7XHJcblx0ICogICAgICAgICAgY29uc29sZS5sb2coZXZlbnQudGFyZ2V0ICsgXCIgV2FzIENsaWNrZWRcIik7XHJcblx0ICogICAgICB9XHJcblx0ICpcclxuXHQgKiA8Yj5NYWludGFpbmluZyBwcm9wZXIgc2NvcGU8L2I+PGJyIC8+XHJcblx0ICogU2NvcGUgKGllLiBcInRoaXNcIikgY2FuIGJlIGJlIGEgY2hhbGxlbmdlIHdpdGggZXZlbnRzLiBVc2luZyB0aGUge3sjY3Jvc3NMaW5rIFwiRXZlbnREaXNwYXRjaGVyL29uXCJ9fXt7L2Nyb3NzTGlua319XHJcblx0ICogbWV0aG9kIHRvIHN1YnNjcmliZSB0byBldmVudHMgc2ltcGxpZmllcyB0aGlzLlxyXG5cdCAqXHJcblx0ICogICAgICBpbnN0YW5jZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcclxuXHQgKiAgICAgICAgICBjb25zb2xlLmxvZyhpbnN0YW5jZSA9PSB0aGlzKTsgLy8gZmFsc2UsIHNjb3BlIGlzIGFtYmlndW91cy5cclxuXHQgKiAgICAgIH0pO1xyXG5cdCAqICAgICAgXHJcblx0ICogICAgICBpbnN0YW5jZS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0ICogICAgICAgICAgY29uc29sZS5sb2coaW5zdGFuY2UgPT0gdGhpcyk7IC8vIHRydWUsIFwib25cIiB1c2VzIGRpc3BhdGNoZXIgc2NvcGUgYnkgZGVmYXVsdC5cclxuXHQgKiAgICAgIH0pO1xyXG5cdCAqIFxyXG5cdCAqIElmIHlvdSB3YW50IHRvIHVzZSBhZGRFdmVudExpc3RlbmVyIGluc3RlYWQsIHlvdSBtYXkgd2FudCB0byB1c2UgZnVuY3Rpb24uYmluZCgpIG9yIGEgc2ltaWxhciBwcm94eSB0byBtYW5hZ2VcclxuXHQgKiBzY29wZS5cclxuXHQgKlxyXG5cdCAqIDxiPkJyb3dzZXIgc3VwcG9ydDwvYj5cclxuXHQgKiBUaGUgZXZlbnQgbW9kZWwgaW4gQ3JlYXRlSlMgY2FuIGJlIHVzZWQgc2VwYXJhdGVseSBmcm9tIHRoZSBzdWl0ZSBpbiBhbnkgcHJvamVjdCwgaG93ZXZlciB0aGUgaW5oZXJpdGFuY2UgbW9kZWxcclxuXHQgKiByZXF1aXJlcyBtb2Rlcm4gYnJvd3NlcnMgKElFOSspLlxyXG5cdCAqICAgICAgXHJcblx0ICpcclxuXHQgKiBAY2xhc3MgRXZlbnREaXNwYXRjaGVyXHJcblx0ICogQGNvbnN0cnVjdG9yXHJcblx0ICoqL1xyXG5cdGZ1bmN0aW9uIEV2ZW50RGlzcGF0Y2hlcigpIHtcclxuXHRcclxuXHRcclxuXHQvLyBwcml2YXRlIHByb3BlcnRpZXM6XHJcblx0XHQvKipcclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEBwcm9wZXJ0eSBfbGlzdGVuZXJzXHJcblx0XHQgKiBAdHlwZSBPYmplY3RcclxuXHRcdCAqKi9cclxuXHRcdHRoaXMuX2xpc3RlbmVycyA9IG51bGw7XHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHByb3BlcnR5IF9jYXB0dXJlTGlzdGVuZXJzXHJcblx0XHQgKiBAdHlwZSBPYmplY3RcclxuXHRcdCAqKi9cclxuXHRcdHRoaXMuX2NhcHR1cmVMaXN0ZW5lcnMgPSBudWxsO1xyXG5cdH1cclxuXHR2YXIgcCA9IEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGU7XHJcblxyXG4vLyBzdGF0aWMgcHVibGljIG1ldGhvZHM6XHJcblx0LyoqXHJcblx0ICogU3RhdGljIGluaXRpYWxpemVyIHRvIG1peCBFdmVudERpc3BhdGNoZXIgbWV0aG9kcyBpbnRvIGEgdGFyZ2V0IG9iamVjdCBvciBwcm90b3R5cGUuXHJcblx0ICogXHJcblx0ICogXHRcdEV2ZW50RGlzcGF0Y2hlci5pbml0aWFsaXplKE15Q2xhc3MucHJvdG90eXBlKTsgLy8gYWRkIHRvIHRoZSBwcm90b3R5cGUgb2YgdGhlIGNsYXNzXHJcblx0ICogXHRcdEV2ZW50RGlzcGF0Y2hlci5pbml0aWFsaXplKG15T2JqZWN0KTsgLy8gYWRkIHRvIGEgc3BlY2lmaWMgaW5zdGFuY2VcclxuXHQgKiBcclxuXHQgKiBAbWV0aG9kIGluaXRpYWxpemVcclxuXHQgKiBAc3RhdGljXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCB0byBpbmplY3QgRXZlbnREaXNwYXRjaGVyIG1ldGhvZHMgaW50by4gVGhpcyBjYW4gYmUgYW4gaW5zdGFuY2Ugb3IgYVxyXG5cdCAqIHByb3RvdHlwZS5cclxuXHQgKiovXHJcblx0RXZlbnREaXNwYXRjaGVyLmluaXRpYWxpemUgPSBmdW5jdGlvbih0YXJnZXQpIHtcclxuXHRcdHRhcmdldC5hZGRFdmVudExpc3RlbmVyID0gcC5hZGRFdmVudExpc3RlbmVyO1xyXG5cdFx0dGFyZ2V0Lm9uID0gcC5vbjtcclxuXHRcdHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyID0gdGFyZ2V0Lm9mZiA9ICBwLnJlbW92ZUV2ZW50TGlzdGVuZXI7XHJcblx0XHR0YXJnZXQucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMgPSBwLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzO1xyXG5cdFx0dGFyZ2V0Lmhhc0V2ZW50TGlzdGVuZXIgPSBwLmhhc0V2ZW50TGlzdGVuZXI7XHJcblx0XHR0YXJnZXQuZGlzcGF0Y2hFdmVudCA9IHAuZGlzcGF0Y2hFdmVudDtcclxuXHRcdHRhcmdldC5fZGlzcGF0Y2hFdmVudCA9IHAuX2Rpc3BhdGNoRXZlbnQ7XHJcblx0XHR0YXJnZXQud2lsbFRyaWdnZXIgPSBwLndpbGxUcmlnZ2VyO1xyXG5cdH07XHJcblx0XHJcblxyXG4vLyBwdWJsaWMgbWV0aG9kczpcclxuXHQvKipcclxuXHQgKiBBZGRzIHRoZSBzcGVjaWZpZWQgZXZlbnQgbGlzdGVuZXIuIE5vdGUgdGhhdCBhZGRpbmcgbXVsdGlwbGUgbGlzdGVuZXJzIHRvIHRoZSBzYW1lIGZ1bmN0aW9uIHdpbGwgcmVzdWx0IGluXHJcblx0ICogbXVsdGlwbGUgY2FsbGJhY2tzIGdldHRpbmcgZmlyZWQuXHJcblx0ICpcclxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XHJcblx0ICpcclxuXHQgKiAgICAgIGRpc3BsYXlPYmplY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrKTtcclxuXHQgKiAgICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XHJcblx0ICogICAgICAgICAvLyBDbGljayBoYXBwZW5lZC5cclxuXHQgKiAgICAgIH1cclxuXHQgKlxyXG5cdCAqIEBtZXRob2QgYWRkRXZlbnRMaXN0ZW5lclxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBzdHJpbmcgdHlwZSBvZiB0aGUgZXZlbnQuXHJcblx0ICogQHBhcmFtIHtGdW5jdGlvbiB8IE9iamVjdH0gbGlzdGVuZXIgQW4gb2JqZWN0IHdpdGggYSBoYW5kbGVFdmVudCBtZXRob2QsIG9yIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuXHJcblx0ICogdGhlIGV2ZW50IGlzIGRpc3BhdGNoZWQuXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbdXNlQ2FwdHVyZV0gRm9yIGV2ZW50cyB0aGF0IGJ1YmJsZSwgaW5kaWNhdGVzIHdoZXRoZXIgdG8gbGlzdGVuIGZvciB0aGUgZXZlbnQgaW4gdGhlIGNhcHR1cmUgb3IgYnViYmxpbmcvdGFyZ2V0IHBoYXNlLlxyXG5cdCAqIEByZXR1cm4ge0Z1bmN0aW9uIHwgT2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0ZW5lciBmb3IgY2hhaW5pbmcgb3IgYXNzaWdubWVudC5cclxuXHQgKiovXHJcblx0cC5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIsIHVzZUNhcHR1cmUpIHtcclxuXHRcdHZhciBsaXN0ZW5lcnM7XHJcblx0XHRpZiAodXNlQ2FwdHVyZSkge1xyXG5cdFx0XHRsaXN0ZW5lcnMgPSB0aGlzLl9jYXB0dXJlTGlzdGVuZXJzID0gdGhpcy5fY2FwdHVyZUxpc3RlbmVyc3x8e307XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnN8fHt9O1xyXG5cdFx0fVxyXG5cdFx0dmFyIGFyciA9IGxpc3RlbmVyc1t0eXBlXTtcclxuXHRcdGlmIChhcnIpIHsgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTsgfVxyXG5cdFx0YXJyID0gbGlzdGVuZXJzW3R5cGVdOyAvLyByZW1vdmUgbWF5IGhhdmUgZGVsZXRlZCB0aGUgYXJyYXlcclxuXHRcdGlmICghYXJyKSB7IGxpc3RlbmVyc1t0eXBlXSA9IFtsaXN0ZW5lcl07ICB9XHJcblx0XHRlbHNlIHsgYXJyLnB1c2gobGlzdGVuZXIpOyB9XHJcblx0XHRyZXR1cm4gbGlzdGVuZXI7XHJcblx0fTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBBIHNob3J0Y3V0IG1ldGhvZCBmb3IgdXNpbmcgYWRkRXZlbnRMaXN0ZW5lciB0aGF0IG1ha2VzIGl0IGVhc2llciB0byBzcGVjaWZ5IGFuIGV4ZWN1dGlvbiBzY29wZSwgaGF2ZSBhIGxpc3RlbmVyXHJcblx0ICogb25seSBydW4gb25jZSwgYXNzb2NpYXRlIGFyYml0cmFyeSBkYXRhIHdpdGggdGhlIGxpc3RlbmVyLCBhbmQgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cclxuXHQgKiBcclxuXHQgKiBUaGlzIG1ldGhvZCB3b3JrcyBieSBjcmVhdGluZyBhbiBhbm9ueW1vdXMgd3JhcHBlciBmdW5jdGlvbiBhbmQgc3Vic2NyaWJpbmcgaXQgd2l0aCBhZGRFdmVudExpc3RlbmVyLlxyXG5cdCAqIFRoZSB3cmFwcGVyIGZ1bmN0aW9uIGlzIHJldHVybmVkIGZvciB1c2Ugd2l0aCBgcmVtb3ZlRXZlbnRMaXN0ZW5lcmAgKG9yIGBvZmZgKS5cclxuXHQgKiBcclxuXHQgKiA8Yj5JTVBPUlRBTlQ6PC9iPiBUbyByZW1vdmUgYSBsaXN0ZW5lciBhZGRlZCB3aXRoIGBvbmAsIHlvdSBtdXN0IHBhc3MgaW4gdGhlIHJldHVybmVkIHdyYXBwZXIgZnVuY3Rpb24gYXMgdGhlIGxpc3RlbmVyLCBvciB1c2VcclxuXHQgKiB7eyNjcm9zc0xpbmsgXCJFdmVudC9yZW1vdmVcIn19e3svY3Jvc3NMaW5rfX0uIExpa2V3aXNlLCBlYWNoIHRpbWUgeW91IGNhbGwgYG9uYCBhIE5FVyB3cmFwcGVyIGZ1bmN0aW9uIGlzIHN1YnNjcmliZWQsIHNvIG11bHRpcGxlIGNhbGxzXHJcblx0ICogdG8gYG9uYCB3aXRoIHRoZSBzYW1lIHBhcmFtcyB3aWxsIGNyZWF0ZSBtdWx0aXBsZSBsaXN0ZW5lcnMuXHJcblx0ICogXHJcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxyXG5cdCAqIFxyXG5cdCAqIFx0XHR2YXIgbGlzdGVuZXIgPSBteUJ0bi5vbihcImNsaWNrXCIsIGhhbmRsZUNsaWNrLCBudWxsLCBmYWxzZSwge2NvdW50OjN9KTtcclxuXHQgKiBcdFx0ZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZ0LCBkYXRhKSB7XHJcblx0ICogXHRcdFx0ZGF0YS5jb3VudCAtPSAxO1xyXG5cdCAqIFx0XHRcdGNvbnNvbGUubG9nKHRoaXMgPT0gbXlCdG4pOyAvLyB0cnVlIC0gc2NvcGUgZGVmYXVsdHMgdG8gdGhlIGRpc3BhdGNoZXJcclxuXHQgKiBcdFx0XHRpZiAoZGF0YS5jb3VudCA9PSAwKSB7XHJcblx0ICogXHRcdFx0XHRhbGVydChcImNsaWNrZWQgMyB0aW1lcyFcIik7XHJcblx0ICogXHRcdFx0XHRteUJ0bi5vZmYoXCJjbGlja1wiLCBsaXN0ZW5lcik7XHJcblx0ICogXHRcdFx0XHQvLyBhbHRlcm5hdGVseTogZXZ0LnJlbW92ZSgpO1xyXG5cdCAqIFx0XHRcdH1cclxuXHQgKiBcdFx0fVxyXG5cdCAqIFxyXG5cdCAqIEBtZXRob2Qgb25cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgc3RyaW5nIHR5cGUgb2YgdGhlIGV2ZW50LlxyXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb24gfCBPYmplY3R9IGxpc3RlbmVyIEFuIG9iamVjdCB3aXRoIGEgaGFuZGxlRXZlbnQgbWV0aG9kLCBvciBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlblxyXG5cdCAqIHRoZSBldmVudCBpcyBkaXNwYXRjaGVkLlxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbc2NvcGVdIFRoZSBzY29wZSB0byBleGVjdXRlIHRoZSBsaXN0ZW5lciBpbi4gRGVmYXVsdHMgdG8gdGhlIGRpc3BhdGNoZXIvY3VycmVudFRhcmdldCBmb3IgZnVuY3Rpb24gbGlzdGVuZXJzLCBhbmQgdG8gdGhlIGxpc3RlbmVyIGl0c2VsZiBmb3Igb2JqZWN0IGxpc3RlbmVycyAoaWUuIHVzaW5nIGhhbmRsZUV2ZW50KS5cclxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtvbmNlPWZhbHNlXSBJZiB0cnVlLCB0aGUgbGlzdGVuZXIgd2lsbCByZW1vdmUgaXRzZWxmIGFmdGVyIHRoZSBmaXJzdCB0aW1lIGl0IGlzIHRyaWdnZXJlZC5cclxuXHQgKiBAcGFyYW0geyp9IFtkYXRhXSBBcmJpdHJhcnkgZGF0YSB0aGF0IHdpbGwgYmUgaW5jbHVkZWQgYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIgd2hlbiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLlxyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3VzZUNhcHR1cmU9ZmFsc2VdIEZvciBldmVudHMgdGhhdCBidWJibGUsIGluZGljYXRlcyB3aGV0aGVyIHRvIGxpc3RlbiBmb3IgdGhlIGV2ZW50IGluIHRoZSBjYXB0dXJlIG9yIGJ1YmJsaW5nL3RhcmdldCBwaGFzZS5cclxuXHQgKiBAcmV0dXJuIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYW5vbnltb3VzIGZ1bmN0aW9uIHRoYXQgd2FzIGNyZWF0ZWQgYW5kIGFzc2lnbmVkIGFzIHRoZSBsaXN0ZW5lci4gVGhpcyBpcyBuZWVkZWQgdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lciBsYXRlciB1c2luZyAucmVtb3ZlRXZlbnRMaXN0ZW5lci5cclxuXHQgKiovXHJcblx0cC5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCBzY29wZSwgb25jZSwgZGF0YSwgdXNlQ2FwdHVyZSkge1xyXG5cdFx0aWYgKGxpc3RlbmVyLmhhbmRsZUV2ZW50KSB7XHJcblx0XHRcdHNjb3BlID0gc2NvcGV8fGxpc3RlbmVyO1xyXG5cdFx0XHRsaXN0ZW5lciA9IGxpc3RlbmVyLmhhbmRsZUV2ZW50O1xyXG5cdFx0fVxyXG5cdFx0c2NvcGUgPSBzY29wZXx8dGhpcztcclxuXHRcdHJldHVybiB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZnVuY3Rpb24oZXZ0KSB7XHJcblx0XHRcdFx0bGlzdGVuZXIuY2FsbChzY29wZSwgZXZ0LCBkYXRhKTtcclxuXHRcdFx0XHRvbmNlJiZldnQucmVtb3ZlKCk7XHJcblx0XHRcdH0sIHVzZUNhcHR1cmUpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBldmVudCBsaXN0ZW5lci5cclxuXHQgKlxyXG5cdCAqIDxiPkltcG9ydGFudCBOb3RlOjwvYj4gdGhhdCB5b3UgbXVzdCBwYXNzIHRoZSBleGFjdCBmdW5jdGlvbiByZWZlcmVuY2UgdXNlZCB3aGVuIHRoZSBldmVudCB3YXMgYWRkZWQuIElmIGEgcHJveHlcclxuXHQgKiBmdW5jdGlvbiwgb3IgZnVuY3Rpb24gY2xvc3VyZSBpcyB1c2VkIGFzIHRoZSBjYWxsYmFjaywgdGhlIHByb3h5L2Nsb3N1cmUgcmVmZXJlbmNlIG11c3QgYmUgdXNlZCAtIGEgbmV3IHByb3h5IG9yXHJcblx0ICogY2xvc3VyZSB3aWxsIG5vdCB3b3JrLlxyXG5cdCAqXHJcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxyXG5cdCAqXHJcblx0ICogICAgICBkaXNwbGF5T2JqZWN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGljayk7XHJcblx0ICpcclxuXHQgKiBAbWV0aG9kIHJlbW92ZUV2ZW50TGlzdGVuZXJcclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgc3RyaW5nIHR5cGUgb2YgdGhlIGV2ZW50LlxyXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb24gfCBPYmplY3R9IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciBmdW5jdGlvbiBvciBvYmplY3QuXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbdXNlQ2FwdHVyZV0gRm9yIGV2ZW50cyB0aGF0IGJ1YmJsZSwgaW5kaWNhdGVzIHdoZXRoZXIgdG8gbGlzdGVuIGZvciB0aGUgZXZlbnQgaW4gdGhlIGNhcHR1cmUgb3IgYnViYmxpbmcvdGFyZ2V0IHBoYXNlLlxyXG5cdCAqKi9cclxuXHRwLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSkge1xyXG5cdFx0dmFyIGxpc3RlbmVycyA9IHVzZUNhcHR1cmUgPyB0aGlzLl9jYXB0dXJlTGlzdGVuZXJzIDogdGhpcy5fbGlzdGVuZXJzO1xyXG5cdFx0aWYgKCFsaXN0ZW5lcnMpIHsgcmV0dXJuOyB9XHJcblx0XHR2YXIgYXJyID0gbGlzdGVuZXJzW3R5cGVdO1xyXG5cdFx0aWYgKCFhcnIpIHsgcmV0dXJuOyB9XHJcblx0XHRmb3IgKHZhciBpPTAsbD1hcnIubGVuZ3RoOyBpPGw7IGkrKykge1xyXG5cdFx0XHRpZiAoYXJyW2ldID09IGxpc3RlbmVyKSB7XHJcblx0XHRcdFx0aWYgKGw9PTEpIHsgZGVsZXRlKGxpc3RlbmVyc1t0eXBlXSk7IH0gLy8gYWxsb3dzIGZvciBmYXN0ZXIgY2hlY2tzLlxyXG5cdFx0XHRcdGVsc2UgeyBhcnIuc3BsaWNlKGksMSk7IH1cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0XHJcblx0LyoqXHJcblx0ICogQSBzaG9ydGN1dCB0byB0aGUgcmVtb3ZlRXZlbnRMaXN0ZW5lciBtZXRob2QsIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycyBhbmQgcmV0dXJuIHZhbHVlLiBUaGlzIGlzIGEgY29tcGFuaW9uIHRvIHRoZVxyXG5cdCAqIC5vbiBtZXRob2QuXHJcblx0ICogXHJcblx0ICogPGI+SU1QT1JUQU5UOjwvYj4gVG8gcmVtb3ZlIGEgbGlzdGVuZXIgYWRkZWQgd2l0aCBgb25gLCB5b3UgbXVzdCBwYXNzIGluIHRoZSByZXR1cm5lZCB3cmFwcGVyIGZ1bmN0aW9uIGFzIHRoZSBsaXN0ZW5lci4gU2VlIFxyXG5cdCAqIHt7I2Nyb3NzTGluayBcIkV2ZW50RGlzcGF0Y2hlci9vblwifX17ey9jcm9zc0xpbmt9fSBmb3IgYW4gZXhhbXBsZS5cclxuXHQgKlxyXG5cdCAqIEBtZXRob2Qgb2ZmXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIHN0cmluZyB0eXBlIG9mIHRoZSBldmVudC5cclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9uIHwgT2JqZWN0fSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gb3Igb2JqZWN0LlxyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3VzZUNhcHR1cmVdIEZvciBldmVudHMgdGhhdCBidWJibGUsIGluZGljYXRlcyB3aGV0aGVyIHRvIGxpc3RlbiBmb3IgdGhlIGV2ZW50IGluIHRoZSBjYXB0dXJlIG9yIGJ1YmJsaW5nL3RhcmdldCBwaGFzZS5cclxuXHQgKiovXHJcblx0cC5vZmYgPSBwLnJlbW92ZUV2ZW50TGlzdGVuZXI7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIHNwZWNpZmllZCB0eXBlLCBvciBhbGwgbGlzdGVuZXJzIG9mIGFsbCB0eXBlcy5cclxuXHQgKlxyXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cclxuXHQgKlxyXG5cdCAqICAgICAgLy8gUmVtb3ZlIGFsbCBsaXN0ZW5lcnNcclxuXHQgKiAgICAgIGRpc3BsYXlPYmplY3QucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMoKTtcclxuXHQgKlxyXG5cdCAqICAgICAgLy8gUmVtb3ZlIGFsbCBjbGljayBsaXN0ZW5lcnNcclxuXHQgKiAgICAgIGRpc3BsYXlPYmplY3QucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMoXCJjbGlja1wiKTtcclxuXHQgKlxyXG5cdCAqIEBtZXRob2QgcmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnNcclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3R5cGVdIFRoZSBzdHJpbmcgdHlwZSBvZiB0aGUgZXZlbnQuIElmIG9taXR0ZWQsIGFsbCBsaXN0ZW5lcnMgZm9yIGFsbCB0eXBlcyB3aWxsIGJlIHJlbW92ZWQuXHJcblx0ICoqL1xyXG5cdHAucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XHJcblx0XHRpZiAoIXR5cGUpIHsgdGhpcy5fbGlzdGVuZXJzID0gdGhpcy5fY2FwdHVyZUxpc3RlbmVycyA9IG51bGw7IH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRpZiAodGhpcy5fbGlzdGVuZXJzKSB7IGRlbGV0ZSh0aGlzLl9saXN0ZW5lcnNbdHlwZV0pOyB9XHJcblx0XHRcdGlmICh0aGlzLl9jYXB0dXJlTGlzdGVuZXJzKSB7IGRlbGV0ZSh0aGlzLl9jYXB0dXJlTGlzdGVuZXJzW3R5cGVdKTsgfVxyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERpc3BhdGNoZXMgdGhlIHNwZWNpZmllZCBldmVudCB0byBhbGwgbGlzdGVuZXJzLlxyXG5cdCAqXHJcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxyXG5cdCAqXHJcblx0ICogICAgICAvLyBVc2UgYSBzdHJpbmcgZXZlbnRcclxuXHQgKiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpO1xyXG5cdCAqXHJcblx0ICogICAgICAvLyBVc2UgYW4gRXZlbnQgaW5zdGFuY2VcclxuXHQgKiAgICAgIHZhciBldmVudCA9IG5ldyBjcmVhdGVqcy5FdmVudChcInByb2dyZXNzXCIpO1xyXG5cdCAqICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuXHQgKlxyXG5cdCAqIEBtZXRob2QgZGlzcGF0Y2hFdmVudFxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0IHwgU3RyaW5nIHwgRXZlbnR9IGV2ZW50T2JqIEFuIG9iamVjdCB3aXRoIGEgXCJ0eXBlXCIgcHJvcGVydHksIG9yIGEgc3RyaW5nIHR5cGUuXHJcblx0ICogV2hpbGUgYSBnZW5lcmljIG9iamVjdCB3aWxsIHdvcmssIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBhIENyZWF0ZUpTIEV2ZW50IGluc3RhbmNlLiBJZiBhIHN0cmluZyBpcyB1c2VkLFxyXG5cdCAqIGRpc3BhdGNoRXZlbnQgd2lsbCBjb25zdHJ1Y3QgYW4gRXZlbnQgaW5zdGFuY2UgaWYgbmVjZXNzYXJ5IHdpdGggdGhlIHNwZWNpZmllZCB0eXBlLiBUaGlzIGxhdHRlciBhcHByb2FjaCBjYW5cclxuXHQgKiBiZSB1c2VkIHRvIGF2b2lkIGV2ZW50IG9iamVjdCBpbnN0YW50aWF0aW9uIGZvciBub24tYnViYmxpbmcgZXZlbnRzIHRoYXQgbWF5IG5vdCBoYXZlIGFueSBsaXN0ZW5lcnMuXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbYnViYmxlc10gU3BlY2lmaWVzIHRoZSBgYnViYmxlc2AgdmFsdWUgd2hlbiBhIHN0cmluZyB3YXMgcGFzc2VkIHRvIGV2ZW50T2JqLlxyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NhbmNlbGFibGVdIFNwZWNpZmllcyB0aGUgYGNhbmNlbGFibGVgIHZhbHVlIHdoZW4gYSBzdHJpbmcgd2FzIHBhc3NlZCB0byBldmVudE9iai5cclxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBSZXR1cm5zIGZhbHNlIGlmIGBwcmV2ZW50RGVmYXVsdCgpYCB3YXMgY2FsbGVkIG9uIGEgY2FuY2VsYWJsZSBldmVudCwgdHJ1ZSBvdGhlcndpc2UuXHJcblx0ICoqL1xyXG5cdHAuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uKGV2ZW50T2JqLCBidWJibGVzLCBjYW5jZWxhYmxlKSB7XHJcblx0XHRpZiAodHlwZW9mIGV2ZW50T2JqID09IFwic3RyaW5nXCIpIHtcclxuXHRcdFx0Ly8gc2tpcCBldmVyeXRoaW5nIGlmIHRoZXJlJ3Mgbm8gbGlzdGVuZXJzIGFuZCBpdCBkb2Vzbid0IGJ1YmJsZTpcclxuXHRcdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcclxuXHRcdFx0aWYgKCFidWJibGVzICYmICghbGlzdGVuZXJzIHx8ICFsaXN0ZW5lcnNbZXZlbnRPYmpdKSkgeyByZXR1cm4gdHJ1ZTsgfVxyXG5cdFx0XHRldmVudE9iaiA9IG5ldyBjcmVhdGVqcy5FdmVudChldmVudE9iaiwgYnViYmxlcywgY2FuY2VsYWJsZSk7XHJcblx0XHR9IGVsc2UgaWYgKGV2ZW50T2JqLnRhcmdldCAmJiBldmVudE9iai5jbG9uZSkge1xyXG5cdFx0XHQvLyByZWRpc3BhdGNoaW5nIGFuIGFjdGl2ZSBldmVudCBvYmplY3QsIHNvIGNsb25lIGl0OlxyXG5cdFx0XHRldmVudE9iaiA9IGV2ZW50T2JqLmNsb25lKCk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vIFRPRE86IGl0IHdvdWxkIGJlIG5pY2UgdG8gZWxpbWluYXRlIHRoaXMuIE1heWJlIGluIGZhdm91ciBvZiBldnRPYmogaW5zdGFuY2VvZiBFdmVudD8gT3IgISFldnRPYmouY3JlYXRlRXZlbnRcclxuXHRcdHRyeSB7IGV2ZW50T2JqLnRhcmdldCA9IHRoaXM7IH0gY2F0Y2ggKGUpIHt9IC8vIHRyeS9jYXRjaCBhbGxvd3MgcmVkaXNwYXRjaGluZyBvZiBuYXRpdmUgZXZlbnRzXHJcblxyXG5cdFx0aWYgKCFldmVudE9iai5idWJibGVzIHx8ICF0aGlzLnBhcmVudCkge1xyXG5cdFx0XHR0aGlzLl9kaXNwYXRjaEV2ZW50KGV2ZW50T2JqLCAyKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciB0b3A9dGhpcywgbGlzdD1bdG9wXTtcclxuXHRcdFx0d2hpbGUgKHRvcC5wYXJlbnQpIHsgbGlzdC5wdXNoKHRvcCA9IHRvcC5wYXJlbnQpOyB9XHJcblx0XHRcdHZhciBpLCBsPWxpc3QubGVuZ3RoO1xyXG5cclxuXHRcdFx0Ly8gY2FwdHVyZSAmIGF0VGFyZ2V0XHJcblx0XHRcdGZvciAoaT1sLTE7IGk+PTAgJiYgIWV2ZW50T2JqLnByb3BhZ2F0aW9uU3RvcHBlZDsgaS0tKSB7XHJcblx0XHRcdFx0bGlzdFtpXS5fZGlzcGF0Y2hFdmVudChldmVudE9iaiwgMSsoaT09MCkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIGJ1YmJsaW5nXHJcblx0XHRcdGZvciAoaT0xOyBpPGwgJiYgIWV2ZW50T2JqLnByb3BhZ2F0aW9uU3RvcHBlZDsgaSsrKSB7XHJcblx0XHRcdFx0bGlzdFtpXS5fZGlzcGF0Y2hFdmVudChldmVudE9iaiwgMyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiAhZXZlbnRPYmouZGVmYXVsdFByZXZlbnRlZDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgbGlzdGVuZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQgdHlwZS5cclxuXHQgKiBAbWV0aG9kIGhhc0V2ZW50TGlzdGVuZXJcclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgc3RyaW5nIHR5cGUgb2YgdGhlIGV2ZW50LlxyXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgbGlzdGVuZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuXHJcblx0ICoqL1xyXG5cdHAuaGFzRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuXHRcdHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMsIGNhcHR1cmVMaXN0ZW5lcnMgPSB0aGlzLl9jYXB0dXJlTGlzdGVuZXJzO1xyXG5cdFx0cmV0dXJuICEhKChsaXN0ZW5lcnMgJiYgbGlzdGVuZXJzW3R5cGVdKSB8fCAoY2FwdHVyZUxpc3RlbmVycyAmJiBjYXB0dXJlTGlzdGVuZXJzW3R5cGVdKSk7XHJcblx0fTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgbGlzdGVuZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQgdHlwZSBvbiB0aGlzIG9iamVjdCBvciBhbnkgb2YgaXRzXHJcblx0ICogYW5jZXN0b3JzIChwYXJlbnQsIHBhcmVudCdzIHBhcmVudCwgZXRjKS4gQSByZXR1cm4gdmFsdWUgb2YgdHJ1ZSBpbmRpY2F0ZXMgdGhhdCBpZiBhIGJ1YmJsaW5nIGV2ZW50IG9mIHRoZVxyXG5cdCAqIHNwZWNpZmllZCB0eXBlIGlzIGRpc3BhdGNoZWQgZnJvbSB0aGlzIG9iamVjdCwgaXQgd2lsbCB0cmlnZ2VyIGF0IGxlYXN0IG9uZSBsaXN0ZW5lci5cclxuXHQgKiBcclxuXHQgKiBUaGlzIGlzIHNpbWlsYXIgdG8ge3sjY3Jvc3NMaW5rIFwiRXZlbnREaXNwYXRjaGVyL2hhc0V2ZW50TGlzdGVuZXJcIn19e3svY3Jvc3NMaW5rfX0sIGJ1dCBpdCBzZWFyY2hlcyB0aGUgZW50aXJlXHJcblx0ICogZXZlbnQgZmxvdyBmb3IgYSBsaXN0ZW5lciwgbm90IGp1c3QgdGhpcyBvYmplY3QuXHJcblx0ICogQG1ldGhvZCB3aWxsVHJpZ2dlclxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBzdHJpbmcgdHlwZSBvZiB0aGUgZXZlbnQuXHJcblx0ICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxyXG5cdCAqKi9cclxuXHRwLndpbGxUcmlnZ2VyID0gZnVuY3Rpb24odHlwZSkge1xyXG5cdFx0dmFyIG8gPSB0aGlzO1xyXG5cdFx0d2hpbGUgKG8pIHtcclxuXHRcdFx0aWYgKG8uaGFzRXZlbnRMaXN0ZW5lcih0eXBlKSkgeyByZXR1cm4gdHJ1ZTsgfVxyXG5cdFx0XHRvID0gby5wYXJlbnQ7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQG1ldGhvZCB0b1N0cmluZ1xyXG5cdCAqIEByZXR1cm4ge1N0cmluZ30gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGluc3RhbmNlLlxyXG5cdCAqKi9cclxuXHRwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcblx0XHRyZXR1cm4gXCJbRXZlbnREaXNwYXRjaGVyXVwiO1xyXG5cdH07XHJcblxyXG5cclxuLy8gcHJpdmF0ZSBtZXRob2RzOlxyXG5cdC8qKlxyXG5cdCAqIEBtZXRob2QgX2Rpc3BhdGNoRXZlbnRcclxuXHQgKiBAcGFyYW0ge09iamVjdCB8IEV2ZW50fSBldmVudE9ialxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudFBoYXNlXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqKi9cclxuXHRwLl9kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oZXZlbnRPYmosIGV2ZW50UGhhc2UpIHtcclxuXHRcdHZhciBsLCBhcnIsIGxpc3RlbmVycyA9IChldmVudFBoYXNlIDw9IDIpID8gdGhpcy5fY2FwdHVyZUxpc3RlbmVycyA6IHRoaXMuX2xpc3RlbmVycztcclxuXHRcdGlmIChldmVudE9iaiAmJiBsaXN0ZW5lcnMgJiYgKGFyciA9IGxpc3RlbmVyc1tldmVudE9iai50eXBlXSkgJiYgKGw9YXJyLmxlbmd0aCkpIHtcclxuXHRcdFx0dHJ5IHsgZXZlbnRPYmouY3VycmVudFRhcmdldCA9IHRoaXM7IH0gY2F0Y2ggKGUpIHt9XHJcblx0XHRcdHRyeSB7IGV2ZW50T2JqLmV2ZW50UGhhc2UgPSBldmVudFBoYXNlfDA7IH0gY2F0Y2ggKGUpIHt9XHJcblx0XHRcdGV2ZW50T2JqLnJlbW92ZWQgPSBmYWxzZTtcclxuXHRcdFx0XHJcblx0XHRcdGFyciA9IGFyci5zbGljZSgpOyAvLyB0byBhdm9pZCBpc3N1ZXMgd2l0aCBpdGVtcyBiZWluZyByZW1vdmVkIG9yIGFkZGVkIGR1cmluZyB0aGUgZGlzcGF0Y2hcclxuXHRcdFx0Zm9yICh2YXIgaT0wOyBpPGwgJiYgIWV2ZW50T2JqLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIG8gPSBhcnJbaV07XHJcblx0XHRcdFx0aWYgKG8uaGFuZGxlRXZlbnQpIHsgby5oYW5kbGVFdmVudChldmVudE9iaik7IH1cclxuXHRcdFx0XHRlbHNlIHsgbyhldmVudE9iaik7IH1cclxuXHRcdFx0XHRpZiAoZXZlbnRPYmoucmVtb3ZlZCkge1xyXG5cdFx0XHRcdFx0dGhpcy5vZmYoZXZlbnRPYmoudHlwZSwgbywgZXZlbnRQaGFzZT09MSk7XHJcblx0XHRcdFx0XHRldmVudE9iai5yZW1vdmVkID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAoZXZlbnRQaGFzZSA9PT0gMikgeyB0aGlzLl9kaXNwYXRjaEV2ZW50KGV2ZW50T2JqLCAyLjEpOyB9XHJcblx0fTtcclxuXHJcblxyXG5cdGNyZWF0ZWpzLkV2ZW50RGlzcGF0Y2hlciA9IEV2ZW50RGlzcGF0Y2hlcjtcclxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEV2ZW50LmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanN8fHt9O1xuXG4oZnVuY3Rpb24oKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG4vLyBjb25zdHJ1Y3Rvcjpcblx0LyoqXG5cdCAqIENvbnRhaW5zIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgc2hhcmVkIGJ5IGFsbCBldmVudHMgZm9yIHVzZSB3aXRoXG5cdCAqIHt7I2Nyb3NzTGluayBcIkV2ZW50RGlzcGF0Y2hlclwifX17ey9jcm9zc0xpbmt9fS5cblx0ICogXG5cdCAqIE5vdGUgdGhhdCBFdmVudCBvYmplY3RzIGFyZSBvZnRlbiByZXVzZWQsIHNvIHlvdSBzaG91bGQgbmV2ZXJcblx0ICogcmVseSBvbiBhbiBldmVudCBvYmplY3QncyBzdGF0ZSBvdXRzaWRlIG9mIHRoZSBjYWxsIHN0YWNrIGl0IHdhcyByZWNlaXZlZCBpbi5cblx0ICogQGNsYXNzIEV2ZW50XG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGJ1YmJsZXMgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGV2ZW50IHdpbGwgYnViYmxlIHRocm91Z2ggdGhlIGRpc3BsYXkgbGlzdC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBjYW5jZWxhYmxlIEluZGljYXRlcyB3aGV0aGVyIHRoZSBkZWZhdWx0IGJlaGF2aW91ciBvZiB0aGlzIGV2ZW50IGNhbiBiZSBjYW5jZWxsZWQuXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiovXG5cdGZ1bmN0aW9uIEV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUpIHtcblx0XHRcblx0XG5cdC8vIHB1YmxpYyBwcm9wZXJ0aWVzOlxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIGV2ZW50LlxuXHRcdCAqIEBwcm9wZXJ0eSB0eXBlXG5cdFx0ICogQHR5cGUgU3RyaW5nXG5cdFx0ICoqL1xuXHRcdHRoaXMudHlwZSA9IHR5cGU7XG5cdFxuXHRcdC8qKlxuXHRcdCAqIFRoZSBvYmplY3QgdGhhdCBnZW5lcmF0ZWQgYW4gZXZlbnQuXG5cdFx0ICogQHByb3BlcnR5IHRhcmdldFxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcmVhZG9ubHlcblx0XHQqL1xuXHRcdHRoaXMudGFyZ2V0ID0gbnVsbDtcblx0XG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgdGFyZ2V0IHRoYXQgYSBidWJibGluZyBldmVudCBpcyBiZWluZyBkaXNwYXRjaGVkIGZyb20uIEZvciBub24tYnViYmxpbmcgZXZlbnRzLCB0aGlzIHdpbGxcblx0XHQgKiBhbHdheXMgYmUgdGhlIHNhbWUgYXMgdGFyZ2V0LiBGb3IgZXhhbXBsZSwgaWYgY2hpbGRPYmoucGFyZW50ID0gcGFyZW50T2JqLCBhbmQgYSBidWJibGluZyBldmVudFxuXHRcdCAqIGlzIGdlbmVyYXRlZCBmcm9tIGNoaWxkT2JqLCB0aGVuIGEgbGlzdGVuZXIgb24gcGFyZW50T2JqIHdvdWxkIHJlY2VpdmUgdGhlIGV2ZW50IHdpdGhcblx0XHQgKiB0YXJnZXQ9Y2hpbGRPYmogKHRoZSBvcmlnaW5hbCB0YXJnZXQpIGFuZCBjdXJyZW50VGFyZ2V0PXBhcmVudE9iaiAod2hlcmUgdGhlIGxpc3RlbmVyIHdhcyBhZGRlZCkuXG5cdFx0ICogQHByb3BlcnR5IGN1cnJlbnRUYXJnZXRcblx0XHQgKiBAdHlwZSBPYmplY3Rcblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0Ki9cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuXHRcblx0XHQvKipcblx0XHQgKiBGb3IgYnViYmxpbmcgZXZlbnRzLCB0aGlzIGluZGljYXRlcyB0aGUgY3VycmVudCBldmVudCBwaGFzZTo8T0w+XG5cdFx0ICogXHQ8TEk+IGNhcHR1cmUgcGhhc2U6IHN0YXJ0aW5nIGZyb20gdGhlIHRvcCBwYXJlbnQgdG8gdGhlIHRhcmdldDwvTEk+XG5cdFx0ICogXHQ8TEk+IGF0IHRhcmdldCBwaGFzZTogY3VycmVudGx5IGJlaW5nIGRpc3BhdGNoZWQgZnJvbSB0aGUgdGFyZ2V0PC9MST5cblx0XHQgKiBcdDxMST4gYnViYmxpbmcgcGhhc2U6IGZyb20gdGhlIHRhcmdldCB0byB0aGUgdG9wIHBhcmVudDwvTEk+XG5cdFx0ICogPC9PTD5cblx0XHQgKiBAcHJvcGVydHkgZXZlbnRQaGFzZVxuXHRcdCAqIEB0eXBlIE51bWJlclxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKiBAcmVhZG9ubHlcblx0XHQqL1xuXHRcdHRoaXMuZXZlbnRQaGFzZSA9IDA7XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBldmVudCB3aWxsIGJ1YmJsZSB0aHJvdWdoIHRoZSBkaXNwbGF5IGxpc3QuXG5cdFx0ICogQHByb3BlcnR5IGJ1YmJsZXNcblx0XHQgKiBAdHlwZSBCb29sZWFuXG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKiBAcmVhZG9ubHlcblx0XHQqL1xuXHRcdHRoaXMuYnViYmxlcyA9ICEhYnViYmxlcztcblx0XG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGRlZmF1bHQgYmVoYXZpb3VyIG9mIHRoaXMgZXZlbnQgY2FuIGJlIGNhbmNlbGxlZCB2aWFcblx0XHQgKiB7eyNjcm9zc0xpbmsgXCJFdmVudC9wcmV2ZW50RGVmYXVsdFwifX17ey9jcm9zc0xpbmt9fS4gVGhpcyBpcyBzZXQgdmlhIHRoZSBFdmVudCBjb25zdHJ1Y3Rvci5cblx0XHQgKiBAcHJvcGVydHkgY2FuY2VsYWJsZVxuXHRcdCAqIEB0eXBlIEJvb2xlYW5cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCovXG5cdFx0dGhpcy5jYW5jZWxhYmxlID0gISFjYW5jZWxhYmxlO1xuXHRcblx0XHQvKipcblx0XHQgKiBUaGUgZXBvY2ggdGltZSBhdCB3aGljaCB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkLlxuXHRcdCAqIEBwcm9wZXJ0eSB0aW1lU3RhbXBcblx0XHQgKiBAdHlwZSBOdW1iZXJcblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0Ki9cblx0XHR0aGlzLnRpbWVTdGFtcCA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cdFxuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyBpZiB7eyNjcm9zc0xpbmsgXCJFdmVudC9wcmV2ZW50RGVmYXVsdFwifX17ey9jcm9zc0xpbmt9fSBoYXMgYmVlbiBjYWxsZWRcblx0XHQgKiBvbiB0aGlzIGV2ZW50LlxuXHRcdCAqIEBwcm9wZXJ0eSBkZWZhdWx0UHJldmVudGVkXG5cdFx0ICogQHR5cGUgQm9vbGVhblxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0Ki9cblx0XHR0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcblx0XG5cdFx0LyoqXG5cdFx0ICogSW5kaWNhdGVzIGlmIHt7I2Nyb3NzTGluayBcIkV2ZW50L3N0b3BQcm9wYWdhdGlvblwifX17ey9jcm9zc0xpbmt9fSBvclxuXHRcdCAqIHt7I2Nyb3NzTGluayBcIkV2ZW50L3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvblwifX17ey9jcm9zc0xpbmt9fSBoYXMgYmVlbiBjYWxsZWQgb24gdGhpcyBldmVudC5cblx0XHQgKiBAcHJvcGVydHkgcHJvcGFnYXRpb25TdG9wcGVkXG5cdFx0ICogQHR5cGUgQm9vbGVhblxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0Ki9cblx0XHR0aGlzLnByb3BhZ2F0aW9uU3RvcHBlZCA9IGZhbHNlO1xuXHRcblx0XHQvKipcblx0XHQgKiBJbmRpY2F0ZXMgaWYge3sjY3Jvc3NMaW5rIFwiRXZlbnQvc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uXCJ9fXt7L2Nyb3NzTGlua319IGhhcyBiZWVuIGNhbGxlZFxuXHRcdCAqIG9uIHRoaXMgZXZlbnQuXG5cdFx0ICogQHByb3BlcnR5IGltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZFxuXHRcdCAqIEB0eXBlIEJvb2xlYW5cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCovXG5cdFx0dGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBmYWxzZTtcblx0XHRcblx0XHQvKipcblx0XHQgKiBJbmRpY2F0ZXMgaWYge3sjY3Jvc3NMaW5rIFwiRXZlbnQvcmVtb3ZlXCJ9fXt7L2Nyb3NzTGlua319IGhhcyBiZWVuIGNhbGxlZCBvbiB0aGlzIGV2ZW50LlxuXHRcdCAqIEBwcm9wZXJ0eSByZW1vdmVkXG5cdFx0ICogQHR5cGUgQm9vbGVhblxuXHRcdCAqIEBkZWZhdWx0IGZhbHNlXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0Ki9cblx0XHR0aGlzLnJlbW92ZWQgPSBmYWxzZTtcblx0fVxuXHR2YXIgcCA9IEV2ZW50LnByb3RvdHlwZTtcblxuLy8gcHVibGljIG1ldGhvZHM6XG5cdC8qKlxuXHQgKiBTZXRzIHt7I2Nyb3NzTGluayBcIkV2ZW50L2RlZmF1bHRQcmV2ZW50ZWRcIn19e3svY3Jvc3NMaW5rfX0gdG8gdHJ1ZSBpZiB0aGUgZXZlbnQgaXMgY2FuY2VsYWJsZS5cblx0ICogTWlycm9ycyB0aGUgRE9NIGxldmVsIDIgZXZlbnQgc3RhbmRhcmQuIEluIGdlbmVyYWwsIGNhbmNlbGFibGUgZXZlbnRzIHRoYXQgaGF2ZSBgcHJldmVudERlZmF1bHQoKWAgY2FsbGVkIHdpbGxcblx0ICogY2FuY2VsIHRoZSBkZWZhdWx0IGJlaGF2aW91ciBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxuXHQgKiBAbWV0aG9kIHByZXZlbnREZWZhdWx0XG5cdCAqKi9cblx0cC5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRoaXMuY2FuY2VsYWJsZSYmdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogU2V0cyB7eyNjcm9zc0xpbmsgXCJFdmVudC9wcm9wYWdhdGlvblN0b3BwZWRcIn19e3svY3Jvc3NMaW5rfX0gdG8gdHJ1ZS5cblx0ICogTWlycm9ycyB0aGUgRE9NIGV2ZW50IHN0YW5kYXJkLlxuXHQgKiBAbWV0aG9kIHN0b3BQcm9wYWdhdGlvblxuXHQgKiovXG5cdHAuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZXRzIHt7I2Nyb3NzTGluayBcIkV2ZW50L3Byb3BhZ2F0aW9uU3RvcHBlZFwifX17ey9jcm9zc0xpbmt9fSBhbmRcblx0ICoge3sjY3Jvc3NMaW5rIFwiRXZlbnQvaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkXCJ9fXt7L2Nyb3NzTGlua319IHRvIHRydWUuXG5cdCAqIE1pcnJvcnMgdGhlIERPTSBldmVudCBzdGFuZGFyZC5cblx0ICogQG1ldGhvZCBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb25cblx0ICoqL1xuXHRwLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gdGhpcy5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuXHR9O1xuXHRcblx0LyoqXG5cdCAqIENhdXNlcyB0aGUgYWN0aXZlIGxpc3RlbmVyIHRvIGJlIHJlbW92ZWQgdmlhIHJlbW92ZUV2ZW50TGlzdGVuZXIoKTtcblx0ICogXG5cdCAqIFx0XHRteUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZ0KSB7XG5cdCAqIFx0XHRcdC8vIGRvIHN0dWZmLi4uXG5cdCAqIFx0XHRcdGV2dC5yZW1vdmUoKTsgLy8gcmVtb3ZlcyB0aGlzIGxpc3RlbmVyLlxuXHQgKiBcdFx0fSk7XG5cdCAqIFxuXHQgKiBAbWV0aG9kIHJlbW92ZVxuXHQgKiovXG5cdHAucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5yZW1vdmVkID0gdHJ1ZTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgY2xvbmUgb2YgdGhlIEV2ZW50IGluc3RhbmNlLlxuXHQgKiBAbWV0aG9kIGNsb25lXG5cdCAqIEByZXR1cm4ge0V2ZW50fSBhIGNsb25lIG9mIHRoZSBFdmVudCBpbnN0YW5jZS5cblx0ICoqL1xuXHRwLmNsb25lID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBFdmVudCh0aGlzLnR5cGUsIHRoaXMuYnViYmxlcywgdGhpcy5jYW5jZWxhYmxlKTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBQcm92aWRlcyBhIGNoYWluYWJsZSBzaG9ydGN1dCBtZXRob2QgZm9yIHNldHRpbmcgYSBudW1iZXIgb2YgcHJvcGVydGllcyBvbiB0aGUgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIEBtZXRob2Qgc2V0XG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBBIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyB0byBjb3B5IHRvIHRoZSBpbnN0YW5jZS5cblx0ICogQHJldHVybiB7RXZlbnR9IFJldHVybnMgdGhlIGluc3RhbmNlIHRoZSBtZXRob2QgaXMgY2FsbGVkIG9uICh1c2VmdWwgZm9yIGNoYWluaW5nIGNhbGxzLilcblx0ICogQGNoYWluYWJsZVxuXHQqL1xuXHRwLnNldCA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdFx0Zm9yICh2YXIgbiBpbiBwcm9wcykgeyB0aGlzW25dID0gcHJvcHNbbl07IH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG9iamVjdC5cblx0ICogQG1ldGhvZCB0b1N0cmluZ1xuXHQgKiBAcmV0dXJuIHtTdHJpbmd9IGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbnN0YW5jZS5cblx0ICoqL1xuXHRwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFwiW0V2ZW50ICh0eXBlPVwiK3RoaXMudHlwZStcIildXCI7XG5cdH07XG5cblx0Y3JlYXRlanMuRXZlbnQgPSBFdmVudDtcbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBFcnJvckV2ZW50LmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanN8fHt9O1xuXG4oZnVuY3Rpb24oKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBBIGdlbmVyYWwgZXJyb3Ige3sjY3Jvc3NMaW5rIFwiRXZlbnRcIn19e3svY3Jvc3NMaW5rfX0sIHRoYXQgZGVzY3JpYmVzIGFuIGVycm9yIHRoYXQgb2NjdXJyZWQsIGFzIHdlbGwgYXMgYW55IGRldGFpbHMuXG5cdCAqIEBjbGFzcyBFcnJvckV2ZW50XG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbdGl0bGVdIFRoZSBlcnJvciB0aXRsZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW21lc3NhZ2VdIFRoZSBlcnJvciBkZXNjcmlwdGlvblxuXHQgKiBAcGFyYW0ge09iamVjdH0gW2RhdGFdIEFkZGl0aW9uYWwgZXJyb3IgZGF0YVxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG5cdGZ1bmN0aW9uIEVycm9yRXZlbnQodGl0bGUsIG1lc3NhZ2UsIGRhdGEpIHtcblx0XHR0aGlzLkV2ZW50X2NvbnN0cnVjdG9yKFwiZXJyb3JcIik7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgc2hvcnQgZXJyb3IgdGl0bGUsIHdoaWNoIGluZGljYXRlcyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuXHRcdCAqIEBwcm9wZXJ0eSB0aXRsZVxuXHRcdCAqIEB0eXBlIFN0cmluZ1xuXHRcdCAqL1xuXHRcdHRoaXMudGl0bGUgPSB0aXRsZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2ZXJib3NlIGVycm9yIG1lc3NhZ2UsIGNvbnRhaW5pbmcgZGV0YWlscyBhYm91dCB0aGUgZXJyb3IuXG5cdFx0ICogQHByb3BlcnR5IG1lc3NhZ2Vcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHR0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXG5cdFx0LyoqXG5cdFx0ICogQWRkaXRpb25hbCBkYXRhIGF0dGFjaGVkIHRvIGFuIGVycm9yLlxuXHRcdCAqIEBwcm9wZXJ0eSBkYXRhXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHR9XG5cblx0dmFyIHAgPSBjcmVhdGVqcy5leHRlbmQoRXJyb3JFdmVudCwgY3JlYXRlanMuRXZlbnQpO1xuXG5cdHAuY2xvbmUgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gbmV3IGNyZWF0ZWpzLkVycm9yRXZlbnQodGhpcy50aXRsZSwgdGhpcy5tZXNzYWdlLCB0aGlzLmRhdGEpO1xuXHR9O1xuXG5cdGNyZWF0ZWpzLkVycm9yRXZlbnQgPSBjcmVhdGVqcy5wcm9tb3RlKEVycm9yRXZlbnQsIFwiRXZlbnRcIik7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBQcm9ncmVzc0V2ZW50LmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanMgfHwge307XG5cbihmdW5jdGlvbiAoc2NvcGUpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0Ly8gY29uc3RydWN0b3Jcblx0LyoqXG5cdCAqIEEgQ3JlYXRlSlMge3sjY3Jvc3NMaW5rIFwiRXZlbnRcIn19e3svY3Jvc3NMaW5rfX0gdGhhdCBpcyBkaXNwYXRjaGVkIHdoZW4gcHJvZ3Jlc3MgY2hhbmdlcy5cblx0ICogQGNsYXNzIFByb2dyZXNzRXZlbnRcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGxvYWRlZCBUaGUgYW1vdW50IHRoYXQgaGFzIGJlZW4gbG9hZGVkLiBUaGlzIGNhbiBiZSBhbnkgbnVtYmVyIHJlbGF0aXZlIHRvIHRoZSB0b3RhbC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt0b3RhbD0xXSBUaGUgdG90YWwgYW1vdW50IHRoYXQgd2lsbCBsb2FkLiBUaGlzIHdpbGwgZGVmYXVsdCB0byAxLCBzbyBpZiB0aGUgYGxvYWRlZGAgdmFsdWUgaXNcblx0ICogYSBwZXJjZW50YWdlIChiZXR3ZWVuIDAgYW5kIDEpLCBpdCBjYW4gYmUgb21pdHRlZC5cblx0ICogQHRvZG8gQ29uc2lkZXIgaGF2aW5nIHRoaXMgZXZlbnQgYmUgYSBcImZpbGVwcm9ncmVzc1wiIGV2ZW50IGFzIHdlbGxcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRmdW5jdGlvbiBQcm9ncmVzc0V2ZW50KGxvYWRlZCwgdG90YWwpIHtcblx0XHR0aGlzLkV2ZW50X2NvbnN0cnVjdG9yKFwicHJvZ3Jlc3NcIik7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYW1vdW50IHRoYXQgaGFzIGJlZW4gbG9hZGVkIChvdXQgb2YgYSB0b3RhbCBhbW91bnQpXG5cdFx0ICogQHByb3BlcnR5IGxvYWRlZFxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5sb2FkZWQgPSBsb2FkZWQ7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdG90YWwgXCJzaXplXCIgb2YgdGhlIGxvYWQuXG5cdFx0ICogQHByb3BlcnR5IHRvdGFsXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy50b3RhbCA9ICh0b3RhbCA9PSBudWxsKSA/IDEgOiB0b3RhbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwZXJjZW50YWdlIChvdXQgb2YgMSkgdGhhdCB0aGUgbG9hZCBoYXMgYmVlbiBjb21wbGV0ZWQuIFRoaXMgaXMgY2FsY3VsYXRlZCB1c2luZyBgbG9hZGVkL3RvdGFsYC5cblx0XHQgKiBAcHJvcGVydHkgcHJvZ3Jlc3Ncblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnByb2dyZXNzID0gKHRvdGFsID09IDApID8gMCA6IHRoaXMubG9hZGVkIC8gdGhpcy50b3RhbDtcblx0fTtcblxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChQcm9ncmVzc0V2ZW50LCBjcmVhdGVqcy5FdmVudCk7XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBjbG9uZSBvZiB0aGUgUHJvZ3Jlc3NFdmVudCBpbnN0YW5jZS5cblx0ICogQG1ldGhvZCBjbG9uZVxuXHQgKiBAcmV0dXJuIHtQcm9ncmVzc0V2ZW50fSBhIGNsb25lIG9mIHRoZSBFdmVudCBpbnN0YW5jZS5cblx0ICoqL1xuXHRwLmNsb25lID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBjcmVhdGVqcy5Qcm9ncmVzc0V2ZW50KHRoaXMubG9hZGVkLCB0aGlzLnRvdGFsKTtcblx0fTtcblxuXHRjcmVhdGVqcy5Qcm9ncmVzc0V2ZW50ID0gY3JlYXRlanMucHJvbW90ZShQcm9ncmVzc0V2ZW50LCBcIkV2ZW50XCIpO1xuXG59KHdpbmRvdykpO1xuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gTG9hZEl0ZW0uanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqcyB8fCB7fTtcblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0LyoqXG5cdCAqIEFsbCBsb2FkZXJzIGFjY2VwdCBhbiBpdGVtIGNvbnRhaW5pbmcgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGlzIGNsYXNzLiBJZiBhIHJhdyBvYmplY3QgaXMgcGFzc2VkIGluc3RlYWQsXG5cdCAqIGl0IHdpbGwgbm90IGJlIGFmZmVjdGVkLCBidXQgaXQgbXVzdCBjb250YWluIGF0IGxlYXN0IGEge3sjY3Jvc3NMaW5rIFwic3JjOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IHByb3BlcnR5LiBBXG5cdCAqIHN0cmluZyBwYXRoIG9yIEhUTUwgdGFnIGlzIGFsc28gYWNjZXB0YWJsZSwgYnV0IGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gYSBMb2FkSXRlbSB1c2luZyB0aGVcblx0ICoge3sjY3Jvc3NMaW5rIFwiY3JlYXRlXCJ9fXt7L2Nyb3NzTGlua319IG1ldGhvZCBieSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdExvYWRlclwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBAY2xhc3MgTG9hZEl0ZW1cblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0ZnVuY3Rpb24gTG9hZEl0ZW0oKSB7XG5cdFx0LyoqXG5cdFx0ICogVGhlIHNvdXJjZSBvZiB0aGUgZmlsZSB0aGF0IGlzIGJlaW5nIGxvYWRlZC4gVGhpcyBwcm9wZXJ0eSBpcyA8Yj5yZXF1aXJlZDwvYj4uIFRoZSBzb3VyY2UgY2FuIGVpdGhlciBiZSBhXG5cdFx0ICogc3RyaW5nIChyZWNvbW1lbmRlZCksIG9yIGFuIEhUTUwgdGFnLlxuXHRcdCAqIFRoaXMgY2FuIGFsc28gYmUgYW4gb2JqZWN0LCBidXQgaW4gdGhhdCBjYXNlIGl0IGhhcyB0byBpbmNsdWRlIGEgdHlwZSBhbmQgYmUgaGFuZGxlZCBieSBhIHBsdWdpbi5cblx0XHQgKiBAcHJvcGVydHkgc3JjXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5zcmMgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgZmlsZSB0aGF0IGlzIGJlaW5nIGxvYWRlZC4gVGhlIHR5cGUgb2YgdGhlIGZpbGUgaXMgdXN1YWxseSBpbmZlcnJlZCBieSB0aGUgZXh0ZW5zaW9uLCBidXQgY2FuIGFsc29cblx0XHQgKiBiZSBzZXQgbWFudWFsbHkuIFRoaXMgaXMgaGVscGZ1bCBpbiBjYXNlcyB3aGVyZSBhIGZpbGUgZG9lcyBub3QgaGF2ZSBhbiBleHRlbnNpb24uXG5cdFx0ICogQHByb3BlcnR5IHR5cGVcblx0XHQgKiBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBzdHJpbmcgaWRlbnRpZmllciB3aGljaCBjYW4gYmUgdXNlZCB0byByZWZlcmVuY2UgdGhlIGxvYWRlZCBvYmplY3QuIElmIG5vbmUgaXMgcHJvdmlkZWQsIHRoaXMgd2lsbCBiZVxuXHRcdCAqIGF1dG9tYXRpY2FsbHkgc2V0IHRvIHRoZSB7eyNjcm9zc0xpbmsgXCJzcmM6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0uXG5cdFx0ICogQHByb3BlcnR5IGlkXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5pZCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmVzIGlmIGEgbWFuaWZlc3Qgd2lsbCBtYWludGFpbiB0aGUgb3JkZXIgb2YgdGhpcyBpdGVtLCBpbiByZWxhdGlvbiB0byBvdGhlciBpdGVtcyBpbiB0aGUgbWFuaWZlc3Rcblx0XHQgKiB0aGF0IGhhdmUgYWxzbyBzZXQgdGhlIGBtYWludGFpbk9yZGVyYCBwcm9wZXJ0eSB0byBgdHJ1ZWAuIFRoaXMgb25seSBhcHBsaWVzIHdoZW4gdGhlIG1heCBjb25uZWN0aW9ucyBoYXNcblx0XHQgKiBiZWVuIHNldCBhYm92ZSAxICh1c2luZyB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWUvc2V0TWF4Q29ubmVjdGlvbnNcIn19e3svY3Jvc3NMaW5rfX0pLiBFdmVyeXRoaW5nIHdpdGggdGhpc1xuXHRcdCAqIHByb3BlcnR5IHNldCB0byBgZmFsc2VgIHdpbGwgZmluaXNoIGFzIGl0IGlzIGxvYWRlZC4gT3JkZXJlZCBpdGVtcyBhcmUgY29tYmluZWQgd2l0aCBzY3JpcHQgdGFncyBsb2FkaW5nIGluXG5cdFx0ICogb3JkZXIgd2hlbiB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWUvbWFpbnRhaW5TY3JpcHRPcmRlcjpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBpcyBzZXQgdG8gYHRydWVgLlxuXHRcdCAqIEBwcm9wZXJ0eSBtYWludGFpbk9yZGVyXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogQGRlZmF1bHQgZmFsc2Vcblx0XHQgKi9cblx0XHR0aGlzLm1haW50YWluT3JkZXIgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIEEgY2FsbGJhY2sgdXNlZCBieSBKU09OUCByZXF1ZXN0cyB0aGF0IGRlZmluZXMgd2hhdCBnbG9iYWwgbWV0aG9kIHRvIGNhbGwgd2hlbiB0aGUgSlNPTlAgY29udGVudCBpcyBsb2FkZWQuXG5cdFx0ICogQHByb3BlcnR5IGNhbGxiYWNrXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5jYWxsYmFjayA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbiBhcmJpdHJhcnkgZGF0YSBvYmplY3QsIHdoaWNoIGlzIGluY2x1ZGVkIHdpdGggdGhlIGxvYWRlZCBvYmplY3QuXG5cdFx0ICogQHByb3BlcnR5IGRhdGFcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmRhdGEgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHJlcXVlc3QgbWV0aG9kIHVzZWQgZm9yIEhUVFAgY2FsbHMuIEJvdGgge3sjY3Jvc3NMaW5rIFwiTWV0aG9kcy9HRVQ6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gb3Jcblx0XHQgKiB7eyNjcm9zc0xpbmsgXCJNZXRob2RzL1BPU1Q6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gcmVxdWVzdCB0eXBlcyBhcmUgc3VwcG9ydGVkLCBhbmQgYXJlIGRlZmluZWQgYXNcblx0XHQgKiBjb25zdGFudHMgb24ge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RMb2FkZXJcIn19e3svY3Jvc3NMaW5rfX0uXG5cdFx0ICogQHByb3BlcnR5IG1ldGhvZFxuXHRcdCAqIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgR0VUXG5cdFx0ICovXG5cdFx0dGhpcy5tZXRob2QgPSBjcmVhdGVqcy5NZXRob2RzLkdFVDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIG9iamVjdCBoYXNoIG9mIG5hbWUvdmFsdWUgcGFpcnMgdG8gc2VuZCB0byB0aGUgc2VydmVyLlxuXHRcdCAqIEBwcm9wZXJ0eSB2YWx1ZXNcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnZhbHVlcyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbiBvYmplY3QgaGFzaCBvZiBoZWFkZXJzIHRvIGF0dGFjaCB0byBhbiBYSFIgcmVxdWVzdC4gUHJlbG9hZEpTIHdpbGwgYXV0b21hdGljYWxseSBhdHRhY2ggc29tZSBkZWZhdWx0XG5cdFx0ICogaGVhZGVycyB3aGVuIHJlcXVpcmVkLCBpbmNsdWRpbmcgXCJPcmlnaW5cIiwgXCJDb250ZW50LVR5cGVcIiwgYW5kIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiLiBZb3UgbWF5IG92ZXJyaWRlIHRoZVxuXHRcdCAqIGRlZmF1bHQgaGVhZGVycyBieSBpbmNsdWRpbmcgdGhlbSBpbiB5b3VyIGhlYWRlcnMgb2JqZWN0LlxuXHRcdCAqIEBwcm9wZXJ0eSBoZWFkZXJzXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5oZWFkZXJzID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZSBjcmVkZW50aWFscyBmb3IgWEhSIHJlcXVlc3RzLlxuXHRcdCAqIEBwcm9wZXJ0eSB3aXRoQ3JlZGVudGlhbHNcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBTZXQgdGhlIG1pbWUgdHlwZSBvZiBYSFItYmFzZWQgcmVxdWVzdHMuIFRoaXMgaXMgYXV0b21hdGljYWxseSBzZXQgdG8gXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04XCIgZm9yIHRleHRcblx0XHQgKiBiYXNlZCBmaWxlcyAoanNvbiwgeG1sLCB0ZXh0LCBjc3MsIGpzKS5cblx0XHQgKiBAcHJvcGVydHkgbWltZVR5cGVcblx0XHQgKiBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm1pbWVUeXBlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgdGhlIGNyb3NzT3JpZ2luIGF0dHJpYnV0ZSBmb3IgQ09SUy1lbmFibGVkIGltYWdlcyBsb2FkaW5nIGNyb3NzLWRvbWFpbi5cblx0XHQgKiBAcHJvcGVydHkgY3Jvc3NPcmlnaW5cblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBBbm9ueW1vdXNcblx0XHQgKi9cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYSByZXF1ZXN0IHRpbWVzIG91dC4gVGhpcyBvbmx5IGFwcGxpZXMgdG8gdGFnLWJhc2VkIGFuZCBhbmQgWEhSXG5cdFx0ICogKGxldmVsIG9uZSkgbG9hZGluZywgYXMgWEhSIChsZXZlbCAyKSBwcm92aWRlcyBpdHMgb3duIHRpbWVvdXQgZXZlbnQuXG5cdFx0ICogQHByb3BlcnR5IGxvYWRUaW1lb3V0XG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCA4MDAwICg4IHNlY29uZHMpXG5cdFx0ICovXG5cdFx0dGhpcy5sb2FkVGltZW91dCA9IHMuTE9BRF9USU1FT1VUX0RFRkFVTFQ7XG5cdH07XG5cblx0dmFyIHAgPSBMb2FkSXRlbS5wcm90b3R5cGUgPSB7fTtcblx0dmFyIHMgPSBMb2FkSXRlbTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBkdXJhdGlvbiBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYSByZXF1ZXN0IHRpbWVzIG91dC4gVGhpcyBvbmx5IGFwcGxpZXMgdG8gdGFnLWJhc2VkIGFuZCBhbmQgWEhSXG5cdCAqIChsZXZlbCBvbmUpIGxvYWRpbmcsIGFzIFhIUiAobGV2ZWwgMikgcHJvdmlkZXMgaXRzIG93biB0aW1lb3V0IGV2ZW50LlxuXHQgKiBAcHJvcGVydHkgTE9BRF9USU1FT1VUX0RFRkFVTFRcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5MT0FEX1RJTUVPVVRfREVGQVVMVCA9IDgwMDA7XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhIExvYWRJdGVtLlxuXHQgKiA8dWw+XG5cdCAqICAgICA8bGk+U3RyaW5nLWJhc2VkIGl0ZW1zIGFyZSBjb252ZXJ0ZWQgdG8gYSBMb2FkSXRlbSB3aXRoIGEgcG9wdWxhdGVkIHt7I2Nyb3NzTGluayBcInNyYzpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fS48L2xpPlxuXHQgKiAgICAgPGxpPkxvYWRJdGVtIGluc3RhbmNlcyBhcmUgcmV0dXJuZWQgYXMtaXM8L2xpPlxuXHQgKiAgICAgPGxpPk9iamVjdHMgYXJlIHJldHVybmVkIHdpdGggYW55IG5lZWRlZCBwcm9wZXJ0aWVzIGFkZGVkPC9saT5cblx0ICogPC91bD5cblx0ICogQG1ldGhvZCBjcmVhdGVcblx0ICogQHBhcmFtIHtMb2FkSXRlbXxTdHJpbmd8T2JqZWN0fSB2YWx1ZSBUaGUgbG9hZCBpdGVtIHZhbHVlXG5cdCAqIEByZXR1cm5zIHtMb2FkSXRlbXxPYmplY3R9XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuY3JlYXRlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG5ldyBMb2FkSXRlbSgpO1xuXHRcdFx0aXRlbS5zcmMgPSB2YWx1ZTtcblx0XHRcdHJldHVybiBpdGVtO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBzKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiB2YWx1ZS5zcmMpIHtcblx0XHRcdGlmICh2YWx1ZS5sb2FkVGltZW91dCA9PSBudWxsKSB7XG5cdFx0XHRcdHZhbHVlLmxvYWRUaW1lb3V0ID0gcy5MT0FEX1RJTUVPVVRfREVGQVVMVDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVHlwZSBub3QgcmVjb2duaXplZC5cIik7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBQcm92aWRlcyBhIGNoYWluYWJsZSBzaG9ydGN1dCBtZXRob2QgZm9yIHNldHRpbmcgYSBudW1iZXIgb2YgcHJvcGVydGllcyBvbiB0aGUgaW5zdGFuY2UuXG5cdCAqXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cblx0ICpcblx0ICogICAgICB2YXIgbG9hZEl0ZW0gPSBuZXcgY3JlYXRlanMuTG9hZEl0ZW0oKS5zZXQoe3NyYzpcImltYWdlLnBuZ1wiLCBtYWludGFpbk9yZGVyOnRydWV9KTtcblx0ICpcblx0ICogQG1ldGhvZCBzZXRcblx0ICogQHBhcmFtIHtPYmplY3R9IHByb3BzIEEgZ2VuZXJpYyBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIGNvcHkgdG8gdGhlIExvYWRJdGVtIGluc3RhbmNlLlxuXHQgKiBAcmV0dXJuIHtMb2FkSXRlbX0gUmV0dXJucyB0aGUgaW5zdGFuY2UgdGhlIG1ldGhvZCBpcyBjYWxsZWQgb24gKHVzZWZ1bCBmb3IgY2hhaW5pbmcgY2FsbHMuKVxuXHQqL1xuXHRwLnNldCA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdFx0Zm9yICh2YXIgbiBpbiBwcm9wcykgeyB0aGlzW25dID0gcHJvcHNbbl07IH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRjcmVhdGVqcy5Mb2FkSXRlbSA9IHM7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBNZXRob2RzLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanMgfHwge307XG5cbihmdW5jdGlvbigpIHtcblx0dmFyIHMgPSB7fTtcblxuXHQvKipcblx0ICogRGVmaW5lcyBhIFBPU1QgcmVxdWVzdCwgdXNlIGZvciBhIG1ldGhvZCB2YWx1ZSB3aGVuIGxvYWRpbmcgZGF0YS5cblx0ICogQHByb3BlcnR5IFBPU1Rcblx0ICogQHR5cGUge3N0cmluZ31cblx0ICogQGRlZmF1bHQgcG9zdFxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLlBPU1QgPSBcIlBPU1RcIjtcblxuXHQvKipcblx0ICogRGVmaW5lcyBhIEdFVCByZXF1ZXN0LCB1c2UgZm9yIGEgbWV0aG9kIHZhbHVlIHdoZW4gbG9hZGluZyBkYXRhLlxuXHQgKiBAcHJvcGVydHkgR0VUXG5cdCAqIEB0eXBlIHtzdHJpbmd9XG5cdCAqIEBkZWZhdWx0IGdldFxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLkdFVCA9IFwiR0VUXCI7XG5cblx0Y3JlYXRlanMuTWV0aG9kcyA9IHM7XG59KCkpO1xuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gVHlwZXMuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqcyB8fCB7fTtcblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgcyA9IHt9O1xuXG5cdC8qKlxuXHQgKiBUaGUgcHJlbG9hZCB0eXBlIGZvciBnZW5lcmljIGJpbmFyeSB0eXBlcy4gTm90ZSB0aGF0IGltYWdlcyBhcmUgbG9hZGVkIGFzIGJpbmFyeSBmaWxlcyB3aGVuIHVzaW5nIFhIUi5cblx0ICogQHByb3BlcnR5IEJJTkFSWVxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBiaW5hcnlcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHMuQklOQVJZID0gXCJiaW5hcnlcIjtcblxuXHQvKipcblx0ICogVGhlIHByZWxvYWQgdHlwZSBmb3IgY3NzIGZpbGVzLiBDU1MgZmlsZXMgYXJlIGxvYWRlZCB1c2luZyBhICZsdDtsaW5rJmd0OyB3aGVuIGxvYWRlZCB3aXRoIFhIUiwgb3IgYVxuXHQgKiAmbHQ7c3R5bGUmZ3Q7IHRhZyB3aGVuIGxvYWRlZCB3aXRoIHRhZ3MuXG5cdCAqIEBwcm9wZXJ0eSBDU1Ncblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQgY3NzXG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRzLkNTUyA9IFwiY3NzXCI7XG5cblx0LyoqXG5cdCAqIFRoZSBwcmVsb2FkIHR5cGUgZm9yIGZvbnQgZmlsZXMuXG5cdCAqIEBwcm9wZXJ0eSBGT05UXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEBkZWZhdWx0IGZvbnRcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC45LjBcblx0ICovXG5cdHMuRk9OVCA9IFwiZm9udFwiO1xuXG5cdC8qKlxuXHQgKiBUaGUgcHJlbG9hZCB0eXBlIGZvciBmb250cyBzcGVjaWZpZWQgd2l0aCBDU1MgKHN1Y2ggYXMgR29vZ2xlIGZvbnRzKVxuXHQgKiBAcHJvcGVydHkgRk9OVENTU1xuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBmb250Y3NzXG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDAuOS4wXG5cdCAqL1xuXHRzLkZPTlRDU1MgPSBcImZvbnRjc3NcIjtcblxuXHQvKipcblx0ICogVGhlIHByZWxvYWQgdHlwZSBmb3IgaW1hZ2UgZmlsZXMsIHVzdWFsbHkgcG5nLCBnaWYsIG9yIGpwZy9qcGVnLiBJbWFnZXMgYXJlIGxvYWRlZCBpbnRvIGFuICZsdDtpbWFnZSZndDsgdGFnLlxuXHQgKiBAcHJvcGVydHkgSU1BR0Vcblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQgaW1hZ2Vcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHMuSU1BR0UgPSBcImltYWdlXCI7XG5cblx0LyoqXG5cdCAqIFRoZSBwcmVsb2FkIHR5cGUgZm9yIGphdmFzY3JpcHQgZmlsZXMsIHVzdWFsbHkgd2l0aCB0aGUgXCJqc1wiIGZpbGUgZXh0ZW5zaW9uLiBKYXZhU2NyaXB0IGZpbGVzIGFyZSBsb2FkZWQgaW50byBhXG5cdCAqICZsdDtzY3JpcHQmZ3Q7IHRhZy5cblx0ICpcblx0ICogU2luY2UgdmVyc2lvbiAwLjQuMSssIGR1ZSB0byBob3cgdGFnLWxvYWRlZCBzY3JpcHRzIHdvcmssIGFsbCBKYXZhU2NyaXB0IGZpbGVzIGFyZSBhdXRvbWF0aWNhbGx5IGluamVjdGVkIGludG9cblx0ICogdGhlIGJvZHkgb2YgdGhlIGRvY3VtZW50IHRvIG1haW50YWluIHBhcml0eSBiZXR3ZWVuIFhIUiBhbmQgdGFnLWxvYWRlZCBzY3JpcHRzLiBJbiB2ZXJzaW9uIDAuNC4wIGFuZCBlYXJsaWVyLFxuXHQgKiBvbmx5IHRhZy1sb2FkZWQgc2NyaXB0cyBhcmUgaW5qZWN0ZWQuXG5cdCAqIEBwcm9wZXJ0eSBKQVZBU0NSSVBUXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEBkZWZhdWx0IGphdmFzY3JpcHRcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHMuSkFWQVNDUklQVCA9IFwiamF2YXNjcmlwdFwiO1xuXG5cdC8qKlxuXHQgKiBUaGUgcHJlbG9hZCB0eXBlIGZvciBqc29uIGZpbGVzLCB1c3VhbGx5IHdpdGggdGhlIFwianNvblwiIGZpbGUgZXh0ZW5zaW9uLiBKU09OIGRhdGEgaXMgbG9hZGVkIGFuZCBwYXJzZWQgaW50byBhXG5cdCAqIEphdmFTY3JpcHQgb2JqZWN0LiBOb3RlIHRoYXQgaWYgYSBgY2FsbGJhY2tgIGlzIHByZXNlbnQgb24gdGhlIGxvYWQgaXRlbSwgdGhlIGZpbGUgd2lsbCBiZSBsb2FkZWQgd2l0aCBKU09OUCxcblx0ICogbm8gbWF0dGVyIHdoYXQgdGhlIHt7I2Nyb3NzTGluayBcIkxvYWRRdWV1ZS9wcmVmZXJYSFI6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gcHJvcGVydHkgaXMgc2V0IHRvLCBhbmQgdGhlIEpTT05cblx0ICogbXVzdCBjb250YWluIGEgbWF0Y2hpbmcgd3JhcHBlciBmdW5jdGlvbi5cblx0ICogQHByb3BlcnR5IEpTT05cblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQganNvblxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5KU09OID0gXCJqc29uXCI7XG5cblx0LyoqXG5cdCAqIFRoZSBwcmVsb2FkIHR5cGUgZm9yIGpzb25wIGZpbGVzLCB1c3VhbGx5IHdpdGggdGhlIFwianNvblwiIGZpbGUgZXh0ZW5zaW9uLiBKU09OIGRhdGEgaXMgbG9hZGVkIGFuZCBwYXJzZWQgaW50byBhXG5cdCAqIEphdmFTY3JpcHQgb2JqZWN0LiBZb3UgYXJlIHJlcXVpcmVkIHRvIHBhc3MgYSBjYWxsYmFjayBwYXJhbWV0ZXIgdGhhdCBtYXRjaGVzIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGluIHRoZSBKU09OLlxuXHQgKiBOb3RlIHRoYXQgSlNPTlAgd2lsbCBhbHdheXMgYmUgdXNlZCBpZiB0aGVyZSBpcyBhIGNhbGxiYWNrIHByZXNlbnQsIG5vIG1hdHRlciB3aGF0IHRoZSB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWUvcHJlZmVyWEhSOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqIHByb3BlcnR5IGlzIHNldCB0by5cblx0ICogQHByb3BlcnR5IEpTT05QXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEBkZWZhdWx0IGpzb25wXG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRzLkpTT05QID0gXCJqc29ucFwiO1xuXG5cdC8qKlxuXHQgKiBUaGUgcHJlbG9hZCB0eXBlIGZvciBqc29uLWJhc2VkIG1hbmlmZXN0IGZpbGVzLCB1c3VhbGx5IHdpdGggdGhlIFwianNvblwiIGZpbGUgZXh0ZW5zaW9uLiBUaGUgSlNPTiBkYXRhIGlzIGxvYWRlZFxuXHQgKiBhbmQgcGFyc2VkIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC4gUHJlbG9hZEpTIHdpbGwgdGhlbiBsb29rIGZvciBhIFwibWFuaWZlc3RcIiBwcm9wZXJ0eSBpbiB0aGUgSlNPTiwgd2hpY2ggaXMgYW5cblx0ICogQXJyYXkgb2YgZmlsZXMgdG8gbG9hZCwgZm9sbG93aW5nIHRoZSBzYW1lIGZvcm1hdCBhcyB0aGUge3sjY3Jvc3NMaW5rIFwiTG9hZFF1ZXVlL2xvYWRNYW5pZmVzdFwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBtZXRob2QuIElmIGEgXCJjYWxsYmFja1wiIGlzIHNwZWNpZmllZCBvbiB0aGUgbWFuaWZlc3Qgb2JqZWN0LCB0aGVuIGl0IHdpbGwgYmUgbG9hZGVkIHVzaW5nIEpTT05QIGluc3RlYWQsXG5cdCAqIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB0aGUge3sjY3Jvc3NMaW5rIFwiTG9hZFF1ZXVlL3ByZWZlclhIUjpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBwcm9wZXJ0eSBpcyBzZXQgdG8uXG5cdCAqIEBwcm9wZXJ0eSBNQU5JRkVTVFxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBtYW5pZmVzdFxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5NQU5JRkVTVCA9IFwibWFuaWZlc3RcIjtcblxuXHQvKipcblx0ICogVGhlIHByZWxvYWQgdHlwZSBmb3Igc291bmQgZmlsZXMsIHVzdWFsbHkgbXAzLCBvZ2csIG9yIHdhdi4gV2hlbiBsb2FkaW5nIHZpYSB0YWdzLCBhdWRpbyBpcyBsb2FkZWQgaW50byBhblxuXHQgKiAmbHQ7YXVkaW8mZ3Q7IHRhZy5cblx0ICogQHByb3BlcnR5IFNPVU5EXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEBkZWZhdWx0IHNvdW5kXG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRzLlNPVU5EID0gXCJzb3VuZFwiO1xuXG5cdC8qKlxuXHQgKiBUaGUgcHJlbG9hZCB0eXBlIGZvciB2aWRlbyBmaWxlcywgdXN1YWxseSBtcDQsIHRzLCBvciBvZ2cuIFdoZW4gbG9hZGluZyB2aWEgdGFncywgdmlkZW8gaXMgbG9hZGVkIGludG8gYW5cblx0ICogJmx0O3ZpZGVvJmd0OyB0YWcuXG5cdCAqIEBwcm9wZXJ0eSBWSURFT1xuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCB2aWRlb1xuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5WSURFTyA9IFwidmlkZW9cIjtcblxuXHQvKipcblx0ICogVGhlIHByZWxvYWQgdHlwZSBmb3IgU3ByaXRlU2hlZXQgZmlsZXMuIFNwcml0ZVNoZWV0IGZpbGVzIGFyZSBKU09OIGZpbGVzIHRoYXQgY29udGFpbiBzdHJpbmcgaW1hZ2UgcGF0aHMuXG5cdCAqIEBwcm9wZXJ0eSBTUFJJVEVTSEVFVFxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBzcHJpdGVzaGVldFxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5TUFJJVEVTSEVFVCA9IFwic3ByaXRlc2hlZXRcIjtcblxuXHQvKipcblx0ICogVGhlIHByZWxvYWQgdHlwZSBmb3IgU1ZHIGZpbGVzLlxuXHQgKiBAcHJvcGVydHkgU1ZHXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEBkZWZhdWx0IHN2Z1xuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5TVkcgPSBcInN2Z1wiO1xuXG5cdC8qKlxuXHQgKiBUaGUgcHJlbG9hZCB0eXBlIGZvciB0ZXh0IGZpbGVzLCB3aGljaCBpcyBhbHNvIHRoZSBkZWZhdWx0IGZpbGUgdHlwZSBpZiB0aGUgdHlwZSBjYW4gbm90IGJlIGRldGVybWluZWQuIFRleHQgaXNcblx0ICogbG9hZGVkIGFzIHJhdyB0ZXh0LlxuXHQgKiBAcHJvcGVydHkgVEVYVFxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCB0ZXh0XG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRzLlRFWFQgPSBcInRleHRcIjtcblxuXHQvKipcblx0ICogVGhlIHByZWxvYWQgdHlwZSBmb3IgeG1sIGZpbGVzLiBYTUwgaXMgbG9hZGVkIGludG8gYW4gWE1MIGRvY3VtZW50LlxuXHQgKiBAcHJvcGVydHkgWE1MXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEBkZWZhdWx0IHhtbFxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5YTUwgPSBcInhtbFwiO1xuXG5cdGNyZWF0ZWpzLlR5cGVzID0gcztcbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBFbGVtZW50cy5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuKGZ1bmN0aW9uICgpIHtcblxuXHQvKipcblx0ICogQ29udmVuaWVuY2UgbWV0aG9kcyBmb3IgY3JlYXRpbmcgdmFyaW91cyBlbGVtZW50cyB1c2VkIGJ5IFByZWxhb2RKUy5cblx0ICpcblx0ICogQGNsYXNzIERvbVV0aWxzXG5cdCAqL1xuXHR2YXIgcyA9IHt9O1xuXG5cdHMuYSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzLmVsKFwiYVwiKTtcblx0fVxuXG5cdHMuc3ZnID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHMuZWwoXCJzdmdcIik7XG5cdH1cblxuXHRzLm9iamVjdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzLmVsKFwib2JqZWN0XCIpO1xuXHR9XG5cblx0cy5pbWFnZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzLmVsKFwiaW1hZ2VcIik7XG5cdH1cblxuXHRzLmltZyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzLmVsKFwiaW1nXCIpO1xuXHR9XG5cblx0cy5zdHlsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzLmVsKFwic3R5bGVcIik7XG5cdH1cblxuXHRzLmxpbmsgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gcy5lbChcImxpbmtcIik7XG5cdH1cblxuXHRzLnNjcmlwdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzLmVsKFwic2NyaXB0XCIpO1xuXHR9XG5cblx0cy5hdWRpbyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzLmVsKFwiYXVkaW9cIik7XG5cdH1cblxuXHRzLnZpZGVvID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHMuZWwoXCJ2aWRlb1wiKTtcblx0fVxuXG5cdHMudGV4dCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHZhbHVlKTtcblx0fVxuXG5cdHMuZWwgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG5cdH1cblxuXHRjcmVhdGVqcy5FbGVtZW50cyA9IHM7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBEb21VdGlscy5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuKGZ1bmN0aW9uICgpIHtcblxuXHQvKipcblx0ICogQSBmZXcgdXRpbGl0aWVzIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBkb20uXG5cdCAqIEBjbGFzcyBEb21VdGlsc1xuXHQgKi9cblx0dmFyIHMgPSB7XG5cdFx0Y29udGFpbmVyOiBudWxsXG5cdH07XG5cblx0cy5hcHBlbmRUb0hlYWQgPSBmdW5jdGlvbiAoZWwpIHtcblx0XHRzLmdldEhlYWQoKS5hcHBlbmRDaGlsZChlbCk7XG5cdH1cblxuXHRzLmFwcGVuZFRvQm9keSA9IGZ1bmN0aW9uIChlbCkge1xuXHRcdGlmIChzLmNvbnRhaW5lciA9PSBudWxsKSB7XG5cdFx0XHRzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRzLmNvbnRhaW5lci5pZCA9IFwicHJlbG9hZGpzLWNvbnRhaW5lclwiO1xuXHRcdFx0dmFyIHN0eWxlID0gcy5jb250YWluZXIuc3R5bGU7XG5cdFx0XHRzdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblx0XHRcdHN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdFx0c3R5bGUud2lkdGggPSBzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBcIjEwcHhcIjtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRcdHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLm1zVHJhbnNmb3JtID0gc3R5bGUud2Via2l0VHJhbnNmb3JtID0gc3R5bGUub1RyYW5zZm9ybSA9IFwidHJhbnNsYXRlKC0xMHB4LCAtMTBweClcIjsgLy9MTTogTm90IHdvcmtpbmdcblx0XHRcdHMuZ2V0Qm9keSgpLmFwcGVuZENoaWxkKHMuY29udGFpbmVyKTtcblx0XHR9XG5cdFx0cy5jb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuXHR9XG5cblx0cy5nZXRIZWFkID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcblx0fVxuXG5cdHMuZ2V0Qm9keSA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07XG5cdH1cblxuXHRzLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24oZWwpIHtcblx0XHRpZiAoZWwucGFyZW50KSB7XG5cdFx0XHRlbC5wYXJlbnQucmVtb3ZlQ2hpbGQoZWwpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVjayBpZiBpdGVtIGlzIGEgdmFsaWQgSFRNTEltYWdlRWxlbWVudFxuXHQgKiBAbWV0aG9kIGlzSW1hZ2VUYWdcblx0ICogQHBhcmFtIHtPYmplY3R9IGl0ZW1cblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuaXNJbWFnZVRhZyA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRyZXR1cm4gaXRlbSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrIGlmIGl0ZW0gaXMgYSB2YWxpZCBIVE1MQXVkaW9FbGVtZW50XG5cdCAqIEBtZXRob2QgaXNBdWRpb1RhZ1xuXHQgKiBAcGFyYW0ge09iamVjdH0gaXRlbVxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5pc0F1ZGlvVGFnID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmICh3aW5kb3cuSFRNTEF1ZGlvRWxlbWVudCkge1xuXHRcdFx0cmV0dXJuIGl0ZW0gaW5zdGFuY2VvZiBIVE1MQXVkaW9FbGVtZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDaGVjayBpZiBpdGVtIGlzIGEgdmFsaWQgSFRNTFZpZGVvRWxlbWVudFxuXHQgKiBAbWV0aG9kIGlzVmlkZW9UYWdcblx0ICogQHBhcmFtIHtPYmplY3R9IGl0ZW1cblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuaXNWaWRlb1RhZyA9IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpZiAod2luZG93LkhUTUxWaWRlb0VsZW1lbnQpIHtcblx0XHRcdHJldHVybiBpdGVtIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHRjcmVhdGVqcy5Eb21VdGlscyA9IHM7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBSZXF1ZXN0VXRpbHMuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbihmdW5jdGlvbiAoKSB7XG5cblx0LyoqXG5cdCAqIFV0aWxpdGllcyB0aGF0IGFzc2lzdCB3aXRoIHBhcnNpbmcgbG9hZCBpdGVtcywgYW5kIGRldGVybWluaW5nIGZpbGUgdHlwZXMsIGV0Yy5cblx0ICogQGNsYXNzIFJlcXVlc3RVdGlsc1xuXHQgKi9cblx0dmFyIHMgPSB7fTtcblxuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgdHlwZSBzaG91bGQgYmUgbG9hZGVkIGFzIGEgYmluYXJ5IGZpbGUuIEN1cnJlbnRseSwgb25seSBpbWFnZXMgYW5kIGl0ZW1zIG1hcmtlZFxuXHQgKiBzcGVjaWZpY2FsbHkgYXMgXCJiaW5hcnlcIiBhcmUgbG9hZGVkIGFzIGJpbmFyeS4gTm90ZSB0aGF0IGF1ZGlvIGlzIDxiPm5vdDwvYj4gYSBiaW5hcnkgdHlwZSwgYXMgd2UgY2FuIG5vdCBwbGF5XG5cdCAqIGJhY2sgdXNpbmcgYW4gYXVkaW8gdGFnIGlmIGl0IGlzIGxvYWRlZCBhcyBiaW5hcnkuIFBsdWdpbnMgY2FuIGNoYW5nZSB0aGUgaXRlbSB0eXBlIHRvIGJpbmFyeSB0byBlbnN1cmUgdGhleSBnZXRcblx0ICogYSBiaW5hcnkgcmVzdWx0IHRvIHdvcmsgd2l0aC4gQmluYXJ5IGZpbGVzIGFyZSBsb2FkZWQgdXNpbmcgWEhSMi4gVHlwZXMgYXJlIGRlZmluZWQgYXMgc3RhdGljIGNvbnN0YW50cyBvblxuXHQgKiB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdExvYWRlclwifX17ey9jcm9zc0xpbmt9fS5cblx0ICogQG1ldGhvZCBpc0JpbmFyeVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgaXRlbSB0eXBlLlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgc3BlY2lmaWVkIHR5cGUgaXMgYmluYXJ5LlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLmlzQmluYXJ5ID0gZnVuY3Rpb24gKHR5cGUpIHtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgY3JlYXRlanMuVHlwZXMuSU1BR0U6XG5cdFx0XHRjYXNlIGNyZWF0ZWpzLlR5cGVzLkJJTkFSWTpcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyB0eXBlIGlzIGEgdGV4dC1iYXNlZCBhc3NldCwgYW5kIHNob3VsZCBiZSBsb2FkZWQgYXMgVVRGLTguXG5cdCAqIEBtZXRob2QgaXNUZXh0XG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBpdGVtIHR5cGUuXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBzcGVjaWZpZWQgdHlwZSBpcyB0ZXh0LlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLmlzVGV4dCA9IGZ1bmN0aW9uICh0eXBlKSB7XG5cdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRjYXNlIGNyZWF0ZWpzLlR5cGVzLlRFWFQ6XG5cdFx0XHRjYXNlIGNyZWF0ZWpzLlR5cGVzLkpTT046XG5cdFx0XHRjYXNlIGNyZWF0ZWpzLlR5cGVzLk1BTklGRVNUOlxuXHRcdFx0Y2FzZSBjcmVhdGVqcy5UeXBlcy5YTUw6XG5cdFx0XHRjYXNlIGNyZWF0ZWpzLlR5cGVzLkNTUzpcblx0XHRcdGNhc2UgY3JlYXRlanMuVHlwZXMuU1ZHOlxuXHRcdFx0Y2FzZSBjcmVhdGVqcy5UeXBlcy5KQVZBU0NSSVBUOlxuXHRcdFx0Y2FzZSBjcmVhdGVqcy5UeXBlcy5TUFJJVEVTSEVFVDpcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgdGhlIHR5cGUgb2YgdGhlIG9iamVjdCB1c2luZyBjb21tb24gZXh0ZW5zaW9ucy4gTm90ZSB0aGF0IHRoZSB0eXBlIGNhbiBiZSBwYXNzZWQgaW4gd2l0aCB0aGUgbG9hZCBpdGVtXG5cdCAqIGlmIGl0IGlzIGFuIHVudXN1YWwgZXh0ZW5zaW9uLlxuXHQgKiBAbWV0aG9kIGdldFR5cGVCeUV4dGVuc2lvblxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXh0ZW5zaW9uIFRoZSBmaWxlIGV4dGVuc2lvbiB0byB1c2UgdG8gZGV0ZXJtaW5lIHRoZSBsb2FkIHR5cGUuXG5cdCAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGRldGVybWluZWQgbG9hZCB0eXBlIChmb3IgZXhhbXBsZSwgYGNyZWF0ZWpzLlR5cGVzLklNQUdFYCkuIFdpbGwgcmV0dXJuIGBudWxsYCBpZlxuXHQgKiB0aGUgdHlwZSBjYW4gbm90IGJlIGRldGVybWluZWQgYnkgdGhlIGV4dGVuc2lvbi5cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5nZXRUeXBlQnlFeHRlbnNpb24gPSBmdW5jdGlvbiAoZXh0ZW5zaW9uKSB7XG5cdFx0aWYgKGV4dGVuc2lvbiA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gY3JlYXRlanMuVHlwZXMuVEVYVDtcblx0XHR9XG5cblx0XHRzd2l0Y2ggKGV4dGVuc2lvbi50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRjYXNlIFwianBlZ1wiOlxuXHRcdFx0Y2FzZSBcImpwZ1wiOlxuXHRcdFx0Y2FzZSBcImdpZlwiOlxuXHRcdFx0Y2FzZSBcInBuZ1wiOlxuXHRcdFx0Y2FzZSBcIndlYnBcIjpcblx0XHRcdGNhc2UgXCJibXBcIjpcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZWpzLlR5cGVzLklNQUdFO1xuXHRcdFx0Y2FzZSBcIm9nZ1wiOlxuXHRcdFx0Y2FzZSBcIm1wM1wiOlxuXHRcdFx0Y2FzZSBcIndlYm1cIjpcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZWpzLlR5cGVzLlNPVU5EO1xuXHRcdFx0Y2FzZSBcIm1wNFwiOlxuXHRcdFx0Y2FzZSBcIndlYm1cIjpcblx0XHRcdGNhc2UgXCJ0c1wiOlxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlanMuVHlwZXMuVklERU87XG5cdFx0XHRjYXNlIFwianNvblwiOlxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlanMuVHlwZXMuSlNPTjtcblx0XHRcdGNhc2UgXCJ4bWxcIjpcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZWpzLlR5cGVzLlhNTDtcblx0XHRcdGNhc2UgXCJjc3NcIjpcblx0XHRcdFx0cmV0dXJuIGNyZWF0ZWpzLlR5cGVzLkNTUztcblx0XHRcdGNhc2UgXCJqc1wiOlxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlanMuVHlwZXMuSkFWQVNDUklQVDtcblx0XHRcdGNhc2UgJ3N2Zyc6XG5cdFx0XHRcdHJldHVybiBjcmVhdGVqcy5UeXBlcy5TVkc7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlanMuVHlwZXMuVEVYVDtcblx0XHR9XG5cdH07XG5cblx0Y3JlYXRlanMuUmVxdWVzdFV0aWxzID0gcztcblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFVSTFV0aWxzLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG4oZnVuY3Rpb24gKCkge1xuXG5cdC8qKlxuXHQgKiBVdGlsaXRpZXMgdGhhdCBhc3Npc3Qgd2l0aCBwYXJzaW5nIGxvYWQgaXRlbXMsIGFuZCBkZXRlcm1pbmluZyBmaWxlIHR5cGVzLCBldGMuXG5cdCAqIEBjbGFzcyBVUkxVdGlsc1xuXHQgKi9cblx0dmFyIHMgPSB7fTtcblxuXHQvKipcblx0ICogVGhlIFJlZ3VsYXIgRXhwcmVzc2lvbiB1c2VkIHRvIHRlc3QgZmlsZSBVUkxTIGZvciBhbiBhYnNvbHV0ZSBwYXRoLlxuXHQgKiBAcHJvcGVydHkgQUJTT0xVVEVfUEFUSFxuXHQgKiBAdHlwZSB7UmVnRXhwfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLkFCU09MVVRFX1BBVFQgPSAvXig/Olxcdys6KT9cXC97Mn0vaTtcblxuXHQvKipcblx0ICogVGhlIFJlZ3VsYXIgRXhwcmVzc2lvbiB1c2VkIHRvIHRlc3QgZmlsZSBVUkxTIGZvciBhIHJlbGF0aXZlIHBhdGguXG5cdCAqIEBwcm9wZXJ0eSBSRUxBVElWRV9QQVRIXG5cdCAqIEB0eXBlIHtSZWdFeHB9XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuUkVMQVRJVkVfUEFUVCA9ICgvXlsuL10qP1xcLy9pKTtcblxuXHQvKipcblx0ICogVGhlIFJlZ3VsYXIgRXhwcmVzc2lvbiB1c2VkIHRvIHRlc3QgZmlsZSBVUkxTIGZvciBhbiBleHRlbnNpb24uIE5vdGUgdGhhdCBVUklzIG11c3QgYWxyZWFkeSBoYXZlIHRoZSBxdWVyeSBzdHJpbmdcblx0ICogcmVtb3ZlZC5cblx0ICogQHByb3BlcnR5IEVYVEVOU0lPTl9QQVRUXG5cdCAqIEB0eXBlIHtSZWdFeHB9XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuRVhURU5TSU9OX1BBVFQgPSAvXFwvP1teL10rXFwuKFxcd3sxLDV9KSQvaTtcblxuXHQvKipcblx0ICogUGFyc2UgYSBmaWxlIHBhdGggdG8gZGV0ZXJtaW5lIHRoZSBpbmZvcm1hdGlvbiB3ZSBuZWVkIHRvIHdvcmsgd2l0aCBpdC4gQ3VycmVudGx5LCBQcmVsb2FkSlMgbmVlZHMgdG8ga25vdzpcblx0ICogPHVsPlxuXHQgKiAgICAgPGxpPklmIHRoZSBwYXRoIGlzIGFic29sdXRlLiBBYnNvbHV0ZSBwYXRocyBzdGFydCB3aXRoIGEgcHJvdG9jb2wgKHN1Y2ggYXMgYGh0dHA6Ly9gLCBgZmlsZTovL2AsIG9yXG5cdCAqICAgICBgLy9uZXR3b3JrUGF0aGApPC9saT5cblx0ICogICAgIDxsaT5JZiB0aGUgcGF0aCBpcyByZWxhdGl2ZS4gUmVsYXRpdmUgcGF0aHMgc3RhcnQgd2l0aCBgLi4vYCBvciBgL3BhdGhgIChvciBzaW1pbGFyKTwvbGk+XG5cdCAqICAgICA8bGk+VGhlIGZpbGUgZXh0ZW5zaW9uLiBUaGlzIGlzIGRldGVybWluZWQgYnkgdGhlIGZpbGVuYW1lIHdpdGggYW4gZXh0ZW5zaW9uLiBRdWVyeSBzdHJpbmdzIGFyZSBkcm9wcGVkLCBhbmRcblx0ICogICAgIHRoZSBmaWxlIHBhdGggaXMgZXhwZWN0ZWQgdG8gZm9sbG93IHRoZSBmb3JtYXQgYG5hbWUuZXh0YC48L2xpPlxuXHQgKiA8L3VsPlxuXHQgKlxuXHQgKiBAbWV0aG9kIHBhcnNlVVJJXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IEFuIE9iamVjdCB3aXRoIGFuIGBhYnNvbHV0ZWAgYW5kIGByZWxhdGl2ZWAgQm9vbGVhbiB2YWx1ZXMsXG5cdCAqIFx0dGhlIHBpZWNlcyBvZiB0aGUgcGF0aCAocHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBob3N0KVxuXHQgKiBcdGFzIHdlbGwgYXMgYW4gb3B0aW9uYWwgJ2V4dGVuc2lvbmAgcHJvcGVydHksIHdoaWNoIGlzIHRoZSBsb3dlcmNhc2UgZXh0ZW5zaW9uLlxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLnBhcnNlVVJJID0gZnVuY3Rpb24gKHBhdGgpIHtcblx0XHR2YXIgaW5mbyA9IHtcblx0XHRcdGFic29sdXRlOiBmYWxzZSxcblx0XHRcdHJlbGF0aXZlOiBmYWxzZSxcblx0XHRcdHByb3RvY29sOiBudWxsLFxuXHRcdFx0aG9zdG5hbWU6IG51bGwsXG5cdFx0XHRwb3J0OiBudWxsLFxuXHRcdFx0cGF0aG5hbWU6IG51bGwsXG5cdFx0XHRzZWFyY2g6IG51bGwsXG5cdFx0XHRoYXNoOiBudWxsLFxuXHRcdFx0aG9zdDogbnVsbFxuXHRcdH07XG5cblx0XHRpZiAocGF0aCA9PSBudWxsKSB7IHJldHVybiBpbmZvOyB9XG5cblx0XHQvLyBJbmplY3QgdGhlIHBhdGggcGFydHMuXG5cdFx0dmFyIHBhcnNlciA9IGNyZWF0ZWpzLkVsZW1lbnRzLmEoKTtcblx0XHRwYXJzZXIuaHJlZiA9IHBhdGg7XG5cblx0XHRmb3IgKHZhciBuIGluIGluZm8pIHtcblx0XHRcdGlmIChuIGluIHBhcnNlcikge1xuXHRcdFx0XHRpbmZvW25dID0gcGFyc2VyW25dO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIERyb3AgdGhlIHF1ZXJ5IHN0cmluZ1xuXHRcdHZhciBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcblx0XHRpZiAocXVlcnlJbmRleCA+IC0xKSB7XG5cdFx0XHRwYXRoID0gcGF0aC5zdWJzdHIoMCwgcXVlcnlJbmRleCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJzb2x1dGVcblx0XHR2YXIgbWF0Y2g7XG5cdFx0aWYgKHMuQUJTT0xVVEVfUEFUVC50ZXN0KHBhdGgpKSB7XG5cdFx0XHRpbmZvLmFic29sdXRlID0gdHJ1ZTtcblxuXHRcdFx0Ly8gUmVsYXRpdmVcblx0XHR9IGVsc2UgaWYgKHMuUkVMQVRJVkVfUEFUVC50ZXN0KHBhdGgpKSB7XG5cdFx0XHRpbmZvLnJlbGF0aXZlID0gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBFeHRlbnNpb25cblx0XHRpZiAobWF0Y2ggPSBwYXRoLm1hdGNoKHMuRVhURU5TSU9OX1BBVFQpKSB7XG5cdFx0XHRpbmZvLmV4dGVuc2lvbiA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluZm87XG5cdH07XG5cblx0LyoqXG5cdCAqIEZvcm1hdHMgYW4gb2JqZWN0IGludG8gYSBxdWVyeSBzdHJpbmcgZm9yIGVpdGhlciBhIFBPU1Qgb3IgR0VUIHJlcXVlc3QuXG5cdCAqIEBtZXRob2QgZm9ybWF0UXVlcnlTdHJpbmdcblx0ICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIGRhdGEgdG8gY29udmVydCB0byBhIHF1ZXJ5IHN0cmluZy5cblx0ICogQHBhcmFtIHtBcnJheX0gW3F1ZXJ5XSBFeGlzdGluZyBuYW1lL3ZhbHVlIHBhaXJzIHRvIGFwcGVuZCBvbiB0byB0aGlzIHF1ZXJ5LlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLmZvcm1hdFF1ZXJ5U3RyaW5nID0gZnVuY3Rpb24gKGRhdGEsIHF1ZXJ5KSB7XG5cdFx0aWYgKGRhdGEgPT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3Qgc3BlY2lmeSBkYXRhLlwiKTtcblx0XHR9XG5cdFx0dmFyIHBhcmFtcyA9IFtdO1xuXHRcdGZvciAodmFyIG4gaW4gZGF0YSkge1xuXHRcdFx0cGFyYW1zLnB1c2gobiArIFwiPVwiICsgZXNjYXBlKGRhdGFbbl0pKTtcblx0XHR9XG5cdFx0aWYgKHF1ZXJ5KSB7XG5cdFx0XHRwYXJhbXMgPSBwYXJhbXMuY29uY2F0KHF1ZXJ5KTtcblx0XHR9XG5cdFx0cmV0dXJuIHBhcmFtcy5qb2luKFwiJlwiKTtcblx0fTtcblxuXHQvKipcblx0ICogQSB1dGlsaXR5IG1ldGhvZCB0aGF0IGJ1aWxkcyBhIGZpbGUgcGF0aCB1c2luZyBhIHNvdXJjZSBhbmQgYSBkYXRhIG9iamVjdCwgYW5kIGZvcm1hdHMgaXQgaW50byBhIG5ldyBwYXRoLlxuXHQgKiBAbWV0aG9kIGJ1aWxkVVJJXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBwYXRoIHRvIGFkZCB2YWx1ZXMgdG8uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbZGF0YV0gT2JqZWN0IHVzZWQgdG8gYXBwZW5kIHZhbHVlcyB0byB0aGlzIHJlcXVlc3QgYXMgYSBxdWVyeSBzdHJpbmcuIEV4aXN0aW5nIHBhcmFtZXRlcnMgb24gdGhlXG5cdCAqIHBhdGggd2lsbCBiZSBwcmVzZXJ2ZWQuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IEEgZm9ybWF0dGVkIHN0cmluZyB0aGF0IGNvbnRhaW5zIHRoZSBwYXRoIGFuZCB0aGUgc3VwcGxpZWQgcGFyYW1ldGVycy5cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5idWlsZFVSSSA9IGZ1bmN0aW9uIChzcmMsIGRhdGEpIHtcblx0XHRpZiAoZGF0YSA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gc3JjO1xuXHRcdH1cblxuXHRcdHZhciBxdWVyeSA9IFtdO1xuXHRcdHZhciBpZHggPSBzcmMuaW5kZXhPZihcIj9cIik7XG5cblx0XHRpZiAoaWR4ICE9IC0xKSB7XG5cdFx0XHR2YXIgcSA9IHNyYy5zbGljZShpZHggKyAxKTtcblx0XHRcdHF1ZXJ5ID0gcXVlcnkuY29uY2F0KHEuc3BsaXQoXCImXCIpKTtcblx0XHR9XG5cblx0XHRpZiAoaWR4ICE9IC0xKSB7XG5cdFx0XHRyZXR1cm4gc3JjLnNsaWNlKDAsIGlkeCkgKyBcIj9cIiArIHRoaXMuZm9ybWF0UXVlcnlTdHJpbmcoZGF0YSwgcXVlcnkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gc3JjICsgXCI/XCIgKyB0aGlzLmZvcm1hdFF1ZXJ5U3RyaW5nKGRhdGEsIHF1ZXJ5KTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEBtZXRob2QgaXNDcm9zc0RvbWFpblxuXHQgKiBAcGFyYW0ge0xvYWRJdGVtfE9iamVjdH0gaXRlbSBBIGxvYWQgaXRlbSB3aXRoIGEgYHNyY2AgcHJvcGVydHkuXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBsb2FkIGl0ZW0gaXMgbG9hZGluZyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpbiB0aGFuIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLmlzQ3Jvc3NEb21haW4gPSBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHZhciB0YXJnZXQgPSBjcmVhdGVqcy5FbGVtZW50cy5hKCk7XG5cdFx0dGFyZ2V0LmhyZWYgPSBpdGVtLnNyYztcblxuXHRcdHZhciBob3N0ID0gY3JlYXRlanMuRWxlbWVudHMuYSgpO1xuXHRcdGhvc3QuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cblx0XHR2YXIgY3Jvc3Nkb21haW4gPSAodGFyZ2V0Lmhvc3RuYW1lICE9IFwiXCIpICYmXG5cdFx0XHQodGFyZ2V0LnBvcnQgIT0gaG9zdC5wb3J0IHx8XG5cdFx0XHR0YXJnZXQucHJvdG9jb2wgIT0gaG9zdC5wcm90b2NvbCB8fFxuXHRcdFx0dGFyZ2V0Lmhvc3RuYW1lICE9IGhvc3QuaG9zdG5hbWUpO1xuXHRcdHJldHVybiBjcm9zc2RvbWFpbjtcblx0fTtcblxuXHQvKipcblx0ICogQG1ldGhvZCBpc0xvY2FsXG5cdCAqIEBwYXJhbSB7TG9hZEl0ZW18T2JqZWN0fSBpdGVtIEEgbG9hZCBpdGVtIHdpdGggYSBgc3JjYCBwcm9wZXJ0eVxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgbG9hZCBpdGVtIGlzIGxvYWRpbmcgZnJvbSB0aGUgXCJmaWxlOlwiIHByb3RvY29sLiBBc3N1bWUgdGhhdCB0aGUgaG9zdCBtdXN0IGJlIGxvY2FsIGFzXG5cdCAqIHdlbGwuXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuaXNMb2NhbCA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0dmFyIHRhcmdldCA9IGNyZWF0ZWpzLkVsZW1lbnRzLmEoKTtcblx0XHR0YXJnZXQuaHJlZiA9IGl0ZW0uc3JjO1xuXHRcdHJldHVybiB0YXJnZXQuaG9zdG5hbWUgPT0gXCJcIiAmJiB0YXJnZXQucHJvdG9jb2wgPT0gXCJmaWxlOlwiO1xuXHR9O1xuXG5cdGNyZWF0ZWpzLlVSTFV0aWxzID0gcztcblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEFic3RyYWN0TG9hZGVyLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanMgfHwge307XG5cbihmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG4vLyBjb25zdHJ1Y3RvclxuXHQvKipcblx0ICogVGhlIGJhc2UgbG9hZGVyLCB3aGljaCBkZWZpbmVzIGFsbCB0aGUgZ2VuZXJpYyBtZXRob2RzLCBwcm9wZXJ0aWVzLCBhbmQgZXZlbnRzLiBBbGwgbG9hZGVycyBleHRlbmQgdGhpcyBjbGFzcyxcblx0ICogaW5jbHVkaW5nIHRoZSB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWVcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIEBjbGFzcyBBYnN0cmFjdExvYWRlclxuXHQgKiBAcGFyYW0ge0xvYWRJdGVtfG9iamVjdHxzdHJpbmd9IGxvYWRJdGVtIFRoZSBpdGVtIHRvIGJlIGxvYWRlZC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbcHJlZmVyWEhSXSBEZXRlcm1pbmVzIGlmIHRoZSBMb2FkSXRlbSBzaG91bGQgPGVtPnRyeTwvZW0+IGFuZCBsb2FkIHVzaW5nIFhIUiwgb3IgdGFrZSBhXG5cdCAqIHRhZy1iYXNlZCBhcHByb2FjaCwgd2hpY2ggY2FuIGJlIGJldHRlciBpbiBjcm9zcy1kb21haW4gc2l0dWF0aW9ucy4gTm90IGFsbCBsb2FkZXJzIGNhbiBsb2FkIHVzaW5nIG9uZSBvciB0aGVcblx0ICogb3RoZXIsIHNvIHRoaXMgaXMgYSBzdWdnZXN0ZWQgZGlyZWN0aXZlLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3R5cGVdIFRoZSB0eXBlIG9mIGxvYWRlci4gTG9hZGVyIHR5cGVzIGFyZSBkZWZpbmVkIGFzIGNvbnN0YW50cyBvbiB0aGUgQWJzdHJhY3RMb2FkZXIgY2xhc3MsXG5cdCAqIHN1Y2ggYXMge3sjY3Jvc3NMaW5rIFwiSU1BR0U6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0sIHt7I2Nyb3NzTGluayBcIkNTUzpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSwgZXRjLlxuXHQgKiBAZXh0ZW5kcyBFdmVudERpc3BhdGNoZXJcblx0ICovXG5cdGZ1bmN0aW9uIEFic3RyYWN0TG9hZGVyKGxvYWRJdGVtLCBwcmVmZXJYSFIsIHR5cGUpIHtcblx0XHR0aGlzLkV2ZW50RGlzcGF0Y2hlcl9jb25zdHJ1Y3RvcigpO1xuXG5cdFx0Ly8gcHVibGljIHByb3BlcnRpZXNcblx0XHQvKipcblx0XHQgKiBJZiB0aGUgbG9hZGVyIGhhcyBjb21wbGV0ZWQgbG9hZGluZy4gVGhpcyBwcm92aWRlcyBhIHF1aWNrIGNoZWNrLCBidXQgYWxzbyBlbnN1cmVzIHRoYXQgdGhlIGRpZmZlcmVudCBhcHByb2FjaGVzXG5cdFx0ICogdXNlZCBmb3IgbG9hZGluZyBkbyBub3QgcGlsZSB1cCByZXN1bHRpbmcgaW4gbW9yZSB0aGFuIG9uZSBgY29tcGxldGVgIHt7I2Nyb3NzTGluayBcIkV2ZW50XCJ9fXt7L2Nyb3NzTGlua319LlxuXHRcdCAqIEBwcm9wZXJ0eSBsb2FkZWRcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqL1xuXHRcdHRoaXMubG9hZGVkID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBEZXRlcm1pbmUgaWYgdGhlIGxvYWRlciB3YXMgY2FuY2VsZWQuIENhbmNlbGVkIGxvYWRzIHdpbGwgbm90IGZpcmUgY29tcGxldGUgZXZlbnRzLiBOb3RlIHRoYXQgdGhpcyBwcm9wZXJ0eVxuXHRcdCAqIGlzIHJlYWRvbmx5LCBzbyB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWVcIn19e3svY3Jvc3NMaW5rfX0gcXVldWVzIHNob3VsZCBiZSBjbG9zZWQgdXNpbmcge3sjY3Jvc3NMaW5rIFwiTG9hZFF1ZXVlL2Nsb3NlXCJ9fXt7L2Nyb3NzTGlua319XG5cdFx0ICogaW5zdGVhZC5cblx0XHQgKiBAcHJvcGVydHkgY2FuY2VsZWRcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqIEByZWFkb25seVxuXHRcdCAqL1xuXHRcdHRoaXMuY2FuY2VsZWQgPSBmYWxzZTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBjdXJyZW50IGxvYWQgcHJvZ3Jlc3MgKHBlcmNlbnRhZ2UpIGZvciB0aGlzIGl0ZW0uIFRoaXMgd2lsbCBiZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG5cdFx0ICpcblx0XHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdFx0ICpcblx0XHQgKiAgICAgdmFyIHF1ZXVlID0gbmV3IGNyZWF0ZWpzLkxvYWRRdWV1ZSgpO1xuXHRcdCAqICAgICBxdWV1ZS5sb2FkRmlsZShcImxhcmdlSW1hZ2UucG5nXCIpO1xuXHRcdCAqICAgICBxdWV1ZS5vbihcInByb2dyZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdCAqICAgICAgICAgY29uc29sZS5sb2coXCJQcm9ncmVzczpcIiwgcXVldWUucHJvZ3Jlc3MsIGV2ZW50LnByb2dyZXNzKTtcblx0XHQgKiAgICAgfSk7XG5cdFx0ICpcblx0XHQgKiBAcHJvcGVydHkgcHJvZ3Jlc3Ncblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKi9cblx0XHR0aGlzLnByb2dyZXNzID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB0eXBlIG9mIGl0ZW0gdGhpcyBsb2FkZXIgd2lsbCBsb2FkLiBTZWUge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RMb2FkZXJcIn19e3svY3Jvc3NMaW5rfX0gZm9yIGEgZnVsbCBsaXN0IG9mXG5cdFx0ICogc3VwcG9ydGVkIHR5cGVzLlxuXHRcdCAqIEBwcm9wZXJ0eSB0eXBlXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBmb3JtYXR0ZXIgZnVuY3Rpb24gdGhhdCBjb252ZXJ0cyB0aGUgbG9hZGVkIHJhdyByZXN1bHQgaW50byB0aGUgZmluYWwgcmVzdWx0LiBGb3IgZXhhbXBsZSwgdGhlIEpTT05Mb2FkZXJcblx0XHQgKiBjb252ZXJ0cyBhIHN0cmluZyBvZiB0ZXh0IGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC4gTm90IGFsbCBsb2FkZXJzIGhhdmUgYSByZXN1bHRGb3JtYXR0ZXIsIGFuZCB0aGlzIHByb3BlcnR5XG5cdFx0ICogY2FuIGJlIG92ZXJyaWRkZW4gdG8gcHJvdmlkZSBjdXN0b20gZm9ybWF0dGluZy5cblx0XHQgKlxuXHRcdCAqIE9wdGlvbmFsbHksIGEgcmVzdWx0Rm9ybWF0dGVyIGNhbiByZXR1cm4gYSBjYWxsYmFjayBmdW5jdGlvbiBpbiBjYXNlcyB3aGVyZSB0aGUgZm9ybWF0dGluZyBuZWVkcyB0byBiZVxuXHRcdCAqIGFzeW5jaHJvbm91cywgc3VjaCBhcyBjcmVhdGluZyBhIG5ldyBpbWFnZS4gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHBhc3NlZCAyIHBhcmFtZXRlcnMsIHdoaWNoIGFyZSBjYWxsYmFja3Ncblx0XHQgKiB0byBoYW5kbGUgc3VjY2VzcyBhbmQgZXJyb3IgY29uZGl0aW9ucyBpbiB0aGUgcmVzdWx0Rm9ybWF0dGVyLiBOb3RlIHRoYXQgdGhlIHJlc3VsdEZvcm1hdHRlciBtZXRob2QgaXNcblx0XHQgKiBjYWxsZWQgaW4gdGhlIGN1cnJlbnQgc2NvcGUsIGFzIHdlbGwgYXMgdGhlIHN1Y2Nlc3MgYW5kIGVycm9yIGNhbGxiYWNrcy5cblx0XHQgKlxuXHRcdCAqIDxoND5FeGFtcGxlIGFzeW5jaHJvbm91cyByZXN1bHRGb3JtYXR0ZXI8L2g0PlxuXHRcdCAqXG5cdFx0ICogXHRmdW5jdGlvbiBfZm9ybWF0UmVzdWx0KGxvYWRlcikge1xuXHRcdCAqIFx0XHRyZXR1cm4gZnVuY3Rpb24oc3VjY2VzcywgZXJyb3IpIHtcblx0XHQgKiBcdFx0XHRpZiAoZXJyb3JDb25kaXRpb24pIHsgZXJyb3IoZXJyb3JEZXRhaWxFdmVudCk7IH1cblx0XHQgKiBcdFx0XHRzdWNjZXNzKHJlc3VsdCk7XG5cdFx0ICogXHRcdH1cblx0XHQgKiBcdH1cblx0XHQgKiBAcHJvcGVydHkgcmVzdWx0Rm9ybWF0dGVyXG5cdFx0ICogQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLnJlc3VsdEZvcm1hdHRlciA9IG51bGw7XG5cblx0XHQvLyBwcm90ZWN0ZWQgcHJvcGVydGllc1xuXHRcdC8qKlxuXHRcdCAqIFRoZSB7eyNjcm9zc0xpbmsgXCJMb2FkSXRlbVwifX17ey9jcm9zc0xpbmt9fSB0aGlzIGxvYWRlciByZXByZXNlbnRzLiBOb3RlIHRoYXQgdGhpcyBpcyBudWxsIGluIGEge3sjY3Jvc3NMaW5rIFwiTG9hZFF1ZXVlXCJ9fXt7L2Nyb3NzTGlua319LFxuXHRcdCAqIGJ1dCB3aWxsIGJlIGF2YWlsYWJsZSBvbiBsb2FkZXJzIHN1Y2ggYXMge3sjY3Jvc3NMaW5rIFwiWE1MTG9hZGVyXCJ9fXt7L2Nyb3NzTGlua319IGFuZCB7eyNjcm9zc0xpbmsgXCJJbWFnZUxvYWRlclwifX17ey9jcm9zc0xpbmt9fS5cblx0XHQgKiBAcHJvcGVydHkgX2l0ZW1cblx0XHQgKiBAdHlwZSB7TG9hZEl0ZW18T2JqZWN0fVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0aWYgKGxvYWRJdGVtKSB7XG5cdFx0XHR0aGlzLl9pdGVtID0gY3JlYXRlanMuTG9hZEl0ZW0uY3JlYXRlKGxvYWRJdGVtKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5faXRlbSA9IG51bGw7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogV2hldGhlciB0aGUgbG9hZGVyIHdpbGwgdHJ5IGFuZCBsb2FkIGNvbnRlbnQgdXNpbmcgWEhSICh0cnVlKSBvciBIVE1MIHRhZ3MgKGZhbHNlKS5cblx0XHQgKiBAcHJvcGVydHkgX3ByZWZlclhIUlxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fcHJlZmVyWEhSID0gcHJlZmVyWEhSO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGxvYWRlZCByZXN1bHQgYWZ0ZXIgaXQgaXMgZm9ybWF0dGVkIGJ5IGFuIG9wdGlvbmFsIHt7I2Nyb3NzTGluayBcInJlc3VsdEZvcm1hdHRlclwifX17ey9jcm9zc0xpbmt9fS4gRm9yXG5cdFx0ICogaXRlbXMgdGhhdCBhcmUgbm90IGZvcm1hdHRlZCwgdGhpcyB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB7eyNjcm9zc0xpbmsgXCJfcmF3UmVzdWx0OnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319LlxuXHRcdCAqIFRoZSByZXN1bHQgaXMgYWNjZXNzZWQgdXNpbmcgdGhlIHt7I2Nyb3NzTGluayBcImdldFJlc3VsdFwifX17ey9jcm9zc0xpbmt9fSBtZXRob2QuXG5cdFx0ICogQHByb3BlcnR5IF9yZXN1bHRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fFN0cmluZ31cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3Jlc3VsdCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbG9hZGVkIHJlc3VsdCBiZWZvcmUgaXQgaXMgZm9ybWF0dGVkLiBUaGUgcmF3UmVzdWx0IGlzIGFjY2Vzc2VkIHVzaW5nIHRoZSB7eyNjcm9zc0xpbmsgXCJnZXRSZXN1bHRcIn19e3svY3Jvc3NMaW5rfX1cblx0XHQgKiBtZXRob2QsIGFuZCBwYXNzaW5nIGB0cnVlYC5cblx0XHQgKiBAcHJvcGVydHkgX3Jhd1Jlc3VsdFxuXHRcdCAqIEB0eXBlIHtPYmplY3R8U3RyaW5nfVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fcmF3UmVzdWx0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgbGlzdCBvZiBpdGVtcyB0aGF0IGxvYWRlcnMgbG9hZCBiZWhpbmQgdGhlIHNjZW5lcy4gVGhpcyBkb2VzIG5vdCBpbmNsdWRlIHRoZSBtYWluIGl0ZW0gdGhlIGxvYWRlciBpc1xuXHRcdCAqIHJlc3BvbnNpYmxlIGZvciBsb2FkaW5nLiBFeGFtcGxlcyBvZiBsb2FkZXJzIHRoYXQgaGF2ZSBzdWItaXRlbXMgaW5jbHVkZSB0aGUge3sjY3Jvc3NMaW5rIFwiU3ByaXRlU2hlZXRMb2FkZXJcIn19e3svY3Jvc3NMaW5rfX0gYW5kXG5cdFx0ICoge3sjY3Jvc3NMaW5rIFwiTWFuaWZlc3RMb2FkZXJcIn19e3svY3Jvc3NMaW5rfX0uXG5cdFx0ICogQHByb3BlcnR5IF9sb2FkSXRlbXNcblx0XHQgKiBAdHlwZSB7bnVsbH1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fbG9hZGVkSXRlbXMgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGF0dHJpYnV0ZSB0aGUgaXRlbXMgbG9hZGVkIHVzaW5nIHRhZ3MgdXNlIGZvciB0aGUgc291cmNlLlxuXHRcdCAqIEB0eXBlIHtzdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fdGFnU3JjQXR0cmlidXRlID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFuIEhUTUwgdGFnIChvciBzaW1pbGFyKSB0aGF0IGEgbG9hZGVyIG1heSB1c2UgdG8gbG9hZCBIVE1MIGNvbnRlbnQsIHN1Y2ggYXMgaW1hZ2VzLCBzY3JpcHRzLCBldGMuXG5cdFx0ICogQHByb3BlcnR5IF90YWdcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fdGFnID0gbnVsbDtcblx0fTtcblxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChBYnN0cmFjdExvYWRlciwgY3JlYXRlanMuRXZlbnREaXNwYXRjaGVyKTtcblx0dmFyIHMgPSBBYnN0cmFjdExvYWRlcjtcblxuXHQvLyBSZW1vdmUgdGhlc2UgQGRlcHJlY2F0ZWQgcHJvcGVydGllcyBhZnRlciAxLjBcblx0dHJ5IHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzLCB7XG5cdFx0XHRQT1NUOiB7IGdldDogY3JlYXRlanMuZGVwcmVjYXRlKGZ1bmN0aW9uKCkgeyByZXR1cm4gY3JlYXRlanMuTWV0aG9kcy5QT1NUOyB9LCBcIkFic3RyYWN0TG9hZGVyLlBPU1RcIikgfSxcblx0XHRcdEdFVDogeyBnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZWpzLk1ldGhvZHMuR0VUOyB9LCBcIkFic3RyYWN0TG9hZGVyLkdFVFwiKSB9LFxuXG5cdFx0XHRCSU5BUlk6IHsgZ2V0OiBjcmVhdGVqcy5kZXByZWNhdGUoZnVuY3Rpb24oKSB7IHJldHVybiBjcmVhdGVqcy5UeXBlcy5CSU5BUlk7IH0sIFwiQWJzdHJhY3RMb2FkZXIuQklOQVJZXCIpIH0sXG5cdFx0XHRDU1M6IHsgZ2V0OiBjcmVhdGVqcy5kZXByZWNhdGUoZnVuY3Rpb24oKSB7IHJldHVybiBjcmVhdGVqcy5UeXBlcy5DU1M7IH0sIFwiQWJzdHJhY3RMb2FkZXIuQ1NTXCIpIH0sXG5cdFx0XHRGT05UOiB7IGdldDogY3JlYXRlanMuZGVwcmVjYXRlKGZ1bmN0aW9uKCkgeyByZXR1cm4gY3JlYXRlanMuVHlwZXMuRk9OVDsgfSwgXCJBYnN0cmFjdExvYWRlci5GT05UXCIpIH0sXG5cdFx0XHRGT05UQ1NTOiB7IGdldDogY3JlYXRlanMuZGVwcmVjYXRlKGZ1bmN0aW9uKCkgeyByZXR1cm4gY3JlYXRlanMuVHlwZXMuRk9OVENTUzsgfSwgXCJBYnN0cmFjdExvYWRlci5GT05UQ1NTXCIpIH0sXG5cdFx0XHRJTUFHRTogeyBnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZWpzLlR5cGVzLklNQUdFOyB9LCBcIkFic3RyYWN0TG9hZGVyLklNQUdFXCIpIH0sXG5cdFx0XHRKQVZBU0NSSVBUOiB7IGdldDogY3JlYXRlanMuZGVwcmVjYXRlKGZ1bmN0aW9uKCkgeyByZXR1cm4gY3JlYXRlanMuVHlwZXMuSkFWQVNDUklQVDsgfSwgXCJBYnN0cmFjdExvYWRlci5KQVZBU0NSSVBUXCIpIH0sXG5cdFx0XHRKU09OOiB7IGdldDogY3JlYXRlanMuZGVwcmVjYXRlKGZ1bmN0aW9uKCkgeyByZXR1cm4gY3JlYXRlanMuVHlwZXMuSlNPTjsgfSwgXCJBYnN0cmFjdExvYWRlci5KU09OXCIpIH0sXG5cdFx0XHRKU09OUDogeyBnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZWpzLlR5cGVzLkpTT05QOyB9LCBcIkFic3RyYWN0TG9hZGVyLkpTT05QXCIpIH0sXG5cdFx0XHRNQU5JRkVTVDogeyBnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZWpzLlR5cGVzLk1BTklGRVNUOyB9LCBcIkFic3RyYWN0TG9hZGVyLk1BTklGRVNUXCIpIH0sXG5cdFx0XHRTT1VORDogeyBnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZWpzLlR5cGVzLlNPVU5EOyB9LCBcIkFic3RyYWN0TG9hZGVyLlNPVU5EXCIpIH0sXG5cdFx0XHRWSURFTzogeyBnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZWpzLlR5cGVzLlZJREVPOyB9LCBcIkFic3RyYWN0TG9hZGVyLlZJREVPXCIpIH0sXG5cdFx0XHRTUFJJVEVTSEVFVDogeyBnZXQ6IGNyZWF0ZWpzLmRlcHJlY2F0ZShmdW5jdGlvbigpIHsgcmV0dXJuIGNyZWF0ZWpzLlR5cGVzLlNQUklURVNIRUVUOyB9LCBcIkFic3RyYWN0TG9hZGVyLlNQUklURVNIRUVUXCIpIH0sXG5cdFx0XHRTVkc6IHsgZ2V0OiBjcmVhdGVqcy5kZXByZWNhdGUoZnVuY3Rpb24oKSB7IHJldHVybiBjcmVhdGVqcy5UeXBlcy5TVkc7IH0sIFwiQWJzdHJhY3RMb2FkZXIuU1ZHXCIpIH0sXG5cdFx0XHRURVhUOiB7IGdldDogY3JlYXRlanMuZGVwcmVjYXRlKGZ1bmN0aW9uKCkgeyByZXR1cm4gY3JlYXRlanMuVHlwZXMuVEVYVDsgfSwgXCJBYnN0cmFjdExvYWRlci5URVhUXCIpIH0sXG5cdFx0XHRYTUw6IHsgZ2V0OiBjcmVhdGVqcy5kZXByZWNhdGUoZnVuY3Rpb24oKSB7IHJldHVybiBjcmVhdGVqcy5UeXBlcy5YTUw7IH0sIFwiQWJzdHJhY3RMb2FkZXIuWE1MXCIpIH1cblx0XHR9KTtcblx0fSBjYXRjaCAoZSkge31cblxuLy8gRXZlbnRzXG5cdC8qKlxuXHQgKiBUaGUge3sjY3Jvc3NMaW5rIFwiUHJvZ3Jlc3NFdmVudFwifX17ey9jcm9zc0xpbmt9fSB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIG92ZXJhbGwgcHJvZ3Jlc3MgY2hhbmdlcy4gUHJpb3IgdG9cblx0ICogdmVyc2lvbiAwLjYuMCwgdGhpcyB3YXMganVzdCBhIHJlZ3VsYXIge3sjY3Jvc3NMaW5rIFwiRXZlbnRcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIEBldmVudCBwcm9ncmVzc1xuXHQgKiBAc2luY2UgMC4zLjBcblx0ICovXG5cblx0LyoqXG5cdCAqIFRoZSB7eyNjcm9zc0xpbmsgXCJFdmVudFwifX17ey9jcm9zc0xpbmt9fSB0aGF0IGlzIGZpcmVkIHdoZW4gYSBsb2FkIHN0YXJ0cy5cblx0ICogQGV2ZW50IGxvYWRzdGFydFxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSBvYmplY3QgdGhhdCBkaXNwYXRjaGVkIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUuXG5cdCAqIEBzaW5jZSAwLjMuMVxuXHQgKi9cblxuXHQvKipcblx0ICogVGhlIHt7I2Nyb3NzTGluayBcIkV2ZW50XCJ9fXt7L2Nyb3NzTGlua319IHRoYXQgaXMgZmlyZWQgd2hlbiB0aGUgZW50aXJlIHF1ZXVlIGhhcyBiZWVuIGxvYWRlZC5cblx0ICogQGV2ZW50IGNvbXBsZXRlXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIG9iamVjdCB0aGF0IGRpc3BhdGNoZWQgdGhlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZS5cblx0ICogQHNpbmNlIDAuMy4wXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBUaGUge3sjY3Jvc3NMaW5rIFwiRXJyb3JFdmVudFwifX17ey9jcm9zc0xpbmt9fSB0aGF0IGlzIGZpcmVkIHdoZW4gdGhlIGxvYWRlciBlbmNvdW50ZXJzIGFuIGVycm9yLiBJZiB0aGUgZXJyb3Igd2FzXG5cdCAqIGVuY291bnRlcmVkIGJ5IGEgZmlsZSwgdGhlIGV2ZW50IHdpbGwgY29udGFpbiB0aGUgaXRlbSB0aGF0IGNhdXNlZCB0aGUgZXJyb3IuIFByaW9yIHRvIHZlcnNpb24gMC42LjAsIHRoaXMgd2FzXG5cdCAqIGp1c3QgYSByZWd1bGFyIHt7I2Nyb3NzTGluayBcIkV2ZW50XCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKiBAZXZlbnQgZXJyb3Jcblx0ICogQHNpbmNlIDAuMy4wXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBUaGUge3sjY3Jvc3NMaW5rIFwiRXZlbnRcIn19e3svY3Jvc3NMaW5rfX0gdGhhdCBpcyBmaXJlZCB3aGVuIHRoZSBsb2FkZXIgZW5jb3VudGVycyBhbiBpbnRlcm5hbCBmaWxlIGxvYWQgZXJyb3IuXG5cdCAqIFRoaXMgZW5hYmxlcyBsb2FkZXJzIHRvIG1haW50YWluIGludGVybmFsIHF1ZXVlcywgYW5kIHN1cmZhY2UgZmlsZSBsb2FkIGVycm9ycy5cblx0ICogQGV2ZW50IGZpbGVlcnJvclxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSBvYmplY3QgdGhhdCBkaXNwYXRjaGVkIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUgKFwiZmlsZWVycm9yXCIpXG5cdCAqIEBwYXJhbSB7TG9hZEl0ZW18b2JqZWN0fSBUaGUgaXRlbSB0aGF0IGVuY291bnRlcmVkIHRoZSBlcnJvclxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cblx0LyoqXG5cdCAqIFRoZSB7eyNjcm9zc0xpbmsgXCJFdmVudFwifX17ey9jcm9zc0xpbmt9fSB0aGF0IGlzIGZpcmVkIHdoZW4gYSBsb2FkZXIgaW50ZXJuYWxseSBsb2FkcyBhIGZpbGUuIFRoaXMgZW5hYmxlc1xuXHQgKiBsb2FkZXJzIHN1Y2ggYXMge3sjY3Jvc3NMaW5rIFwiTWFuaWZlc3RMb2FkZXJcIn19e3svY3Jvc3NMaW5rfX0gdG8gbWFpbnRhaW4gaW50ZXJuYWwge3sjY3Jvc3NMaW5rIFwiTG9hZFF1ZXVlXCJ9fXt7L2Nyb3NzTGlua319c1xuXHQgKiBhbmQgbm90aWZ5IHdoZW4gdGhleSBoYXZlIGxvYWRlZCBhIGZpbGUuIFRoZSB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWVcIn19e3svY3Jvc3NMaW5rfX0gY2xhc3MgZGlzcGF0Y2hlcyBhXG5cdCAqIHNsaWdodGx5IGRpZmZlcmVudCB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWUvZmlsZWxvYWQ6ZXZlbnRcIn19e3svY3Jvc3NMaW5rfX0gZXZlbnQuXG5cdCAqIEBldmVudCBmaWxlbG9hZFxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSBvYmplY3QgdGhhdCBkaXNwYXRjaGVkIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUgKFwiZmlsZWxvYWRcIilcblx0ICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gVGhlIGZpbGUgaXRlbSB3aGljaCB3YXMgc3BlY2lmaWVkIGluIHRoZSB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWUvbG9hZEZpbGVcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogb3Ige3sjY3Jvc3NMaW5rIFwiTG9hZFF1ZXVlL2xvYWRNYW5pZmVzdFwifX17ey9jcm9zc0xpbmt9fSBjYWxsLiBJZiBvbmx5IGEgc3RyaW5nIHBhdGggb3IgdGFnIHdhcyBzcGVjaWZpZWQsIHRoZVxuXHQgKiBvYmplY3Qgd2lsbCBjb250YWluIHRoYXQgdmFsdWUgYXMgYSBgc3JjYCBwcm9wZXJ0eS5cblx0ICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdCBUaGUgSFRNTCB0YWcgb3IgcGFyc2VkIHJlc3VsdCBvZiB0aGUgbG9hZGVkIGl0ZW0uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSByYXdSZXN1bHQgVGhlIHVucHJvY2Vzc2VkIHJlc3VsdCwgdXN1YWxseSB0aGUgcmF3IHRleHQgb3IgYmluYXJ5IGRhdGEgYmVmb3JlIGl0IGlzIGNvbnZlcnRlZFxuXHQgKiB0byBhIHVzYWJsZSBvYmplY3QuXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblxuXHQvKipcblx0ICogVGhlIHt7I2Nyb3NzTGluayBcIkV2ZW50XCJ9fXt7L2Nyb3NzTGlua319IHRoYXQgaXMgZmlyZWQgYWZ0ZXIgdGhlIGludGVybmFsIHJlcXVlc3QgaXMgY3JlYXRlZCwgYnV0IGJlZm9yZSBhIGxvYWQuXG5cdCAqIFRoaXMgYWxsb3dzIHVwZGF0ZXMgdG8gdGhlIGxvYWRlciBmb3Igc3BlY2lmaWMgbG9hZGluZyBuZWVkcywgc3VjaCBhcyBiaW5hcnkgb3IgWEhSIGltYWdlIGxvYWRpbmcuXG5cdCAqIEBldmVudCBpbml0aWFsaXplXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIG9iamVjdCB0aGF0IGRpc3BhdGNoZWQgdGhlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZSAoXCJpbml0aWFsaXplXCIpXG5cdCAqIEBwYXJhbSB7QWJzdHJhY3RMb2FkZXJ9IGxvYWRlciBUaGUgbG9hZGVyIHRoYXQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXG5cdCAqL1xuXG5cblx0LyoqXG5cdCAqIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgbWFuaWZlc3QgaXRlbSB0aGF0IGlzIGxvYWRlZCBieSB0aGlzIGxvYWRlci4gSW4gc29tZSBjYXNlcyB0aGlzIHdpbGwgYmUgdGhlIHZhbHVlIHRoYXQgd2FzXG5cdCAqIHBhc3NlZCBpbnRvIHt7I2Nyb3NzTGluayBcIkxvYWRRdWV1ZVwifX17ey9jcm9zc0xpbmt9fSB1c2luZyB7eyNjcm9zc0xpbmsgXCJMb2FkUXVldWUvbG9hZEZpbGVcIn19e3svY3Jvc3NMaW5rfX0gb3Jcblx0ICoge3sjY3Jvc3NMaW5rIFwiTG9hZFF1ZXVlL2xvYWRNYW5pZmVzdFwifX17ey9jcm9zc0xpbmt9fS4gSG93ZXZlciBpZiBvbmx5IGEgU3RyaW5nIHBhdGggd2FzIHBhc3NlZCBpbiwgdGhlbiBpdCB3aWxsXG5cdCAqIGJlIGEge3sjY3Jvc3NMaW5rIFwiTG9hZEl0ZW1cIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIEBtZXRob2QgZ2V0SXRlbVxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBtYW5pZmVzdCBpdGVtIHRoYXQgdGhpcyBsb2FkZXIgaXMgcmVzcG9uc2libGUgZm9yIGxvYWRpbmcuXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5nZXRJdGVtID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLl9pdGVtO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNvbnRlbnQgdGhhdCB3YXMgbG9hZGVkIGJ5IHRoZSBsb2FkZXIgKG9ubHkgYXZhaWxhYmxlIGFmdGVyIHRoZSB7eyNjcm9zc0xpbmsgXCJjb21wbGV0ZTpldmVudFwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBldmVudCBpcyBkaXNwYXRjaGVkLlxuXHQgKiBAbWV0aG9kIGdldFJlc3VsdFxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyYXc9ZmFsc2VdIERldGVybWluZXMgaWYgdGhlIHJldHVybmVkIHJlc3VsdCB3aWxsIGJlIHRoZSBmb3JtYXR0ZWQgY29udGVudCwgb3IgdGhlIHJhdyBsb2FkZWRcblx0ICogZGF0YSAoaWYgaXQgZXhpc3RzKS5cblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuZ2V0UmVzdWx0ID0gZnVuY3Rpb24gKHJhdykge1xuXHRcdHJldHVybiByYXcgPyB0aGlzLl9yYXdSZXN1bHQgOiB0aGlzLl9yZXN1bHQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJldHVybiB0aGUgYHRhZ2AgdGhpcyBvYmplY3QgY3JlYXRlcyBvciB1c2VzIGZvciBsb2FkaW5nLlxuXHQgKiBAbWV0aG9kIGdldFRhZ1xuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSB0YWcgaW5zdGFuY2Vcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLmdldFRhZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5fdGFnO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZXQgdGhlIGB0YWdgIHRoaXMgaXRlbSB1c2VzIGZvciBsb2FkaW5nLlxuXHQgKiBAbWV0aG9kIHNldFRhZ1xuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFnIFRoZSB0YWcgaW5zdGFuY2Vcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLnNldFRhZyA9IGZ1bmN0aW9uKHRhZykge1xuXHQgIHRoaXMuX3RhZyA9IHRhZztcblx0fTtcblxuXHQvKipcblx0ICogQmVnaW4gbG9hZGluZyB0aGUgaXRlbS4gVGhpcyBtZXRob2QgaXMgcmVxdWlyZWQgd2hlbiB1c2luZyBhIGxvYWRlciBieSBpdHNlbGYuXG5cdCAqXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cblx0ICpcblx0ICogICAgICB2YXIgcXVldWUgPSBuZXcgY3JlYXRlanMuTG9hZFF1ZXVlKCk7XG5cdCAqICAgICAgcXVldWUub24oXCJjb21wbGV0ZVwiLCBoYW5kbGVDb21wbGV0ZSk7XG5cdCAqICAgICAgcXVldWUubG9hZE1hbmlmZXN0KGZpbGVBcnJheSwgZmFsc2UpOyAvLyBOb3RlIHRoZSAybmQgYXJndW1lbnQgdGhhdCB0ZWxscyB0aGUgcXVldWUgbm90IHRvIHN0YXJ0IGxvYWRpbmcgeWV0XG5cdCAqICAgICAgcXVldWUubG9hZCgpO1xuXHQgKlxuXHQgKiBAbWV0aG9kIGxvYWRcblx0ICovXG5cdHAubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9jcmVhdGVSZXF1ZXN0KCk7XG5cblx0XHR0aGlzLl9yZXF1ZXN0Lm9uKFwiY29tcGxldGVcIiwgdGhpcywgdGhpcyk7XG5cdFx0dGhpcy5fcmVxdWVzdC5vbihcInByb2dyZXNzXCIsIHRoaXMsIHRoaXMpO1xuXHRcdHRoaXMuX3JlcXVlc3Qub24oXCJsb2FkU3RhcnRcIiwgdGhpcywgdGhpcyk7XG5cdFx0dGhpcy5fcmVxdWVzdC5vbihcImFib3J0XCIsIHRoaXMsIHRoaXMpO1xuXHRcdHRoaXMuX3JlcXVlc3Qub24oXCJ0aW1lb3V0XCIsIHRoaXMsIHRoaXMpO1xuXHRcdHRoaXMuX3JlcXVlc3Qub24oXCJlcnJvclwiLCB0aGlzLCB0aGlzKTtcblxuXHRcdHZhciBldnQgPSBuZXcgY3JlYXRlanMuRXZlbnQoXCJpbml0aWFsaXplXCIpO1xuXHRcdGV2dC5sb2FkZXIgPSB0aGlzLl9yZXF1ZXN0O1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChldnQpO1xuXG5cdFx0dGhpcy5fcmVxdWVzdC5sb2FkKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENsb3NlIHRoZSB0aGUgaXRlbS4gVGhpcyB3aWxsIHN0b3AgYW55IG9wZW4gcmVxdWVzdHMgKGFsdGhvdWdoIGRvd25sb2FkcyB1c2luZyBIVE1MIHRhZ3MgbWF5IHN0aWxsIGNvbnRpbnVlIGluXG5cdCAqIHRoZSBiYWNrZ3JvdW5kKSwgYnV0IGV2ZW50cyB3aWxsIG5vdCBsb25nZXIgYmUgZGlzcGF0Y2hlZC5cblx0ICogQG1ldGhvZCBjYW5jZWxcblx0ICovXG5cdHAuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuY2FuY2VsZWQgPSB0cnVlO1xuXHRcdHRoaXMuZGVzdHJveSgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDbGVhbiB1cCB0aGUgbG9hZGVyLlxuXHQgKiBAbWV0aG9kIGRlc3Ryb3lcblx0ICovXG5cdHAuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLl9yZXF1ZXN0KSB7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0LnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzKCk7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0LmRlc3Ryb3koKTtcblx0XHR9XG5cblx0XHR0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcblxuXHRcdHRoaXMuX2l0ZW0gPSBudWxsO1xuXHRcdHRoaXMuX3Jhd1Jlc3VsdCA9IG51bGw7XG5cdFx0dGhpcy5fcmVzdWx0ID0gbnVsbDtcblxuXHRcdHRoaXMuX2xvYWRJdGVtcyA9IG51bGw7XG5cblx0XHR0aGlzLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldCBhbnkgaXRlbXMgbG9hZGVkIGludGVybmFsbHkgYnkgdGhlIGxvYWRlci4gVGhlIGVuYWJsZXMgbG9hZGVycyBzdWNoIGFzIHt7I2Nyb3NzTGluayBcIk1hbmlmZXN0TG9hZGVyXCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqIHRvIGV4cG9zZSBpdGVtcyBpdCBsb2FkcyBpbnRlcm5hbGx5LlxuXHQgKiBAbWV0aG9kIGdldExvYWRlZEl0ZW1zXG5cdCAqIEByZXR1cm4ge0FycmF5fSBBIGxpc3Qgb2YgdGhlIGl0ZW1zIGxvYWRlZCBieSB0aGUgbG9hZGVyLlxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuZ2V0TG9hZGVkSXRlbXMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2xvYWRlZEl0ZW1zO1xuXHR9O1xuXG5cblx0Ly8gUHJpdmF0ZSBtZXRob2RzXG5cdC8qKlxuXHQgKiBDcmVhdGUgYW4gaW50ZXJuYWwgcmVxdWVzdCB1c2VkIGZvciBsb2FkaW5nLiBCeSBkZWZhdWx0LCBhbiB7eyNjcm9zc0xpbmsgXCJYSFJSZXF1ZXN0XCJ9fXt7L2Nyb3NzTGlua319IG9yXG5cdCAqIHt7I2Nyb3NzTGluayBcIlRhZ1JlcXVlc3RcIn19e3svY3Jvc3NMaW5rfX0gaXMgY3JlYXRlZCwgZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiB7eyNjcm9zc0xpbmsgXCJwcmVmZXJYSFI6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIE90aGVyIGxvYWRlcnMgbWF5IG92ZXJyaWRlIHRoaXMgdG8gdXNlIGRpZmZlcmVudCByZXF1ZXN0IHR5cGVzLCBzdWNoIGFzIHt7I2Nyb3NzTGluayBcIk1hbmlmZXN0TG9hZGVyXCJ9fXt7L2Nyb3NzTGlua319LFxuXHQgKiB3aGljaCB1c2VzIHt7I2Nyb3NzTGluayBcIkpTT05Mb2FkZXJcIn19e3svY3Jvc3NMaW5rfX0gb3Ige3sjY3Jvc3NMaW5rIFwiSlNPTlBMb2FkZXJcIn19e3svY3Jvc3NMaW5rfX0gdW5kZXIgdGhlIGhvb2QuXG5cdCAqIEBtZXRob2QgX2NyZWF0ZVJlcXVlc3Rcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5fY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fcHJlZmVyWEhSKSB7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0ID0gbmV3IGNyZWF0ZWpzLlRhZ1JlcXVlc3QodGhpcy5faXRlbSwgdGhpcy5fdGFnIHx8IHRoaXMuX2NyZWF0ZVRhZygpLCB0aGlzLl90YWdTcmNBdHRyaWJ1dGUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0ID0gbmV3IGNyZWF0ZWpzLlhIUlJlcXVlc3QodGhpcy5faXRlbSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGUgdGhlIEhUTUwgdGFnIHVzZWQgZm9yIGxvYWRpbmcuIFRoaXMgbWV0aG9kIGRvZXMgbm90aGluZyBieSBkZWZhdWx0LCBhbmQgbmVlZHMgdG8gYmUgaW1wbGVtZW50ZWRcblx0ICogYnkgbG9hZGVycyB0aGF0IHJlcXVpcmUgdGFnIGxvYWRpbmcuXG5cdCAqIEBtZXRob2QgX2NyZWF0ZVRhZ1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSB0YWcgc291cmNlXG5cdCAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBUaGUgdGFnIHRoYXQgd2FzIGNyZWF0ZWRcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5fY3JlYXRlVGFnID0gZnVuY3Rpb24oc3JjKSB7IHJldHVybiBudWxsOyB9O1xuXG5cdC8qKlxuXHQgKiBEaXNwYXRjaCBhIGxvYWRzdGFydCB7eyNjcm9zc0xpbmsgXCJFdmVudFwifX17ey9jcm9zc0xpbmt9fS4gUGxlYXNlIHNlZSB0aGUge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RMb2FkZXIvbG9hZHN0YXJ0OmV2ZW50XCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqIGV2ZW50IGZvciBkZXRhaWxzIG9uIHRoZSBldmVudCBwYXlsb2FkLlxuXHQgKiBAbWV0aG9kIF9zZW5kTG9hZFN0YXJ0XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHAuX3NlbmRMb2FkU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuX2lzQ2FuY2VsZWQoKSkgeyByZXR1cm47IH1cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXCJsb2Fkc3RhcnRcIik7XG5cdH07XG5cblx0LyoqXG5cdCAqIERpc3BhdGNoIGEge3sjY3Jvc3NMaW5rIFwiUHJvZ3Jlc3NFdmVudFwifX17ey9jcm9zc0xpbmt9fS5cblx0ICogQG1ldGhvZCBfc2VuZFByb2dyZXNzXG5cdCAqIEBwYXJhbSB7TnVtYmVyIHwgT2JqZWN0fSB2YWx1ZSBUaGUgcHJvZ3Jlc3Mgb2YgdGhlIGxvYWRlZCBpdGVtLCBvciBhbiBvYmplY3QgY29udGFpbmluZyA8Y29kZT5sb2FkZWQ8L2NvZGU+XG5cdCAqIGFuZCA8Y29kZT50b3RhbDwvY29kZT4gcHJvcGVydGllcy5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5fc2VuZFByb2dyZXNzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMuX2lzQ2FuY2VsZWQoKSkgeyByZXR1cm47IH1cblx0XHR2YXIgZXZlbnQgPSBudWxsO1xuXHRcdGlmICh0eXBlb2YodmFsdWUpID09IFwibnVtYmVyXCIpIHtcblx0XHRcdHRoaXMucHJvZ3Jlc3MgPSB2YWx1ZTtcblx0XHRcdGV2ZW50ID0gbmV3IGNyZWF0ZWpzLlByb2dyZXNzRXZlbnQodGhpcy5wcm9ncmVzcyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV2ZW50ID0gdmFsdWU7XG5cdFx0XHR0aGlzLnByb2dyZXNzID0gdmFsdWUubG9hZGVkIC8gdmFsdWUudG90YWw7XG5cdFx0XHRldmVudC5wcm9ncmVzcyA9IHRoaXMucHJvZ3Jlc3M7XG5cdFx0XHRpZiAoaXNOYU4odGhpcy5wcm9ncmVzcykgfHwgdGhpcy5wcm9ncmVzcyA9PSBJbmZpbml0eSkgeyB0aGlzLnByb2dyZXNzID0gMDsgfVxuXHRcdH1cblx0XHR0aGlzLmhhc0V2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiKSAmJiB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEaXNwYXRjaCBhIGNvbXBsZXRlIHt7I2Nyb3NzTGluayBcIkV2ZW50XCJ9fXt7L2Nyb3NzTGlua319LiBQbGVhc2Ugc2VlIHRoZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdExvYWRlci9jb21wbGV0ZTpldmVudFwifX17ey9jcm9zc0xpbmt9fSBldmVudFxuXHQgKiBAbWV0aG9kIF9zZW5kQ29tcGxldGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5fc2VuZENvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLl9pc0NhbmNlbGVkKCkpIHsgcmV0dXJuOyB9XG5cblx0XHR0aGlzLmxvYWRlZCA9IHRydWU7XG5cblx0XHR2YXIgZXZlbnQgPSBuZXcgY3JlYXRlanMuRXZlbnQoXCJjb21wbGV0ZVwiKTtcblx0XHRldmVudC5yYXdSZXN1bHQgPSB0aGlzLl9yYXdSZXN1bHQ7XG5cblx0XHRpZiAodGhpcy5fcmVzdWx0ICE9IG51bGwpIHtcblx0XHRcdGV2ZW50LnJlc3VsdCA9IHRoaXMuX3Jlc3VsdDtcblx0XHR9XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEaXNwYXRjaCBhbiBlcnJvciB7eyNjcm9zc0xpbmsgXCJFdmVudFwifX17ey9jcm9zc0xpbmt9fS4gUGxlYXNlIHNlZSB0aGUge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RMb2FkZXIvZXJyb3I6ZXZlbnRcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogZXZlbnQgZm9yIGRldGFpbHMgb24gdGhlIGV2ZW50IHBheWxvYWQuXG5cdCAqIEBtZXRob2QgX3NlbmRFcnJvclxuXHQgKiBAcGFyYW0ge0Vycm9yRXZlbnR9IGV2ZW50IFRoZSBldmVudCBvYmplY3QgY29udGFpbmluZyBzcGVjaWZpYyBlcnJvciBwcm9wZXJ0aWVzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRwLl9zZW5kRXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5faXNDYW5jZWxlZCgpIHx8ICF0aGlzLmhhc0V2ZW50TGlzdGVuZXIoXCJlcnJvclwiKSkgeyByZXR1cm47IH1cblx0XHRpZiAoZXZlbnQgPT0gbnVsbCkge1xuXHRcdFx0ZXZlbnQgPSBuZXcgY3JlYXRlanMuRXJyb3JFdmVudChcIlBSRUxPQURfRVJST1JfRU1QVFlcIik7IC8vIFRPRE86IFBvcHVsYXRlIGVycm9yXG5cdFx0fVxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERldGVybWluZSBpZiB0aGUgbG9hZCBoYXMgYmVlbiBjYW5jZWxlZC4gVGhpcyBpcyBpbXBvcnRhbnQgdG8gZW5zdXJlIHRoYXQgbWV0aG9kIGNhbGxzIG9yIGFzeW5jaHJvbm91cyBldmVudHNcblx0ICogZG8gbm90IGNhdXNlIGlzc3VlcyBhZnRlciB0aGUgcXVldWUgaGFzIGJlZW4gY2xlYW5lZCB1cC5cblx0ICogQG1ldGhvZCBfaXNDYW5jZWxlZFxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgbG9hZGVyIGhhcyBiZWVuIGNhbmNlbGVkLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRwLl9pc0NhbmNlbGVkID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh3aW5kb3cuY3JlYXRlanMgPT0gbnVsbCB8fCB0aGlzLmNhbmNlbGVkKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBIGN1c3RvbSByZXN1bHQgZm9ybWF0dGVyIGZ1bmN0aW9uLCB3aGljaCBpcyBjYWxsZWQganVzdCBiZWZvcmUgYSByZXF1ZXN0IGRpc3BhdGNoZXMgaXRzIGNvbXBsZXRlIGV2ZW50LiBNb3N0XG5cdCAqIGxvYWRlciB0eXBlcyBhbHJlYWR5IGhhdmUgYW4gaW50ZXJuYWwgZm9ybWF0dGVyLCBidXQgdGhpcyBjYW4gYmUgdXNlci1vdmVycmlkZGVuIGZvciBjdXN0b20gZm9ybWF0dGluZy4gVGhlXG5cdCAqIGZvcm1hdHRlZCByZXN1bHQgd2lsbCBiZSBhdmFpbGFibGUgb24gTG9hZGVycyB1c2luZyB7eyNjcm9zc0xpbmsgXCJnZXRSZXN1bHRcIn19e3svY3Jvc3NMaW5rfX0sIGFuZCBwYXNzaW5nIGB0cnVlYC5cblx0ICogQHByb3BlcnR5IHJlc3VsdEZvcm1hdHRlclxuXHQgKiBAdHlwZSBGdW5jdGlvblxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBmb3JtYXR0ZWQgcmVzdWx0XG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5yZXN1bHRGb3JtYXR0ZXIgPSBudWxsO1xuXG5cdC8qKlxuXHQgKiBIYW5kbGUgZXZlbnRzIGZyb20gaW50ZXJuYWwgcmVxdWVzdHMuIEJ5IGRlZmF1bHQsIGxvYWRlcnMgd2lsbCBoYW5kbGUsIGFuZCByZWRpc3BhdGNoIHRoZSBuZWNlc3NhcnkgZXZlbnRzLCBidXRcblx0ICogdGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRkZW4gZm9yIGN1c3RvbSBiZWhhdmlvdXJzLlxuXHQgKiBAbWV0aG9kIGhhbmRsZUV2ZW50XG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IFRoZSBldmVudCB0aGF0IHRoZSBpbnRlcm5hbCByZXF1ZXN0IGRpc3BhdGNoZXMuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0c3dpdGNoIChldmVudC50eXBlKSB7XG5cdFx0XHRjYXNlIFwiY29tcGxldGVcIjpcblx0XHRcdFx0dGhpcy5fcmF3UmVzdWx0ID0gZXZlbnQudGFyZ2V0Ll9yZXNwb25zZTtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0Rm9ybWF0dGVyICYmIHRoaXMucmVzdWx0Rm9ybWF0dGVyKHRoaXMpO1xuXHRcdFx0XHQvLyBUaGUgcmVzdWx0Rm9ybWF0dGVyIGlzIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRpZiAocmVzdWx0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcblx0XHRcdFx0XHRyZXN1bHQuY2FsbCh0aGlzLFxuXHRcdFx0XHRcdFx0XHRjcmVhdGVqcy5wcm94eSh0aGlzLl9yZXN1bHRGb3JtYXRTdWNjZXNzLCB0aGlzKSxcblx0XHRcdFx0XHRcdFx0Y3JlYXRlanMucHJveHkodGhpcy5fcmVzdWx0Rm9ybWF0RmFpbGVkLCB0aGlzKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdC8vIFRoZSByZXN1bHQgZm9ybWF0dGVyIGlzIHN5bmNocm9ub3VzXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVzdWx0ID0gIHJlc3VsdCB8fCB0aGlzLl9yYXdSZXN1bHQ7XG5cdFx0XHRcdFx0dGhpcy5fc2VuZENvbXBsZXRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwicHJvZ3Jlc3NcIjpcblx0XHRcdFx0dGhpcy5fc2VuZFByb2dyZXNzKGV2ZW50KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiZXJyb3JcIjpcblx0XHRcdFx0dGhpcy5fc2VuZEVycm9yKGV2ZW50KTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwibG9hZHN0YXJ0XCI6XG5cdFx0XHRcdHRoaXMuX3NlbmRMb2FkU3RhcnQoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiYWJvcnRcIjpcblx0XHRcdGNhc2UgXCJ0aW1lb3V0XCI6XG5cdFx0XHRcdGlmICghdGhpcy5faXNDYW5jZWxlZCgpKSB7XG5cdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBjcmVhdGVqcy5FcnJvckV2ZW50KFwiUFJFTE9BRF9cIiArIGV2ZW50LnR5cGUudG9VcHBlckNhc2UoKSArIFwiX0VSUk9SXCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFRoZSBcInN1Y2Nlc3NcIiBjYWxsYmFjayBwYXNzZWQgdG8ge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RMb2FkZXIvcmVzdWx0Rm9ybWF0dGVyXCJ9fXt7L2Nyb3NzTGlua319IGFzeW5jaHJvbm91c1xuXHQgKiBmdW5jdGlvbnMuXG5cdCAqIEBtZXRob2QgX3Jlc3VsdEZvcm1hdFN1Y2Nlc3Ncblx0ICogQHBhcmFtIHtPYmplY3R9IHJlc3VsdCBUaGUgZm9ybWF0dGVkIHJlc3VsdFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cC5fcmVzdWx0Rm9ybWF0U3VjY2VzcyA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHR0aGlzLl9yZXN1bHQgPSByZXN1bHQ7XG5cdFx0dGhpcy5fc2VuZENvbXBsZXRlKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFRoZSBcImVycm9yXCIgY2FsbGJhY2sgcGFzc2VkIHRvIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0TG9hZGVyL3Jlc3VsdEZvcm1hdHRlclwifX17ey9jcm9zc0xpbmt9fSBhc3luY2hyb25vdXNcblx0ICogZnVuY3Rpb25zLlxuXHQgKiBAbWV0aG9kIF9yZXN1bHRGb3JtYXRTdWNjZXNzXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBlcnJvciBUaGUgZXJyb3IgZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX3Jlc3VsdEZvcm1hdEZhaWxlZCA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdHRoaXMuX3NlbmRFcnJvcihldmVudCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEBtZXRob2QgdG9TdHJpbmdcblx0ICogQHJldHVybiB7U3RyaW5nfSBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5zdGFuY2UuXG5cdCAqL1xuXHRwLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBcIltQcmVsb2FkSlMgQWJzdHJhY3RMb2FkZXJdXCI7XG5cdH07XG5cblx0Y3JlYXRlanMuQWJzdHJhY3RMb2FkZXIgPSBjcmVhdGVqcy5wcm9tb3RlKEFic3RyYWN0TG9hZGVyLCBcIkV2ZW50RGlzcGF0Y2hlclwiKTtcblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEFic3RyYWN0TWVkaWFMb2FkZXIuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqcyB8fCB7fTtcblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0Ly8gY29uc3RydWN0b3Jcblx0LyoqXG5cdCAqIFRoZSBBYnN0cmFjdE1lZGlhTG9hZGVyIGlzIGEgYmFzZSBjbGFzcyB0aGF0IGhhbmRsZXMgc29tZSBvZiB0aGUgc2hhcmVkIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgb2YgbG9hZGVycyB0aGF0XG5cdCAqIGhhbmRsZSBIVE1MIG1lZGlhIGVsZW1lbnRzLCBzdWNoIGFzIFZpZGVvIGFuZCBBdWRpby5cblx0ICogQGNsYXNzIEFic3RyYWN0TWVkaWFMb2FkZXJcblx0ICogQHBhcmFtIHtMb2FkSXRlbXxPYmplY3R9IGxvYWRJdGVtXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gcHJlZmVyWEhSXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIG1lZGlhIHRvIGxvYWQuIFVzdWFsbHkgXCJ2aWRlb1wiIG9yIFwiYXVkaW9cIi5cblx0ICogQGV4dGVuZHMgQWJzdHJhY3RMb2FkZXJcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRmdW5jdGlvbiBBYnN0cmFjdE1lZGlhTG9hZGVyKGxvYWRJdGVtLCBwcmVmZXJYSFIsIHR5cGUpIHtcblx0XHR0aGlzLkFic3RyYWN0TG9hZGVyX2NvbnN0cnVjdG9yKGxvYWRJdGVtLCBwcmVmZXJYSFIsIHR5cGUpO1xuXG5cdFx0Ly8gcHVibGljIHByb3BlcnRpZXNcblx0XHR0aGlzLnJlc3VsdEZvcm1hdHRlciA9IHRoaXMuX2Zvcm1hdFJlc3VsdDtcblxuXHRcdC8vIHByb3RlY3RlZCBwcm9wZXJ0aWVzXG5cdFx0dGhpcy5fdGFnU3JjQXR0cmlidXRlID0gXCJzcmNcIjtcblxuICAgICAgICB0aGlzLm9uKFwiaW5pdGlhbGl6ZVwiLCB0aGlzLl91cGRhdGVYSFIsIHRoaXMpO1xuXHR9O1xuXG5cdHZhciBwID0gY3JlYXRlanMuZXh0ZW5kKEFic3RyYWN0TWVkaWFMb2FkZXIsIGNyZWF0ZWpzLkFic3RyYWN0TG9hZGVyKTtcblxuXHQvLyBzdGF0aWMgcHJvcGVydGllc1xuXHQvLyBwdWJsaWMgbWV0aG9kc1xuXHRwLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gVGFnUmVxdWVzdCB3aWxsIGhhbmRsZSBtb3N0IG9mIHRoaXMsIGJ1dCBTb3VuZCAvIFZpZGVvIG5lZWQgYSBmZXcgY3VzdG9tIHByb3BlcnRpZXMsIHNvIGp1c3QgaGFuZGxlIHRoZW0gaGVyZS5cblx0XHRpZiAoIXRoaXMuX3RhZykge1xuXHRcdFx0dGhpcy5fdGFnID0gdGhpcy5fY3JlYXRlVGFnKHRoaXMuX2l0ZW0uc3JjKTtcblx0XHR9XG5cblx0XHR0aGlzLl90YWcucHJlbG9hZCA9IFwiYXV0b1wiO1xuXHRcdHRoaXMuX3RhZy5sb2FkKCk7XG5cblx0XHR0aGlzLkFic3RyYWN0TG9hZGVyX2xvYWQoKTtcblx0fTtcblxuXHQvLyBwcm90ZWN0ZWQgbWV0aG9kc1xuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyB0YWcgZm9yIGxvYWRpbmcgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXQuXG5cdCAqIEBtZXRob2QgX2NyZWF0ZVRhZ1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cC5fY3JlYXRlVGFnID0gZnVuY3Rpb24gKCkge307XG5cblxuXHRwLl9jcmVhdGVSZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCF0aGlzLl9wcmVmZXJYSFIpIHtcblx0XHRcdHRoaXMuX3JlcXVlc3QgPSBuZXcgY3JlYXRlanMuTWVkaWFUYWdSZXF1ZXN0KHRoaXMuX2l0ZW0sIHRoaXMuX3RhZyB8fCB0aGlzLl9jcmVhdGVUYWcoKSwgdGhpcy5fdGFnU3JjQXR0cmlidXRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcmVxdWVzdCA9IG5ldyBjcmVhdGVqcy5YSFJSZXF1ZXN0KHRoaXMuX2l0ZW0pO1xuXHRcdH1cblx0fTtcblxuICAgIC8vIHByb3RlY3RlZCBtZXRob2RzXG4gICAgLyoqXG4gICAgICogQmVmb3JlIHRoZSBpdGVtIGxvYWRzLCBzZXQgaXRzIG1pbWVUeXBlIGFuZCByZXNwb25zZVR5cGUuXG4gICAgICogQHByb3BlcnR5IF91cGRhdGVYSFJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcC5fdXBkYXRlWEhSID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIE9ubHkgZXhpc3RzIGZvciBYSFJcbiAgICAgICAgaWYgKGV2ZW50LmxvYWRlci5zZXRSZXNwb25zZVR5cGUpIHtcbiAgICAgICAgICAgIGV2ZW50LmxvYWRlci5zZXRSZXNwb25zZVR5cGUoXCJibG9iXCIpO1xuICAgICAgICB9XG4gICAgfTtcblxuXHQvKipcblx0ICogVGhlIHJlc3VsdCBmb3JtYXR0ZXIgZm9yIG1lZGlhIGZpbGVzLlxuXHQgKiBAbWV0aG9kIF9mb3JtYXRSZXN1bHRcblx0ICogQHBhcmFtIHtBYnN0cmFjdExvYWRlcn0gbG9hZGVyXG5cdCAqIEByZXR1cm5zIHtIVE1MVmlkZW9FbGVtZW50fEhUTUxBdWRpb0VsZW1lbnR9XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwLl9mb3JtYXRSZXN1bHQgPSBmdW5jdGlvbiAobG9hZGVyKSB7XG5cdFx0dGhpcy5fdGFnLnJlbW92ZUV2ZW50TGlzdGVuZXIgJiYgdGhpcy5fdGFnLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjYW5wbGF5dGhyb3VnaFwiLCB0aGlzLl9sb2FkZWRIYW5kbGVyKTtcblx0XHR0aGlzLl90YWcub25zdGFsbGVkID0gbnVsbDtcblx0XHRpZiAodGhpcy5fcHJlZmVyWEhSKSB7XG4gICAgICAgICAgICB2YXIgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGxvYWRlci5nZXRSZXN1bHQodHJ1ZSk7XG5cblx0XHRcdGxvYWRlci5nZXRUYWcoKS5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHJlc3VsdCk7XG5cdFx0fVxuXHRcdHJldHVybiBsb2FkZXIuZ2V0VGFnKCk7XG5cdH07XG5cblx0Y3JlYXRlanMuQWJzdHJhY3RNZWRpYUxvYWRlciA9IGNyZWF0ZWpzLnByb21vdGUoQWJzdHJhY3RNZWRpYUxvYWRlciwgXCJBYnN0cmFjdExvYWRlclwiKTtcblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEFic3RyYWN0UmVxdWVzdC5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvKipcblx0ICogQSBiYXNlIGNsYXNzIGZvciBhY3R1YWwgZGF0YSByZXF1ZXN0cywgc3VjaCBhcyB7eyNjcm9zc0xpbmsgXCJYSFJSZXF1ZXN0XCJ9fXt7L2Nyb3NzTGlua319LCB7eyNjcm9zc0xpbmsgXCJUYWdSZXF1ZXN0XCJ9fXt7L2Nyb3NzTGlua319LFxuXHQgKiBhbmQge3sjY3Jvc3NMaW5rIFwiTWVkaWFSZXF1ZXN0XCJ9fXt7L2Nyb3NzTGlua319LiBQcmVsb2FkSlMgbG9hZGVycyB3aWxsIHR5cGljYWxseSB1c2UgYSBkYXRhIGxvYWRlciB1bmRlciB0aGVcblx0ICogaG9vZCB0byBnZXQgZGF0YS5cblx0ICogQGNsYXNzIEFic3RyYWN0UmVxdWVzdFxuXHQgKiBAcGFyYW0ge0xvYWRJdGVtfSBpdGVtXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0dmFyIEFic3RyYWN0UmVxdWVzdCA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0dGhpcy5faXRlbSA9IGl0ZW07XG5cdH07XG5cblx0dmFyIHAgPSBjcmVhdGVqcy5leHRlbmQoQWJzdHJhY3RSZXF1ZXN0LCBjcmVhdGVqcy5FdmVudERpc3BhdGNoZXIpO1xuXG5cdC8vIHB1YmxpYyBtZXRob2RzXG5cdC8qKlxuXHQgKiBCZWdpbiBhIGxvYWQuXG5cdCAqIEBtZXRob2QgbG9hZFxuXHQgKi9cblx0cC5sb2FkID0gIGZ1bmN0aW9uKCkge307XG5cblx0LyoqXG5cdCAqIENsZWFuIHVwIGEgcmVxdWVzdC5cblx0ICogQG1ldGhvZCBkZXN0cm95XG5cdCAqL1xuXHRwLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHt9O1xuXG5cdC8qKlxuXHQgKiBDYW5jZWwgYW4gaW4tcHJvZ3Jlc3MgcmVxdWVzdC5cblx0ICogQG1ldGhvZCBjYW5jZWxcblx0ICovXG5cdHAuY2FuY2VsID0gZnVuY3Rpb24oKSB7fTtcblxuXHRjcmVhdGVqcy5BYnN0cmFjdFJlcXVlc3QgPSBjcmVhdGVqcy5wcm9tb3RlKEFic3RyYWN0UmVxdWVzdCwgXCJFdmVudERpc3BhdGNoZXJcIik7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBUYWdSZXF1ZXN0LmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanMgfHwge307XG5cbihmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8vIGNvbnN0cnVjdG9yXG5cdC8qKlxuXHQgKiBBbiB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFJlcXVlc3RcIn19e3svY3Jvc3NMaW5rfX0gdGhhdCBsb2FkcyBIVE1MIHRhZ3MsIHN1Y2ggYXMgaW1hZ2VzIGFuZCBzY3JpcHRzLlxuXHQgKiBAY2xhc3MgVGFnUmVxdWVzdFxuXHQgKiBAcGFyYW0ge0xvYWRJdGVtfSBsb2FkSXRlbVxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YWdcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNyY0F0dHJpYnV0ZSBUaGUgdGFnIGF0dHJpYnV0ZSB0aGF0IHNwZWNpZmllcyB0aGUgc291cmNlLCBzdWNoIGFzIFwic3JjXCIsIFwiaHJlZlwiLCBldGMuXG5cdCAqL1xuXHRmdW5jdGlvbiBUYWdSZXF1ZXN0KGxvYWRJdGVtLCB0YWcsIHNyY0F0dHJpYnV0ZSkge1xuXHRcdHRoaXMuQWJzdHJhY3RSZXF1ZXN0X2NvbnN0cnVjdG9yKGxvYWRJdGVtKTtcblxuXHRcdC8vIHByb3RlY3RlZCBwcm9wZXJ0aWVzXG5cdFx0LyoqXG5cdFx0ICogVGhlIEhUTUwgdGFnIGluc3RhbmNlIHRoYXQgaXMgdXNlZCB0byBsb2FkLlxuXHRcdCAqIEBwcm9wZXJ0eSBfdGFnXG5cdFx0ICogQHR5cGUge0hUTUxFbGVtZW50fVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl90YWcgPSB0YWc7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgdGFnIGF0dHJpYnV0ZSB0aGF0IHNwZWNpZmllcyB0aGUgc291cmNlLCBzdWNoIGFzIFwic3JjXCIsIFwiaHJlZlwiLCBldGMuXG5cdFx0ICogQHByb3BlcnR5IF90YWdTcmNBdHRyaWJ1dGVcblx0XHQgKiBAdHlwZSB7U3RyaW5nfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl90YWdTcmNBdHRyaWJ1dGUgPSBzcmNBdHRyaWJ1dGU7XG5cblx0XHQvKipcblx0XHQgKiBBIG1ldGhvZCBjbG9zdXJlIHVzZWQgZm9yIGhhbmRsaW5nIHRoZSB0YWcgbG9hZCBldmVudC5cblx0XHQgKiBAcHJvcGVydHkgX2xvYWRlZEhhbmRsZXJcblx0XHQgKiBAdHlwZSB7RnVuY3Rpb259XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLl9sb2FkZWRIYW5kbGVyID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlVGFnQ29tcGxldGUsIHRoaXMpO1xuXG5cdFx0LyoqXG5cdFx0ICogRGV0ZXJtaW5lcyBpZiB0aGUgZWxlbWVudCB3YXMgYWRkZWQgdG8gdGhlIERPTSBhdXRvbWF0aWNhbGx5IGJ5IFByZWxvYWRKUywgc28gaXQgY2FuIGJlIGNsZWFuZWQgdXAgYWZ0ZXIuXG5cdFx0ICogQHByb3BlcnR5IF9hZGRlZFRvRE9NXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLl9hZGRlZFRvRE9NID0gZmFsc2U7XG5cblx0fTtcblxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChUYWdSZXF1ZXN0LCBjcmVhdGVqcy5BYnN0cmFjdFJlcXVlc3QpO1xuXG5cdC8vIHB1YmxpYyBtZXRob2RzXG5cdHAubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl90YWcub25sb2FkID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlVGFnQ29tcGxldGUsIHRoaXMpO1xuXHRcdHRoaXMuX3RhZy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVSZWFkeVN0YXRlQ2hhbmdlLCB0aGlzKTtcblx0XHR0aGlzLl90YWcub25lcnJvciA9IGNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUVycm9yLCB0aGlzKTtcblxuXHRcdHZhciBldnQgPSBuZXcgY3JlYXRlanMuRXZlbnQoXCJpbml0aWFsaXplXCIpO1xuXHRcdGV2dC5sb2FkZXIgPSB0aGlzLl90YWc7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoZXZ0KTtcblxuXHRcdHRoaXMuX2xvYWRUaW1lb3V0ID0gc2V0VGltZW91dChjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVUaW1lb3V0LCB0aGlzKSwgdGhpcy5faXRlbS5sb2FkVGltZW91dCk7XG5cblx0XHR0aGlzLl90YWdbdGhpcy5fdGFnU3JjQXR0cmlidXRlXSA9IHRoaXMuX2l0ZW0uc3JjO1xuXG5cdFx0Ly8gd2RnOjogQXBwZW5kIHRoZSB0YWcgQUZURVIgc2V0dGluZyB0aGUgc3JjLCBvciBTVkcgbG9hZGluZyBvbiBpT1Mgd2lsbCBmYWlsLlxuXHRcdGlmICh0aGlzLl90YWcucGFyZW50Tm9kZSA9PSBudWxsKSB7XG5cdFx0XHRjcmVhdGVqcy5Eb21VdGlscy5hcHBlbmRUb0JvZHkodGhpcy5fdGFnKTtcblx0XHRcdHRoaXMuX2FkZGVkVG9ET00gPSB0cnVlO1xuXHRcdH1cblx0fTtcblxuXHRwLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9jbGVhbigpO1xuXHRcdHRoaXMuX3RhZyA9IG51bGw7XG5cblx0XHR0aGlzLkFic3RyYWN0UmVxdWVzdF9kZXN0cm95KCk7XG5cdH07XG5cblx0Ly8gcHJpdmF0ZSBtZXRob2RzXG5cdC8qKlxuXHQgKiBIYW5kbGUgdGhlIHJlYWR5U3RhdGVDaGFuZ2UgZXZlbnQgZnJvbSBhIHRhZy4gV2UgbmVlZCB0aGlzIGluIHBsYWNlIG9mIHRoZSBgb25sb2FkYCBjYWxsYmFjayAobWFpbmx5IFNDUklQVFxuXHQgKiBhbmQgTElOSyB0YWdzKSwgYnV0IG90aGVyIGNhc2VzIG1heSBleGlzdC5cblx0ICogQG1ldGhvZCBfaGFuZGxlUmVhZHlTdGF0ZUNoYW5nZVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cC5faGFuZGxlUmVhZHlTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5fbG9hZFRpbWVvdXQpO1xuXHRcdC8vIFRoaXMgaXMgc3RyaWN0bHkgZm9yIHRhZ3MgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBvbmxvYWQuXG5cdFx0dmFyIHRhZyA9IHRoaXMuX3RhZztcblxuXHRcdC8vIENvbXBsZXRlIGlzIGZvciBvbGQgSUUgc3VwcG9ydC5cblx0XHRpZiAodGFnLnJlYWR5U3RhdGUgPT0gXCJsb2FkZWRcIiB8fCB0YWcucmVhZHlTdGF0ZSA9PSBcImNvbXBsZXRlXCIpIHtcblx0XHRcdHRoaXMuX2hhbmRsZVRhZ0NvbXBsZXRlKCk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBIYW5kbGUgYW55IGVycm9yIGV2ZW50cyBmcm9tIHRoZSB0YWcuXG5cdCAqIEBtZXRob2QgX2hhbmRsZUVycm9yXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHAuX2hhbmRsZUVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fY2xlYW4oKTtcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXCJlcnJvclwiKTtcblx0fTtcblxuXHQvKipcblx0ICogSGFuZGxlIHRoZSB0YWcncyBvbmxvYWQgY2FsbGJhY2suXG5cdCAqIEBtZXRob2QgX2hhbmRsZVRhZ0NvbXBsZXRlXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwLl9oYW5kbGVUYWdDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9yYXdSZXN1bHQgPSB0aGlzLl90YWc7XG5cdFx0dGhpcy5fcmVzdWx0ID0gdGhpcy5yZXN1bHRGb3JtYXR0ZXIgJiYgdGhpcy5yZXN1bHRGb3JtYXR0ZXIodGhpcykgfHwgdGhpcy5fcmF3UmVzdWx0O1xuXG5cdFx0dGhpcy5fY2xlYW4oKTtcblxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcImNvbXBsZXRlXCIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUaGUgdGFnIHJlcXVlc3QgaGFzIG5vdCBsb2FkZWQgd2l0aGluIHRoZSB0aW1lIHNwZWNpZmllZCBpbiBsb2FkVGltZW91dC5cblx0ICogQG1ldGhvZCBfaGFuZGxlRXJyb3Jcblx0ICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IFRoZSBYSFIgZXJyb3IgZXZlbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwLl9oYW5kbGVUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX2NsZWFuKCk7XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBjcmVhdGVqcy5FdmVudChcInRpbWVvdXRcIikpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzLCBidXQgZG9uJ3QgZGVzdHJveSB0aGUgcmVxdWVzdCBvYmplY3Rcblx0ICogQG1ldGhvZCBfY2xlYW5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2NsZWFuID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5fdGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0dGhpcy5fdGFnLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cdFx0dGhpcy5fdGFnLm9uZXJyb3IgPSBudWxsO1xuXHRcdGlmICh0aGlzLl9hZGRlZFRvRE9NICYmIHRoaXMuX3RhZy5wYXJlbnROb2RlICE9IG51bGwpIHtcblx0XHRcdHRoaXMuX3RhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX3RhZyk7XG5cdFx0fVxuXHRcdGNsZWFyVGltZW91dCh0aGlzLl9sb2FkVGltZW91dCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEhhbmRsZSBhIHN0YWxsZWQgYXVkaW8gZXZlbnQuIFRoZSBtYWluIHBsYWNlIHRoaXMgaGFwcGVucyBpcyB3aXRoIEhUTUxBdWRpbyBpbiBDaHJvbWUgd2hlbiBwbGF5aW5nIGJhY2sgYXVkaW9cblx0ICogdGhhdCBpcyBhbHJlYWR5IGluIGEgbG9hZCwgYnV0IG5vdCBjb21wbGV0ZS5cblx0ICogQG1ldGhvZCBfaGFuZGxlU3RhbGxlZFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cC5faGFuZGxlU3RhbGxlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHQvL0lnbm9yZSwgbGV0IHRoZSB0aW1lb3V0IHRha2UgY2FyZSBvZiBpdC4gU29tZXRpbWVzIGl0cyBub3QgcmVhbGx5IHN0b3BwZWQuXG5cdH07XG5cblx0Y3JlYXRlanMuVGFnUmVxdWVzdCA9IGNyZWF0ZWpzLnByb21vdGUoVGFnUmVxdWVzdCwgXCJBYnN0cmFjdFJlcXVlc3RcIik7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBNZWRpYVRhZ1JlcXVlc3QuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqcyB8fCB7fTtcblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0Ly8gY29uc3RydWN0b3Jcblx0LyoqXG5cdCAqIEFuIHt7I2Nyb3NzTGluayBcIlRhZ1JlcXVlc3RcIn19e3svY3Jvc3NMaW5rfX0gdGhhdCBsb2FkcyBIVE1MIHRhZ3MgZm9yIHZpZGVvIGFuZCBhdWRpby5cblx0ICogQGNsYXNzIE1lZGlhVGFnUmVxdWVzdFxuXHQgKiBAcGFyYW0ge0xvYWRJdGVtfSBsb2FkSXRlbVxuXHQgKiBAcGFyYW0ge0hUTUxBdWRpb0VsZW1lbnR8SFRNTFZpZGVvRWxlbWVudH0gdGFnXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmNBdHRyaWJ1dGUgVGhlIHRhZyBhdHRyaWJ1dGUgdGhhdCBzcGVjaWZpZXMgdGhlIHNvdXJjZSwgc3VjaCBhcyBcInNyY1wiLCBcImhyZWZcIiwgZXRjLlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG5cdGZ1bmN0aW9uIE1lZGlhVGFnUmVxdWVzdChsb2FkSXRlbSwgdGFnLCBzcmNBdHRyaWJ1dGUpIHtcblx0XHR0aGlzLkFic3RyYWN0UmVxdWVzdF9jb25zdHJ1Y3Rvcihsb2FkSXRlbSk7XG5cblx0XHQvLyBwcm90ZWN0ZWQgcHJvcGVydGllc1xuXHRcdHRoaXMuX3RhZyA9IHRhZztcblx0XHR0aGlzLl90YWdTcmNBdHRyaWJ1dGUgPSBzcmNBdHRyaWJ1dGU7XG5cdFx0dGhpcy5fbG9hZGVkSGFuZGxlciA9IGNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZVRhZ0NvbXBsZXRlLCB0aGlzKTtcblx0fTtcblxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChNZWRpYVRhZ1JlcXVlc3QsIGNyZWF0ZWpzLlRhZ1JlcXVlc3QpO1xuXHR2YXIgcyA9IE1lZGlhVGFnUmVxdWVzdDtcblxuXHQvLyBwdWJsaWMgbWV0aG9kc1xuXHRwLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHNjID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlU3RhbGxlZCwgdGhpcyk7XG5cdFx0dGhpcy5fc3RhbGxlZENhbGxiYWNrID0gc2M7XG5cblx0XHR2YXIgcGMgPSBjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVQcm9ncmVzcywgdGhpcyk7XG5cdFx0dGhpcy5faGFuZGxlUHJvZ3Jlc3MgPSBwYztcblxuXHRcdHRoaXMuX3RhZy5hZGRFdmVudExpc3RlbmVyKFwic3RhbGxlZFwiLCBzYyk7XG5cdFx0dGhpcy5fdGFnLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLCBwYyk7XG5cblx0XHQvLyBUaGlzIHdpbGwgdGVsbCB1cyB3aGVuIGF1ZGlvIGlzIGJ1ZmZlcmVkIGVub3VnaCB0byBwbGF5IHRocm91Z2gsIGJ1dCBub3Qgd2hlbiBpdHMgbG9hZGVkLlxuXHRcdC8vIFRoZSB0YWcgZG9lc24ndCBrZWVwIGxvYWRpbmcgaW4gQ2hyb21lIG9uY2UgZW5vdWdoIGhhcyBidWZmZXJlZCwgYW5kIHdlIGhhdmUgZGVjaWRlZCB0aGF0IGJlaGF2aW91ciBpcyBzdWZmaWNpZW50LlxuXHRcdHRoaXMuX3RhZy5hZGRFdmVudExpc3RlbmVyICYmIHRoaXMuX3RhZy5hZGRFdmVudExpc3RlbmVyKFwiY2FucGxheXRocm91Z2hcIiwgdGhpcy5fbG9hZGVkSGFuZGxlciwgZmFsc2UpOyAvLyBjYW5wbGF5dGhyb3VnaCBjYWxsYmFjayBkb2Vzbid0IHdvcmsgaW4gQ2hyb21lLCBzbyB3ZSB1c2UgYW4gZXZlbnQuXG5cblx0XHR0aGlzLlRhZ1JlcXVlc3RfbG9hZCgpO1xuXHR9O1xuXG5cdC8vIHByaXZhdGUgbWV0aG9kc1xuXHRwLl9oYW5kbGVSZWFkeVN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLl9sb2FkVGltZW91dCk7XG5cdFx0Ly8gVGhpcyBpcyBzdHJpY3RseSBmb3IgdGFncyBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IG9ubG9hZC5cblx0XHR2YXIgdGFnID0gdGhpcy5fdGFnO1xuXG5cdFx0Ly8gQ29tcGxldGUgaXMgZm9yIG9sZCBJRSBzdXBwb3J0LlxuXHRcdGlmICh0YWcucmVhZHlTdGF0ZSA9PSBcImxvYWRlZFwiIHx8IHRhZy5yZWFkeVN0YXRlID09IFwiY29tcGxldGVcIikge1xuXHRcdFx0dGhpcy5faGFuZGxlVGFnQ29tcGxldGUoKTtcblx0XHR9XG5cdH07XG5cblx0cC5faGFuZGxlU3RhbGxlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHQvL0lnbm9yZSwgbGV0IHRoZSB0aW1lb3V0IHRha2UgY2FyZSBvZiBpdC4gU29tZXRpbWVzIGl0cyBub3QgcmVhbGx5IHN0b3BwZWQuXG5cdH07XG5cblx0LyoqXG5cdCAqIEFuIFhIUiByZXF1ZXN0IGhhcyByZXBvcnRlZCBwcm9ncmVzcy5cblx0ICogQG1ldGhvZCBfaGFuZGxlUHJvZ3Jlc3Ncblx0ICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IFRoZSBYSFIgcHJvZ3Jlc3MgZXZlbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwLl9oYW5kbGVQcm9ncmVzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGlmICghZXZlbnQgfHwgZXZlbnQubG9hZGVkID4gMCAmJiBldmVudC50b3RhbCA9PSAwKSB7XG5cdFx0XHRyZXR1cm47IC8vIFNvbWV0aW1lcyB3ZSBnZXQgbm8gXCJ0b3RhbFwiLCBzbyBqdXN0IGlnbm9yZSB0aGUgcHJvZ3Jlc3MgZXZlbnQuXG5cdFx0fVxuXG5cdFx0dmFyIG5ld0V2ZW50ID0gbmV3IGNyZWF0ZWpzLlByb2dyZXNzRXZlbnQoZXZlbnQubG9hZGVkLCBldmVudC50b3RhbCk7XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0fTtcblxuXHQvLyBwcm90ZWN0ZWQgbWV0aG9kc1xuXHRwLl9jbGVhbiA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl90YWcucmVtb3ZlRXZlbnRMaXN0ZW5lciAmJiB0aGlzLl90YWcucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNhbnBsYXl0aHJvdWdoXCIsIHRoaXMuX2xvYWRlZEhhbmRsZXIpO1xuXHRcdHRoaXMuX3RhZy5yZW1vdmVFdmVudExpc3RlbmVyKFwic3RhbGxlZFwiLCB0aGlzLl9zdGFsbGVkQ2FsbGJhY2spO1xuXHRcdHRoaXMuX3RhZy5yZW1vdmVFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIiwgdGhpcy5fcHJvZ3Jlc3NDYWxsYmFjayk7XG5cblx0XHR0aGlzLlRhZ1JlcXVlc3RfX2NsZWFuKCk7XG5cdH07XG5cblx0Y3JlYXRlanMuTWVkaWFUYWdSZXF1ZXN0ID0gY3JlYXRlanMucHJvbW90ZShNZWRpYVRhZ1JlcXVlc3QsIFwiVGFnUmVxdWVzdFwiKTtcblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFhIUlJlcXVlc3QuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqcyB8fCB7fTtcblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIGNvbnN0cnVjdG9yXG5cdC8qKlxuXHQgKiBBIHByZWxvYWRlciB0aGF0IGxvYWRzIGl0ZW1zIHVzaW5nIFhIUiByZXF1ZXN0cywgdXN1YWxseSBYTUxIdHRwUmVxdWVzdC4gSG93ZXZlciBYRG9tYWluUmVxdWVzdHMgd2lsbCBiZSB1c2VkXG5cdCAqIGZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMgaWYgcG9zc2libGUsIGFuZCBvbGRlciB2ZXJzaW9ucyBvZiBJRSBmYWxsIGJhY2sgb24gdG8gQWN0aXZlWCBvYmplY3RzIHdoZW4gbmVjZXNzYXJ5LlxuXHQgKiBYSFIgcmVxdWVzdHMgbG9hZCB0aGUgY29udGVudCBhcyB0ZXh0IG9yIGJpbmFyeSBkYXRhLCBwcm92aWRlIHByb2dyZXNzIGFuZCBjb25zaXN0ZW50IGNvbXBsZXRpb24gZXZlbnRzLCBhbmRcblx0ICogY2FuIGJlIGNhbmNlbGVkIGR1cmluZyBsb2FkLiBOb3RlIHRoYXQgWEhSIGlzIG5vdCBzdXBwb3J0ZWQgaW4gSUUgNiBvciBlYXJsaWVyLCBhbmQgaXMgbm90IHJlY29tbWVuZGVkIGZvclxuXHQgKiBjcm9zcy1kb21haW4gbG9hZGluZy5cblx0ICogQGNsYXNzIFhIUlJlcXVlc3Rcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIFRoZSBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSBmaWxlIHRvIGxvYWQuIFBsZWFzZSBzZWUgdGhlIHt7I2Nyb3NzTGluayBcIkxvYWRRdWV1ZS9sb2FkRmlsZVwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBmb3IgYW4gb3ZlcnZpZXcgb2Ygc3VwcG9ydGVkIGZpbGUgcHJvcGVydGllcy5cblx0ICogQGV4dGVuZHMgQWJzdHJhY3RMb2FkZXJcblx0ICovXG5cdGZ1bmN0aW9uIFhIUlJlcXVlc3QgKGl0ZW0pIHtcblx0XHR0aGlzLkFic3RyYWN0UmVxdWVzdF9jb25zdHJ1Y3RvcihpdGVtKTtcblxuXHRcdC8vIHByb3RlY3RlZCBwcm9wZXJ0aWVzXG5cdFx0LyoqXG5cdFx0ICogQSByZWZlcmVuY2UgdG8gdGhlIFhIUiByZXF1ZXN0IHVzZWQgdG8gbG9hZCB0aGUgY29udGVudC5cblx0XHQgKiBAcHJvcGVydHkgX3JlcXVlc3Rcblx0XHQgKiBAdHlwZSB7WE1MSHR0cFJlcXVlc3QgfCBYRG9tYWluUmVxdWVzdCB8IEFjdGl2ZVguWE1MSFRUUH1cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBtYW51YWwgbG9hZCB0aW1lb3V0IHRoYXQgaXMgdXNlZCBmb3IgYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCB0aGUgb25UaW1lb3V0IGV2ZW50IG9uIFhIUiAoWEhSIGxldmVsIDEsXG5cdFx0ICogdHlwaWNhbGx5IElFOSkuXG5cdFx0ICogQHByb3BlcnR5IF9sb2FkVGltZW91dFxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLl9sb2FkVGltZW91dCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYnJvd3NlcidzIFhIUiAoWE1MSFRUUFJlcXVlc3QpIHZlcnNpb24uIFN1cHBvcnRlZCB2ZXJzaW9ucyBhcmUgMSBhbmQgMi4gVGhlcmUgaXMgbm8gb2ZmaWNpYWwgd2F5IHRvIGRldGVjdFxuXHRcdCAqIHRoZSB2ZXJzaW9uLCBzbyB3ZSB1c2UgY2FwYWJpbGl0aWVzIHRvIG1ha2UgYSBiZXN0IGd1ZXNzLlxuXHRcdCAqIEBwcm9wZXJ0eSBfeGhyTGV2ZWxcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDFcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3hockxldmVsID0gMTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSByZXNwb25zZSBvZiBhIGxvYWRlZCBmaWxlLiBUaGlzIGlzIHNldCBiZWNhdXNlIGl0IGlzIGV4cGVuc2l2ZSB0byBsb29rIHVwIGNvbnN0YW50bHkuIFRoaXMgcHJvcGVydHkgd2lsbCBiZVxuXHRcdCAqIG51bGwgdW50aWwgdGhlIGZpbGUgaXMgbG9hZGVkLlxuXHRcdCAqIEBwcm9wZXJ0eSBfcmVzcG9uc2Vcblx0XHQgKiBAdHlwZSB7bWl4ZWR9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLl9yZXNwb25zZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcmVzcG9uc2Ugb2YgdGhlIGxvYWRlZCBmaWxlIGJlZm9yZSBpdCBpcyBtb2RpZmllZC4gSW4gbW9zdCBjYXNlcywgY29udGVudCBpcyBjb252ZXJ0ZWQgZnJvbSByYXcgdGV4dCB0b1xuXHRcdCAqIGFuIEhUTUwgdGFnIG9yIGEgZm9ybWF0dGVkIG9iamVjdCB3aGljaCBpcyBzZXQgdG8gdGhlIDxjb2RlPnJlc3VsdDwvY29kZT4gcHJvcGVydHksIGJ1dCB0aGUgZGV2ZWxvcGVyIG1heSBzdGlsbFxuXHRcdCAqIHdhbnQgdG8gYWNjZXNzIHRoZSByYXcgY29udGVudCBhcyBpdCB3YXMgbG9hZGVkLlxuXHRcdCAqIEBwcm9wZXJ0eSBfcmF3UmVzcG9uc2Vcblx0XHQgKiBAdHlwZSB7U3RyaW5nfE9iamVjdH1cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3Jhd1Jlc3BvbnNlID0gbnVsbDtcblxuXHRcdHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7XG5cblx0XHQvLyBTZXR1cCBvdXIgZXZlbnQgaGFuZGxlcnMgbm93LlxuXHRcdHRoaXMuX2hhbmRsZUxvYWRTdGFydFByb3h5ID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlTG9hZFN0YXJ0LCB0aGlzKTtcblx0XHR0aGlzLl9oYW5kbGVQcm9ncmVzc1Byb3h5ID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlUHJvZ3Jlc3MsIHRoaXMpO1xuXHRcdHRoaXMuX2hhbmRsZUFib3J0UHJveHkgPSBjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVBYm9ydCwgdGhpcyk7XG5cdFx0dGhpcy5faGFuZGxlRXJyb3JQcm94eSA9IGNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUVycm9yLCB0aGlzKTtcblx0XHR0aGlzLl9oYW5kbGVUaW1lb3V0UHJveHkgPSBjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVUaW1lb3V0LCB0aGlzKTtcblx0XHR0aGlzLl9oYW5kbGVMb2FkUHJveHkgPSBjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVMb2FkLCB0aGlzKTtcblx0XHR0aGlzLl9oYW5kbGVSZWFkeVN0YXRlQ2hhbmdlUHJveHkgPSBjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVSZWFkeVN0YXRlQ2hhbmdlLCB0aGlzKTtcblxuXHRcdGlmICghdGhpcy5fY3JlYXRlWEhSKGl0ZW0pKSB7XG5cdFx0XHQvL1RPRE86IFRocm93IGVycm9yP1xuXHRcdH1cblx0fTtcblxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChYSFJSZXF1ZXN0LCBjcmVhdGVqcy5BYnN0cmFjdFJlcXVlc3QpO1xuXG4vLyBzdGF0aWMgcHJvcGVydGllc1xuXHQvKipcblx0ICogQSBsaXN0IG9mIFhNTEhUVFAgb2JqZWN0IElEcyB0byB0cnkgd2hlbiBidWlsZGluZyBhbiBBY3RpdmVYIG9iamVjdCBmb3IgWEhSIHJlcXVlc3RzIGluIGVhcmxpZXIgdmVyc2lvbnMgb2YgSUUuXG5cdCAqIEBwcm9wZXJ0eSBBQ1RJVkVYX1ZFUlNJT05TXG5cdCAqIEB0eXBlIHtBcnJheX1cblx0ICogQHNpbmNlIDAuNC4yXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRYSFJSZXF1ZXN0LkFDVElWRVhfVkVSU0lPTlMgPSBbXG5cdFx0XCJNc3htbDIuWE1MSFRUUC42LjBcIixcblx0XHRcIk1zeG1sMi5YTUxIVFRQLjUuMFwiLFxuXHRcdFwiTXN4bWwyLlhNTEhUVFAuNC4wXCIsXG5cdFx0XCJNU1hNTDIuWE1MSFRUUC4zLjBcIixcblx0XHRcIk1TWE1MMi5YTUxIVFRQXCIsXG5cdFx0XCJNaWNyb3NvZnQuWE1MSFRUUFwiXG5cdF07XG5cbi8vIFB1YmxpYyBtZXRob2RzXG5cdC8qKlxuXHQgKiBMb29rIHVwIHRoZSBsb2FkZWQgcmVzdWx0LlxuXHQgKiBAbWV0aG9kIGdldFJlc3VsdFxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyYXc9ZmFsc2VdIFJldHVybiBhIHJhdyByZXN1bHQgaW5zdGVhZCBvZiBhIGZvcm1hdHRlZCByZXN1bHQuIFRoaXMgYXBwbGllcyB0byBjb250ZW50XG5cdCAqIGxvYWRlZCB2aWEgWEhSIHN1Y2ggYXMgc2NyaXB0cywgWE1MLCBDU1MsIGFuZCBJbWFnZXMuIElmIHRoZXJlIGlzIG5vIHJhdyByZXN1bHQsIHRoZSBmb3JtYXR0ZWQgcmVzdWx0IHdpbGwgYmVcblx0ICogcmV0dXJuZWQgaW5zdGVhZC5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBIHJlc3VsdCBvYmplY3QgY29udGFpbmluZyB0aGUgY29udGVudCB0aGF0IHdhcyBsb2FkZWQsIHN1Y2ggYXM6XG5cdCAqIDx1bD5cblx0ICogICAgICA8bGk+QW4gaW1hZ2UgdGFnICgmbHQ7aW1hZ2UgLyZndDspIGZvciBpbWFnZXM8L2xpPlxuXHQgKiAgICAgIDxsaT5BIHNjcmlwdCB0YWcgZm9yIEphdmFTY3JpcHQgKCZsdDtzY3JpcHQgLyZndDspLiBOb3RlIHRoYXQgc2NyaXB0cyBsb2FkZWQgd2l0aCB0YWdzIG1heSBiZSBhZGRlZCB0byB0aGVcblx0ICogICAgICBIVE1MIGhlYWQuPC9saT5cblx0ICogICAgICA8bGk+QSBzdHlsZSB0YWcgZm9yIENTUyAoJmx0O3N0eWxlIC8mZ3Q7KTwvbGk+XG5cdCAqICAgICAgPGxpPlJhdyB0ZXh0IGZvciBURVhUPC9saT5cblx0ICogICAgICA8bGk+QSBmb3JtYXR0ZWQgSmF2YVNjcmlwdCBvYmplY3QgZGVmaW5lZCBieSBKU09OPC9saT5cblx0ICogICAgICA8bGk+QW4gWE1MIGRvY3VtZW50PC9saT5cblx0ICogICAgICA8bGk+QW4gYmluYXJ5IGFycmF5YnVmZmVyIGxvYWRlZCBieSBYSFI8L2xpPlxuXHQgKiA8L3VsPlxuXHQgKiBOb3RlIHRoYXQgaWYgYSByYXcgcmVzdWx0IGlzIHJlcXVlc3RlZCwgYnV0IG5vdCBmb3VuZCwgdGhlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQuXG5cdCAqL1xuXHRwLmdldFJlc3VsdCA9IGZ1bmN0aW9uIChyYXcpIHtcblx0XHRpZiAocmF3ICYmIHRoaXMuX3Jhd1Jlc3BvbnNlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcmF3UmVzcG9uc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9yZXNwb25zZTtcblx0fTtcblxuXHQvLyBPdmVycmlkZXMgYWJzdHJhY3QgbWV0aG9kIGluIEFic3RyYWN0UmVxdWVzdFxuXHRwLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLmNhbmNlbGVkID0gdHJ1ZTtcblx0XHR0aGlzLl9jbGVhbigpO1xuXHRcdHRoaXMuX3JlcXVlc3QuYWJvcnQoKTtcblx0fTtcblxuXHQvLyBPdmVycmlkZXMgYWJzdHJhY3QgbWV0aG9kIGluIEFic3RyYWN0TG9hZGVyXG5cdHAubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcy5fcmVxdWVzdCA9PSBudWxsKSB7XG5cdFx0XHR0aGlzLl9oYW5kbGVFcnJvcigpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vRXZlbnRzXG5cdFx0aWYgKHRoaXMuX3JlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lciAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIiwgdGhpcy5faGFuZGxlTG9hZFN0YXJ0UHJveHksIGZhbHNlKTtcblx0XHRcdHRoaXMuX3JlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIHRoaXMuX2hhbmRsZVByb2dyZXNzUHJveHksIGZhbHNlKTtcblx0XHRcdHRoaXMuX3JlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIHRoaXMuX2hhbmRsZUFib3J0UHJveHksIGZhbHNlKTtcblx0XHRcdHRoaXMuX3JlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHRoaXMuX2hhbmRsZUVycm9yUHJveHksIGZhbHNlKTtcblx0XHRcdHRoaXMuX3JlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcInRpbWVvdXRcIiwgdGhpcy5faGFuZGxlVGltZW91dFByb3h5LCBmYWxzZSk7XG5cblx0XHRcdC8vIE5vdGU6IFdlIGRvbid0IGdldCBvbmxvYWQgaW4gYWxsIGJyb3dzZXJzIChlYXJsaWVyIEZGIGFuZCBJRSkuIG9uUmVhZHlTdGF0ZUNoYW5nZSBoYW5kbGVzIHRoZXNlLlxuXHRcdFx0dGhpcy5fcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCB0aGlzLl9oYW5kbGVMb2FkUHJveHksIGZhbHNlKTtcblx0XHRcdHRoaXMuX3JlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIiwgdGhpcy5faGFuZGxlUmVhZHlTdGF0ZUNoYW5nZVByb3h5LCBmYWxzZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIElFOSBzdXBwb3J0XG5cdFx0XHR0aGlzLl9yZXF1ZXN0Lm9ubG9hZHN0YXJ0ID0gdGhpcy5faGFuZGxlTG9hZFN0YXJ0UHJveHk7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSB0aGlzLl9oYW5kbGVQcm9ncmVzc1Byb3h5O1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5vbmFib3J0ID0gdGhpcy5faGFuZGxlQWJvcnRQcm94eTtcblx0XHRcdHRoaXMuX3JlcXVlc3Qub25lcnJvciA9IHRoaXMuX2hhbmRsZUVycm9yUHJveHk7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0Lm9udGltZW91dCA9IHRoaXMuX2hhbmRsZVRpbWVvdXRQcm94eTtcblxuXHRcdFx0Ly8gTm90ZTogV2UgZG9uJ3QgZ2V0IG9ubG9hZCBpbiBhbGwgYnJvd3NlcnMgKGVhcmxpZXIgRkYgYW5kIElFKS4gb25SZWFkeVN0YXRlQ2hhbmdlIGhhbmRsZXMgdGhlc2UuXG5cdFx0XHR0aGlzLl9yZXF1ZXN0Lm9ubG9hZCA9IHRoaXMuX2hhbmRsZUxvYWRQcm94eTtcblx0XHRcdHRoaXMuX3JlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gdGhpcy5faGFuZGxlUmVhZHlTdGF0ZUNoYW5nZVByb3h5O1xuXHRcdH1cblxuXHRcdC8vIFNldCB1cCBhIHRpbWVvdXQgaWYgd2UgZG9uJ3QgaGF2ZSBYSFIyXG5cdFx0aWYgKHRoaXMuX3hockxldmVsID09IDEpIHtcblx0XHRcdHRoaXMuX2xvYWRUaW1lb3V0ID0gc2V0VGltZW91dChjcmVhdGVqcy5wcm94eSh0aGlzLl9oYW5kbGVUaW1lb3V0LCB0aGlzKSwgdGhpcy5faXRlbS5sb2FkVGltZW91dCk7XG5cdFx0fVxuXG5cdFx0Ly8gU29tZXRpbWVzIHdlIGdldCBiYWNrIDQwNHMgaW1tZWRpYXRlbHksIHBhcnRpY3VsYXJseSB3aGVuIHRoZXJlIGlzIGEgY3Jvc3Mgb3JpZ2luIHJlcXVlc3QuICAvLyBub3RlIHRoaXMgZG9lcyBub3QgY2F0Y2ggaW4gQ2hyb21lXG5cdFx0dHJ5IHtcblx0XHRcdGlmICghdGhpcy5faXRlbS52YWx1ZXMpIHtcblx0XHRcdFx0dGhpcy5fcmVxdWVzdC5zZW5kKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9yZXF1ZXN0LnNlbmQoY3JlYXRlanMuVVJMVXRpbHMuZm9ybWF0UXVlcnlTdHJpbmcodGhpcy5faXRlbS52YWx1ZXMpKTtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBjcmVhdGVqcy5FcnJvckV2ZW50KFwiWEhSX1NFTkRcIiwgbnVsbCwgZXJyb3IpKTtcblx0XHR9XG5cdH07XG5cblx0cC5zZXRSZXNwb25zZVR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuXHRcdC8vIFNvbWUgb2xkIGJyb3dzZXJzIGRvZXNuJ3Qgc3VwcG9ydCBibG9iLCBzbyB3ZSBjb252ZXJ0IGFycmF5YnVmZmVyIHRvIGJsb2IgYWZ0ZXIgcmVzcG9uc2UgaXMgZG93bmxvYWRlZFxuXHRcdGlmICh0eXBlID09PSAnYmxvYicpIHtcblx0XHRcdHR5cGUgPSB3aW5kb3cuVVJMID8gJ2Jsb2InIDogJ2FycmF5YnVmZmVyJztcblx0XHRcdHRoaXMuX3Jlc3BvbnNlVHlwZSA9IHR5cGU7XG5cdFx0fVxuXHRcdHRoaXMuX3JlcXVlc3QucmVzcG9uc2VUeXBlID0gdHlwZTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0IGFsbCB0aGUgcmVzcG9uc2UgaGVhZGVycyBmcm9tIHRoZSBYbWxIdHRwUmVxdWVzdC5cblx0ICpcblx0ICogPHN0cm9uZz5Gcm9tIHRoZSBkb2NzOjwvc3Ryb25nPiBSZXR1cm4gYWxsIHRoZSBIVFRQIGhlYWRlcnMsIGV4Y2x1ZGluZyBoZWFkZXJzIHRoYXQgYXJlIGEgY2FzZS1pbnNlbnNpdGl2ZSBtYXRjaFxuXHQgKiBmb3IgU2V0LUNvb2tpZSBvciBTZXQtQ29va2llMiwgYXMgYSBzaW5nbGUgc3RyaW5nLCB3aXRoIGVhY2ggaGVhZGVyIGxpbmUgc2VwYXJhdGVkIGJ5IGEgVSswMDBEIENSIFUrMDAwQSBMRiBwYWlyLFxuXHQgKiBleGNsdWRpbmcgdGhlIHN0YXR1cyBsaW5lLCBhbmQgd2l0aCBlYWNoIGhlYWRlciBuYW1lIGFuZCBoZWFkZXIgdmFsdWUgc2VwYXJhdGVkIGJ5IGEgVSswMDNBIENPTE9OIFUrMDAyMCBTUEFDRVxuXHQgKiBwYWlyLlxuXHQgKiBAbWV0aG9kIGdldEFsbFJlc3BvbnNlSGVhZGVyc1xuXHQgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAqIEBzaW5jZSAwLjQuMVxuXHQgKi9cblx0cC5nZXRBbGxSZXNwb25zZUhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHRoaXMuX3JlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcblx0XHRcdHJldHVybiB0aGlzLl9yZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldCBhIHNwZWNpZmljIHJlc3BvbnNlIGhlYWRlciBmcm9tIHRoZSBYbWxIdHRwUmVxdWVzdC5cblx0ICpcblx0ICogPHN0cm9uZz5Gcm9tIHRoZSBkb2NzOjwvc3Ryb25nPiBSZXR1cm5zIHRoZSBoZWFkZXIgZmllbGQgdmFsdWUgZnJvbSB0aGUgcmVzcG9uc2Ugb2Ygd2hpY2ggdGhlIGZpZWxkIG5hbWUgbWF0Y2hlc1xuXHQgKiBoZWFkZXIsIHVubGVzcyB0aGUgZmllbGQgbmFtZSBpcyBTZXQtQ29va2llIG9yIFNldC1Db29raWUyLlxuXHQgKiBAbWV0aG9kIGdldFJlc3BvbnNlSGVhZGVyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXIgVGhlIGhlYWRlciBuYW1lIHRvIHJldHJpZXZlLlxuXHQgKiBAcmV0dXJuIHtTdHJpbmd9XG5cdCAqIEBzaW5jZSAwLjQuMVxuXHQgKi9cblx0cC5nZXRSZXNwb25zZUhlYWRlciA9IGZ1bmN0aW9uIChoZWFkZXIpIHtcblx0XHRpZiAodGhpcy5fcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcihoZWFkZXIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH07XG5cbi8vIHByb3RlY3RlZCBtZXRob2RzXG5cdC8qKlxuXHQgKiBUaGUgWEhSIHJlcXVlc3QgaGFzIHJlcG9ydGVkIHByb2dyZXNzLlxuXHQgKiBAbWV0aG9kIF9oYW5kbGVQcm9ncmVzc1xuXHQgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgVGhlIFhIUiBwcm9ncmVzcyBldmVudC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2hhbmRsZVByb2dyZXNzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKCFldmVudCB8fCBldmVudC5sb2FkZWQgPiAwICYmIGV2ZW50LnRvdGFsID09IDApIHtcblx0XHRcdHJldHVybjsgLy8gU29tZXRpbWVzIHdlIGdldCBubyBcInRvdGFsXCIsIHNvIGp1c3QgaWdub3JlIHRoZSBwcm9ncmVzcyBldmVudC5cblx0XHR9XG5cblx0XHR2YXIgbmV3RXZlbnQgPSBuZXcgY3JlYXRlanMuUHJvZ3Jlc3NFdmVudChldmVudC5sb2FkZWQsIGV2ZW50LnRvdGFsKTtcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobmV3RXZlbnQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUaGUgWEhSIHJlcXVlc3QgaGFzIHJlcG9ydGVkIGEgbG9hZCBzdGFydC5cblx0ICogQG1ldGhvZCBfaGFuZGxlTG9hZFN0YXJ0XG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgWEhSIGxvYWRTdGFydCBldmVudC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2hhbmRsZUxvYWRTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLl9sb2FkVGltZW91dCk7XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFwibG9hZHN0YXJ0XCIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUaGUgWEhSIHJlcXVlc3QgaGFzIHJlcG9ydGVkIGFuIGFib3J0IGV2ZW50LlxuXHQgKiBAbWV0aG9kIGhhbmRsZUFib3J0XG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgWEhSIGFib3J0IGV2ZW50LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cC5faGFuZGxlQWJvcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHR0aGlzLl9jbGVhbigpO1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgY3JlYXRlanMuRXJyb3JFdmVudChcIlhIUl9BQk9SVEVEXCIsIG51bGwsIGV2ZW50KSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFRoZSBYSFIgcmVxdWVzdCBoYXMgcmVwb3J0ZWQgYW4gZXJyb3IgZXZlbnQuXG5cdCAqIEBtZXRob2QgX2hhbmRsZUVycm9yXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgWEhSIGVycm9yIGV2ZW50LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cC5faGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHR0aGlzLl9jbGVhbigpO1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgY3JlYXRlanMuRXJyb3JFdmVudChldmVudC5tZXNzYWdlKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFRoZSBYSFIgcmVxdWVzdCBoYXMgcmVwb3J0ZWQgYSByZWFkeVN0YXRlIGNoYW5nZS4gTm90ZSB0aGF0IG9sZGVyIGJyb3dzZXJzIChJRSA3ICYgOCkgZG8gbm90IHByb3ZpZGUgYW4gb25sb2FkXG5cdCAqIGV2ZW50LCBzbyB3ZSBtdXN0IG1vbml0b3IgdGhlIHJlYWR5U3RhdGVDaGFuZ2UgdG8gZGV0ZXJtaW5lIGlmIHRoZSBmaWxlIGlzIGxvYWRlZC5cblx0ICogQG1ldGhvZCBfaGFuZGxlUmVhZHlTdGF0ZUNoYW5nZVxuXHQgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgVGhlIFhIUiByZWFkeVN0YXRlQ2hhbmdlIGV2ZW50LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cC5faGFuZGxlUmVhZHlTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGlmICh0aGlzLl9yZXF1ZXN0LnJlYWR5U3RhdGUgPT0gNCkge1xuXHRcdFx0dGhpcy5faGFuZGxlTG9hZCgpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogVGhlIFhIUiByZXF1ZXN0IGhhcyBjb21wbGV0ZWQuIFRoaXMgaXMgY2FsbGVkIGJ5IHRoZSBYSFIgcmVxdWVzdCBkaXJlY3RseSwgb3IgYnkgYSByZWFkeVN0YXRlQ2hhbmdlIHRoYXQgaGFzXG5cdCAqIDxjb2RlPnJlcXVlc3QucmVhZHlTdGF0ZSA9PSA0PC9jb2RlPi4gT25seSB0aGUgZmlyc3QgY2FsbCB0byB0aGlzIG1ldGhvZCB3aWxsIGJlIHByb2Nlc3NlZC5cblx0ICpcblx0ICogTm90ZSB0aGF0IFRoaXMgbWV0aG9kIHVzZXMge3sjY3Jvc3NMaW5rIFwiX2NoZWNrRXJyb3JcIn19e3svY3Jvc3NMaW5rfX0gdG8gZGV0ZXJtaW5lIGlmIHRoZSBzZXJ2ZXIgaGFzIHJldHVybmVkIGFuXG5cdCAqIGVycm9yIGNvZGUuXG5cdCAqIEBtZXRob2QgX2hhbmRsZUxvYWRcblx0ICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IFRoZSBYSFIgbG9hZCBldmVudC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2hhbmRsZUxvYWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHRpZiAodGhpcy5sb2FkZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5sb2FkZWQgPSB0cnVlO1xuXG5cdFx0dmFyIGVycm9yID0gdGhpcy5fY2hlY2tFcnJvcigpO1xuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0dGhpcy5faGFuZGxlRXJyb3IoZXJyb3IpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX3Jlc3BvbnNlID0gdGhpcy5fZ2V0UmVzcG9uc2UoKTtcblx0XHQvLyBDb252ZXJ0IGFycmF5YnVmZmVyIGJhY2sgdG8gYmxvYlxuXHRcdGlmICh0aGlzLl9yZXNwb25zZVR5cGUgPT09ICdhcnJheWJ1ZmZlcicpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRoaXMuX3Jlc3BvbnNlID0gbmV3IEJsb2IoW3RoaXMuX3Jlc3BvbnNlXSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHVzZSBCbG9iQnVpbGRlciBpZiBCbG9iIGNvbnN0cnVjdG9yIGlzIG5vdCBzdXBwb3J0ZWRcblx0XHRcdFx0Ly8gVGVzdGVkIG9uIEFuZHJvaWQgMi4zIH4gNC4yIGFuZCBpT1M1IHNhZmFyaVxuXHRcdFx0XHR3aW5kb3cuQmxvYkJ1aWxkZXIgPSB3aW5kb3cuQmxvYkJ1aWxkZXIgfHwgd2luZG93LldlYktpdEJsb2JCdWlsZGVyIHx8IHdpbmRvdy5Nb3pCbG9iQnVpbGRlciB8fCB3aW5kb3cuTVNCbG9iQnVpbGRlcjtcblx0XHRcdFx0aWYgKGUubmFtZSA9PT0gJ1R5cGVFcnJvcicgJiYgd2luZG93LkJsb2JCdWlsZGVyKSB7XG5cdFx0XHRcdFx0dmFyIGJ1aWxkZXIgPSBuZXcgQmxvYkJ1aWxkZXIoKTtcblx0XHRcdFx0XHRidWlsZGVyLmFwcGVuZCh0aGlzLl9yZXNwb25zZSk7XG5cdFx0XHRcdFx0dGhpcy5fcmVzcG9uc2UgPSBidWlsZGVyLmdldEJsb2IoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLl9jbGVhbigpO1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBjcmVhdGVqcy5FdmVudChcImNvbXBsZXRlXCIpKTtcblx0fTtcblxuXHQvKipcblx0ICogVGhlIFhIUiByZXF1ZXN0IGhhcyB0aW1lZCBvdXQuIFRoaXMgaXMgY2FsbGVkIGJ5IHRoZSBYSFIgcmVxdWVzdCBkaXJlY3RseSwgb3IgdmlhIGEgPGNvZGU+c2V0VGltZW91dDwvY29kZT5cblx0ICogY2FsbGJhY2suXG5cdCAqIEBtZXRob2QgX2hhbmRsZVRpbWVvdXRcblx0ICogQHBhcmFtIHtPYmplY3R9IFtldmVudF0gVGhlIFhIUiB0aW1lb3V0IGV2ZW50LiBUaGlzIGlzIG9jY2FzaW9uYWxseSBudWxsIHdoZW4gY2FsbGVkIGJ5IHRoZSBiYWNrdXAgc2V0VGltZW91dC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2hhbmRsZVRpbWVvdXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHR0aGlzLl9jbGVhbigpO1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgY3JlYXRlanMuRXJyb3JFdmVudChcIlBSRUxPQURfVElNRU9VVFwiLCBudWxsLCBldmVudCkpO1xuXHR9O1xuXG4vLyBQcm90ZWN0ZWRcblx0LyoqXG5cdCAqIERldGVybWluZSBpZiB0aGVyZSBpcyBhbiBlcnJvciBpbiB0aGUgY3VycmVudCBsb2FkLlxuXHQgKiBDdXJyZW50bHkgdGhpcyBjaGVja3MgdGhlIHN0YXR1cyBvZiB0aGUgcmVxdWVzdCBmb3IgcHJvYmxlbSBjb2RlcywgYW5kIG5vdCBhY3R1YWwgcmVzcG9uc2UgY29udGVudDpcblx0ICogPHVsPlxuXHQgKiAgICAgPGxpPlN0YXR1cyBjb2RlcyBiZXR3ZWVuIDQwMCBhbmQgNTk5IChIVFRQIGVycm9yIHJhbmdlKTwvbGk+XG5cdCAqICAgICA8bGk+QSBzdGF0dXMgb2YgMCwgYnV0ICpvbmx5IHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIHJ1bm5pbmcgb24gYSBzZXJ2ZXIqLiBJZiB0aGUgYXBwbGljYXRpb24gaXMgcnVubmluZ1xuXHQgKiAgICAgb24gYGZpbGU6YCwgdGhlbiBpdCBtYXkgaW5jb3JyZWN0bHkgdHJlYXQgYW4gZXJyb3Igb24gbG9jYWwgKG9yIGVtYmVkZGVkIGFwcGxpY2F0aW9ucykgYXMgYSBzdWNjZXNzZnVsXG5cdCAqICAgICBsb2FkLjwvbGk+XG5cdCAqIDwvdWw+XG5cdCAqIEBtZXRob2QgX2NoZWNrRXJyb3Jcblx0ICogQHJldHVybiB7RXJyb3J9IEFuIGVycm9yIHdpdGggdGhlIHN0YXR1cyBjb2RlIGluIHRoZSBgbWVzc2FnZWAgYXJndW1lbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwLl9jaGVja0Vycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBzdGF0dXMgPSBwYXJzZUludCh0aGlzLl9yZXF1ZXN0LnN0YXR1cyk7XG5cdFx0aWYgKHN0YXR1cyA+PSA0MDAgJiYgc3RhdHVzIDw9IDU5OSkge1xuXHRcdFx0cmV0dXJuIG5ldyBFcnJvcihzdGF0dXMpO1xuXHRcdH0gZWxzZSBpZiAoc3RhdHVzID09IDApIHtcblx0XHRcdGlmICgoL15odHRwcz86LykudGVzdChsb2NhdGlvbi5wcm90b2NvbCkpIHsgcmV0dXJuIG5ldyBFcnJvcigwKTsgfVxuXHRcdFx0cmV0dXJuIG51bGw7IC8vIExpa2VseSBhbiBlbWJlZGRlZCBhcHAuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcblxuXG5cdC8qKlxuXHQgKiBWYWxpZGF0ZSB0aGUgcmVzcG9uc2UuIERpZmZlcmVudCBicm93c2VycyBoYXZlIGRpZmZlcmVudCBhcHByb2FjaGVzLCBzb21lIG9mIHdoaWNoIHRocm93IGVycm9ycyB3aGVuIGFjY2Vzc2VkXG5cdCAqIGluIG90aGVyIGJyb3dzZXJzLiBJZiB0aGVyZSBpcyBubyByZXNwb25zZSwgdGhlIDxjb2RlPl9yZXNwb25zZTwvY29kZT4gcHJvcGVydHkgd2lsbCByZW1haW4gbnVsbC5cblx0ICogQG1ldGhvZCBfZ2V0UmVzcG9uc2Vcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2dldFJlc3BvbnNlID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLl9yZXNwb25zZSAhPSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX3JlcXVlc3QucmVzcG9uc2UgIT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3JlcXVlc3QucmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQW5kcm9pZCAyLjIgdXNlcyAucmVzcG9uc2VUZXh0XG5cdFx0dHJ5IHtcblx0XHRcdGlmICh0aGlzLl9yZXF1ZXN0LnJlc3BvbnNlVGV4dCAhPSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9yZXF1ZXN0LnJlc3BvbnNlVGV4dDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiBsb2FkaW5nIFhNTCwgSUU5IGRvZXMgbm90IHJldHVybiAucmVzcG9uc2UsIGluc3RlYWQgaXQgcmV0dXJucyByZXNwb25zZVhNTC54bWxcblx0XHR0cnkge1xuXHRcdFx0aWYgKHRoaXMuX3JlcXVlc3QucmVzcG9uc2VYTUwgIT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcmVxdWVzdC5yZXNwb25zZVhNTDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH07XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhbiBYSFIgcmVxdWVzdC4gRGVwZW5kaW5nIG9uIGEgbnVtYmVyIG9mIGZhY3RvcnMsIHdlIGdldCB0b3RhbGx5IGRpZmZlcmVudCByZXN1bHRzLlxuXHQgKiA8b2w+PGxpPlNvbWUgYnJvd3NlcnMgZ2V0IGFuIDxjb2RlPlhEb21haW5SZXF1ZXN0PC9jb2RlPiB3aGVuIGxvYWRpbmcgY3Jvc3MtZG9tYWluLjwvbGk+XG5cdCAqICAgICAgPGxpPlhNTEh0dHBSZXF1ZXN0IGFyZSBjcmVhdGVkIHdoZW4gYXZhaWxhYmxlLjwvbGk+XG5cdCAqICAgICAgPGxpPkFjdGl2ZVguWE1MSFRUUCBvYmplY3RzIGFyZSB1c2VkIGluIG9sZGVyIElFIGJyb3dzZXJzLjwvbGk+XG5cdCAqICAgICAgPGxpPlRleHQgcmVxdWVzdHMgb3ZlcnJpZGUgdGhlIG1pbWUgdHlwZSBpZiBwb3NzaWJsZTwvbGk+XG5cdCAqICAgICAgPGxpPk9yaWdpbiBoZWFkZXJzIGFyZSBzZW50IGZvciBjcm9zc2RvbWFpbiByZXF1ZXN0cyBpbiBzb21lIGJyb3dzZXJzLjwvbGk+XG5cdCAqICAgICAgPGxpPkJpbmFyeSBsb2FkcyBzZXQgdGhlIHJlc3BvbnNlIHR5cGUgdG8gXCJhcnJheWJ1ZmZlclwiPC9saT48L29sPlxuXHQgKiBAbWV0aG9kIF9jcmVhdGVYSFJcblx0ICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gVGhlIHJlcXVlc3RlZCBpdGVtIHRoYXQgaXMgYmVpbmcgbG9hZGVkLlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiBhbiBYSFIgcmVxdWVzdCBvciBlcXVpdmFsZW50IHdhcyBzdWNjZXNzZnVsbHkgY3JlYXRlZC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2NyZWF0ZVhIUiA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0Ly8gQ2hlY2sgZm9yIGNyb3NzLWRvbWFpbiBsb2Fkcy4gV2UgY2FuJ3QgZnVsbHkgc3VwcG9ydCB0aGVtLCBidXQgd2UgY2FuIHRyeS5cblx0XHR2YXIgY3Jvc3Nkb21haW4gPSBjcmVhdGVqcy5VUkxVdGlscy5pc0Nyb3NzRG9tYWluKGl0ZW0pO1xuXHRcdHZhciBoZWFkZXJzID0ge307XG5cblx0XHQvLyBDcmVhdGUgdGhlIHJlcXVlc3QuIEZhbGxiYWNrIHRvIHdoYXRldmVyIHN1cHBvcnQgd2UgaGF2ZS5cblx0XHR2YXIgcmVxID0gbnVsbDtcblx0XHRpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7XG5cdFx0XHRyZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0XHRcdC8vIFRoaXMgaXMgOCBvciA5LCBzbyB1c2UgWERvbWFpblJlcXVlc3QgaW5zdGVhZC5cblx0XHRcdGlmIChjcm9zc2RvbWFpbiAmJiByZXEud2l0aENyZWRlbnRpYWxzID09PSB1bmRlZmluZWQgJiYgd2luZG93LlhEb21haW5SZXF1ZXN0KSB7XG5cdFx0XHRcdHJlcSA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7IC8vIE9sZCBJRSB2ZXJzaW9ucyB1c2UgYSBkaWZmZXJlbnQgYXBwcm9hY2hcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gcy5BQ1RJVkVYX1ZFUlNJT05TLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHR2YXIgYXhWZXJzaW9uID0gcy5BQ1RJVkVYX1ZFUlNJT05TW2ldO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHJlcSA9IG5ldyBBY3RpdmVYT2JqZWN0KGF4VmVyc2lvbik7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHJlcSA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBEZWZhdWx0IHRvIHV0Zi04IGZvciBUZXh0IHJlcXVlc3RzLlxuXHRcdGlmIChpdGVtLm1pbWVUeXBlID09IG51bGwgJiYgY3JlYXRlanMuUmVxdWVzdFV0aWxzLmlzVGV4dChpdGVtLnR5cGUpKSB7XG5cdFx0XHRpdGVtLm1pbWVUeXBlID0gXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04XCI7XG5cdFx0fVxuXG5cdFx0Ly8gSUU5IGRvZXNuJ3Qgc3VwcG9ydCBvdmVycmlkZU1pbWVUeXBlKCksIHNvIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGl0LlxuXHRcdGlmIChpdGVtLm1pbWVUeXBlICYmIHJlcS5vdmVycmlkZU1pbWVUeXBlKSB7XG5cdFx0XHRyZXEub3ZlcnJpZGVNaW1lVHlwZShpdGVtLm1pbWVUeXBlKTtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgdGhlIFhIUiBsZXZlbFxuXHRcdHRoaXMuX3hockxldmVsID0gKHR5cGVvZiByZXEucmVzcG9uc2VUeXBlID09PSBcInN0cmluZ1wiKSA/IDIgOiAxO1xuXG5cdFx0dmFyIHNyYyA9IG51bGw7XG5cdFx0aWYgKGl0ZW0ubWV0aG9kID09IGNyZWF0ZWpzLk1ldGhvZHMuR0VUKSB7XG5cdFx0XHRzcmMgPSBjcmVhdGVqcy5VUkxVdGlscy5idWlsZFVSSShpdGVtLnNyYywgaXRlbS52YWx1ZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcmMgPSBpdGVtLnNyYztcblx0XHR9XG5cblx0XHQvLyBPcGVuIHRoZSByZXF1ZXN0LiAgU2V0IGNyb3NzLWRvbWFpbiBmbGFncyBpZiBpdCBpcyBzdXBwb3J0ZWQgKFhIUiBsZXZlbCAxIG9ubHkpXG5cdFx0cmVxLm9wZW4oaXRlbS5tZXRob2QgfHwgY3JlYXRlanMuTWV0aG9kcy5HRVQsIHNyYywgdHJ1ZSk7XG5cblx0XHRpZiAoY3Jvc3Nkb21haW4gJiYgcmVxIGluc3RhbmNlb2YgWE1MSHR0cFJlcXVlc3QgJiYgdGhpcy5feGhyTGV2ZWwgPT0gMSkge1xuXHRcdFx0aGVhZGVyc1tcIk9yaWdpblwiXSA9IGxvY2F0aW9uLm9yaWdpbjtcblx0XHR9XG5cblx0XHQvLyBUbyBzZW5kIGRhdGEgd2UgbmVlZCB0byBzZXQgdGhlIENvbnRlbnQtdHlwZSBoZWFkZXIpXG5cdFx0aWYgKGl0ZW0udmFsdWVzICYmIGl0ZW0ubWV0aG9kID09IGNyZWF0ZWpzLk1ldGhvZHMuUE9TVCkge1xuXHRcdFx0aGVhZGVyc1tcIkNvbnRlbnQtVHlwZVwiXSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5cdFx0fVxuXG5cdFx0aWYgKCFjcm9zc2RvbWFpbiAmJiAhaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0pIHtcblx0XHRcdGhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdH1cblxuXHRcdGlmIChpdGVtLmhlYWRlcnMpIHtcblx0XHRcdGZvciAodmFyIG4gaW4gaXRlbS5oZWFkZXJzKSB7XG5cdFx0XHRcdGhlYWRlcnNbbl0gPSBpdGVtLmhlYWRlcnNbbl07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zm9yIChuIGluIGhlYWRlcnMpIHtcblx0XHRcdHJlcS5zZXRSZXF1ZXN0SGVhZGVyKG4sIGhlYWRlcnNbbl0pXG5cdFx0fVxuXG5cdFx0aWYgKHJlcSBpbnN0YW5jZW9mIFhNTEh0dHBSZXF1ZXN0ICYmIGl0ZW0ud2l0aENyZWRlbnRpYWxzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHJlcS53aXRoQ3JlZGVudGlhbHMgPSBpdGVtLndpdGhDcmVkZW50aWFscztcblx0XHR9XG5cblx0XHR0aGlzLl9yZXF1ZXN0ID0gcmVxO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0LyoqXG5cdCAqIEEgcmVxdWVzdCBoYXMgY29tcGxldGVkIChvciBmYWlsZWQgb3IgY2FuY2VsZWQpLCBhbmQgbmVlZHMgdG8gYmUgZGlzcG9zZWQuXG5cdCAqIEBtZXRob2QgX2NsZWFuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwLl9jbGVhbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5fbG9hZFRpbWVvdXQpO1xuXG5cdFx0aWYgKHRoaXMuX3JlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lciAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIiwgdGhpcy5faGFuZGxlTG9hZFN0YXJ0UHJveHkpO1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIiwgdGhpcy5faGFuZGxlUHJvZ3Jlc3NQcm94eSk7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCB0aGlzLl9oYW5kbGVBYm9ydFByb3h5KTtcblx0XHRcdHRoaXMuX3JlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHRoaXMuX2hhbmRsZUVycm9yUHJveHkpO1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKFwidGltZW91dFwiLCB0aGlzLl9oYW5kbGVUaW1lb3V0UHJveHkpO1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCB0aGlzLl9oYW5kbGVMb2FkUHJveHkpO1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCB0aGlzLl9oYW5kbGVSZWFkeVN0YXRlQ2hhbmdlUHJveHkpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0Lm9ubG9hZHN0YXJ0ID0gbnVsbDtcblx0XHRcdHRoaXMuX3JlcXVlc3Qub25wcm9ncmVzcyA9IG51bGw7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0Lm9uYWJvcnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5vbmVycm9yID0gbnVsbDtcblx0XHRcdHRoaXMuX3JlcXVlc3Qub250aW1lb3V0ID0gbnVsbDtcblx0XHRcdHRoaXMuX3JlcXVlc3Qub25sb2FkID0gbnVsbDtcblx0XHRcdHRoaXMuX3JlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblx0XHR9XG5cdH07XG5cblx0cC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gXCJbUHJlbG9hZEpTIFhIUlJlcXVlc3RdXCI7XG5cdH07XG5cblx0Y3JlYXRlanMuWEhSUmVxdWVzdCA9IGNyZWF0ZWpzLnByb21vdGUoWEhSUmVxdWVzdCwgXCJBYnN0cmFjdFJlcXVlc3RcIik7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBTb3VuZExvYWRlci5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvLyBjb25zdHJ1Y3RvclxuXHQvKipcblx0ICogQSBsb2FkZXIgZm9yIEhUTUwgYXVkaW8gZmlsZXMuIFByZWxvYWRKUyBjYW4gbm90IGxvYWQgV2ViQXVkaW8gZmlsZXMsIGFzIGEgV2ViQXVkaW8gY29udGV4dCBpcyByZXF1aXJlZCwgd2hpY2hcblx0ICogc2hvdWxkIGJlIGNyZWF0ZWQgYnkgZWl0aGVyIGEgbGlicmFyeSBwbGF5aW5nIHRoZSBzb3VuZCAoc3VjaCBhcyA8YSBocmVmPVwiaHR0cDovL3NvdW5kanMuY29tXCI+U291bmRKUzwvYT4sIG9yIGFuXG5cdCAqIGV4dGVybmFsIGZyYW1ld29yayB0aGF0IGhhbmRsZXMgYXVkaW8gcGxheWJhY2suIFRvIGxvYWQgY29udGVudCB0aGF0IGNhbiBiZSBwbGF5ZWQgYnkgV2ViQXVkaW8sIHVzZSB0aGVcblx0ICoge3sjY3Jvc3NMaW5rIFwiQmluYXJ5TG9hZGVyXCJ9fXt7L2Nyb3NzTGlua319LCBhbmQgaGFuZGxlIHRoZSBhdWRpbyBjb250ZXh0IGRlY29kaW5nIG1hbnVhbGx5LlxuXHQgKiBAY2xhc3MgU291bmRMb2FkZXJcblx0ICogQHBhcmFtIHtMb2FkSXRlbXxPYmplY3R9IGxvYWRJdGVtXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gcHJlZmVyWEhSXG5cdCAqIEBleHRlbmRzIEFic3RyYWN0TWVkaWFMb2FkZXJcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRmdW5jdGlvbiBTb3VuZExvYWRlcihsb2FkSXRlbSwgcHJlZmVyWEhSKSB7XG5cdFx0dGhpcy5BYnN0cmFjdE1lZGlhTG9hZGVyX2NvbnN0cnVjdG9yKGxvYWRJdGVtLCBwcmVmZXJYSFIsIGNyZWF0ZWpzLlR5cGVzLlNPVU5EKTtcblxuXHRcdC8vIHByb3RlY3RlZCBwcm9wZXJ0aWVzXG5cdFx0aWYgKGNyZWF0ZWpzLkRvbVV0aWxzLmlzQXVkaW9UYWcobG9hZEl0ZW0pKSB7XG5cdFx0XHR0aGlzLl90YWcgPSBsb2FkSXRlbTtcblx0XHR9IGVsc2UgaWYgKGNyZWF0ZWpzLkRvbVV0aWxzLmlzQXVkaW9UYWcobG9hZEl0ZW0uc3JjKSkge1xuXHRcdFx0dGhpcy5fdGFnID0gbG9hZEl0ZW07XG5cdFx0fSBlbHNlIGlmIChjcmVhdGVqcy5Eb21VdGlscy5pc0F1ZGlvVGFnKGxvYWRJdGVtLnRhZykpIHtcblx0XHRcdHRoaXMuX3RhZyA9IGNyZWF0ZWpzLkRvbVV0aWxzLmlzQXVkaW9UYWcobG9hZEl0ZW0pID8gbG9hZEl0ZW0gOiBsb2FkSXRlbS5zcmM7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX3RhZyAhPSBudWxsKSB7XG5cdFx0XHR0aGlzLl9wcmVmZXJYSFIgPSBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0dmFyIHAgPSBjcmVhdGVqcy5leHRlbmQoU291bmRMb2FkZXIsIGNyZWF0ZWpzLkFic3RyYWN0TWVkaWFMb2FkZXIpO1xuXHR2YXIgcyA9IFNvdW5kTG9hZGVyO1xuXG5cdC8vIHN0YXRpYyBtZXRob2RzXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBsb2FkZXIgY2FuIGxvYWQgYSBzcGVjaWZpYyBpdGVtLiBUaGlzIGxvYWRlciBjYW4gb25seSBsb2FkIGl0ZW1zIHRoYXQgYXJlIG9mIHR5cGVcblx0ICoge3sjY3Jvc3NMaW5rIFwiVHlwZXMvU09VTkQ6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIEBtZXRob2QgY2FuTG9hZEl0ZW1cblx0ICogQHBhcmFtIHtMb2FkSXRlbXxPYmplY3R9IGl0ZW0gVGhlIExvYWRJdGVtIHRoYXQgYSBMb2FkUXVldWUgaXMgdHJ5aW5nIHRvIGxvYWQuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSBsb2FkZXIgY2FuIGxvYWQgdGhlIGl0ZW0uXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuY2FuTG9hZEl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHJldHVybiBpdGVtLnR5cGUgPT0gY3JlYXRlanMuVHlwZXMuU09VTkQ7XG5cdH07XG5cblx0Ly8gcHJvdGVjdGVkIG1ldGhvZHNcblx0cC5fY3JlYXRlVGFnID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdHZhciB0YWcgPSBjcmVhdGVqcy5FbGVtZW50cy5hdWRpbygpO1xuXHRcdHRhZy5hdXRvcGxheSA9IGZhbHNlO1xuXHRcdHRhZy5wcmVsb2FkID0gXCJub25lXCI7XG5cblx0XHQvL0xNOiBGaXJlZm94IGZhaWxzIHdoZW4gdGhpcyB0aGUgcHJlbG9hZD1cIm5vbmVcIiBmb3Igb3RoZXIgdGFncywgYnV0IGl0IG5lZWRzIHRvIGJlIFwibm9uZVwiIHRvIGVuc3VyZSBQcmVsb2FkSlMgd29ya3MuXG5cdFx0dGFnLnNyYyA9IHNyYztcblx0XHRyZXR1cm4gdGFnO1xuXHR9O1xuXG5cdGNyZWF0ZWpzLlNvdW5kTG9hZGVyID0gY3JlYXRlanMucHJvbW90ZShTb3VuZExvYWRlciwgXCJBYnN0cmFjdE1lZGlhTG9hZGVyXCIpO1xuXG59KCkpO1xuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gQXVkaW9TcHJpdGUuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbi8vICBOT1RFIHRoaXMgaXMgXCJDbGFzc1wiIGlzIHB1cmVseSB0byBkb2N1bWVudCBhdWRpb1Nwcml0ZSBTZXR1cCBhbmQgdXNhZ2UuXG5cblxuLyoqXG4gKiA8c3Ryb25nPk5vdGU6IEF1ZGlvU3ByaXRlIGlzIG5vdCBhIGNsYXNzLCBidXQgaXRzIHVzYWdlIGlzIGVhc2lseSBsb3N0IGluIHRoZSBkb2N1bWVudGF0aW9uLCBzbyBpdCBoYXMgYmVlbiBjYWxsZWRcbiAqIG91dCBoZXJlIGZvciBxdWljayByZWZlcmVuY2UuPC9zdHJvbmc+XG4gKlxuICogQXVkaW8gc3ByaXRlcyBhcmUgbXVjaCBsaWtlIENTUyBzcHJpdGVzIG9yIGltYWdlIHNwcml0ZSBzaGVldHM6IG11bHRpcGxlIGF1ZGlvIGFzc2V0cyBncm91cGVkIGludG8gYSBzaW5nbGUgZmlsZS5cbiAqIEF1ZGlvIHNwcml0ZXMgd29yayBhcm91bmQgbGltaXRhdGlvbnMgaW4gY2VydGFpbiBicm93c2Vycywgd2hlcmUgb25seSBhIHNpbmdsZSBzb3VuZCBjYW4gYmUgbG9hZGVkIGFuZCBwbGF5ZWQgYXQgYVxuICogdGltZS4gV2UgcmVjb21tZW5kIGF0IGxlYXN0IDMwMG1zIG9mIHNpbGVuY2UgYmV0d2VlbiBhdWRpbyBjbGlwcyB0byBkZWFsIHdpdGggSFRNTCBhdWRpbyB0YWcgaW5hY2N1cmFjeSwgYW5kIHRvIHByZXZlbnRcbiAqIGFjY2lkZW50YWxseSBwbGF5aW5nIGJpdHMgb2YgdGhlIG5laWdoYm91cmluZyBjbGlwcy5cbiAqXG4gKiA8c3Ryb25nPkJlbmVmaXRzIG9mIEF1ZGlvIFNwcml0ZXM6PC9zdHJvbmc+XG4gKiA8dWw+XG4gKiAgICAgPGxpPk1vcmUgcm9idXN0IHN1cHBvcnQgZm9yIG9sZGVyIGJyb3dzZXJzIGFuZCBkZXZpY2VzIHRoYXQgb25seSBhbGxvdyBhIHNpbmdsZSBhdWRpbyBpbnN0YW5jZSwgc3VjaCBhcyBpT1MgNS48L2xpPlxuICogICAgIDxsaT5UaGV5IHByb3ZpZGUgYSB3b3JrIGFyb3VuZCBmb3IgdGhlIEludGVybmV0IEV4cGxvcmVyIDkgYXVkaW8gdGFnIGxpbWl0LCB3aGljaCByZXN0cmljdHMgaG93IG1hbnkgZGlmZmVyZW50XG4gKiAgICAgc291bmRzIHRoYXQgY291bGQgYmUgbG9hZGVkIGF0IG9uY2UuPC9saT5cbiAqICAgICA8bGk+RmFzdGVyIGxvYWRpbmcgYnkgb25seSByZXF1aXJpbmcgYSBzaW5nbGUgbmV0d29yayByZXF1ZXN0IGZvciBzZXZlcmFsIHNvdW5kcywgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlc1xuICogd2hlcmUgdGhlIG5ldHdvcmsgcm91bmQgdHJpcCBmb3IgZWFjaCBmaWxlIGNhbiBhZGQgc2lnbmlmaWNhbnQgbGF0ZW5jeS48L2xpPlxuICogPC91bD5cbiAqXG4gKiA8c3Ryb25nPkRyYXdiYWNrcyBvZiBBdWRpbyBTcHJpdGVzPC9zdHJvbmc+XG4gKiA8dWw+XG4gKiAgICAgPGxpPk5vIGd1YXJhbnRlZSBvZiBzbW9vdGggbG9vcGluZyB3aGVuIHVzaW5nIEhUTUwgb3IgRmxhc2ggYXVkaW8uIElmIHlvdSBoYXZlIGEgdHJhY2sgdGhhdCBuZWVkcyB0byBsb29wXG4gKiBcdFx0c21vb3RobHkgYW5kIHlvdSBhcmUgc3VwcG9ydGluZyBub24td2ViIGF1ZGlvIGJyb3dzZXJzLCBkbyBub3QgdXNlIGF1ZGlvIHNwcml0ZXMgZm9yIHRoYXQgc291bmQgaWYgeW91IGNhbiBhdm9pZFxuICogXHRcdGl0LjwvbGk+XG4gKiAgICAgPGxpPk5vIGd1YXJhbnRlZSB0aGF0IEhUTUwgYXVkaW8gd2lsbCBwbGF5IGJhY2sgaW1tZWRpYXRlbHksIGVzcGVjaWFsbHkgdGhlIGZpcnN0IHRpbWUuIEluIHNvbWUgYnJvd3NlcnNcbiAqICAgICAoQ2hyb21lISksIEhUTUwgYXVkaW8gd2lsbCBvbmx5IGxvYWQgZW5vdWdoIHRvIHBsYXkgdGhyb3VnaCBhdCB0aGUgY3VycmVudCBkb3dubG9hZCBzcGVlZCDigJMgc28gd2UgcmVseSBvbiB0aGVcbiAqICAgICBgY2FucGxheXRocm91Z2hgIGV2ZW50IHRvIGRldGVybWluZSBpZiB0aGUgYXVkaW8gaXMgbG9hZGVkLiBTaW5jZSBhdWRpbyBzcHJpdGVzIG11c3QganVtcCBhaGVhZCB0byBwbGF5IHNwZWNpZmljXG4gKiAgICAgc291bmRzLCB0aGUgYXVkaW8gbWF5IG5vdCB5ZXQgaGF2ZSBkb3dubG9hZGVkIGZ1bGx5LjwvbGk+XG4gKiAgICAgPGxpPkF1ZGlvIHNwcml0ZXMgc2hhcmUgdGhlIHNhbWUgY29yZSBzb3VyY2UsIHNvIGlmIHlvdSBoYXZlIGEgc3ByaXRlIHdpdGggNSBzb3VuZHMgYW5kIGFyZSBsaW1pdGVkIHRvIDJcbiAqIFx0XHRjb25jdXJyZW50bHkgcGxheWluZyBpbnN0YW5jZXMsIHlvdSBjYW4gb25seSBwbGF5IDIgb2YgdGhlIHNvdW5kcyBhdCB0aGUgc2FtZSB0aW1lLjwvbGk+XG4gKiA8L3VsPlxuICpcbiAqIDxoND5FeGFtcGxlPC9oND5cbiAqXG4gKlx0XHRjcmVhdGVqcy5Tb3VuZC5pbml0aWFsaXplRGVmYXVsdFBsdWdpbnMoKTtcbiAqXHRcdHZhciBhc3NldHNQYXRoID0gXCIuL2Fzc2V0cy9cIjtcbiAqXHRcdHZhciBzb3VuZHMgPSBbe1xuICpcdFx0XHRzcmM6XCJNeUF1ZGlvU3ByaXRlLm9nZ1wiLCBkYXRhOiB7XG4gKlx0XHRcdFx0YXVkaW9TcHJpdGU6IFtcbiAqXHRcdFx0XHRcdHtpZDpcInNvdW5kMVwiLCBzdGFydFRpbWU6MCwgZHVyYXRpb246NTAwfSxcbiAqXHRcdFx0XHRcdHtpZDpcInNvdW5kMlwiLCBzdGFydFRpbWU6MTAwMCwgZHVyYXRpb246NDAwfSxcbiAqXHRcdFx0XHRcdHtpZDpcInNvdW5kM1wiLCBzdGFydFRpbWU6MTcwMCwgZHVyYXRpb246IDEwMDB9XG4gKlx0XHRcdFx0XX1cbiAqXHRcdFx0fVxuICpcdFx0XTtcbiAqXHRcdGNyZWF0ZWpzLlNvdW5kLmFsdGVybmF0ZUV4dGVuc2lvbnMgPSBbXCJtcDNcIl07XG4gKlx0XHRjcmVhdGVqcy5Tb3VuZC5vbihcImZpbGVsb2FkXCIsIGxvYWRTb3VuZCk7XG4gKlx0XHRjcmVhdGVqcy5Tb3VuZC5yZWdpc3RlclNvdW5kcyhzb3VuZHMsIGFzc2V0c1BhdGgpO1xuICpcdFx0Ly8gYWZ0ZXIgbG9hZCBpcyBjb21wbGV0ZVxuICpcdFx0Y3JlYXRlanMuU291bmQucGxheShcInNvdW5kMlwiKTtcbiAqXG4gKiBZb3UgY2FuIGFsc28gY3JlYXRlIGF1ZGlvIHNwcml0ZXMgb24gdGhlIGZseSBieSBzZXR0aW5nIHRoZSBzdGFydFRpbWUgYW5kIGR1cmF0aW9uIHdoZW4gY3JlYXRpbmcgYW4gbmV3IEFic3RyYWN0U291bmRJbnN0YW5jZS5cbiAqXG4gKiBcdFx0Y3JlYXRlanMuU291bmQucGxheShcIk15QXVkaW9TcHJpdGVcIiwge3N0YXJ0VGltZTogMTAwMCwgZHVyYXRpb246IDQwMH0pO1xuICpcbiAqIFRoZSBleGNlbGxlbnQgQ3JlYXRlSlMgY29tbXVuaXR5IGhhcyBjcmVhdGVkIGEgdG9vbCB0byBjcmVhdGUgYXVkaW8gc3ByaXRlcywgYXZhaWxhYmxlIGF0XG4gKiA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL3RvbmlzdGlpZ2kvYXVkaW9zcHJpdGVcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2dpdGh1Yi5jb20vdG9uaXN0aWlnaS9hdWRpb3Nwcml0ZTwvYT4sXG4gKiBhcyB3ZWxsIGFzIGEgPGEgaHJlZj1cImh0dHA6Ly9qc2ZpZGRsZS5uZXQvYmhhcmF0X2JhdHR1L2c4ZkZQLzEyL1wiIHRhcmdldD1cIl9ibGFua1wiPmpzZmlkZGxlPC9hPiB0byBjb252ZXJ0IHRoZSBvdXRwdXRcbiAqIHRvIFNvdW5kSlMgZm9ybWF0LlxuICpcbiAqIEBjbGFzcyBBdWRpb1Nwcml0ZVxuICogQHNpbmNlIDAuNi4wXG4gKi9cblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFBsYXlQcm9wc0NvbmZpZy5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblx0LyoqXG5cdCAqIEEgY2xhc3MgdG8gc3RvcmUgdGhlIG9wdGlvbmFsIHBsYXkgcHJvcGVydGllcyBwYXNzZWQgaW4ge3sjY3Jvc3NMaW5rIFwiU291bmQvcGxheVwifX17ey9jcm9zc0xpbmt9fSBhbmRcblx0ICoge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL3BsYXlcIn19e3svY3Jvc3NMaW5rfX0gY2FsbHMuXG5cdCAqXG5cdCAqIE9wdGlvbmFsIFBsYXkgUHJvcGVydGllcyBJbmNsdWRlOlxuXHQgKiA8dWw+XG5cdCAqIDxsaT5pbnRlcnJ1cHQgLSBIb3cgdG8gaW50ZXJydXB0IGFueSBjdXJyZW50bHkgcGxheWluZyBpbnN0YW5jZXMgb2YgYXVkaW8gd2l0aCB0aGUgc2FtZSBzb3VyY2UsXG5cdCAqIGlmIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgdGhlIHNvdW5kIGFyZSBhbHJlYWR5IHBsYXlpbmcuIFZhbHVlcyBhcmUgZGVmaW5lZCBhcyA8Y29kZT5JTlRFUlJVUFRfVFlQRTwvY29kZT5cblx0ICogY29uc3RhbnRzIG9uIHRoZSBTb3VuZCBjbGFzcywgd2l0aCB0aGUgZGVmYXVsdCBkZWZpbmVkIGJ5IHt7I2Nyb3NzTGluayBcIlNvdW5kL2RlZmF1bHRJbnRlcnJ1cHRCZWhhdmlvcjpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fS48L2xpPlxuXHQgKiA8bGk+ZGVsYXkgLSBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgdGhlIHN0YXJ0IG9mIGF1ZGlvIHBsYXliYWNrLCBpbiBtaWxsaXNlY29uZHMuPC9saT5cblx0ICogPGxpPm9mZnNldCAtIFRoZSBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGF1ZGlvIHRvIGJlZ2luIHBsYXliYWNrLCBpbiBtaWxsaXNlY29uZHMuPC9saT5cblx0ICogPGxpPmxvb3AgLSBIb3cgbWFueSB0aW1lcyB0aGUgYXVkaW8gbG9vcHMgd2hlbiBpdCByZWFjaGVzIHRoZSBlbmQgb2YgcGxheWJhY2suIFRoZSBkZWZhdWx0IGlzIDAgKG5vXG5cdCAqIGxvb3BzKSwgYW5kIC0xIGNhbiBiZSB1c2VkIGZvciBpbmZpbml0ZSBwbGF5YmFjay48L2xpPlxuXHQgKiA8bGk+dm9sdW1lIC0gVGhlIHZvbHVtZSBvZiB0aGUgc291bmQsIGJldHdlZW4gMCBhbmQgMS4gTm90ZSB0aGF0IHRoZSBtYXN0ZXIgdm9sdW1lIGlzIGFwcGxpZWRcblx0ICogYWdhaW5zdCB0aGUgaW5kaXZpZHVhbCB2b2x1bWUuPC9saT5cblx0ICogPGxpPnBhbiAtIFRoZSBsZWZ0LXJpZ2h0IHBhbiBvZiB0aGUgc291bmQgKGlmIHN1cHBvcnRlZCksIGJldHdlZW4gLTEgKGxlZnQpIGFuZCAxIChyaWdodCkuPC9saT5cblx0ICogPGxpPnN0YXJ0VGltZSAtIFRvIGNyZWF0ZSBhbiBhdWRpbyBzcHJpdGUgKHdpdGggZHVyYXRpb24pLCB0aGUgaW5pdGlhbCBvZmZzZXQgdG8gc3RhcnQgcGxheWJhY2sgYW5kIGxvb3AgZnJvbSwgaW4gbWlsbGlzZWNvbmRzLjwvbGk+XG5cdCAqIDxsaT5kdXJhdGlvbiAtIFRvIGNyZWF0ZSBhbiBhdWRpbyBzcHJpdGUgKHdpdGggc3RhcnRUaW1lKSwgdGhlIGFtb3VudCBvZiB0aW1lIHRvIHBsYXkgdGhlIGNsaXAgZm9yLCBpbiBtaWxsaXNlY29uZHMuPC9saT5cblx0ICogPC91bD5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiBcdHZhciBwcm9wcyA9IG5ldyBjcmVhdGVqcy5QbGF5UHJvcHNDb25maWcoKS5zZXQoe2ludGVycnVwdDogY3JlYXRlanMuU291bmQuSU5URVJSVVBUX0FOWSwgbG9vcDogLTEsIHZvbHVtZTogMC41fSlcblx0ICogXHRjcmVhdGVqcy5Tb3VuZC5wbGF5KFwibXlTb3VuZFwiLCBwcm9wcyk7XG5cdCAqIFx0Ly8gT1Jcblx0ICogXHRteVNvdW5kSW5zdGFuY2UucGxheShwcm9wcyk7XG5cdCAqXG5cdCAqIEBjbGFzcyBQbGF5UHJvcHNDb25maWdcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBzaW5jZSAwLjYuMVxuXHQgKi9cblx0Ly8gVE9ETyB0aGluayBvZiBhIGJldHRlciBuYW1lIGZvciB0aGlzIGNsYXNzXG5cdHZhciBQbGF5UHJvcHNDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4vLyBQdWJsaWMgUHJvcGVydGllc1xuXHRcdC8qKlxuXHRcdCAqIEhvdyB0byBpbnRlcnJ1cHQgYW55IGN1cnJlbnRseSBwbGF5aW5nIGluc3RhbmNlcyBvZiBhdWRpbyB3aXRoIHRoZSBzYW1lIHNvdXJjZSxcblx0XHQgKiBpZiB0aGUgbWF4aW11bSBudW1iZXIgb2YgaW5zdGFuY2VzIG9mIHRoZSBzb3VuZCBhcmUgYWxyZWFkeSBwbGF5aW5nLiBWYWx1ZXMgYXJlIGRlZmluZWQgYXNcblx0XHQgKiA8Y29kZT5JTlRFUlJVUFRfVFlQRTwvY29kZT4gY29uc3RhbnRzIG9uIHRoZSBTb3VuZCBjbGFzcywgd2l0aCB0aGUgZGVmYXVsdCBkZWZpbmVkIGJ5XG5cdFx0ICoge3sjY3Jvc3NMaW5rIFwiU291bmQvZGVmYXVsdEludGVycnVwdEJlaGF2aW9yOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319LlxuXHRcdCAqIEBwcm9wZXJ0eSBpbnRlcnJ1cHRcblx0XHQgKiBAdHlwZSB7c3RyaW5nfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmludGVycnVwdCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gZGVsYXkgdGhlIHN0YXJ0IG9mIGF1ZGlvIHBsYXliYWNrLCBpbiBtaWxsaXNlY29uZHMuXG5cdFx0ICogQHByb3BlcnR5IGRlbGF5XG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5kZWxheSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgb2Zmc2V0IGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBhdWRpbyB0byBiZWdpbiBwbGF5YmFjaywgaW4gbWlsbGlzZWNvbmRzLlxuXHRcdCAqIEBwcm9wZXJ0eSBvZmZzZXRcblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLm9mZnNldCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBIb3cgbWFueSB0aW1lcyB0aGUgYXVkaW8gbG9vcHMgd2hlbiBpdCByZWFjaGVzIHRoZSBlbmQgb2YgcGxheWJhY2suIFRoZSBkZWZhdWx0IGlzIDAgKG5vXG5cdFx0ICogbG9vcHMpLCBhbmQgLTEgY2FuIGJlIHVzZWQgZm9yIGluZmluaXRlIHBsYXliYWNrLlxuXHRcdCAqIEBwcm9wZXJ0eSBsb29wXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5sb29wID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2b2x1bWUgb2YgdGhlIHNvdW5kLCBiZXR3ZWVuIDAgYW5kIDEuIE5vdGUgdGhhdCB0aGUgbWFzdGVyIHZvbHVtZSBpcyBhcHBsaWVkXG5cdFx0ICogYWdhaW5zdCB0aGUgaW5kaXZpZHVhbCB2b2x1bWUuXG5cdFx0ICogQHByb3BlcnR5IHZvbHVtZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMudm9sdW1lID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBsZWZ0LXJpZ2h0IHBhbiBvZiB0aGUgc291bmQgKGlmIHN1cHBvcnRlZCksIGJldHdlZW4gLTEgKGxlZnQpIGFuZCAxIChyaWdodCkuXG5cdFx0ICogQHByb3BlcnR5IHBhblxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMucGFuID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gY3JlYXRlIGFuIGF1ZGlvIHNwcml0ZSAod2l0aCBkdXJhdGlvbiksIHRoZSBpbml0aWFsIG9mZnNldCB0byBzdGFydCBwbGF5YmFjayBhbmQgbG9vcCBmcm9tLCBpbiBtaWxsaXNlY29uZHMuXG5cdFx0ICogQHByb3BlcnR5IHN0YXJ0VGltZVxuXHRcdCAqIEB0eXBlIHtudW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIFVzZWQgdG8gY3JlYXRlIGFuIGF1ZGlvIHNwcml0ZSAod2l0aCBzdGFydFRpbWUpLCB0aGUgYW1vdW50IG9mIHRpbWUgdG8gcGxheSB0aGUgY2xpcCBmb3IsIGluIG1pbGxpc2Vjb25kcy5cblx0XHQgKiBAcHJvcGVydHkgZHVyYXRpb25cblx0XHQgKiBAdHlwZSB7bnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLmR1cmF0aW9uID0gbnVsbDtcblx0fTtcblx0dmFyIHAgPSBQbGF5UHJvcHNDb25maWcucHJvdG90eXBlID0ge307XG5cdHZhciBzID0gUGxheVByb3BzQ29uZmlnO1xuXG5cbi8vIFN0YXRpYyBNZXRob2RzXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgUGxheVByb3BzQ29uZmlnIGZyb20gYW5vdGhlciBQbGF5UHJvcHNDb25maWcgb3IgYW4gT2JqZWN0LlxuXHQgKlxuXHQgKiBAbWV0aG9kIGNyZWF0ZVxuXHQgKiBAcGFyYW0ge1BsYXlQcm9wc0NvbmZpZ3xPYmplY3R9IHZhbHVlIFRoZSBwbGF5IHByb3BlcnRpZXNcblx0ICogQHJldHVybnMge1BsYXlQcm9wc0NvbmZpZ31cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5jcmVhdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0Ly8gSGFuZGxlIHRoZSBvbGQgQVBJIGdyYWNlZnVsbHkuXG5cdFx0XHRjb25zb2xlICYmIChjb25zb2xlLndhcm4gfHwgY29uc29sZS5sb2cpKFwiRGVwcmVjYXRlZCBiZWhhdmlvdXIuIFNvdW5kLnBsYXkgdGFrZXMgYSBjb25maWd1cmF0aW9uIG9iamVjdCBpbnN0ZWFkIG9mIGluZGl2aWR1YWwgYXJndW1lbnRzLiBTZWUgZG9jcyBmb3IgaW5mby5cIik7XG5cdFx0XHRyZXR1cm4gbmV3IGNyZWF0ZWpzLlBsYXlQcm9wc0NvbmZpZygpLnNldCh7aW50ZXJydXB0OnZhbHVlfSk7XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlIGluc3RhbmNlb2YgcyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0cmV0dXJuIG5ldyBjcmVhdGVqcy5QbGF5UHJvcHNDb25maWcoKS5zZXQodmFsdWUpO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiUGxheVByb3BzIGNvbmZpZ3VyYXRpb24gbm90IHJlY29nbml6ZWQuXCIpO1xuXHRcdH1cblx0fTtcblxuLy8gUHVibGljIE1ldGhvZHNcblx0LyoqXG5cdCAqIFByb3ZpZGVzIGEgY2hhaW5hYmxlIHNob3J0Y3V0IG1ldGhvZCBmb3Igc2V0dGluZyBhIG51bWJlciBvZiBwcm9wZXJ0aWVzIG9uIHRoZSBpbnN0YW5jZS5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiAgICAgIHZhciBQbGF5UHJvcHNDb25maWcgPSBuZXcgY3JlYXRlanMuUGxheVByb3BzQ29uZmlnKCkuc2V0KHtsb29wOi0xLCB2b2x1bWU6MC43fSk7XG5cdCAqXG5cdCAqIEBtZXRob2Qgc2V0XG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBBIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyB0byBjb3B5IHRvIHRoZSBQbGF5UHJvcHNDb25maWcgaW5zdGFuY2UuXG5cdCAqIEByZXR1cm4ge1BsYXlQcm9wc0NvbmZpZ30gUmV0dXJucyB0aGUgaW5zdGFuY2UgdGhlIG1ldGhvZCBpcyBjYWxsZWQgb24gKHVzZWZ1bCBmb3IgY2hhaW5pbmcgY2FsbHMuKVxuXHQqL1xuXHRwLnNldCA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdFx0aWYgKHByb3BzICE9IG51bGwpIHtcblx0XHRcdGZvciAodmFyIG4gaW4gcHJvcHMpIHsgdGhpc1tuXSA9IHByb3BzW25dOyB9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gXCJbUGxheVByb3BzQ29uZmlnXVwiO1xuXHR9O1xuXG5cdGNyZWF0ZWpzLlBsYXlQcm9wc0NvbmZpZyA9IHM7XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBTb3VuZC5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG5cblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0LyoqXG5cdCAqIFRoZSBTb3VuZCBjbGFzcyBpcyB0aGUgcHVibGljIEFQSSBmb3IgY3JlYXRpbmcgc291bmRzLCBjb250cm9sbGluZyB0aGUgb3ZlcmFsbCBzb3VuZCBsZXZlbHMsIGFuZCBtYW5hZ2luZyBwbHVnaW5zLlxuXHQgKiBBbGwgU291bmQgQVBJcyBvbiB0aGlzIGNsYXNzIGFyZSBzdGF0aWMuXG5cdCAqXG5cdCAqIDxiPlJlZ2lzdGVyaW5nIGFuZCBQcmVsb2FkaW5nPC9iPjxiciAvPlxuXHQgKiBCZWZvcmUgeW91IGNhbiBwbGF5IGEgc291bmQsIGl0IDxiPm11c3Q8L2I+IGJlIHJlZ2lzdGVyZWQuIFlvdSBjYW4gZG8gdGhpcyB3aXRoIHt7I2Nyb3NzTGluayBcIlNvdW5kL3JlZ2lzdGVyU291bmRcIn19e3svY3Jvc3NMaW5rfX0sXG5cdCAqIG9yIHJlZ2lzdGVyIG11bHRpcGxlIHNvdW5kcyB1c2luZyB7eyNjcm9zc0xpbmsgXCJTb3VuZC9yZWdpc3RlclNvdW5kc1wifX17ey9jcm9zc0xpbmt9fS4gSWYgeW91IGRvbid0IHJlZ2lzdGVyIGFcblx0ICogc291bmQgcHJpb3IgdG8gYXR0ZW1wdGluZyB0byBwbGF5IGl0IHVzaW5nIHt7I2Nyb3NzTGluayBcIlNvdW5kL3BsYXlcIn19e3svY3Jvc3NMaW5rfX0gb3IgY3JlYXRlIGl0IHVzaW5nIHt7I2Nyb3NzTGluayBcIlNvdW5kL2NyZWF0ZUluc3RhbmNlXCJ9fXt7L2Nyb3NzTGlua319LFxuXHQgKiB0aGUgc291bmQgc291cmNlIHdpbGwgYmUgYXV0b21hdGljYWxseSByZWdpc3RlcmVkIGJ1dCBwbGF5YmFjayB3aWxsIGZhaWwgYXMgdGhlIHNvdXJjZSB3aWxsIG5vdCBiZSByZWFkeS4gSWYgeW91IHVzZVxuXHQgKiA8YSBocmVmPVwiaHR0cDovL3ByZWxvYWRqcy5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5QcmVsb2FkSlM8L2E+LCByZWdpc3RyYXRpb24gaXMgaGFuZGxlZCBmb3IgeW91IHdoZW4gdGhlIHNvdW5kIGlzXG5cdCAqIHByZWxvYWRlZC4gSXQgaXMgcmVjb21tZW5kZWQgdG8gcHJlbG9hZCBzb3VuZHMgZWl0aGVyIGludGVybmFsbHkgdXNpbmcgdGhlIHJlZ2lzdGVyIGZ1bmN0aW9ucyBvciBleHRlcm5hbGx5IHVzaW5nXG5cdCAqIFByZWxvYWRKUyBzbyB0aGV5IGFyZSByZWFkeSB3aGVuIHlvdSB3YW50IHRvIHVzZSB0aGVtLlxuXHQgKlxuXHQgKiA8Yj5QbGF5YmFjazwvYj48YnIgLz5cblx0ICogVG8gcGxheSBhIHNvdW5kIG9uY2UgaXQncyBiZWVuIHJlZ2lzdGVyZWQgYW5kIHByZWxvYWRlZCwgdXNlIHRoZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9wbGF5XCJ9fXt7L2Nyb3NzTGlua319IG1ldGhvZC5cblx0ICogVGhpcyBtZXRob2QgcmV0dXJucyBhIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZVwifX17ey9jcm9zc0xpbmt9fSB3aGljaCBjYW4gYmUgcGF1c2VkLCByZXN1bWVkLCBtdXRlZCwgZXRjLlxuXHQgKiBQbGVhc2Ugc2VlIHRoZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2VcIn19e3svY3Jvc3NMaW5rfX0gZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBvbiB0aGUgaW5zdGFuY2UgY29udHJvbCBBUElzLlxuXHQgKlxuXHQgKiA8Yj5QbHVnaW5zPC9iPjxiciAvPlxuXHQgKiBCeSBkZWZhdWx0LCB0aGUge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0gb3IgdGhlIHt7I2Nyb3NzTGluayBcIkhUTUxBdWRpb1BsdWdpblwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBhcmUgdXNlZCAod2hlbiBhdmFpbGFibGUpLCBhbHRob3VnaCBkZXZlbG9wZXJzIGNhbiBjaGFuZ2UgcGx1Z2luIHByaW9yaXR5IG9yIGFkZCBuZXcgcGx1Z2lucyAoc3VjaCBhcyB0aGVcblx0ICogcHJvdmlkZWQge3sjY3Jvc3NMaW5rIFwiRmxhc2hBdWRpb1BsdWdpblwifX17ey9jcm9zc0xpbmt9fSkuIFBsZWFzZSBzZWUgdGhlIHt7I2Nyb3NzTGluayBcIlNvdW5kXCJ9fXt7L2Nyb3NzTGlua319IEFQSVxuXHQgKiBtZXRob2RzIGZvciBtb3JlIG9uIHRoZSBwbGF5YmFjayBhbmQgcGx1Z2luIEFQSXMuIFRvIGluc3RhbGwgcGx1Z2lucywgb3Igc3BlY2lmeSBhIGRpZmZlcmVudCBwbHVnaW4gb3JkZXIsIHNlZVxuXHQgKiB7eyNjcm9zc0xpbmsgXCJTb3VuZC9pbnN0YWxsUGx1Z2luc1wifX17ey9jcm9zc0xpbmt9fS5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiAgICAgIGNyZWF0ZWpzLkZsYXNoQXVkaW9QbHVnaW4uc3dmUGF0aCA9IFwiLi4vc3JjL3NvdW5kanMvZmxhc2hhdWRpb1wiO1xuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLnJlZ2lzdGVyUGx1Z2lucyhbY3JlYXRlanMuV2ViQXVkaW9QbHVnaW4sIGNyZWF0ZWpzLkZsYXNoQXVkaW9QbHVnaW5dKTtcblx0ICogICAgICBjcmVhdGVqcy5Tb3VuZC5hbHRlcm5hdGVFeHRlbnNpb25zID0gW1wibXAzXCJdO1xuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLm9uKFwiZmlsZWxvYWRcIiwgdGhpcy5sb2FkSGFuZGxlciwgdGhpcyk7XG5cdCAqICAgICAgY3JlYXRlanMuU291bmQucmVnaXN0ZXJTb3VuZChcInBhdGgvdG8vbXlTb3VuZC5vZ2dcIiwgXCJzb3VuZFwiKTtcblx0ICogICAgICBmdW5jdGlvbiBsb2FkSGFuZGxlcihldmVudCkge1xuICAgICAqICAgICAgICAgIC8vIFRoaXMgaXMgZmlyZWQgZm9yIGVhY2ggc291bmQgdGhhdCBpcyByZWdpc3RlcmVkLlxuICAgICAqICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZWpzLlNvdW5kLnBsYXkoXCJzb3VuZFwiKTsgIC8vIHBsYXkgdXNpbmcgaWQuICBDb3VsZCBhbHNvIHVzZSBmdWxsIHNvdXJjZSBwYXRoIG9yIGV2ZW50LnNyYy5cbiAgICAgKiAgICAgICAgICBpbnN0YW5jZS5vbihcImNvbXBsZXRlXCIsIHRoaXMuaGFuZGxlQ29tcGxldGUsIHRoaXMpO1xuICAgICAqICAgICAgICAgIGluc3RhbmNlLnZvbHVtZSA9IDAuNTtcblx0ICogICAgICB9XG5cdCAqXG5cdCAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb25jdXJyZW50bHkgcGxheWluZyBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgc291bmQgY2FuIGJlIHNwZWNpZmllZCBpbiB0aGUgXCJkYXRhXCIgYXJndW1lbnRcblx0ICogb2Yge3sjY3Jvc3NMaW5rIFwiU291bmQvcmVnaXN0ZXJTb3VuZFwifX17ey9jcm9zc0xpbmt9fS4gIE5vdGUgdGhhdCBpZiBub3Qgc3BlY2lmaWVkLCB0aGUgYWN0aXZlIHBsdWdpbiB3aWxsIGFwcGx5XG5cdCAqIGEgZGVmYXVsdCBsaW1pdC4gIEN1cnJlbnRseSBIVE1MQXVkaW9QbHVnaW4gc2V0cyBhIGRlZmF1bHQgbGltaXQgb2YgMiwgd2hpbGUgV2ViQXVkaW9QbHVnaW4gYW5kIEZsYXNoQXVkaW9QbHVnaW4gc2V0IGFcblx0ICogZGVmYXVsdCBsaW1pdCBvZiAxMDAuXG5cdCAqXG5cdCAqICAgICAgY3JlYXRlanMuU291bmQucmVnaXN0ZXJTb3VuZChcInNvdW5kLm1wM1wiLCBcInNvdW5kSWRcIiwgNCk7XG5cdCAqXG5cdCAqIFNvdW5kIGNhbiBiZSB1c2VkIGFzIGEgcGx1Z2luIHdpdGggUHJlbG9hZEpTIHRvIGhlbHAgcHJlbG9hZCBhdWRpbyBwcm9wZXJseS4gQXVkaW8gcHJlbG9hZGVkIHdpdGggUHJlbG9hZEpTIGlzXG5cdCAqIGF1dG9tYXRpY2FsbHkgcmVnaXN0ZXJlZCB3aXRoIHRoZSBTb3VuZCBjbGFzcy4gV2hlbiBhdWRpbyBpcyBub3QgcHJlbG9hZGVkLCBTb3VuZCB3aWxsIGRvIGFuIGF1dG9tYXRpYyBpbnRlcm5hbFxuXHQgKiBsb2FkLiBBcyBhIHJlc3VsdCwgaXQgbWF5IGZhaWwgdG8gcGxheSB0aGUgZmlyc3QgdGltZSBwbGF5IGlzIGNhbGxlZCBpZiB0aGUgYXVkaW8gaXMgbm90IGZpbmlzaGVkIGxvYWRpbmcuIFVzZVxuXHQgKiB0aGUge3sjY3Jvc3NMaW5rIFwiU291bmQvZmlsZWxvYWQ6ZXZlbnRcIn19e3svY3Jvc3NMaW5rfX0gZXZlbnQgdG8gZGV0ZXJtaW5lIHdoZW4gYSBzb3VuZCBoYXMgZmluaXNoZWQgaW50ZXJuYWxseVxuXHQgKiBwcmVsb2FkaW5nLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IGFsbCBhdWRpbyBpcyBwcmVsb2FkZWQgYmVmb3JlIGl0IGlzIHBsYXllZC5cblx0ICpcblx0ICogICAgICB2YXIgcXVldWUgPSBuZXcgY3JlYXRlanMuTG9hZFF1ZXVlKCk7XG5cdCAqXHRcdHF1ZXVlLmluc3RhbGxQbHVnaW4oY3JlYXRlanMuU291bmQpO1xuXHQgKlxuXHQgKiA8Yj5BdWRpbyBTcHJpdGVzPC9iPjxiciAvPlxuXHQgKiBTb3VuZEpTIGhhcyBhZGRlZCBzdXBwb3J0IGZvciB7eyNjcm9zc0xpbmsgXCJBdWRpb1Nwcml0ZVwifX17ey9jcm9zc0xpbmt9fSwgYXZhaWxhYmxlIGFzIG9mIHZlcnNpb24gMC42LjAuXG5cdCAqIEZvciB0aG9zZSB1bmZhbWlsaWFyIHdpdGggYXVkaW8gc3ByaXRlcywgdGhleSBhcmUgbXVjaCBsaWtlIENTUyBzcHJpdGVzIG9yIHNwcml0ZSBzaGVldHM6IG11bHRpcGxlIGF1ZGlvIGFzc2V0c1xuXHQgKiBncm91cGVkIGludG8gYSBzaW5nbGUgZmlsZS5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKlx0XHR2YXIgYXNzZXRzUGF0aCA9IFwiLi9hc3NldHMvXCI7XG5cdCAqXHRcdHZhciBzb3VuZHMgPSBbe1xuXHQgKlx0XHRcdHNyYzpcIk15QXVkaW9TcHJpdGUub2dnXCIsIGRhdGE6IHtcblx0ICpcdFx0XHRcdGF1ZGlvU3ByaXRlOiBbXG5cdCAqXHRcdFx0XHRcdHtpZDpcInNvdW5kMVwiLCBzdGFydFRpbWU6MCwgZHVyYXRpb246NTAwfSxcblx0ICpcdFx0XHRcdFx0e2lkOlwic291bmQyXCIsIHN0YXJ0VGltZToxMDAwLCBkdXJhdGlvbjo0MDB9LFxuXHQgKlx0XHRcdFx0XHR7aWQ6XCJzb3VuZDNcIiwgc3RhcnRUaW1lOjE3MDAsIGR1cmF0aW9uOiAxMDAwfVxuXHQgKlx0XHRcdFx0XX1cbiBcdCAqXHRcdFx0fVxuXHQgKlx0XHRdO1xuXHQgKlx0XHRjcmVhdGVqcy5Tb3VuZC5hbHRlcm5hdGVFeHRlbnNpb25zID0gW1wibXAzXCJdO1xuXHQgKlx0XHRjcmVhdGVqcy5Tb3VuZC5vbihcImZpbGVsb2FkXCIsIGxvYWRTb3VuZCk7XG5cdCAqXHRcdGNyZWF0ZWpzLlNvdW5kLnJlZ2lzdGVyU291bmRzKHNvdW5kcywgYXNzZXRzUGF0aCk7XG5cdCAqXHRcdC8vIGFmdGVyIGxvYWQgaXMgY29tcGxldGVcblx0ICpcdFx0Y3JlYXRlanMuU291bmQucGxheShcInNvdW5kMlwiKTtcblx0ICpcblx0ICogPGI+TW9iaWxlIFBsYXliYWNrPC9iPjxiciAvPlxuXHQgKiBEZXZpY2VzIHJ1bm5pbmcgaU9TIHJlcXVpcmUgdGhlIFdlYkF1ZGlvIGNvbnRleHQgdG8gYmUgXCJ1bmxvY2tlZFwiIGJ5IHBsYXlpbmcgYXQgbGVhc3Qgb25lIHNvdW5kIGluc2lkZSBvZiBhIHVzZXItXG5cdCAqIGluaXRpYXRlZCBldmVudCAoc3VjaCBhcyB0b3VjaC9jbGljaykuIEVhcmxpZXIgdmVyc2lvbnMgb2YgU291bmRKUyBpbmNsdWRlZCBhIFwiTW9iaWxlU2FmZVwiIHNhbXBsZSwgYnV0IHRoaXMgaXMgbm9cblx0ICogbG9uZ2VyIG5lY2Vzc2FyeSBhcyBvZiBTb3VuZEpTIDAuNi4yLlxuXHQgKiA8dWw+XG5cdCAqICAgICA8bGk+XG5cdCAqICAgICAgICAgSW4gU291bmRKUyAwLjQuMSBhbmQgYWJvdmUsIHlvdSBjYW4gZWl0aGVyIGluaXRpYWxpemUgcGx1Z2lucyBvciB1c2UgdGhlIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luL3BsYXlFbXB0eVNvdW5kXCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqICAgICAgICAgbWV0aG9kIGluIHRoZSBjYWxsIHN0YWNrIG9mIGEgdXNlciBpbnB1dCBldmVudCB0byBtYW51YWxseSB1bmxvY2sgdGhlIGF1ZGlvIGNvbnRleHQuXG5cdCAqICAgICA8L2xpPlxuXHQgKiAgICAgPGxpPlxuXHQgKiAgICAgICAgIEluIFNvdW5kSlMgMC42LjIgYW5kIGFib3ZlLCBTb3VuZEpTIHdpbGwgYXV0b21hdGljYWxseSBsaXN0ZW4gZm9yIHRoZSBmaXJzdCBkb2N1bWVudC1sZXZlbCBcIm1vdXNlZG93blwiXG5cdCAqICAgICAgICAgYW5kIFwidG91Y2hlbmRcIiBldmVudCwgYW5kIHVubG9jayBXZWJBdWRpby4gVGhpcyB3aWxsIGNvbnRpbnVlIHRvIGNoZWNrIHRoZXNlIGV2ZW50cyB1bnRpbCB0aGUgV2ViQXVkaW9cblx0ICogICAgICAgICBjb250ZXh0IGJlY29tZXMgXCJ1bmxvY2tlZFwiIChjaGFuZ2VzIGZyb20gXCJzdXNwZW5kZWRcIiB0byBcInJ1bm5pbmdcIilcblx0ICogICAgIDwvbGk+XG5cdCAqICAgICA8bGk+XG5cdCAqICAgICAgICAgQm90aCB0aGUgXCJtb3VzZWRvd25cIiBhbmQgXCJ0b3VjaGVuZFwiIGV2ZW50cyBjYW4gYmUgdXNlZCB0byB1bmxvY2sgYXVkaW8gaW4gaU9TOSssIHRoZSBcInRvdWNoc3RhcnRcIiBldmVudFxuXHQgKiAgICAgICAgIHdpbGwgd29yayBpbiBpT1M4IGFuZCBiZWxvdy4gVGhlIFwidG91Y2hlbmRcIiBldmVudCB3aWxsIG9ubHkgd29yayBpbiBpT1M5IHdoZW4gdGhlIGdlc3R1cmUgaXMgaW50ZXJwcmV0ZWRcblx0ICogICAgICAgICBhcyBhIFwiY2xpY2tcIiwgc28gaWYgdGhlIHVzZXIgbG9uZy1wcmVzc2VzIHRoZSBidXR0b24sIGl0IHdpbGwgbm8gbG9uZ2VyIHdvcmsuXG5cdCAqICAgICA8L2xpPlxuXHQgKiAgICAgPGxpPlxuXHQgKiAgICAgICAgIFdoZW4gdXNpbmcgdGhlIDxhIGhyZWY9XCJodHRwOi8vd3d3LmNyZWF0ZWpzLmNvbS9kb2NzL2Vhc2VsanMvY2xhc3Nlcy9Ub3VjaC5odG1sXCI+RWFzZWxKUyBUb3VjaCBjbGFzczwvYT4sXG5cdCAqICAgICAgICAgdGhlIFwibW91c2Vkb3duXCIgZXZlbnQgd2lsbCBub3QgZmlyZSB3aGVuIGEgY2FudmFzIGlzIGNsaWNrZWQsIHNpbmNlIE1vdXNlRXZlbnRzIGFyZSBwcmV2ZW50ZWQsIHRvIGVuc3VyZVxuXHQgKiAgICAgICAgIG9ubHkgdG91Y2ggZXZlbnRzIGZpcmUuIFRvIGdldCBhcm91bmQgdGhpcywgeW91IGNhbiBlaXRoZXIgcmVseSBvbiBcInRvdWNoZW5kXCIsIG9yOlxuXHQgKiAgICAgICAgIDxvbD5cblx0ICogICAgICAgICAgICAgPGxpPlNldCB0aGUgYGFsbG93RGVmYXVsdGAgcHJvcGVydHkgb24gdGhlIFRvdWNoIGNsYXNzIGNvbnN0cnVjdG9yIHRvIGB0cnVlYCAoZGVmYXVsdHMgdG8gYGZhbHNlYCkuPC9saT5cblx0ICogICAgICAgICAgICAgPGxpPlNldCB0aGUgYHByZXZlbnRTZWxlY3Rpb25gIHByb3BlcnR5IG9uIHRoZSBFYXNlbEpTIGBTdGFnZWAgdG8gYGZhbHNlYC48L2xpPlxuXHQgKiAgICAgICAgIDwvb2w+XG5cdCAqICAgICAgICAgVGhlc2Ugc2V0dGluZ3MgbWF5IGNoYW5nZSBob3cgeW91ciBhcHBsaWNhdGlvbiBiZWhhdmVzLCBhbmQgYXJlIG5vdCByZWNvbW1lbmRlZC5cblx0ICogICAgIDwvbGk+XG5cdCAqIDwvdWw+XG5cdCAqXG5cdCAqIDxiPkxvYWRpbmcgQWx0ZXJuYXRlIFBhdGhzIGFuZCBFeHRlbnNpb24tbGVzcyBGaWxlczwvYj48YnIgLz5cblx0ICogU291bmRKUyBzdXBwb3J0cyBsb2FkaW5nIGFsdGVybmF0ZSBwYXRocyBhbmQgZXh0ZW5zaW9uLWxlc3MgZmlsZXMgYnkgcGFzc2luZyBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIHN0cmluZyBmb3Jcblx0ICogdGhlIGBzcmNgIHByb3BlcnR5LCB3aGljaCBpcyBhIGhhc2ggdXNpbmcgdGhlIGZvcm1hdCBge2V4dGVuc2lvbjpcInBhdGhcIiwgZXh0ZW5zaW9uMjpcInBhdGgyXCJ9YC4gVGhlc2UgbGFiZWxzIGFyZVxuXHQgKiBob3cgU291bmRKUyBkZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIHdpbGwgc3VwcG9ydCB0aGUgc291bmQuIFRoaXMgYWxzbyBlbmFibGVzIG11bHRpcGxlIGZvcm1hdHMgdG8gbGl2ZSBpblxuXHQgKiBkaWZmZXJlbnQgZm9sZGVycywgb3Igb24gQ0ROcywgd2hpY2ggb2Z0ZW4gaGFzIGNvbXBsZXRlbHkgZGlmZmVyZW50IGZpbGVuYW1lcyBmb3IgZWFjaCBmaWxlLlxuXHQgKlxuXHQgKiBQcmlvcml0eSBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBwcm9wZXJ0eSBvcmRlciAoZmlyc3QgcHJvcGVydHkgaXMgdHJpZWQgZmlyc3QpLiAgVGhpcyBpcyBzdXBwb3J0ZWQgYnkgYm90aCBpbnRlcm5hbCBsb2FkaW5nXG5cdCAqIGFuZCBsb2FkaW5nIHdpdGggUHJlbG9hZEpTLlxuXHQgKlxuXHQgKiA8ZW0+Tm90ZTogYW4gaWQgaXMgcmVxdWlyZWQgZm9yIHBsYXliYWNrLjwvZW0+XG5cdCAqXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cblx0ICpcblx0ICpcdFx0dmFyIHNvdW5kcyA9IHtwYXRoOlwiLi9hdWRpb1BhdGgvXCIsXG5cdCAqIFx0XHRcdFx0bWFuaWZlc3Q6IFtcblx0ICpcdFx0XHRcdHtpZDogXCJjb29sXCIsIHNyYzoge21wMzpcIm1wMy9hd2Vzb21lLm1wM1wiLCBvZ2c6XCJub0V4dGVuc2lvbk9nZ0ZpbGVcIn19XG5cdCAqXHRcdF19O1xuXHQgKlxuXHQgKlx0XHRjcmVhdGVqcy5Tb3VuZC5hbHRlcm5hdGVFeHRlbnNpb25zID0gW1wibXAzXCJdO1xuXHQgKlx0XHRjcmVhdGVqcy5Tb3VuZC5hZGRFdmVudExpc3RlbmVyKFwiZmlsZWxvYWRcIiwgaGFuZGxlTG9hZCk7XG5cdCAqXHRcdGNyZWF0ZWpzLlNvdW5kLnJlZ2lzdGVyU291bmRzKHNvdW5kcyk7XG5cdCAqXG5cdCAqIDxoMz5Lbm93biBCcm93c2VyIGFuZCBPUyBpc3N1ZXM8L2gzPlxuXHQgKiA8Yj5JRSA5IEhUTUwgQXVkaW8gbGltaXRhdGlvbnM8L2I+PGJyIC8+XG5cdCAqIDx1bD48bGk+VGhlcmUgaXMgYSBkZWxheSBpbiBhcHBseWluZyB2b2x1bWUgY2hhbmdlcyB0byB0YWdzIHRoYXQgb2NjdXJzIG9uY2UgcGxheWJhY2sgaXMgc3RhcnRlZC4gU28gaWYgeW91IGhhdmVcblx0ICogbXV0ZWQgYWxsIHNvdW5kcywgdGhleSB3aWxsIGFsbCBwbGF5IGR1cmluZyB0aGlzIGRlbGF5IHVudGlsIHRoZSBtdXRlIGFwcGxpZXMgaW50ZXJuYWxseS4gVGhpcyBoYXBwZW5zIHJlZ2FyZGxlc3Mgb2Zcblx0ICogd2hlbiBvciBob3cgeW91IGFwcGx5IHRoZSB2b2x1bWUgY2hhbmdlLCBhcyB0aGUgdGFnIHNlZW1zIHRvIG5lZWQgdG8gcGxheSB0byBhcHBseSBpdC48L2xpPlxuICAgICAqIDxsaT5NUDMgZW5jb2Rpbmcgd2lsbCBub3QgYWx3YXlzIHdvcmsgZm9yIGF1ZGlvIHRhZ3MsIHBhcnRpY3VsYXJseSBpbiBJbnRlcm5ldCBFeHBsb3Jlci4gV2UndmUgZm91bmQgZGVmYXVsdFxuXHQgKiBlbmNvZGluZyB3aXRoIDY0a2JwcyB3b3Jrcy48L2xpPlxuXHQgKiA8bGk+T2NjYXNpb25hbGx5IHZlcnkgc2hvcnQgc2FtcGxlcyB3aWxsIGdldCBjdXQgb2ZmLjwvbGk+XG5cdCAqIDxsaT5UaGVyZSBpcyBhIGxpbWl0IHRvIGhvdyBtYW55IGF1ZGlvIHRhZ3MgeW91IGNhbiBsb2FkIGFuZCBwbGF5IGF0IG9uY2UsIHdoaWNoIGFwcGVhcnMgdG8gYmUgZGV0ZXJtaW5lZCBieVxuXHQgKiBoYXJkd2FyZSBhbmQgYnJvd3NlciBzZXR0aW5ncy4gIFNlZSB7eyNjcm9zc0xpbmsgXCJIVE1MQXVkaW9QbHVnaW4uTUFYX0lOU1RBTkNFU1wifX17ey9jcm9zc0xpbmt9fSBmb3IgYSBzYWZlXG5cdCAqIGVzdGltYXRlLjwvbGk+PC91bD5cblx0ICpcblx0ICogPGI+RmlyZWZveCAyNSBXZWIgQXVkaW8gbGltaXRhdGlvbnM8L2I+XG5cdCAqIDx1bD48bGk+bXAzIGF1ZGlvIGZpbGVzIGRvIG5vdCBsb2FkIHByb3Blcmx5IG9uIGFsbCB3aW5kb3dzIG1hY2hpbmVzLCByZXBvcnRlZFxuXHQgKiA8YSBocmVmPVwiaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9OTI5OTY5XCIgdGFyZ2V0PVwiX2JsYW5rXCI+aGVyZTwvYT4uIDwvYnI+XG5cdCAqIEZvciB0aGlzIHJlYXNvbiBpdCBpcyByZWNvbW1lbmRlZCB0byBwYXNzIGFub3RoZXIgRkYgc3VwcG9ydGVkIHR5cGUgKGllIG9nZykgZmlyc3QgdW50aWwgdGhpcyBidWcgaXMgcmVzb2x2ZWQsIGlmXG5cdCAqIHBvc3NpYmxlLjwvbGk+PC91bD5cblxuXHQgKiA8Yj5TYWZhcmkgbGltaXRhdGlvbnM8L2I+PGJyIC8+XG5cdCAqIDx1bD48bGk+U2FmYXJpIHJlcXVpcmVzIFF1aWNrdGltZSB0byBiZSBpbnN0YWxsZWQgZm9yIGF1ZGlvIHBsYXliYWNrLjwvbGk+PC91bD5cblx0ICpcblx0ICogPGI+aU9TIDYgV2ViIEF1ZGlvIGxpbWl0YXRpb25zPC9iPjxiciAvPlxuXHQgKiA8dWw+PGxpPlNvdW5kIGlzIGluaXRpYWxseSBsb2NrZWQsIGFuZCBtdXN0IGJlIHVubG9ja2VkIHZpYSBhIHVzZXItaW5pdGlhdGVkIGV2ZW50LiBQbGVhc2Ugc2VlIHRoZSBzZWN0aW9uIG9uXG5cdCAqIE1vYmlsZSBQbGF5YmFjayBhYm92ZS48L2xpPlxuXHQgKiA8bGk+QSBidWcgZXhpc3RzIHRoYXQgd2lsbCBkaXN0b3J0IHVuLWNhY2hlZCB3ZWIgYXVkaW8gd2hlbiBhIHZpZGVvIGVsZW1lbnQgaXMgcHJlc2VudCBpbiB0aGUgRE9NIHRoYXQgaGFzIGF1ZGlvXG5cdCAqIGF0IGEgZGlmZmVyZW50IHNhbXBsZVJhdGUuPC9saT5cblx0ICogPC91bD5cblx0ICpcblx0ICogPGI+QW5kcm9pZCBIVE1MIEF1ZGlvIGxpbWl0YXRpb25zPC9iPjxiciAvPlxuXHQgKiA8dWw+PGxpPldlIGhhdmUgbm8gY29udHJvbCBvdmVyIGF1ZGlvIHZvbHVtZS4gT25seSB0aGUgdXNlciBjYW4gc2V0IHZvbHVtZSBvbiB0aGVpciBkZXZpY2UuPC9saT5cblx0ICogPGxpPldlIGNhbiBvbmx5IHBsYXkgYXVkaW8gaW5zaWRlIGEgdXNlciBldmVudCAodG91Y2gvY2xpY2spLiAgVGhpcyBjdXJyZW50bHkgbWVhbnMgeW91IGNhbm5vdCBsb29wIHNvdW5kIG9yIHVzZVxuXHQgKiBhIGRlbGF5LjwvbGk+PC91bD5cblx0ICpcblx0ICogPGI+V2ViIEF1ZGlvIGFuZCBQcmVsb2FkSlM8L2I+PGJyIC8+XG5cdCAqIDx1bD48bGk+V2ViIEF1ZGlvIG11c3QgYmUgbG9hZGVkIHRocm91Z2ggWEhSLCB0aGVyZWZvcmUgd2hlbiB1c2VkIHdpdGggUHJlbG9hZEpTLCB0YWcgbG9hZGluZyBpcyBub3QgcG9zc2libGUuXG5cdCAqIFRoaXMgbWVhbnMgdGhhdCB0YWcgbG9hZGluZyBjYW4gbm90IGJlIHVzZWQgdG8gYXZvaWQgY3Jvc3MgZG9tYWluIGlzc3Vlcy48L2xpPjx1bD5cblx0ICpcblx0ICogQGNsYXNzIFNvdW5kXG5cdCAqIEBzdGF0aWNcblx0ICogQHVzZXMgRXZlbnREaXNwYXRjaGVyXG5cdCAqL1xuXHRmdW5jdGlvbiBTb3VuZCgpIHtcblx0XHR0aHJvdyBcIlNvdW5kIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWRcIjtcblx0fVxuXG5cdHZhciBzID0gU291bmQ7XG5cblxuLy8gU3RhdGljIFByb3BlcnRpZXNcblx0LyoqXG5cdCAqIFRoZSBpbnRlcnJ1cHQgdmFsdWUgdG8gaW50ZXJydXB0IGFueSBjdXJyZW50bHkgcGxheWluZyBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIHNvdXJjZSwgaWYgdGhlIG1heGltdW0gbnVtYmVyIG9mXG5cdCAqIGluc3RhbmNlcyBvZiB0aGUgc291bmQgYXJlIGFscmVhZHkgcGxheWluZy5cblx0ICogQHByb3BlcnR5IElOVEVSUlVQVF9BTllcblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQgYW55XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuSU5URVJSVVBUX0FOWSA9IFwiYW55XCI7XG5cblx0LyoqXG5cdCAqIFRoZSBpbnRlcnJ1cHQgdmFsdWUgdG8gaW50ZXJydXB0IHRoZSBlYXJsaWVzdCBjdXJyZW50bHkgcGxheWluZyBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIHNvdXJjZSB0aGF0IHByb2dyZXNzZWQgdGhlXG5cdCAqIGxlYXN0IGRpc3RhbmNlIGluIHRoZSBhdWRpbyB0cmFjaywgaWYgdGhlIG1heGltdW0gbnVtYmVyIG9mIGluc3RhbmNlcyBvZiB0aGUgc291bmQgYXJlIGFscmVhZHkgcGxheWluZy5cblx0ICogQHByb3BlcnR5IElOVEVSUlVQVF9FQVJMWVxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBlYXJseVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLklOVEVSUlVQVF9FQVJMWSA9IFwiZWFybHlcIjtcblxuXHQvKipcblx0ICogVGhlIGludGVycnVwdCB2YWx1ZSB0byBpbnRlcnJ1cHQgdGhlIGN1cnJlbnRseSBwbGF5aW5nIGluc3RhbmNlIHdpdGggdGhlIHNhbWUgc291cmNlIHRoYXQgcHJvZ3Jlc3NlZCB0aGUgbW9zdFxuXHQgKiBkaXN0YW5jZSBpbiB0aGUgYXVkaW8gdHJhY2ssIGlmIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpbnN0YW5jZXMgb2YgdGhlIHNvdW5kIGFyZSBhbHJlYWR5IHBsYXlpbmcuXG5cdCAqIEBwcm9wZXJ0eSBJTlRFUlJVUFRfTEFURVxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBsYXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuSU5URVJSVVBUX0xBVEUgPSBcImxhdGVcIjtcblxuXHQvKipcblx0ICogVGhlIGludGVycnVwdCB2YWx1ZSB0byBub3QgaW50ZXJydXB0IGFueSBjdXJyZW50bHkgcGxheWluZyBpbnN0YW5jZXMgd2l0aCB0aGUgc2FtZSBzb3VyY2UsIGlmIHRoZSBtYXhpbXVtIG51bWJlciBvZlxuXHQgKiBpbnN0YW5jZXMgb2YgdGhlIHNvdW5kIGFyZSBhbHJlYWR5IHBsYXlpbmcuXG5cdCAqIEBwcm9wZXJ0eSBJTlRFUlJVUFRfTk9ORVxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBub25lXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuSU5URVJSVVBUX05PTkUgPSBcIm5vbmVcIjtcblxuXHQvKipcblx0ICogRGVmaW5lcyB0aGUgcGxheVN0YXRlIG9mIGFuIGluc3RhbmNlIHRoYXQgaXMgc3RpbGwgaW5pdGlhbGl6aW5nLlxuXHQgKiBAcHJvcGVydHkgUExBWV9JTklURURcblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQgcGxheUluaXRlZFxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLlBMQVlfSU5JVEVEID0gXCJwbGF5SW5pdGVkXCI7XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHBsYXlTdGF0ZSBvZiBhbiBpbnN0YW5jZSB0aGF0IGlzIGN1cnJlbnRseSBwbGF5aW5nIG9yIHBhdXNlZC5cblx0ICogQHByb3BlcnR5IFBMQVlfU1VDQ0VFREVEXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqIEBkZWZhdWx0IHBsYXlTdWNjZWVkZWRcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5QTEFZX1NVQ0NFRURFRCA9IFwicGxheVN1Y2NlZWRlZFwiO1xuXG5cdC8qKlxuXHQgKiBEZWZpbmVzIHRoZSBwbGF5U3RhdGUgb2YgYW4gaW5zdGFuY2UgdGhhdCB3YXMgaW50ZXJydXB0ZWQgYnkgYW5vdGhlciBpbnN0YW5jZS5cblx0ICogQHByb3BlcnR5IFBMQVlfSU5URVJSVVBURURcblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQgcGxheUludGVycnVwdGVkXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuUExBWV9JTlRFUlJVUFRFRCA9IFwicGxheUludGVycnVwdGVkXCI7XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHBsYXlTdGF0ZSBvZiBhbiBpbnN0YW5jZSB0aGF0IGNvbXBsZXRlZCBwbGF5YmFjay5cblx0ICogQHByb3BlcnR5IFBMQVlfRklOSVNIRURcblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQgcGxheUZpbmlzaGVkXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuUExBWV9GSU5JU0hFRCA9IFwicGxheUZpbmlzaGVkXCI7XG5cblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHBsYXlTdGF0ZSBvZiBhbiBpbnN0YW5jZSB0aGF0IGZhaWxlZCB0byBwbGF5LiBUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIGJ5IGEgbGFjayBvZiBhdmFpbGFibGUgY2hhbm5lbHNcblx0ICogd2hlbiB0aGUgaW50ZXJydXB0IG1vZGUgd2FzIFwiSU5URVJSVVBUX05PTkVcIiwgdGhlIHBsYXliYWNrIHN0YWxsZWQsIG9yIHRoZSBzb3VuZCBjb3VsZCBub3QgYmUgZm91bmQuXG5cdCAqIEBwcm9wZXJ0eSBQTEFZX0ZBSUxFRFxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBwbGF5RmFpbGVkXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuUExBWV9GQUlMRUQgPSBcInBsYXlGYWlsZWRcIjtcblxuXHQvKipcblx0ICogQSBsaXN0IG9mIHRoZSBkZWZhdWx0IHN1cHBvcnRlZCBleHRlbnNpb25zIHRoYXQgU291bmQgd2lsbCA8aT50cnk8L2k+IHRvIHBsYXkuIFBsdWdpbnMgd2lsbCBjaGVjayBpZiB0aGUgYnJvd3NlclxuXHQgKiBjYW4gcGxheSB0aGVzZSB0eXBlcywgc28gbW9kaWZ5aW5nIHRoaXMgbGlzdCBiZWZvcmUgYSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQgd2lsbCBhbGxvdyB0aGUgcGx1Z2lucyB0byB0cnkgdG9cblx0ICogc3VwcG9ydCBhZGRpdGlvbmFsIG1lZGlhIHR5cGVzLlxuXHQgKlxuXHQgKiBOT1RFIHRoaXMgZG9lcyBub3QgY3VycmVudGx5IHdvcmsgZm9yIHt7I2Nyb3NzTGluayBcIkZsYXNoQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqXG5cdCAqIE1vcmUgZGV0YWlscyBvbiBmaWxlIGZvcm1hdHMgY2FuIGJlIGZvdW5kIGF0IDxhIGhyZWY9XCJodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0F1ZGlvX2ZpbGVfZm9ybWF0XCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BdWRpb19maWxlX2Zvcm1hdDwvYT4uPGJyIC8+XG5cdCAqIEEgdmVyeSBkZXRhaWxlZCBsaXN0IG9mIGZpbGUgZm9ybWF0cyBjYW4gYmUgZm91bmQgYXQgPGEgaHJlZj1cImh0dHA6Ly93d3cuZmlsZWluZm8uY29tL2ZpbGV0eXBlcy9hdWRpb1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly93d3cuZmlsZWluZm8uY29tL2ZpbGV0eXBlcy9hdWRpbzwvYT4uXG5cdCAqIEBwcm9wZXJ0eSBTVVBQT1JURURfRVhURU5TSU9OU1xuXHQgKiBAdHlwZSB7QXJyYXlbU3RyaW5nXX1cblx0ICogQGRlZmF1bHQgW1wibXAzXCIsIFwib2dnXCIsIFwib3B1c1wiLCBcIm1wZWdcIiwgXCJ3YXZcIiwgXCJtNGFcIiwgXCJtcDRcIiwgXCJhaWZmXCIsIFwid21hXCIsIFwibWlkXCJdXG5cdCAqIEBzaW5jZSAwLjQuMFxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLlNVUFBPUlRFRF9FWFRFTlNJT05TID0gW1wibXAzXCIsIFwib2dnXCIsIFwib3B1c1wiLCBcIm1wZWdcIiwgXCJ3YXZcIiwgXCJtNGFcIiwgXCJtcDRcIiwgXCJhaWZmXCIsIFwid21hXCIsIFwibWlkXCJdO1xuXG5cdC8qKlxuXHQgKiBTb21lIGV4dGVuc2lvbnMgdXNlIGFub3RoZXIgdHlwZSBvZiBleHRlbnNpb24gc3VwcG9ydCB0byBwbGF5IChvbmUgb2YgdGhlbSBpcyBhIGNvZGV4KS4gIFRoaXMgYWxsb3dzIHlvdSB0byBtYXBcblx0ICogdGhhdCBzdXBwb3J0IHNvIHBsdWdpbnMgY2FuIGFjY3VyYXRlbHkgZGV0ZXJtaW5lIGlmIGFuIGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQuICBBZGRpbmcgdG8gdGhpcyBsaXN0IGNhbiBoZWxwXG5cdCAqIHBsdWdpbnMgZGV0ZXJtaW5lIG1vcmUgYWNjdXJhdGVseSBpZiBhbiBleHRlbnNpb24gaXMgc3VwcG9ydGVkLlxuXHQgKlxuIFx0ICogQSB1c2VmdWwgbGlzdCBvZiBleHRlbnNpb25zIGZvciBlYWNoIGZvcm1hdCBjYW4gYmUgZm91bmQgYXQgPGEgaHJlZj1cImh0dHA6Ly9odG1sNWRvY3Rvci5jb20vaHRtbDUtYXVkaW8tdGhlLXN0YXRlLW9mLXBsYXkvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL2h0bWw1ZG9jdG9yLmNvbS9odG1sNS1hdWRpby10aGUtc3RhdGUtb2YtcGxheS88L2E+LlxuXHQgKiBAcHJvcGVydHkgRVhURU5TSU9OX01BUFxuXHQgKiBAdHlwZSB7T2JqZWN0fVxuXHQgKiBAc2luY2UgMC40LjBcblx0ICogQGRlZmF1bHQge200YTpcIm1wNFwifVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLkVYVEVOU0lPTl9NQVAgPSB7XG5cdFx0bTRhOlwibXA0XCJcblx0fTtcblxuXHQvKipcblx0ICogVGhlIFJlZ0V4cCBwYXR0ZXJuIHVzZWQgdG8gcGFyc2UgZmlsZSBVUklzLiBUaGlzIHN1cHBvcnRzIHNpbXBsZSBmaWxlIG5hbWVzLCBhcyB3ZWxsIGFzIGZ1bGwgZG9tYWluIFVSSXMgd2l0aFxuXHQgKiBxdWVyeSBzdHJpbmdzLiBUaGUgcmVzdWx0aW5nIG1hdGNoIGlzOiBwcm90b2NvbDokMSBkb21haW46JDIgcGF0aDokMyBmaWxlOiQ0IGV4dGVuc2lvbjokNSBxdWVyeTokNi5cblx0ICogQHByb3BlcnR5IEZJTEVfUEFUVEVSTlxuXHQgKiBAdHlwZSB7UmVnRXhwfVxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRzLkZJTEVfUEFUVEVSTiA9IC9eKD86KFxcdys6KVxcL3syfShcXHcrKD86XFwuXFx3KykqXFwvPykpPyhbLy5dKj8oPzpbXj9dKyk/XFwvKT8oKD86W14vP10rKVxcLihcXHcrKSkoPzpcXD8oXFxTKyk/KT8kLztcblxuXG4vLyBDbGFzcyBQdWJsaWMgcHJvcGVydGllc1xuXHQvKipcblx0ICogRGV0ZXJtaW5lcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBmb3IgaW50ZXJydXB0aW5nIG90aGVyIGN1cnJlbnRseSBwbGF5aW5nIGluc3RhbmNlcyB3aXRoIHRoZSBzYW1lIHNvdXJjZSwgaWYgdGhlXG5cdCAqIG1heGltdW0gbnVtYmVyIG9mIGluc3RhbmNlcyBvZiB0aGUgc291bmQgYXJlIGFscmVhZHkgcGxheWluZy4gIEN1cnJlbnRseSB0aGUgZGVmYXVsdCBpcyB7eyNjcm9zc0xpbmsgXCJTb3VuZC9JTlRFUlJVUFRfTk9ORTpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBidXQgdGhpcyBjYW4gYmUgc2V0IGFuZCB3aWxsIGNoYW5nZSBwbGF5YmFjayBiZWhhdmlvciBhY2NvcmRpbmdseS4gIFRoaXMgaXMgb25seSB1c2VkIHdoZW4ge3sjY3Jvc3NMaW5rIFwiU291bmQvcGxheVwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBpcyBjYWxsZWQgd2l0aG91dCBwYXNzaW5nIGEgdmFsdWUgZm9yIGludGVycnVwdC5cblx0ICogQHByb3BlcnR5IGRlZmF1bHRJbnRlcnJ1cHRCZWhhdmlvclxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBTb3VuZC5JTlRFUlJVUFRfTk9ORSwgb3IgXCJub25lXCJcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC40LjBcblx0ICovXG5cdHMuZGVmYXVsdEludGVycnVwdEJlaGF2aW9yID0gcy5JTlRFUlJVUFRfTk9ORTsgIC8vIE9KUiBkb2VzIHMuSU5URVJSVVBUX0FOWSBtYWtlIG1vcmUgc2Vuc2UgYXMgZGVmYXVsdD8gIE5lZWRzIGdhbWUgZGV2IHRlc3RpbmcgdG8gc2VlIHdoaWNoIGNhc2UgbWFrZXMgbW9yZSBzZW5zZS5cblxuXHQvKipcblx0ICogQW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyB0byBhdHRlbXB0IHRvIHVzZSB3aGVuIGxvYWRpbmcgc291bmQsIGlmIHRoZSBkZWZhdWx0IGlzIHVuc3VwcG9ydGVkIGJ5IHRoZSBhY3RpdmUgcGx1Z2luLlxuXHQgKiBUaGVzZSBhcmUgYXBwbGllZCBpbiBvcmRlciwgc28gaWYgeW91IHRyeSB0byBMb2FkIFRodW5kZXIub2dnIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgb2dnLCBhbmQgeW91clxuXHQgKiBleHRlbnNpb25zIGFycmF5IGlzIFtcIm1wM1wiLCBcIm00YVwiLCBcIndhdlwiXSBpdCB3aWxsIGNoZWNrIG1wMyBzdXBwb3J0LCB0aGVuIG00YSwgdGhlbiB3YXYuIFRoZSBhdWRpbyBmaWxlcyBuZWVkXG5cdCAqIHRvIGV4aXN0IGluIHRoZSBzYW1lIGxvY2F0aW9uLCBhcyBvbmx5IHRoZSBleHRlbnNpb24gaXMgYWx0ZXJlZC5cblx0ICpcblx0ICogTm90ZSB0aGF0IHJlZ2FyZGxlc3Mgb2Ygd2hpY2ggZmlsZSBpcyBsb2FkZWQsIHlvdSBjYW4gY2FsbCB7eyNjcm9zc0xpbmsgXCJTb3VuZC9jcmVhdGVJbnN0YW5jZVwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBhbmQge3sjY3Jvc3NMaW5rIFwiU291bmQvcGxheVwifX17ey9jcm9zc0xpbmt9fSB1c2luZyB0aGUgc2FtZSBpZCBvciBmdWxsIHNvdXJjZSBwYXRoIHBhc3NlZCBmb3IgbG9hZGluZy5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKlx0dmFyIHNvdW5kcyA9IFtcblx0ICpcdFx0e3NyYzpcIm15UGF0aC9teVNvdW5kLm9nZ1wiLCBpZDpcImV4YW1wbGVcIn0sXG5cdCAqXHRdO1xuXHQgKlx0Y3JlYXRlanMuU291bmQuYWx0ZXJuYXRlRXh0ZW5zaW9ucyA9IFtcIm1wM1wiXTsgLy8gbm93IGlmIG9nZyBpcyBub3Qgc3VwcG9ydGVkLCBTb3VuZEpTIHdpbGwgdHJ5IGFzc2V0MC5tcDNcblx0ICpcdGNyZWF0ZWpzLlNvdW5kLm9uKFwiZmlsZWxvYWRcIiwgaGFuZGxlTG9hZCk7IC8vIGNhbGwgaGFuZGxlTG9hZCB3aGVuIGVhY2ggc291bmQgbG9hZHNcblx0ICpcdGNyZWF0ZWpzLlNvdW5kLnJlZ2lzdGVyU291bmRzKHNvdW5kcywgYXNzZXRQYXRoKTtcblx0ICpcdC8vIC4uLlxuXHQgKlx0Y3JlYXRlanMuU291bmQucGxheShcIm15UGF0aC9teVNvdW5kLm9nZ1wiKTsgLy8gd29ya3MgcmVnYXJkbGVzcyBvZiB3aGF0IGV4dGVuc2lvbiBpcyBzdXBwb3J0ZWQuICBOb3RlIGNhbGxpbmcgd2l0aCBJRCBpcyBhIGJldHRlciBhcHByb2FjaFxuXHQgKlxuXHQgKiBAcHJvcGVydHkgYWx0ZXJuYXRlRXh0ZW5zaW9uc1xuXHQgKiBAdHlwZSB7QXJyYXl9XG5cdCAqIEBzaW5jZSAwLjUuMlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLmFsdGVybmF0ZUV4dGVuc2lvbnMgPSBbXTtcblxuXHQvKipcblx0ICogVGhlIGN1cnJlbnRseSBhY3RpdmUgcGx1Z2luLiBJZiB0aGlzIGlzIG51bGwsIHRoZW4gbm8gcGx1Z2luIGNvdWxkIGJlIGluaXRpYWxpemVkLiBJZiBubyBwbHVnaW4gd2FzIHNwZWNpZmllZCxcblx0ICogU291bmQgYXR0ZW1wdHMgdG8gYXBwbHkgdGhlIGRlZmF1bHQgcGx1Z2luczoge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0sIGZvbGxvd2VkIGJ5XG5cdCAqIHt7I2Nyb3NzTGluayBcIkhUTUxBdWRpb1BsdWdpblwifX17ey9jcm9zc0xpbmt9fS5cblx0ICogQHByb3BlcnR5IGFjdGl2ZVBsdWdpblxuXHQgKiBAdHlwZSB7T2JqZWN0fVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuICAgIHMuYWN0aXZlUGx1Z2luID0gbnVsbDtcblxuXG4vLyBjbGFzcyBnZXR0ZXIgLyBzZXR0ZXIgcHJvcGVydGllc1xuXG5cdC8qKlxuXHQgKiBTZXQgdGhlIG1hc3RlciB2b2x1bWUgb2YgU291bmQuIFRoZSBtYXN0ZXIgdm9sdW1lIGlzIG11bHRpcGxpZWQgYWdhaW5zdCBlYWNoIHNvdW5kJ3MgaW5kaXZpZHVhbCB2b2x1bWUuICBGb3Jcblx0ICogZXhhbXBsZSwgaWYgbWFzdGVyIHZvbHVtZSBpcyAwLjUgYW5kIGEgc291bmQncyB2b2x1bWUgaXMgMC41LCB0aGUgcmVzdWx0aW5nIHZvbHVtZSBpcyAwLjI1LiBUbyBzZXQgaW5kaXZpZHVhbFxuXHQgKiBzb3VuZCB2b2x1bWUsIHVzZSBBYnN0cmFjdFNvdW5kSW5zdGFuY2Uge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL3ZvbHVtZTpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBpbnN0ZWFkLlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICBjcmVhdGVqcy5Tb3VuZC52b2x1bWUgPSAwLjU7XG5cdCAqXG5cdCAqIEBwcm9wZXJ0eSB2b2x1bWVcblx0ICogQHR5cGUge051bWJlcn1cblx0ICogQGRlZmF1bHQgMVxuXHQgKiBAc2luY2UgMC42LjFcblx0ICovXG5cblx0LyoqXG5cdCAqIFRoZSBpbnRlcm5hbCB2b2x1bWUgbGV2ZWwuIFVzZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC92b2x1bWU6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gdG8gYWRqdXN0IHRoZSBtYXN0ZXIgdm9sdW1lLlxuXHQgKiBAcHJvcGVydHkgX21hc3RlclZvbHVtZVxuXHQgKiBAdHlwZSB7bnVtYmVyfVxuXHQgKiBAZGVmYXVsdCAxXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRzLl9tYXN0ZXJWb2x1bWUgPSAxO1xuXG5cdC8qKlxuXHQgKiBVc2UgdGhlIHt7I2Nyb3NzTGluayBcIlNvdW5kL3ZvbHVtZTpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBwcm9wZXJ0eSBpbnN0ZWFkLlxuXHQgKiBAbWV0aG9kIF9nZXRNYXN0ZXJWb2x1bWVcblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9XG5cdCAqKi9cblx0cy5fZ2V0TWFzdGVyVm9sdW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX21hc3RlclZvbHVtZTtcblx0fTtcblx0Ly8gU291bmQuZ2V0TWFzdGVyVm9sdW1lIGlzIEBkZXByZWNhdGVkLiBSZW1vdmUgZm9yIDEuMStcblx0cy5nZXRWb2x1bWUgPSBjcmVhdGVqcy5kZXByZWNhdGUocy5fZ2V0TWFzdGVyVm9sdW1lLCBcIlNvdW5kLmdldFZvbHVtZVwiKTtcblx0LyoqXG5cdCAqIFVzZSB0aGUge3sjY3Jvc3NMaW5rIFwiU291bmQvdm9sdW1lOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IHByb3BlcnR5IGluc3RlYWQuXG5cdCAqIEBtZXRob2QgX3NldE1hc3RlclZvbHVtZVxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqKi9cblx0cy5fc2V0TWFzdGVyVm9sdW1lID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRpZiAoTnVtYmVyKHZhbHVlKSA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmFsdWUpKTtcblx0XHRzLl9tYXN0ZXJWb2x1bWUgPSB2YWx1ZTtcblx0XHRpZiAoIXRoaXMuYWN0aXZlUGx1Z2luIHx8ICF0aGlzLmFjdGl2ZVBsdWdpbi5zZXRWb2x1bWUgfHwgIXRoaXMuYWN0aXZlUGx1Z2luLnNldFZvbHVtZSh2YWx1ZSkpIHtcblx0XHRcdHZhciBpbnN0YW5jZXMgPSB0aGlzLl9pbnN0YW5jZXM7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbCA9IGluc3RhbmNlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0aW5zdGFuY2VzW2ldLnNldE1hc3RlclZvbHVtZSh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHQvLyBTb3VuZC5zdE1hc3RlclZvbHVtZSBpcyBAZGVwcmVjYXRlZC4gUmVtb3ZlIGZvciAxLjErXG5cdHMuc2V0Vm9sdW1lID0gY3JlYXRlanMuZGVwcmVjYXRlKHMuX3NldE1hc3RlclZvbHVtZSwgXCJTb3VuZC5zZXRWb2x1bWVcIik7XG5cblx0LyoqXG5cdCAqIE11dGUvVW5tdXRlIGFsbCBhdWRpby4gTm90ZSB0aGF0IG11dGVkIGF1ZGlvIHN0aWxsIHBsYXlzIGF0IDAgdm9sdW1lLiBUaGlzIGdsb2JhbCBtdXRlIHZhbHVlIGlzIG1haW50YWluZWRcblx0ICogc2VwYXJhdGVseSBhbmQgd2hlbiBzZXQgd2lsbCBvdmVycmlkZSwgYnV0IG5vdCBjaGFuZ2UgdGhlIG11dGUgcHJvcGVydHkgb2YgaW5kaXZpZHVhbCBpbnN0YW5jZXMuIFRvIG11dGUgYW4gaW5kaXZpZHVhbFxuXHQgKiBpbnN0YW5jZSwgdXNlIEFic3RyYWN0U291bmRJbnN0YW5jZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvbXV0ZWQ6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gaW5zdGVhZC5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiAgICAgY3JlYXRlanMuU291bmQubXV0ZWQgPSB0cnVlO1xuXHQgKlxuXHQgKlxuXHQgKiBAcHJvcGVydHkgbXV0ZWRcblx0ICogQHR5cGUge0Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqIEBzaW5jZSAwLjYuMVxuXHQgKi9cblx0cy5fbWFzdGVyTXV0ZSA9IGZhbHNlO1xuXG5cdC8qKlxuXHQgKiBVc2UgdGhlIHt7I2Nyb3NzTGluayBcIlNvdW5kL211dGVkOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IHByb3BlcnR5IGluc3RlYWQuXG5cdCAqIEBtZXRob2QgX2dldE11dGVcblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqIEBzdGF0aWNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHMuX2dldE11dGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX21hc3Rlck11dGU7XG5cdH07XG5cdC8vIFNvdW5kLmdldE11dGUgaXMgQGRlcHJlY2F0ZWQuIFJlbW92ZSBmb3IgMS4xK1xuXHRzLmdldE11dGUgPSBjcmVhdGVqcy5kZXByZWNhdGUocy5fZ2V0TXV0ZSwgXCJTb3VuZC5nZXRNdXRlXCIpO1xuXG5cdC8qKlxuXHQgKiBVc2UgdGhlIHt7I2Nyb3NzTGluayBcIlNvdW5kL211dGVkOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IHByb3BlcnR5IGluc3RlYWQuXG5cdCAqIEBtZXRob2QgX3NldE11dGVcblx0ICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZSBUaGUgbXV0ZWQgdmFsdWVcblx0ICogQHN0YXRpY1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cy5fc2V0TXV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdGlmICh2YWx1ZSA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdHRoaXMuX21hc3Rlck11dGUgPSB2YWx1ZTtcblx0XHRpZiAoIXRoaXMuYWN0aXZlUGx1Z2luIHx8ICF0aGlzLmFjdGl2ZVBsdWdpbi5zZXRNdXRlIHx8ICF0aGlzLmFjdGl2ZVBsdWdpbi5zZXRNdXRlKHZhbHVlKSkge1xuXHRcdFx0dmFyIGluc3RhbmNlcyA9IHRoaXMuX2luc3RhbmNlcztcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsID0gaW5zdGFuY2VzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRpbnN0YW5jZXNbaV0uc2V0TWFzdGVyTXV0ZSh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHQvLyBTb3VuZC5zZXRNdXRlIGlzIEBkZXByZWNhdGVkLiBSZW1vdmUgZm9yIDEuMStcblx0cy5zZXRNdXRlID0gY3JlYXRlanMuZGVwcmVjYXRlKHMuX3NldE11dGUsIFwiU291bmQuc2V0TXV0ZVwiKTtcblxuXHQvKipcblx0ICogR2V0IHRoZSBhY3RpdmUgcGx1Z2lucyBjYXBhYmlsaXRpZXMsIHdoaWNoIGhlbHAgZGV0ZXJtaW5lIGlmIGEgcGx1Z2luIGNhbiBiZSB1c2VkIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LFxuXHQgKiBvciBpZiB0aGUgcGx1Z2luIHN1cHBvcnRzIGEgc3BlY2lmaWMgZmVhdHVyZS4gQ2FwYWJpbGl0aWVzIGluY2x1ZGU6XG5cdCAqIDx1bD5cblx0ICogICAgIDxsaT48Yj5wYW5uaW5nOjwvYj4gSWYgdGhlIHBsdWdpbiBjYW4gcGFuIGF1ZGlvIGZyb20gbGVmdCB0byByaWdodDwvbGk+XG5cdCAqICAgICA8bGk+PGI+dm9sdW1lOzwvYj4gSWYgdGhlIHBsdWdpbiBjYW4gY29udHJvbCBhdWRpbyB2b2x1bWUuPC9saT5cblx0ICogICAgIDxsaT48Yj50cmFja3M6PC9iPiBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXVkaW8gdHJhY2tzIHRoYXQgY2FuIGJlIHBsYXllZCBiYWNrIGF0IGEgdGltZS4gVGhpcyB3aWxsIGJlIC0xXG5cdCAqICAgICBpZiB0aGVyZSBpcyBubyBrbm93biBsaW1pdC48L2xpPlxuXHQgKiA8YnIgLz5BbiBlbnRyeSBmb3IgZWFjaCBmaWxlIHR5cGUgaW4ge3sjY3Jvc3NMaW5rIFwiU291bmQvU1VQUE9SVEVEX0VYVEVOU0lPTlM6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX06XG5cdCAqICAgICA8bGk+PGI+bXAzOjwvYj4gSWYgTVAzIGF1ZGlvIGlzIHN1cHBvcnRlZC48L2xpPlxuXHQgKiAgICAgPGxpPjxiPm9nZzo8L2I+IElmIE9HRyBhdWRpbyBpcyBzdXBwb3J0ZWQuPC9saT5cblx0ICogICAgIDxsaT48Yj53YXY6PC9iPiBJZiBXQVYgYXVkaW8gaXMgc3VwcG9ydGVkLjwvbGk+XG5cdCAqICAgICA8bGk+PGI+bXBlZzo8L2I+IElmIE1QRUcgYXVkaW8gaXMgc3VwcG9ydGVkLjwvbGk+XG5cdCAqICAgICA8bGk+PGI+bTRhOjwvYj4gSWYgTTRBIGF1ZGlvIGlzIHN1cHBvcnRlZC48L2xpPlxuXHQgKiAgICAgPGxpPjxiPm1wNDo8L2I+IElmIE1QNCBhdWRpbyBpcyBzdXBwb3J0ZWQuPC9saT5cblx0ICogICAgIDxsaT48Yj5haWZmOjwvYj4gSWYgYWlmZiBhdWRpbyBpcyBzdXBwb3J0ZWQuPC9saT5cblx0ICogICAgIDxsaT48Yj53bWE6PC9iPiBJZiB3bWEgYXVkaW8gaXMgc3VwcG9ydGVkLjwvbGk+XG5cdCAqICAgICA8bGk+PGI+bWlkOjwvYj4gSWYgbWlkIGF1ZGlvIGlzIHN1cHBvcnRlZC48L2xpPlxuXHQgKiA8L3VsPlxuXHQgKlxuXHQgKiBZb3UgY2FuIGdldCBhIHNwZWNpZmljIGNhcGFiaWxpdHkgb2YgdGhlIGFjdGl2ZSBwbHVnaW4gdXNpbmcgc3RhbmRhcmQgb2JqZWN0IG5vdGF0aW9uXG5cdCAqXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cblx0ICpcblx0ICogICAgICB2YXIgbXAzID0gY3JlYXRlanMuU291bmQuY2FwYWJpbGl0aWVzLm1wMztcblx0ICpcblx0ICogTm90ZSB0aGlzIHByb3BlcnR5IGlzIHJlYWQgb25seS5cblx0ICpcblx0ICogQHByb3BlcnR5IGNhcGFiaWxpdGllc1xuXHQgKiBAdHlwZSB7T2JqZWN0fVxuXHQgKiBAc3RhdGljXG5cdCAqIEByZWFkT25seVxuXHQgKiBAc2luY2UgMC42LjFcblx0ICovXG5cblx0LyoqXG5cdCAqIFVzZSB0aGUge3sjY3Jvc3NMaW5rIFwiU291bmQvY2FwYWJpbGl0aWVzOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IHByb3BlcnR5IGluc3RlYWQuXG5cdCAqIEByZXR1cm5zIHtudWxsfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cy5fZ2V0Q2FwYWJpbGl0aWVzID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHMuYWN0aXZlUGx1Z2luID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblx0XHRyZXR1cm4gcy5hY3RpdmVQbHVnaW4uX2NhcGFiaWxpdGllcztcblx0fTtcblx0Ly8gU291bmQuZ2V0Q2FwYWJpbGl0aWVzIGlzIEBkZXByZWNhdGVkLiBSZW1vdmUgZm9yIDEuMStcblx0cy5nZXRDYXBhYmlsaXRpZXMgPSBjcmVhdGVqcy5kZXByZWNhdGUocy5fZ2V0Q2FwYWJpbGl0aWVzLCBcIlNvdW5kLmdldENhcGFiaWxpdGllc1wiKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzLCB7XG5cdFx0dm9sdW1lOiB7IGdldDogcy5fZ2V0TWFzdGVyVm9sdW1lLCBzZXQ6IHMuX3NldE1hc3RlclZvbHVtZSB9LFxuXHRcdG11dGVkOiB7IGdldDogcy5fZ2V0TXV0ZSwgc2V0OiBzLl9zZXRNdXRlIH0sXG5cdFx0Y2FwYWJpbGl0aWVzOiB7IGdldDogcy5fZ2V0Q2FwYWJpbGl0aWVzIH1cblx0fSk7XG5cblxuLy8gQ2xhc3MgUHJpdmF0ZSBwcm9wZXJ0aWVzXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBwbHVnaW5zIGhhdmUgYmVlbiByZWdpc3RlcmVkLiBJZiBmYWxzZSwgdGhlIGZpcnN0IGNhbGwgdG8ge3sjY3Jvc3NMaW5rIFwicGxheVwifX17ey9jcm9zc0xpbmt9fSB3aWxsIGluc3RhbnRpYXRlIHRoZSBkZWZhdWx0XG5cdCAqIHBsdWdpbnMgKHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luXCJ9fXt7L2Nyb3NzTGlua319LCBmb2xsb3dlZCBieSB7eyNjcm9zc0xpbmsgXCJIVE1MQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0pLlxuXHQgKiBJZiBwbHVnaW5zIGhhdmUgYmVlbiByZWdpc3RlcmVkLCBidXQgbm9uZSBhcmUgYXBwbGljYWJsZSwgdGhlbiBzb3VuZCBwbGF5YmFjayB3aWxsIGZhaWwuXG5cdCAqIEBwcm9wZXJ0eSBfcGx1Z2luc1JlZ2lzdGVyZWRcblx0ICogQHR5cGUge0Jvb2xlYW59XG5cdCAqIEBkZWZhdWx0IGZhbHNlXG5cdCAqIEBzdGF0aWNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHMuX3BsdWdpbnNSZWdpc3RlcmVkID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFVzZWQgaW50ZXJuYWxseSB0byBhc3NpZ24gdW5pcXVlIElEcyB0byBlYWNoIEFic3RyYWN0U291bmRJbnN0YW5jZS5cblx0ICogQHByb3BlcnR5IF9sYXN0SURcblx0ICogQHR5cGUge051bWJlcn1cblx0ICogQHN0YXRpY1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cy5fbGFzdElEID0gMDtcblxuXHQvKipcblx0ICogQW4gYXJyYXkgY29udGFpbmluZyBhbGwgY3VycmVudGx5IHBsYXlpbmcgaW5zdGFuY2VzLiBUaGlzIGFsbG93cyBTb3VuZCB0byBjb250cm9sIHRoZSB2b2x1bWUsIG11dGUsIGFuZCBwbGF5YmFjayBvZlxuXHQgKiBhbGwgaW5zdGFuY2VzIHdoZW4gdXNpbmcgc3RhdGljIEFQSXMgbGlrZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9zdG9wXCJ9fXt7L2Nyb3NzTGlua319IGFuZCB7eyNjcm9zc0xpbmsgXCJTb3VuZC92b2x1bWU6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIFdoZW4gYW4gaW5zdGFuY2UgaGFzIGZpbmlzaGVkIHBsYXliYWNrLCBpdCBnZXRzIHJlbW92ZWQgdmlhIHRoZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9maW5pc2hlZFBsYXlpbmdcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogbWV0aG9kLiBJZiB0aGUgdXNlciByZXBsYXlzIGFuIGluc3RhbmNlLCBpdCBnZXRzIGFkZGVkIGJhY2sgaW4gdmlhIHRoZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9fYmVnaW5QbGF5aW5nXCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqIG1ldGhvZC5cblx0ICogQHByb3BlcnR5IF9pbnN0YW5jZXNcblx0ICogQHR5cGUge0FycmF5fVxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLl9pbnN0YW5jZXMgPSBbXTtcblxuXHQvKipcblx0ICogQW4gb2JqZWN0IGhhc2ggc3RvcmluZyBvYmplY3RzIHdpdGggc291bmQgc291cmNlcywgc3RhcnRUaW1lLCBhbmQgZHVyYXRpb24gdmlhIHRoZXJlIGNvcnJlc3BvbmRpbmcgSUQuXG5cdCAqIEBwcm9wZXJ0eSBfaWRIYXNoXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuX2lkSGFzaCA9IHt9O1xuXG5cdC8qKlxuXHQgKiBBbiBvYmplY3QgaGFzaCB0aGF0IHN0b3JlcyBwcmVsb2FkaW5nIHNvdW5kIHNvdXJjZXMgdmlhIHRoZSBwYXJzZWQgc291cmNlIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBwbHVnaW4uICBDb250YWlucyB0aGVcblx0ICogc291cmNlLCBpZCwgYW5kIGRhdGEgdGhhdCB3YXMgcGFzc2VkIGluIGJ5IHRoZSB1c2VyLiAgUGFyc2VkIHNvdXJjZXMgY2FuIGNvbnRhaW4gbXVsdGlwbGUgaW5zdGFuY2VzIG9mIHNvdXJjZSwgaWQsXG5cdCAqIGFuZCBkYXRhLlxuXHQgKiBAcHJvcGVydHkgX3ByZWxvYWRIYXNoXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuX3ByZWxvYWRIYXNoID0ge307XG5cblx0LyoqXG5cdCAqIEFuIG9iamVjdCBoYXNoIHN0b3Jpbmcge3sjY3Jvc3NMaW5rIFwiUGxheVByb3BzQ29uZmlnXCJ9fXt7L2Nyb3NzTGlua319IHZpYSB0aGUgcGFyc2VkIHNvdXJjZSB0aGF0IGlzIHBhc3NlZCBhcyBkZWZhdWx0UGxheVByb3BzIGluXG5cdCAqIHt7I2Nyb3NzTGluayBcIlNvdW5kL3JlZ2lzdGVyU291bmRcIn19e3svY3Jvc3NMaW5rfX0gYW5kIHt7I2Nyb3NzTGluayBcIlNvdW5kL3JlZ2lzdGVyU291bmRzXCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKiBAcHJvcGVydHkgX2RlZmF1bHRQbGF5UHJvcHNIYXNoXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDAuNi4xXG5cdCAqL1xuXHRzLl9kZWZhdWx0UGxheVByb3BzSGFzaCA9IHt9O1xuXG5cbi8vIEV2ZW50RGlzcGF0Y2hlciBtZXRob2RzOlxuXHRzLmFkZEV2ZW50TGlzdGVuZXIgPSBudWxsO1xuXHRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBudWxsO1xuXHRzLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzID0gbnVsbDtcblx0cy5kaXNwYXRjaEV2ZW50ID0gbnVsbDtcblx0cy5oYXNFdmVudExpc3RlbmVyID0gbnVsbDtcblx0cy5fbGlzdGVuZXJzID0gbnVsbDtcblxuXHRjcmVhdGVqcy5FdmVudERpc3BhdGNoZXIuaW5pdGlhbGl6ZShzKTsgLy8gaW5qZWN0IEV2ZW50RGlzcGF0Y2hlciBtZXRob2RzLlxuXG5cbi8vIEV2ZW50c1xuXHQvKipcblx0ICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIGEgZmlsZSBmaW5pc2hlcyBsb2FkaW5nIGludGVybmFsbHkuIFRoaXMgZXZlbnQgaXMgZmlyZWQgZm9yIGVhY2ggbG9hZGVkIHNvdW5kLFxuXHQgKiBzbyBhbnkgaGFuZGxlciBtZXRob2RzIHNob3VsZCBsb29rIHVwIHRoZSA8Y29kZT5ldmVudC5zcmM8L2NvZGU+IHRvIGhhbmRsZSBhIHBhcnRpY3VsYXIgc291bmQuXG5cdCAqIEBldmVudCBmaWxlbG9hZFxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSBvYmplY3QgdGhhdCBkaXNwYXRjaGVkIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBvZiB0aGUgc291bmQgdGhhdCB3YXMgbG9hZGVkLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW2lkXSBUaGUgaWQgcGFzc2VkIGluIHdoZW4gdGhlIHNvdW5kIHdhcyByZWdpc3RlcmVkLiBJZiBvbmUgd2FzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCBiZSBudWxsLlxuXHQgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IFtkYXRhXSBBbnkgYWRkaXRpb25hbCBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgaXRlbS4gSWYgbm90IHByb3ZpZGVkLCBpdCB3aWxsIGJlIHVuZGVmaW5lZC5cblx0ICogQHNpbmNlIDAuNC4xXG5cdCAqL1xuXG5cdC8qKlxuXHQgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gYSBmaWxlIGZhaWxzIGxvYWRpbmcgaW50ZXJuYWxseS4gVGhpcyBldmVudCBpcyBmaXJlZCBmb3IgZWFjaCBsb2FkZWQgc291bmQsXG5cdCAqIHNvIGFueSBoYW5kbGVyIG1ldGhvZHMgc2hvdWxkIGxvb2sgdXAgdGhlIDxjb2RlPmV2ZW50LnNyYzwvY29kZT4gdG8gaGFuZGxlIGEgcGFydGljdWxhciBzb3VuZC5cblx0ICogQGV2ZW50IGZpbGVlcnJvclxuXHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSBvYmplY3QgdGhhdCBkaXNwYXRjaGVkIHRoZSBldmVudC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBvZiB0aGUgc291bmQgdGhhdCB3YXMgbG9hZGVkLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW2lkXSBUaGUgaWQgcGFzc2VkIGluIHdoZW4gdGhlIHNvdW5kIHdhcyByZWdpc3RlcmVkLiBJZiBvbmUgd2FzIG5vdCBwcm92aWRlZCwgaXQgd2lsbCBiZSBudWxsLlxuXHQgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IFtkYXRhXSBBbnkgYWRkaXRpb25hbCBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgaXRlbS4gSWYgbm90IHByb3ZpZGVkLCBpdCB3aWxsIGJlIHVuZGVmaW5lZC5cblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXG5cbi8vIENsYXNzIFB1YmxpYyBNZXRob2RzXG5cdC8qKlxuXHQgKiBHZXQgdGhlIHByZWxvYWQgcnVsZXMgdG8gYWxsb3cgU291bmQgdG8gYmUgdXNlZCBhcyBhIHBsdWdpbiBieSA8YSBocmVmPVwiaHR0cDovL3ByZWxvYWRqcy5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5QcmVsb2FkSlM8L2E+LlxuXHQgKiBBbnkgbG9hZCBjYWxscyB0aGF0IGhhdmUgdGhlIG1hdGNoaW5nIHR5cGUgb3IgZXh0ZW5zaW9uIHdpbGwgZmlyZSB0aGUgY2FsbGJhY2sgbWV0aG9kLCBhbmQgdXNlIHRoZSByZXN1bHRpbmdcblx0ICogb2JqZWN0LCB3aGljaCBpcyBwb3RlbnRpYWxseSBtb2RpZmllZCBieSBTb3VuZC4gVGhpcyBoZWxwcyB3aGVuIGRldGVybWluaW5nIHRoZSBjb3JyZWN0IHBhdGgsIGFzIHdlbGwgYXNcblx0ICogcmVnaXN0ZXJpbmcgdGhlIGF1ZGlvIGluc3RhbmNlKHMpIHdpdGggU291bmQuIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgY2FsbGVkLCBleGNlcHQgYnkgUHJlbG9hZEpTLlxuXHQgKiBAbWV0aG9kIGdldFByZWxvYWRIYW5kbGVyc1xuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nOlxuXHQgKiA8dWw+PGxpPmNhbGxiYWNrOiBBIHByZWxvYWQgY2FsbGJhY2sgdGhhdCBpcyBmaXJlZCB3aGVuIGEgZmlsZSBpcyBhZGRlZCB0byBQcmVsb2FkSlMsIHdoaWNoIHByb3ZpZGVzXG5cdCAqICAgICAgU291bmQgYSBtZWNoYW5pc20gdG8gbW9kaWZ5IHRoZSBsb2FkIHBhcmFtZXRlcnMsIHNlbGVjdCB0aGUgY29ycmVjdCBmaWxlIGZvcm1hdCwgcmVnaXN0ZXIgdGhlIHNvdW5kLCBldGMuPC9saT5cblx0ICogICAgICA8bGk+dHlwZXM6IEEgbGlzdCBvZiBmaWxlIHR5cGVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBTb3VuZCAoY3VycmVudGx5IHN1cHBvcnRzIFwic291bmRcIikuPC9saT5cblx0ICogICAgICA8bGk+ZXh0ZW5zaW9uczogQSBsaXN0IG9mIGZpbGUgZXh0ZW5zaW9ucyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgU291bmQgKHNlZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9TVVBQT1JURURfRVhURU5TSU9OUzpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSkuPC9saT48L3VsPlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRzLmdldFByZWxvYWRIYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2FsbGJhY2s6Y3JlYXRlanMucHJveHkocy5pbml0TG9hZCwgcyksXG5cdFx0XHR0eXBlczpbXCJzb3VuZFwiXSxcblx0XHRcdGV4dGVuc2lvbnM6cy5TVVBQT1JURURfRVhURU5TSU9OU1xuXHRcdH07XG5cdH07XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gZGlzcGF0Y2ggZmlsZWxvYWQgZXZlbnRzIGZyb20gaW50ZXJuYWwgbG9hZGluZy5cblx0ICogQG1ldGhvZCBfaGFuZGxlTG9hZENvbXBsZXRlXG5cdCAqIEBwYXJhbSBldmVudCBBIGxvYWRlciBldmVudC5cblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHMuX2hhbmRsZUxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHNyYyA9IGV2ZW50LnRhcmdldC5nZXRJdGVtKCkuc3JjO1xuXHRcdGlmICghcy5fcHJlbG9hZEhhc2hbc3JjXSkge3JldHVybjt9XG5cblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHMuX3ByZWxvYWRIYXNoW3NyY10ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHMuX3ByZWxvYWRIYXNoW3NyY11baV07XG5cdFx0XHRzLl9wcmVsb2FkSGFzaFtzcmNdW2ldID0gdHJ1ZTtcblxuXHRcdFx0aWYgKCFzLmhhc0V2ZW50TGlzdGVuZXIoXCJmaWxlbG9hZFwiKSkgeyBjb250aW51ZTsgfVxuXG5cdFx0XHR2YXIgZXZlbnQgPSBuZXcgY3JlYXRlanMuRXZlbnQoXCJmaWxlbG9hZFwiKTtcblx0XHRcdGV2ZW50LnNyYyA9IGl0ZW0uc3JjO1xuXHRcdFx0ZXZlbnQuaWQgPSBpdGVtLmlkO1xuXHRcdFx0ZXZlbnQuZGF0YSA9IGl0ZW0uZGF0YTtcblx0XHRcdGV2ZW50LnNwcml0ZSA9IGl0ZW0uc3ByaXRlO1xuXG5cdFx0XHRzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogVXNlZCB0byBkaXNwYXRjaCBlcnJvciBldmVudHMgZnJvbSBpbnRlcm5hbCBwcmVsb2FkaW5nLlxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuX2hhbmRsZUxvYWRFcnJvciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHNyYyA9IGV2ZW50LnRhcmdldC5nZXRJdGVtKCkuc3JjO1xuXHRcdGlmICghcy5fcHJlbG9hZEhhc2hbc3JjXSkge3JldHVybjt9XG5cblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHMuX3ByZWxvYWRIYXNoW3NyY10ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHMuX3ByZWxvYWRIYXNoW3NyY11baV07XG5cdFx0XHRzLl9wcmVsb2FkSGFzaFtzcmNdW2ldID0gZmFsc2U7XG5cblx0XHRcdGlmICghcy5oYXNFdmVudExpc3RlbmVyKFwiZmlsZWVycm9yXCIpKSB7IGNvbnRpbnVlOyB9XG5cblx0XHRcdHZhciBldmVudCA9IG5ldyBjcmVhdGVqcy5FdmVudChcImZpbGVlcnJvclwiKTtcblx0XHRcdGV2ZW50LnNyYyA9IGl0ZW0uc3JjO1xuXHRcdFx0ZXZlbnQuaWQgPSBpdGVtLmlkO1xuXHRcdFx0ZXZlbnQuZGF0YSA9IGl0ZW0uZGF0YTtcblx0XHRcdGV2ZW50LnNwcml0ZSA9IGl0ZW0uc3ByaXRlO1xuXG5cdFx0XHRzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogVXNlZCBieSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9yZWdpc3RlclBsdWdpbnNcIn19e3svY3Jvc3NMaW5rfX0gdG8gcmVnaXN0ZXIgYSBTb3VuZCBwbHVnaW4uXG5cdCAqXG5cdCAqIEBtZXRob2QgX3JlZ2lzdGVyUGx1Z2luXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gVGhlIHBsdWdpbiBjbGFzcyB0byBpbnN0YWxsLlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBXaGV0aGVyIHRoZSBwbHVnaW4gd2FzIHN1Y2Nlc3NmdWxseSBpbml0aWFsaXplZC5cblx0ICogQHN0YXRpY1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cy5fcmVnaXN0ZXJQbHVnaW4gPSBmdW5jdGlvbiAocGx1Z2luKSB7XG5cdFx0Ly8gTm90ZTogRWFjaCBwbHVnaW4gaXMgcGFzc2VkIGluIGFzIGEgY2xhc3MgcmVmZXJlbmNlLCBidXQgd2Ugc3RvcmUgdGhlIGFjdGl2ZVBsdWdpbiBhcyBhbiBpbnN0YW5jZVxuXHRcdGlmIChwbHVnaW4uaXNTdXBwb3J0ZWQoKSkge1xuXHRcdFx0cy5hY3RpdmVQbHVnaW4gPSBuZXcgcGx1Z2luKCk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBhIGxpc3Qgb2YgU291bmQgcGx1Z2lucywgaW4gb3JkZXIgb2YgcHJlY2VkZW5jZS4gVG8gcmVnaXN0ZXIgYSBzaW5nbGUgcGx1Z2luLCBwYXNzIGEgc2luZ2xlIGVsZW1lbnQgaW4gdGhlIGFycmF5LlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICAgY3JlYXRlanMuRmxhc2hBdWRpb1BsdWdpbi5zd2ZQYXRoID0gXCIuLi9zcmMvc291bmRqcy9mbGFzaGF1ZGlvL1wiO1xuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLnJlZ2lzdGVyUGx1Z2lucyhbY3JlYXRlanMuV2ViQXVkaW9QbHVnaW4sIGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbiwgY3JlYXRlanMuRmxhc2hBdWRpb1BsdWdpbl0pO1xuXHQgKlxuXHQgKiBAbWV0aG9kIHJlZ2lzdGVyUGx1Z2luc1xuXHQgKiBAcGFyYW0ge0FycmF5fSBwbHVnaW5zIEFuIGFycmF5IG9mIHBsdWdpbnMgY2xhc3NlcyB0byBpbnN0YWxsLlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBXaGV0aGVyIGEgcGx1Z2luIHdhcyBzdWNjZXNzZnVsbHkgaW5pdGlhbGl6ZWQuXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMucmVnaXN0ZXJQbHVnaW5zID0gZnVuY3Rpb24gKHBsdWdpbnMpIHtcblx0XHRzLl9wbHVnaW5zUmVnaXN0ZXJlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBwbHVnaW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0aWYgKHMuX3JlZ2lzdGVyUGx1Z2luKHBsdWdpbnNbaV0pKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemUgdGhlIGRlZmF1bHQgcGx1Z2lucy4gVGhpcyBtZXRob2QgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgd2hlbiBhbnkgYXVkaW8gaXMgcGxheWVkIG9yIHJlZ2lzdGVyZWQgYmVmb3JlXG5cdCAqIHRoZSB1c2VyIGhhcyBtYW51YWxseSByZWdpc3RlcmVkIHBsdWdpbnMsIGFuZCBlbmFibGVzIFNvdW5kIHRvIHdvcmsgd2l0aG91dCBtYW51YWwgcGx1Z2luIHNldHVwLiBDdXJyZW50bHksIHRoZVxuXHQgKiBkZWZhdWx0IHBsdWdpbnMgYXJlIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luXCJ9fXt7L2Nyb3NzTGlua319IGZvbGxvd2VkIGJ5IHt7I2Nyb3NzTGluayBcIkhUTUxBdWRpb1BsdWdpblwifX17ey9jcm9zc0xpbmt9fS5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiBcdGlmICghY3JlYXRlanMuaW5pdGlhbGl6ZURlZmF1bHRQbHVnaW5zKCkpIHsgcmV0dXJuOyB9XG5cdCAqXG5cdCAqIEBtZXRob2QgaW5pdGlhbGl6ZURlZmF1bHRQbHVnaW5zXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgcGx1Z2luIHdhcyBpbml0aWFsaXplZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuXHQgKiBAc2luY2UgMC40LjBcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5pbml0aWFsaXplRGVmYXVsdFBsdWdpbnMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHMuYWN0aXZlUGx1Z2luICE9IG51bGwpIHtyZXR1cm4gdHJ1ZTt9XG5cdFx0aWYgKHMuX3BsdWdpbnNSZWdpc3RlcmVkKSB7cmV0dXJuIGZhbHNlO31cblx0XHRpZiAocy5yZWdpc3RlclBsdWdpbnMoW2NyZWF0ZWpzLldlYkF1ZGlvUGx1Z2luLCBjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW5dKSkge3JldHVybiB0cnVlO31cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0LyoqXG5cdCAqIERldGVybWluZXMgaWYgU291bmQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQsIGFuZCBhIHBsdWdpbiBoYXMgYmVlbiBhY3RpdmF0ZWQuXG5cdCAqXG5cdCAqIDxoND5FeGFtcGxlPC9oND5cblx0ICogVGhpcyBleGFtcGxlIHNldHMgdXAgYSBGbGFzaCBmYWxsYmFjaywgYnV0IG9ubHkgaWYgdGhlcmUgaXMgbm8gcGx1Z2luIHNwZWNpZmllZCB5ZXQuXG5cdCAqXG5cdCAqIFx0aWYgKCFjcmVhdGVqcy5Tb3VuZC5pc1JlYWR5KCkpIHtcblx0ICpcdFx0Y3JlYXRlanMuRmxhc2hBdWRpb1BsdWdpbi5zd2ZQYXRoID0gXCIuLi9zcmMvc291bmRqcy9mbGFzaGF1ZGlvL1wiO1xuXHQgKiBcdFx0Y3JlYXRlanMuU291bmQucmVnaXN0ZXJQbHVnaW5zKFtjcmVhdGVqcy5XZWJBdWRpb1BsdWdpbiwgY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLCBjcmVhdGVqcy5GbGFzaEF1ZGlvUGx1Z2luXSk7XG5cdCAqXHR9XG5cdCAqXG5cdCAqIEBtZXRob2QgaXNSZWFkeVxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiBTb3VuZCBoYXMgaW5pdGlhbGl6ZWQgYSBwbHVnaW4uXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuaXNSZWFkeSA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gKHMuYWN0aXZlUGx1Z2luICE9IG51bGwpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQcm9jZXNzIG1hbmlmZXN0IGl0ZW1zIGZyb20gPGEgaHJlZj1cImh0dHA6Ly9wcmVsb2FkanMuY29tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+UHJlbG9hZEpTPC9hPi4gVGhpcyBtZXRob2QgaXMgaW50ZW5kZWRcblx0ICogZm9yIHVzYWdlIGJ5IGEgcGx1Z2luLCBhbmQgbm90IGZvciBkaXJlY3QgaW50ZXJhY3Rpb24uXG5cdCAqIEBtZXRob2QgaW5pdExvYWRcblx0ICogQHBhcmFtIHtPYmplY3R9IHNyYyBUaGUgb2JqZWN0IHRvIGxvYWQuXG5cdCAqIEByZXR1cm4ge09iamVjdHxBYnN0cmFjdExvYWRlcn0gQW4gaW5zdGFuY2Ugb2YgQWJzdHJhY3RMb2FkZXIuXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuaW5pdExvYWQgPSBmdW5jdGlvbiAobG9hZEl0ZW0pIHtcblx0XHRpZiAobG9hZEl0ZW0udHlwZSA9PSBcInZpZGVvXCIpIHsgcmV0dXJuIHRydWU7IH0gLy8gRG9uJ3QgaGFuZGxlIHZpZGVvLiBQcmVsb2FkSlMncyBwbHVnaW4gbW9kZWwgaXMgcmVhbGx5IGFnZ3Jlc3NpdmUuXG5cdFx0cmV0dXJuIHMuX3JlZ2lzdGVyU291bmQobG9hZEl0ZW0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBJbnRlcm5hbCBtZXRob2QgZm9yIGxvYWRpbmcgc291bmRzLiAgVGhpcyBzaG91bGQgbm90IGJlIGNhbGxlZCBkaXJlY3RseS5cblx0ICpcblx0ICogQG1ldGhvZCBfcmVnaXN0ZXJTb3VuZFxuXHQgKiBAcGFyYW0ge09iamVjdH0gc3JjIFRoZSBvYmplY3QgdG8gbG9hZCwgY29udGFpbmluZyBzcmMgcHJvcGVydHkgYW5kIG9wdGlvbmFsbHkgY29udGFpbmluZyBpZCBhbmQgZGF0YS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB0aGUgbW9kaWZpZWQgdmFsdWVzIHRoYXQgd2VyZSBwYXNzZWQgaW4sIHdoaWNoIGRlZmluZXMgdGhlIHNvdW5kLlxuXHQgKiBSZXR1cm5zIGZhbHNlIGlmIHRoZSBzb3VyY2UgY2Fubm90IGJlIHBhcnNlZCBvciBubyBwbHVnaW5zIGNhbiBiZSBpbml0aWFsaXplZC5cblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBzb3VyY2UgaXMgYWxyZWFkeSBsb2FkZWQuXG5cdCAqIEBzdGF0aWNcblx0ICogQHByaXZhdGVcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXG5cdHMuX3JlZ2lzdGVyU291bmQgPSBmdW5jdGlvbiAobG9hZEl0ZW0pIHtcblx0XHRpZiAoIXMuaW5pdGlhbGl6ZURlZmF1bHRQbHVnaW5zKCkpIHtyZXR1cm4gZmFsc2U7fVxuXG5cdFx0dmFyIGRldGFpbHM7XG5cdFx0aWYgKGxvYWRJdGVtLnNyYyBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0ZGV0YWlscyA9IHMuX3BhcnNlU3JjKGxvYWRJdGVtLnNyYyk7XG5cdFx0XHRkZXRhaWxzLnNyYyA9IGxvYWRJdGVtLnBhdGggKyBkZXRhaWxzLnNyYztcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGV0YWlscyA9IHMuX3BhcnNlUGF0aChsb2FkSXRlbS5zcmMpO1xuXHRcdH1cblx0XHRpZiAoZGV0YWlscyA9PSBudWxsKSB7cmV0dXJuIGZhbHNlO31cblx0XHRsb2FkSXRlbS5zcmMgPSBkZXRhaWxzLnNyYztcblx0XHRsb2FkSXRlbS50eXBlID0gXCJzb3VuZFwiO1xuXG5cdFx0dmFyIGRhdGEgPSBsb2FkSXRlbS5kYXRhO1xuXHRcdHZhciBudW1DaGFubmVscyA9IG51bGw7XG5cdFx0aWYgKGRhdGEgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCFpc05hTihkYXRhLmNoYW5uZWxzKSkge1xuXHRcdFx0XHRudW1DaGFubmVscyA9IHBhcnNlSW50KGRhdGEuY2hhbm5lbHMpO1xuXHRcdFx0fSBlbHNlIGlmICghaXNOYU4oZGF0YSkpIHtcblx0XHRcdFx0bnVtQ2hhbm5lbHMgPSBwYXJzZUludChkYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoZGF0YS5hdWRpb1Nwcml0ZSkge1xuXHRcdFx0XHR2YXIgc3A7XG5cdFx0XHRcdGZvcih2YXIgaSA9IGRhdGEuYXVkaW9TcHJpdGUubGVuZ3RoOyBpLS07ICkge1xuXHRcdFx0XHRcdHNwID0gZGF0YS5hdWRpb1Nwcml0ZVtpXTtcblx0XHRcdFx0XHRzLl9pZEhhc2hbc3AuaWRdID0ge3NyYzogbG9hZEl0ZW0uc3JjLCBzdGFydFRpbWU6IHBhcnNlSW50KHNwLnN0YXJ0VGltZSksIGR1cmF0aW9uOiBwYXJzZUludChzcC5kdXJhdGlvbil9O1xuXG5cdFx0XHRcdFx0aWYgKHNwLmRlZmF1bHRQbGF5UHJvcHMpIHtcblx0XHRcdFx0XHRcdHMuX2RlZmF1bHRQbGF5UHJvcHNIYXNoW3NwLmlkXSA9IGNyZWF0ZWpzLlBsYXlQcm9wc0NvbmZpZy5jcmVhdGUoc3AuZGVmYXVsdFBsYXlQcm9wcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChsb2FkSXRlbS5pZCAhPSBudWxsKSB7cy5faWRIYXNoW2xvYWRJdGVtLmlkXSA9IHtzcmM6IGxvYWRJdGVtLnNyY319O1xuXHRcdHZhciBsb2FkZXIgPSBzLmFjdGl2ZVBsdWdpbi5yZWdpc3Rlcihsb2FkSXRlbSk7XG5cblx0XHRTb3VuZENoYW5uZWwuY3JlYXRlKGxvYWRJdGVtLnNyYywgbnVtQ2hhbm5lbHMpO1xuXG5cdFx0Ly8gcmV0dXJuIHRoZSBudW1iZXIgb2YgaW5zdGFuY2VzIHRvIHRoZSB1c2VyLiAgVGhpcyB3aWxsIGFsc28gYmUgcmV0dXJuZWQgaW4gdGhlIGxvYWQgZXZlbnQuXG5cdFx0aWYgKGRhdGEgPT0gbnVsbCB8fCAhaXNOYU4oZGF0YSkpIHtcblx0XHRcdGxvYWRJdGVtLmRhdGEgPSBudW1DaGFubmVscyB8fCBTb3VuZENoYW5uZWwubWF4UGVyQ2hhbm5lbCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2FkSXRlbS5kYXRhLmNoYW5uZWxzID0gbnVtQ2hhbm5lbHMgfHwgU291bmRDaGFubmVsLm1heFBlckNoYW5uZWwoKTtcblx0XHR9XG5cblx0XHRpZiAobG9hZGVyLnR5cGUpIHtsb2FkSXRlbS50eXBlID0gbG9hZGVyLnR5cGU7fVxuXG5cdFx0aWYgKGxvYWRJdGVtLmRlZmF1bHRQbGF5UHJvcHMpIHtcblx0XHRcdHMuX2RlZmF1bHRQbGF5UHJvcHNIYXNoW2xvYWRJdGVtLnNyY10gPSBjcmVhdGVqcy5QbGF5UHJvcHNDb25maWcuY3JlYXRlKGxvYWRJdGVtLmRlZmF1bHRQbGF5UHJvcHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gbG9hZGVyO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBhbiBhdWRpbyBmaWxlIGZvciBsb2FkaW5nIGFuZCBmdXR1cmUgcGxheWJhY2sgaW4gU291bmQuIFRoaXMgaXMgYXV0b21hdGljYWxseSBjYWxsZWQgd2hlbiB1c2luZ1xuXHQgKiA8YSBocmVmPVwiaHR0cDovL3ByZWxvYWRqcy5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5QcmVsb2FkSlM8L2E+LiAgSXQgaXMgcmVjb21tZW5kZWQgdG8gcmVnaXN0ZXIgYWxsIHNvdW5kcyB0aGF0XG5cdCAqIG5lZWQgdG8gYmUgcGxheWVkIGJhY2sgaW4gb3JkZXIgdG8gcHJvcGVybHkgcHJlcGFyZSBhbmQgcHJlbG9hZCB0aGVtLiBTb3VuZCBkb2VzIGludGVybmFsIHByZWxvYWRpbmcgd2hlbiByZXF1aXJlZC5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLmFsdGVybmF0ZUV4dGVuc2lvbnMgPSBbXCJtcDNcIl07XG5cdCAqICAgICAgY3JlYXRlanMuU291bmQub24oXCJmaWxlbG9hZFwiLCBoYW5kbGVMb2FkKTsgLy8gYWRkIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB3aGVuIGxvYWQgaXMgY29tcGxldGVkXG5cdCAqICAgICAgY3JlYXRlanMuU291bmQucmVnaXN0ZXJTb3VuZChcIm15QXVkaW9QYXRoL215U291bmQub2dnXCIsIFwibXlJRFwiLCAzKTtcblx0ICogICAgICBjcmVhdGVqcy5Tb3VuZC5yZWdpc3RlclNvdW5kKHtvZ2c6XCJwYXRoMS9teVNvdW5kLm9nZ1wiLCBtcDM6XCJwYXRoMi9teVNvdW5kTm9FeHRlbnNpb25cIn0sIFwibXlJRFwiLCAzKTtcblx0ICpcblx0ICpcblx0ICogQG1ldGhvZCByZWdpc3RlclNvdW5kXG5cdCAqIEBwYXJhbSB7U3RyaW5nIHwgT2JqZWN0fSBzcmMgVGhlIHNvdXJjZSBvciBhbiBPYmplY3Qgd2l0aCBhIFwic3JjXCIgcHJvcGVydHkgb3IgYW4gT2JqZWN0IHdpdGggbXVsdGlwbGUgZXh0ZW5zaW9uIGxhYmVsZWQgc3JjIHByb3BlcnRpZXMuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBbaWRdIEFuIGlkIHNwZWNpZmllZCBieSB0aGUgdXNlciB0byBwbGF5IHRoZSBzb3VuZCBsYXRlci4gIE5vdGUgaWQgaXMgcmVxdWlyZWQgZm9yIHdoZW4gc3JjIGlzIG11bHRpcGxlIGV4dGVuc2lvbiBsYWJlbGVkIHNyYyBwcm9wZXJ0aWVzLlxuXHQgKiBAcGFyYW0ge051bWJlciB8IE9iamVjdH0gW2RhdGFdIERhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBpdGVtLiBTb3VuZCB1c2VzIHRoZSBkYXRhIHBhcmFtZXRlciBhcyB0aGUgbnVtYmVyIG9mXG5cdCAqIGNoYW5uZWxzIGZvciBhbiBhdWRpbyBpbnN0YW5jZSwgaG93ZXZlciBhIFwiY2hhbm5lbHNcIiBwcm9wZXJ0eSBjYW4gYmUgYXBwZW5kZWQgdG8gdGhlIGRhdGEgb2JqZWN0IGlmIGl0IGlzIHVzZWRcblx0ICogZm9yIG90aGVyIGluZm9ybWF0aW9uLiBUaGUgYXVkaW8gY2hhbm5lbHMgd2lsbCBzZXQgYSBkZWZhdWx0IGJhc2VkIG9uIHBsdWdpbiBpZiBubyB2YWx1ZSBpcyBmb3VuZC5cblx0ICogU291bmQgYWxzbyB1c2VzIHRoZSBkYXRhIHByb3BlcnR5IHRvIGhvbGQgYW4ge3sjY3Jvc3NMaW5rIFwiQXVkaW9TcHJpdGVcIn19e3svY3Jvc3NMaW5rfX0gYXJyYXkgb2Ygb2JqZWN0cyBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdCB7aWQsIHN0YXJ0VGltZSwgZHVyYXRpb259Ljxici8+XG5cdCAqICAgaWQgdXNlZCB0byBwbGF5IHRoZSBzb3VuZCBsYXRlciwgaW4gdGhlIHNhbWUgbWFubmVyIGFzIGEgc291bmQgc3JjIHdpdGggYW4gaWQuPGJyLz5cblx0ICogICBzdGFydFRpbWUgaXMgdGhlIGluaXRpYWwgb2Zmc2V0IHRvIHN0YXJ0IHBsYXliYWNrIGFuZCBsb29wIGZyb20sIGluIG1pbGxpc2Vjb25kcy48YnIvPlxuXHQgKiAgIGR1cmF0aW9uIGlzIHRoZSBhbW91bnQgb2YgdGltZSB0byBwbGF5IHRoZSBjbGlwIGZvciwgaW4gbWlsbGlzZWNvbmRzLjxici8+XG5cdCAqIFRoaXMgYWxsb3dzIFNvdW5kIHRvIHN1cHBvcnQgYXVkaW8gc3ByaXRlcyB0aGF0IGFyZSBwbGF5ZWQgYmFjayBieSBpZC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQYXRoIFNldCBhIHBhdGggdGhhdCB3aWxsIGJlIHByZXBlbmRlZCB0byBzcmMgZm9yIGxvYWRpbmcuXG5cdCAqIEBwYXJhbSB7T2JqZWN0IHwgUGxheVByb3BzQ29uZmlnfSBkZWZhdWx0UGxheVByb3BzIE9wdGlvbmFsIFBsYXliYWNrIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHNldCBhcyB0aGUgZGVmYXVsdHMgb24gYW55IG5ldyBBYnN0cmFjdFNvdW5kSW5zdGFuY2UuXG5cdCAqIFNlZSB7eyNjcm9zc0xpbmsgXCJQbGF5UHJvcHNDb25maWdcIn19e3svY3Jvc3NMaW5rfX0gZm9yIG9wdGlvbnMuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggdGhlIG1vZGlmaWVkIHZhbHVlcyB0aGF0IHdlcmUgcGFzc2VkIGluLCB3aGljaCBkZWZpbmVzIHRoZSBzb3VuZC5cblx0ICogUmV0dXJucyBmYWxzZSBpZiB0aGUgc291cmNlIGNhbm5vdCBiZSBwYXJzZWQgb3Igbm8gcGx1Z2lucyBjYW4gYmUgaW5pdGlhbGl6ZWQuXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc291cmNlIGlzIGFscmVhZHkgbG9hZGVkLlxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjQuMFxuXHQgKi9cblx0cy5yZWdpc3RlclNvdW5kID0gZnVuY3Rpb24gKHNyYywgaWQsIGRhdGEsIGJhc2VQYXRoLCBkZWZhdWx0UGxheVByb3BzKSB7XG5cdFx0dmFyIGxvYWRJdGVtID0ge3NyYzogc3JjLCBpZDogaWQsIGRhdGE6ZGF0YSwgZGVmYXVsdFBsYXlQcm9wczpkZWZhdWx0UGxheVByb3BzfTtcblx0XHRpZiAoc3JjIGluc3RhbmNlb2YgT2JqZWN0ICYmIHNyYy5zcmMpIHtcblx0XHRcdGJhc2VQYXRoID0gaWQ7XG5cdFx0XHRsb2FkSXRlbSA9IHNyYztcblx0XHR9XG5cdFx0bG9hZEl0ZW0gPSBjcmVhdGVqcy5Mb2FkSXRlbS5jcmVhdGUobG9hZEl0ZW0pO1xuXHRcdGxvYWRJdGVtLnBhdGggPSBiYXNlUGF0aDtcblxuXHRcdGlmIChiYXNlUGF0aCAhPSBudWxsICYmICEobG9hZEl0ZW0uc3JjIGluc3RhbmNlb2YgT2JqZWN0KSkge2xvYWRJdGVtLnNyYyA9IGJhc2VQYXRoICsgbG9hZEl0ZW0uc3JjO31cblxuXHRcdHZhciBsb2FkZXIgPSBzLl9yZWdpc3RlclNvdW5kKGxvYWRJdGVtKTtcblx0XHRpZighbG9hZGVyKSB7cmV0dXJuIGZhbHNlO31cblxuXHRcdGlmICghcy5fcHJlbG9hZEhhc2hbbG9hZEl0ZW0uc3JjXSkgeyBzLl9wcmVsb2FkSGFzaFtsb2FkSXRlbS5zcmNdID0gW107fVxuXHRcdHMuX3ByZWxvYWRIYXNoW2xvYWRJdGVtLnNyY10ucHVzaChsb2FkSXRlbSk7XG5cdFx0aWYgKHMuX3ByZWxvYWRIYXNoW2xvYWRJdGVtLnNyY10ubGVuZ3RoID09IDEpIHtcblx0XHRcdC8vIE9KUiBub3RlIHRoaXMgd2lsbCBkaXNhbGxvdyByZWxvYWRpbmcgYSBzb3VuZCBpZiBsb2FkaW5nIGZhaWxzIG9yIHRoZSBzb3VyY2UgY2hhbmdlc1xuXHRcdFx0bG9hZGVyLm9uKFwiY29tcGxldGVcIiwgdGhpcy5faGFuZGxlTG9hZENvbXBsZXRlLCB0aGlzKTtcblx0XHRcdGxvYWRlci5vbihcImVycm9yXCIsIHRoaXMuX2hhbmRsZUxvYWRFcnJvciwgdGhpcyk7XG5cdFx0XHRzLmFjdGl2ZVBsdWdpbi5wcmVsb2FkKGxvYWRlcik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChzLl9wcmVsb2FkSGFzaFtsb2FkSXRlbS5zcmNdWzBdID09IHRydWUpIHtyZXR1cm4gdHJ1ZTt9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxvYWRJdGVtO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBhbiBhcnJheSBvZiBhdWRpbyBmaWxlcyBmb3IgbG9hZGluZyBhbmQgZnV0dXJlIHBsYXliYWNrIGluIFNvdW5kLiBJdCBpcyByZWNvbW1lbmRlZCB0byByZWdpc3RlciBhbGxcblx0ICogc291bmRzIHRoYXQgbmVlZCB0byBiZSBwbGF5ZWQgYmFjayBpbiBvcmRlciB0byBwcm9wZXJseSBwcmVwYXJlIGFuZCBwcmVsb2FkIHRoZW0uIFNvdW5kIGRvZXMgaW50ZXJuYWwgcHJlbG9hZGluZ1xuXHQgKiB3aGVuIHJlcXVpcmVkLlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqIFx0XHR2YXIgYXNzZXRQYXRoID0gXCIuL215QXVkaW9QYXRoL1wiO1xuXHQgKiAgICAgIHZhciBzb3VuZHMgPSBbXG5cdCAqICAgICAgICAgIHtzcmM6XCJhc3NldDAub2dnXCIsIGlkOlwiZXhhbXBsZVwifSxcblx0ICogICAgICAgICAge3NyYzpcImFzc2V0MS5vZ2dcIiwgaWQ6XCIxXCIsIGRhdGE6Nn0sXG5cdCAqICAgICAgICAgIHtzcmM6XCJhc3NldDIubXAzXCIsIGlkOlwid29ya3NcIn1cblx0ICogICAgICAgICAge3NyYzp7bXAzOlwicGF0aDEvYXNzZXQzLm1wM1wiLCBvZ2c6XCJwYXRoMi9hc3NldDNOb0V4dGVuc2lvblwifSwgaWQ6XCJiZXR0ZXJcIn1cblx0ICogICAgICBdO1xuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLmFsdGVybmF0ZUV4dGVuc2lvbnMgPSBbXCJtcDNcIl07XHQvLyBpZiB0aGUgcGFzc2VkIGV4dGVuc2lvbiBpcyBub3Qgc3VwcG9ydGVkLCB0cnkgdGhpcyBleHRlbnNpb25cblx0ICogICAgICBjcmVhdGVqcy5Tb3VuZC5vbihcImZpbGVsb2FkXCIsIGhhbmRsZUxvYWQpOyAvLyBjYWxsIGhhbmRsZUxvYWQgd2hlbiBlYWNoIHNvdW5kIGxvYWRzXG5cdCAqICAgICAgY3JlYXRlanMuU291bmQucmVnaXN0ZXJTb3VuZHMoc291bmRzLCBhc3NldFBhdGgpO1xuXHQgKlxuXHQgKiBAbWV0aG9kIHJlZ2lzdGVyU291bmRzXG5cdCAqIEBwYXJhbSB7QXJyYXl9IHNvdW5kcyBBbiBhcnJheSBvZiBvYmplY3RzIHRvIGxvYWQuIE9iamVjdHMgYXJlIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb3JtYXQgbmVlZGVkIGZvclxuXHQgKiB7eyNjcm9zc0xpbmsgXCJTb3VuZC9yZWdpc3RlclNvdW5kXCJ9fXt7L2Nyb3NzTGlua319OiA8Y29kZT57c3JjOnNyY1VSSSwgaWQ6SUQsIGRhdGE6RGF0YX08L2NvZGU+XG5cdCAqIHdpdGggXCJpZFwiIGFuZCBcImRhdGFcIiBiZWluZyBvcHRpb25hbC5cblx0ICogWW91IGNhbiBhbHNvIHBhc3MgYW4gb2JqZWN0IHdpdGggcGF0aCBhbmQgbWFuaWZlc3QgcHJvcGVydGllcywgd2hlcmUgcGF0aCBpcyBhIGJhc2VQYXRoIGFuZCBtYW5pZmVzdCBpcyBhbiBhcnJheSBvZiBvYmplY3RzIHRvIGxvYWQuXG5cdCAqIE5vdGUgaWQgaXMgcmVxdWlyZWQgaWYgc3JjIGlzIGFuIG9iamVjdCB3aXRoIGV4dGVuc2lvbiBsYWJlbGVkIHNyYyBwcm9wZXJ0aWVzLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVBhdGggU2V0IGEgcGF0aCB0aGF0IHdpbGwgYmUgcHJlcGVuZGVkIHRvIGVhY2ggc3JjIHdoZW4gbG9hZGluZy4gIFdoZW4gY3JlYXRpbmcsIHBsYXlpbmcsIG9yIHJlbW92aW5nXG5cdCAqIGF1ZGlvIHRoYXQgd2FzIGxvYWRlZCB3aXRoIGEgYmFzZVBhdGggYnkgc3JjLCB0aGUgYmFzZVBhdGggbXVzdCBiZSBpbmNsdWRlZC5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBbiBhcnJheSBvZiBvYmplY3RzIHdpdGggdGhlIG1vZGlmaWVkIHZhbHVlcyB0aGF0IHdlcmUgcGFzc2VkIGluLCB3aGljaCBkZWZpbmVzIGVhY2ggc291bmQuXG5cdCAqIExpa2UgcmVnaXN0ZXJTb3VuZCwgaXQgd2lsbCByZXR1cm4gZmFsc2UgZm9yIGFueSB2YWx1ZXMgd2hlbiB0aGUgc291cmNlIGNhbm5vdCBiZSBwYXJzZWQgb3IgaWYgbm8gcGx1Z2lucyBjYW4gYmUgaW5pdGlhbGl6ZWQuXG5cdCAqIEFsc28sIGl0IHdpbGwgcmV0dXJuIHRydWUgZm9yIGFueSB2YWx1ZXMgd2hlbiB0aGUgc291cmNlIGlzIGFscmVhZHkgbG9hZGVkLlxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5yZWdpc3RlclNvdW5kcyA9IGZ1bmN0aW9uIChzb3VuZHMsIGJhc2VQYXRoKSB7XG5cdFx0dmFyIHJldHVyblZhbHVlcyA9IFtdO1xuXHRcdGlmIChzb3VuZHMucGF0aCkge1xuXHRcdFx0aWYgKCFiYXNlUGF0aCkge1xuXHRcdFx0XHRiYXNlUGF0aCA9IHNvdW5kcy5wYXRoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YmFzZVBhdGggPSBiYXNlUGF0aCArIHNvdW5kcy5wYXRoO1xuXHRcdFx0fVxuXHRcdFx0c291bmRzID0gc291bmRzLm1hbmlmZXN0O1xuXHRcdFx0Ly8gVE9ETyBkb2N1bWVudCB0aGlzIGZlYXR1cmVcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzb3VuZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRyZXR1cm5WYWx1ZXNbaV0gPSBjcmVhdGVqcy5Tb3VuZC5yZWdpc3RlclNvdW5kKHNvdW5kc1tpXS5zcmMsIHNvdW5kc1tpXS5pZCwgc291bmRzW2ldLmRhdGEsIGJhc2VQYXRoLCBzb3VuZHNbaV0uZGVmYXVsdFBsYXlQcm9wcyk7XG5cdFx0fVxuXHRcdHJldHVybiByZXR1cm5WYWx1ZXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlbW92ZSBhIHNvdW5kIHRoYXQgaGFzIGJlZW4gcmVnaXN0ZXJlZCB3aXRoIHt7I2Nyb3NzTGluayBcIlNvdW5kL3JlZ2lzdGVyU291bmRcIn19e3svY3Jvc3NMaW5rfX0gb3Jcblx0ICoge3sjY3Jvc3NMaW5rIFwiU291bmQvcmVnaXN0ZXJTb3VuZHNcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIDxiciAvPk5vdGUgdGhpcyB3aWxsIHN0b3AgcGxheWJhY2sgb24gYWN0aXZlIGluc3RhbmNlcyBwbGF5aW5nIHRoaXMgc291bmQgYmVmb3JlIGRlbGV0aW5nIHRoZW0uXG5cdCAqIDxiciAvPk5vdGUgaWYgeW91IHBhc3NlZCBpbiBhIGJhc2VQYXRoLCB5b3UgbmVlZCB0byBwYXNzIGl0IG9yIHByZXBlbmQgaXQgdG8gdGhlIHNyYyBoZXJlLlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICAgY3JlYXRlanMuU291bmQucmVtb3ZlU291bmQoXCJteUlEXCIpO1xuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLnJlbW92ZVNvdW5kKFwibXlBdWRpb0Jhc2VQYXRoL215U291bmQub2dnXCIpO1xuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLnJlbW92ZVNvdW5kKFwibXlQYXRoL215T3RoZXJTb3VuZC5tcDNcIiwgXCJteUJhc2VQYXRoL1wiKTtcblx0ICogICAgICBjcmVhdGVqcy5Tb3VuZC5yZW1vdmVTb3VuZCh7bXAzOlwibXVzaWNOb0V4dGVuc2lvblwiLCBvZ2c6XCJtdXNpYy5vZ2dcIn0sIFwibXlCYXNlUGF0aC9cIik7XG5cdCAqXG5cdCAqIEBtZXRob2QgcmVtb3ZlU291bmRcblx0ICogQHBhcmFtIHtTdHJpbmcgfCBPYmplY3R9IHNyYyBUaGUgc3JjIG9yIElEIG9mIHRoZSBhdWRpbywgb3IgYW4gT2JqZWN0IHdpdGggYSBcInNyY1wiIHByb3BlcnR5LCBvciBhbiBPYmplY3Qgd2l0aCBtdWx0aXBsZSBleHRlbnNpb24gbGFiZWxlZCBzcmMgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQYXRoIFNldCBhIHBhdGggdGhhdCB3aWxsIGJlIHByZXBlbmRlZCB0byBlYWNoIHNyYyB3aGVuIHJlbW92aW5nLlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHNvdW5kIGlzIHN1Y2Nlc3NmdWxseSByZW1vdmVkLlxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjQuMVxuXHQgKi9cblx0cy5yZW1vdmVTb3VuZCA9IGZ1bmN0aW9uKHNyYywgYmFzZVBhdGgpIHtcblx0XHRpZiAocy5hY3RpdmVQbHVnaW4gPT0gbnVsbCkge3JldHVybiBmYWxzZTt9XG5cblx0XHRpZiAoc3JjIGluc3RhbmNlb2YgT2JqZWN0ICYmIHNyYy5zcmMpIHtzcmMgPSBzcmMuc3JjO31cblxuXHRcdHZhciBkZXRhaWxzO1xuXHRcdGlmIChzcmMgaW5zdGFuY2VvZiBPYmplY3QpIHtcblx0XHRcdGRldGFpbHMgPSBzLl9wYXJzZVNyYyhzcmMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcmMgPSBzLl9nZXRTcmNCeUlkKHNyYykuc3JjO1xuXHRcdFx0ZGV0YWlscyA9IHMuX3BhcnNlUGF0aChzcmMpO1xuXHRcdH1cblx0XHRpZiAoZGV0YWlscyA9PSBudWxsKSB7cmV0dXJuIGZhbHNlO31cblx0XHRzcmMgPSBkZXRhaWxzLnNyYztcblx0XHRpZiAoYmFzZVBhdGggIT0gbnVsbCkge3NyYyA9IGJhc2VQYXRoICsgc3JjO31cblxuXHRcdGZvcih2YXIgcHJvcCBpbiBzLl9pZEhhc2gpe1xuXHRcdFx0aWYocy5faWRIYXNoW3Byb3BdLnNyYyA9PSBzcmMpIHtcblx0XHRcdFx0ZGVsZXRlKHMuX2lkSGFzaFtwcm9wXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gY2xlYXIgZnJvbSBTb3VuZENoYW5uZWwsIHdoaWNoIGFsc28gc3RvcHMgYW5kIGRlbGV0ZXMgYWxsIGluc3RhbmNlc1xuXHRcdFNvdW5kQ2hhbm5lbC5yZW1vdmVTcmMoc3JjKTtcblxuXHRcdGRlbGV0ZShzLl9wcmVsb2FkSGFzaFtzcmNdKTtcblxuXHRcdHMuYWN0aXZlUGx1Z2luLnJlbW92ZVNvdW5kKHNyYyk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogUmVtb3ZlIGFuIGFycmF5IG9mIGF1ZGlvIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB7eyNjcm9zc0xpbmsgXCJTb3VuZC9yZWdpc3RlclNvdW5kXCJ9fXt7L2Nyb3NzTGlua319IG9yXG5cdCAqIHt7I2Nyb3NzTGluayBcIlNvdW5kL3JlZ2lzdGVyU291bmRzXCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKiA8YnIgLz5Ob3RlIHRoaXMgd2lsbCBzdG9wIHBsYXliYWNrIG9uIGFjdGl2ZSBpbnN0YW5jZXMgcGxheWluZyB0aGlzIGF1ZGlvIGJlZm9yZSBkZWxldGluZyB0aGVtLlxuXHQgKiA8YnIgLz5Ob3RlIGlmIHlvdSBwYXNzZWQgaW4gYSBiYXNlUGF0aCwgeW91IG5lZWQgdG8gcGFzcyBpdCBvciBwcmVwZW5kIGl0IHRvIHRoZSBzcmMgaGVyZS5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiBcdFx0YXNzZXRQYXRoID0gXCIuL215UGF0aC9cIjtcblx0ICogICAgICB2YXIgc291bmRzID0gW1xuXHQgKiAgICAgICAgICB7c3JjOlwiYXNzZXQwLm9nZ1wiLCBpZDpcImV4YW1wbGVcIn0sXG5cdCAqICAgICAgICAgIHtzcmM6XCJhc3NldDEub2dnXCIsIGlkOlwiMVwiLCBkYXRhOjZ9LFxuXHQgKiAgICAgICAgICB7c3JjOlwiYXNzZXQyLm1wM1wiLCBpZDpcIndvcmtzXCJ9XG5cdCAqICAgICAgXTtcblx0ICogICAgICBjcmVhdGVqcy5Tb3VuZC5yZW1vdmVTb3VuZHMoc291bmRzLCBhc3NldFBhdGgpO1xuXHQgKlxuXHQgKiBAbWV0aG9kIHJlbW92ZVNvdW5kc1xuXHQgKiBAcGFyYW0ge0FycmF5fSBzb3VuZHMgQW4gYXJyYXkgb2Ygb2JqZWN0cyB0byByZW1vdmUuIE9iamVjdHMgYXJlIGV4cGVjdGVkIHRvIGJlIGluIHRoZSBmb3JtYXQgbmVlZGVkIGZvclxuXHQgKiB7eyNjcm9zc0xpbmsgXCJTb3VuZC9yZW1vdmVTb3VuZFwifX17ey9jcm9zc0xpbmt9fTogPGNvZGU+e3NyY09ySUQ6c3JjVVJJb3JJRH08L2NvZGU+LlxuXHQgKiBZb3UgY2FuIGFsc28gcGFzcyBhbiBvYmplY3Qgd2l0aCBwYXRoIGFuZCBtYW5pZmVzdCBwcm9wZXJ0aWVzLCB3aGVyZSBwYXRoIGlzIGEgYmFzZVBhdGggYW5kIG1hbmlmZXN0IGlzIGFuIGFycmF5IG9mIG9iamVjdHMgdG8gcmVtb3ZlLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVBhdGggU2V0IGEgcGF0aCB0aGF0IHdpbGwgYmUgcHJlcGVuZGVkIHRvIGVhY2ggc3JjIHdoZW4gcmVtb3ZpbmcuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQW4gYXJyYXkgb2YgQm9vbGVhbiB2YWx1ZXMgcmVwcmVzZW50aW5nIGlmIHRoZSBzb3VuZHMgd2l0aCB0aGUgc2FtZSBhcnJheSBpbmRleCB3ZXJlXG5cdCAqIHN1Y2Nlc3NmdWxseSByZW1vdmVkLlxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjQuMVxuXHQgKi9cblx0cy5yZW1vdmVTb3VuZHMgPSBmdW5jdGlvbiAoc291bmRzLCBiYXNlUGF0aCkge1xuXHRcdHZhciByZXR1cm5WYWx1ZXMgPSBbXTtcblx0XHRpZiAoc291bmRzLnBhdGgpIHtcblx0XHRcdGlmICghYmFzZVBhdGgpIHtcblx0XHRcdFx0YmFzZVBhdGggPSBzb3VuZHMucGF0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJhc2VQYXRoID0gYmFzZVBhdGggKyBzb3VuZHMucGF0aDtcblx0XHRcdH1cblx0XHRcdHNvdW5kcyA9IHNvdW5kcy5tYW5pZmVzdDtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBzb3VuZHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRyZXR1cm5WYWx1ZXNbaV0gPSBjcmVhdGVqcy5Tb3VuZC5yZW1vdmVTb3VuZChzb3VuZHNbaV0uc3JjLCBiYXNlUGF0aCk7XG5cdFx0fVxuXHRcdHJldHVybiByZXR1cm5WYWx1ZXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlbW92ZSBhbGwgc291bmRzIHRoYXQgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB7eyNjcm9zc0xpbmsgXCJTb3VuZC9yZWdpc3RlclNvdW5kXCJ9fXt7L2Nyb3NzTGlua319IG9yXG5cdCAqIHt7I2Nyb3NzTGluayBcIlNvdW5kL3JlZ2lzdGVyU291bmRzXCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKiA8YnIgLz5Ob3RlIHRoaXMgd2lsbCBzdG9wIHBsYXliYWNrIG9uIGFsbCBhY3RpdmUgc291bmQgaW5zdGFuY2VzIGJlZm9yZSBkZWxldGluZyB0aGVtLlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICBjcmVhdGVqcy5Tb3VuZC5yZW1vdmVBbGxTb3VuZHMoKTtcblx0ICpcblx0ICogQG1ldGhvZCByZW1vdmVBbGxTb3VuZHNcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC40LjFcblx0ICovXG5cdHMucmVtb3ZlQWxsU291bmRzID0gZnVuY3Rpb24oKSB7XG5cdFx0cy5faWRIYXNoID0ge307XG5cdFx0cy5fcHJlbG9hZEhhc2ggPSB7fTtcblx0XHRTb3VuZENoYW5uZWwucmVtb3ZlQWxsKCk7XG5cdFx0aWYgKHMuYWN0aXZlUGx1Z2luKSB7cy5hY3RpdmVQbHVnaW4ucmVtb3ZlQWxsU291bmRzKCk7fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDaGVjayBpZiBhIHNvdXJjZSBoYXMgYmVlbiBsb2FkZWQgYnkgaW50ZXJuYWwgcHJlbG9hZGVycy4gVGhpcyBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIHRoYXQgc291bmRzIHRoYXQgYXJlXG5cdCAqIG5vdCBjb21wbGV0ZWQgcHJlbG9hZGluZyB3aWxsIG5vdCBraWNrIG9mZiBhIG5ldyBpbnRlcm5hbCBwcmVsb2FkIGlmIHRoZXkgYXJlIHBsYXllZC5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiAgICAgdmFyIG15U291bmQgPSBcImFzc2V0UGF0aC9hc3NldDAub2dnXCI7XG5cdCAqICAgICBpZihjcmVhdGVqcy5Tb3VuZC5sb2FkQ29tcGxldGUobXlTb3VuZCkge1xuXHQgKiAgICAgICAgIGNyZWF0ZWpzLlNvdW5kLnBsYXkobXlTb3VuZCk7XG5cdCAqICAgICB9XG5cdCAqXG5cdCAqIEBtZXRob2QgbG9hZENvbXBsZXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNyYyBvciBpZCB0aGF0IGlzIGJlaW5nIGxvYWRlZC5cblx0ICogQHJldHVybiB7Qm9vbGVhbn0gSWYgdGhlIHNyYyBpcyBhbHJlYWR5IGxvYWRlZC5cblx0ICogQHNpbmNlIDAuNC4wXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMubG9hZENvbXBsZXRlID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdGlmICghcy5pc1JlYWR5KCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dmFyIGRldGFpbHMgPSBzLl9wYXJzZVBhdGgoc3JjKTtcblx0XHRpZiAoZGV0YWlscykge1xuXHRcdFx0c3JjID0gcy5fZ2V0U3JjQnlJZChkZXRhaWxzLnNyYykuc3JjO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcmMgPSBzLl9nZXRTcmNCeUlkKHNyYykuc3JjO1xuXHRcdH1cblx0XHRpZihzLl9wcmVsb2FkSGFzaFtzcmNdID09IHVuZGVmaW5lZCkge3JldHVybiBmYWxzZTt9XG5cdFx0cmV0dXJuIChzLl9wcmVsb2FkSGFzaFtzcmNdWzBdID09IHRydWUpOyAgLy8gc3JjIG9ubHkgbG9hZHMgb25jZSwgc28gaWYgaXQncyB0cnVlIGZvciB0aGUgZmlyc3QgaXQncyB0cnVlIGZvciBhbGxcblx0fTtcblxuXHQvKipcblx0ICogUGFyc2UgdGhlIHBhdGggb2YgYSBzb3VuZC4gQWx0ZXJuYXRlIGV4dGVuc2lvbnMgd2lsbCBiZSBhdHRlbXB0ZWQgaW4gb3JkZXIgaWYgdGhlXG5cdCAqIGN1cnJlbnQgZXh0ZW5zaW9uIGlzIG5vdCBzdXBwb3J0ZWRcblx0ICogQG1ldGhvZCBfcGFyc2VQYXRoXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBUaGUgcGF0aCB0byBhbiBhdWRpbyBzb3VyY2UuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gQSBmb3JtYXR0ZWQgb2JqZWN0IHRoYXQgY2FuIGJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUge3sjY3Jvc3NMaW5rIFwiU291bmQvYWN0aXZlUGx1Z2luOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqIGFuZCByZXR1cm5lZCB0byBhIHByZWxvYWRlciBsaWtlIDxhIGhyZWY9XCJodHRwOi8vcHJlbG9hZGpzLmNvbVwiIHRhcmdldD1cIl9ibGFua1wiPlByZWxvYWRKUzwvYT4uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuX3BhcnNlUGF0aCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdGlmICh0eXBlb2YodmFsdWUpICE9IFwic3RyaW5nXCIpIHt2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7fVxuXG5cdFx0dmFyIG1hdGNoID0gdmFsdWUubWF0Y2gocy5GSUxFX1BBVFRFUk4pO1xuXHRcdGlmIChtYXRjaCA9PSBudWxsKSB7cmV0dXJuIGZhbHNlO31cblxuXHRcdHZhciBuYW1lID0gbWF0Y2hbNF07XG5cdFx0dmFyIGV4dCA9IG1hdGNoWzVdO1xuXHRcdHZhciBjID0gcy5jYXBhYmlsaXRpZXM7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHdoaWxlICghY1tleHRdKSB7XG5cdFx0XHRleHQgPSBzLmFsdGVybmF0ZUV4dGVuc2lvbnNbaSsrXTtcblx0XHRcdGlmIChpID4gcy5hbHRlcm5hdGVFeHRlbnNpb25zLmxlbmd0aCkgeyByZXR1cm4gbnVsbDt9XHQvLyBubyBleHRlbnNpb25zIGFyZSBzdXBwb3J0ZWRcblx0XHR9XG5cdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKFwiLlwiK21hdGNoWzVdLCBcIi5cIitleHQpO1xuXG5cdFx0dmFyIHJldCA9IHtuYW1lOm5hbWUsIHNyYzp2YWx1ZSwgZXh0ZW5zaW9uOmV4dH07XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcblxuXHQvKipcblx0ICogUGFyc2UgdGhlIHBhdGggb2YgYSBzb3VuZCBiYXNlZCBvbiBwcm9wZXJ0aWVzIG9mIHNyYyBtYXRjaGluZyB3aXRoIHN1cHBvcnRlZCBleHRlbnNpb25zLlxuXHQgKiBSZXR1cm5zIGZhbHNlIGlmIG5vbmUgb2YgdGhlIHByb3BlcnRpZXMgYXJlIHN1cHBvcnRlZFxuXHQgKiBAbWV0aG9kIF9wYXJzZVNyY1xuXHQgKiBAcGFyYW0ge09iamVjdH0gdmFsdWUgVGhlIHBhdGhzIHRvIGFuIGF1ZGlvIHNvdXJjZSwgaW5kZXhlZCBieSBleHRlbnNpb24gdHlwZS5cblx0ICogQHJldHVybiB7T2JqZWN0fSBBIGZvcm1hdHRlZCBvYmplY3QgdGhhdCBjYW4gYmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9hY3RpdmVQbHVnaW46cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogYW5kIHJldHVybmVkIHRvIGEgcHJlbG9hZGVyIGxpa2UgPGEgaHJlZj1cImh0dHA6Ly9wcmVsb2FkanMuY29tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+UHJlbG9hZEpTPC9hPi5cblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5fcGFyc2VTcmMgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHR2YXIgcmV0ID0ge25hbWU6dW5kZWZpbmVkLCBzcmM6dW5kZWZpbmVkLCBleHRlbnNpb246dW5kZWZpbmVkfTtcblx0XHR2YXIgYyA9IHMuY2FwYWJpbGl0aWVzO1xuXG5cdFx0Zm9yICh2YXIgcHJvcCBpbiB2YWx1ZSkge1xuXHRcdCAgaWYodmFsdWUuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgY1twcm9wXSkge1xuXHRcdFx0XHRyZXQuc3JjID0gdmFsdWVbcHJvcF07XG5cdFx0XHRcdHJldC5leHRlbnNpb24gPSBwcm9wO1xuXHRcdFx0XHRicmVhaztcblx0XHQgIH1cblx0XHR9XG5cdFx0aWYgKCFyZXQuc3JjKSB7cmV0dXJuIGZhbHNlO31cdC8vIG5vIG1hdGNoZXNcblxuXHRcdHZhciBpID0gcmV0LnNyYy5sYXN0SW5kZXhPZihcIi9cIik7XG5cdFx0aWYgKGkgIT0gLTEpIHtcblx0XHRcdHJldC5uYW1lID0gcmV0LnNyYy5zbGljZShpKzEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXQubmFtZSA9IHJldC5zcmM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fTtcblxuXHQvKiAtLS0tLS0tLS0tLS0tLS1cblx0IFN0YXRpYyBBUEkuXG5cdCAtLS0tLS0tLS0tLS0tLS0gKi9cblx0LyoqXG5cdCAqIFBsYXkgYSBzb3VuZCBhbmQgZ2V0IGEge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlXCJ9fXt7L2Nyb3NzTGlua319IHRvIGNvbnRyb2wuIElmIHRoZSBzb3VuZCBmYWlscyB0b1xuXHQgKiBwbGF5LCBhbiBBYnN0cmFjdFNvdW5kSW5zdGFuY2Ugd2lsbCBzdGlsbCBiZSByZXR1cm5lZCwgYW5kIGhhdmUgYSBwbGF5U3RhdGUgb2Yge3sjY3Jvc3NMaW5rIFwiU291bmQvUExBWV9GQUlMRUQ6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIE5vdGUgdGhhdCBldmVuIG9uIHNvdW5kcyB3aXRoIGZhaWxlZCBwbGF5YmFjaywgeW91IG1heSBzdGlsbCBiZSBhYmxlIHRvIGNhbGwgdGhlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9wbGF5XCJ9fXt7L2Nyb3NzTGlua319LFxuXHQgKiBtZXRob2QsIHNpbmNlIHRoZSBmYWlsdXJlIGNvdWxkIGJlIGR1ZSB0byBsYWNrIG9mIGF2YWlsYWJsZSBjaGFubmVscy4gSWYgdGhlIHNyYyBkb2VzIG5vdCBoYXZlIGEgc3VwcG9ydGVkXG5cdCAqIGV4dGVuc2lvbiBvciBpZiB0aGVyZSBpcyBubyBhdmFpbGFibGUgcGx1Z2luLCBhIGRlZmF1bHQgQWJzdHJhY3RTb3VuZEluc3RhbmNlIHdpbGwgc3RpbGwgYmUgcmV0dXJuZWQsIHdoaWNoIHdpbGxcblx0ICogbm90IHBsYXkgYW55IGF1ZGlvLCBidXQgd2lsbCBub3QgZ2VuZXJhdGUgZXJyb3JzLlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICAgY3JlYXRlanMuU291bmQub24oXCJmaWxlbG9hZFwiLCBoYW5kbGVMb2FkKTtcblx0ICogICAgICBjcmVhdGVqcy5Tb3VuZC5yZWdpc3RlclNvdW5kKFwibXlBdWRpb1BhdGgvbXlTb3VuZC5tcDNcIiwgXCJteUlEXCIsIDMpO1xuXHQgKiAgICAgIGZ1bmN0aW9uIGhhbmRsZUxvYWQoZXZlbnQpIHtcblx0ICogICAgICBcdGNyZWF0ZWpzLlNvdW5kLnBsYXkoXCJteUlEXCIpO1xuXHQgKiAgICAgIFx0Ly8gc3RvcmUgb2ZmIEFic3RyYWN0U291bmRJbnN0YW5jZSBmb3IgY29udHJvbGxpbmdcblx0ICogICAgICBcdHZhciBteUluc3RhbmNlID0gY3JlYXRlanMuU291bmQucGxheShcIm15SURcIiwge2ludGVycnVwdDogY3JlYXRlanMuU291bmQuSU5URVJSVVBUX0FOWSwgbG9vcDotMX0pO1xuXHQgKiAgICAgIH1cblx0ICpcblx0ICogTk9URTogVG8gY3JlYXRlIGFuIGF1ZGlvIHNwcml0ZSB0aGF0IGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsIGJvdGggc3RhcnRUaW1lIGFuZCBkdXJhdGlvbiBuZWVkIHRvIGJlIHNldC5cblx0ICogVGhpcyBpcyBvbmx5IHdoZW4gY3JlYXRpbmcgYSBuZXcgYXVkaW8gc3ByaXRlLCBub3Qgd2hlbiBwbGF5aW5nIHVzaW5nIHRoZSBpZCBvZiBhbiBhbHJlYWR5IHJlZ2lzdGVyZWQgYXVkaW8gc3ByaXRlLlxuXHQgKlxuXHQgKiBAbWV0aG9kIHBsYXlcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNyYyBUaGUgc3JjIG9yIElEIG9mIHRoZSBhdWRpby5cblx0ICogQHBhcmFtIHtPYmplY3QgfCBQbGF5UHJvcHNDb25maWd9IHByb3BzIEEgUGxheVByb3BzQ29uZmlnIGluc3RhbmNlLCBvciBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcGFyYW1ldGVycyB0b1xuXHQgKiBwbGF5IGEgc291bmQuIFNlZSB0aGUge3sjY3Jvc3NMaW5rIFwiUGxheVByb3BzQ29uZmlnXCJ9fXt7L2Nyb3NzTGlua319IGZvciBtb3JlIGluZm8uXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gQSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2VcIn19e3svY3Jvc3NMaW5rfX0gdGhhdCBjYW4gYmUgY29udHJvbGxlZFxuXHQgKiBhZnRlciBpdCBpcyBjcmVhdGVkLlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLnBsYXkgPSBmdW5jdGlvbiAoc3JjLCBwcm9wcykge1xuXHRcdHZhciBwbGF5UHJvcHMgPSBjcmVhdGVqcy5QbGF5UHJvcHNDb25maWcuY3JlYXRlKHByb3BzKTtcblx0XHR2YXIgaW5zdGFuY2UgPSBzLmNyZWF0ZUluc3RhbmNlKHNyYywgcGxheVByb3BzLnN0YXJ0VGltZSwgcGxheVByb3BzLmR1cmF0aW9uKTtcblx0XHR2YXIgb2sgPSBzLl9wbGF5SW5zdGFuY2UoaW5zdGFuY2UsIHBsYXlQcm9wcyk7XG5cdFx0aWYgKCFvaykge2luc3RhbmNlLl9wbGF5RmFpbGVkKCk7fVxuXHRcdHJldHVybiBpbnN0YW5jZTtcblx0fTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZVwifX17ey9jcm9zc0xpbmt9fSB1c2luZyB0aGUgcGFzc2VkIGluIHNyYy4gSWYgdGhlIHNyYyBkb2VzIG5vdCBoYXZlIGFcblx0ICogc3VwcG9ydGVkIGV4dGVuc2lvbiBvciBpZiB0aGVyZSBpcyBubyBhdmFpbGFibGUgcGx1Z2luLCBhIGRlZmF1bHQgQWJzdHJhY3RTb3VuZEluc3RhbmNlIHdpbGwgYmUgcmV0dXJuZWQgdGhhdCBjYW4gYmVcblx0ICogY2FsbGVkIHNhZmVseSBidXQgZG9lcyBub3RoaW5nLlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICAgdmFyIG15SW5zdGFuY2UgPSBudWxsO1xuXHQgKiAgICAgIGNyZWF0ZWpzLlNvdW5kLm9uKFwiZmlsZWxvYWRcIiwgaGFuZGxlTG9hZCk7XG5cdCAqICAgICAgY3JlYXRlanMuU291bmQucmVnaXN0ZXJTb3VuZChcIm15QXVkaW9QYXRoL215U291bmQubXAzXCIsIFwibXlJRFwiLCAzKTtcblx0ICogICAgICBmdW5jdGlvbiBoYW5kbGVMb2FkKGV2ZW50KSB7XG5cdCAqICAgICAgXHRteUluc3RhbmNlID0gY3JlYXRlanMuU291bmQuY3JlYXRlSW5zdGFuY2UoXCJteUlEXCIpO1xuXHQgKiAgICAgIFx0Ly8gYWx0ZXJuYXRlbHkgd2UgY291bGQgY2FsbCB0aGUgZm9sbG93aW5nXG5cdCAqICAgICAgXHRteUluc3RhbmNlID0gY3JlYXRlanMuU291bmQuY3JlYXRlSW5zdGFuY2UoXCJteUF1ZGlvUGF0aC9teVNvdW5kLm1wM1wiKTtcblx0ICogICAgICB9XG5cdCAqXG5cdCAqIE5PVEUgdG8gY3JlYXRlIGFuIGF1ZGlvIHNwcml0ZSB0aGF0IGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsIGJvdGggc3RhcnRUaW1lIGFuZCBkdXJhdGlvbiBuZWVkIHRvIGJlIHNldC5cblx0ICogVGhpcyBpcyBvbmx5IHdoZW4gY3JlYXRpbmcgYSBuZXcgYXVkaW8gc3ByaXRlLCBub3Qgd2hlbiBwbGF5aW5nIHVzaW5nIHRoZSBpZCBvZiBhbiBhbHJlYWR5IHJlZ2lzdGVyZWQgYXVkaW8gc3ByaXRlLlxuXHQgKlxuXHQgKiBAbWV0aG9kIGNyZWF0ZUluc3RhbmNlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNyYyBvciBJRCBvZiB0aGUgYXVkaW8uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3RhcnRUaW1lPW51bGxdIFRvIGNyZWF0ZSBhbiBhdWRpbyBzcHJpdGUgKHdpdGggZHVyYXRpb24pLCB0aGUgaW5pdGlhbCBvZmZzZXQgdG8gc3RhcnQgcGxheWJhY2sgYW5kIGxvb3AgZnJvbSwgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uPW51bGxdIFRvIGNyZWF0ZSBhbiBhdWRpbyBzcHJpdGUgKHdpdGggc3RhcnRUaW1lKSwgdGhlIGFtb3VudCBvZiB0aW1lIHRvIHBsYXkgdGhlIGNsaXAgZm9yLCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gQSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2VcIn19e3svY3Jvc3NMaW5rfX0gdGhhdCBjYW4gYmUgY29udHJvbGxlZCBhZnRlciBpdCBpcyBjcmVhdGVkLlxuXHQgKiBVbnN1cHBvcnRlZCBleHRlbnNpb25zIHdpbGwgcmV0dXJuIHRoZSBkZWZhdWx0IEFic3RyYWN0U291bmRJbnN0YW5jZS5cblx0ICogQHNpbmNlIDAuNC4wXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuY3JlYXRlSW5zdGFuY2UgPSBmdW5jdGlvbiAoc3JjLCBzdGFydFRpbWUsIGR1cmF0aW9uKSB7XG5cdFx0aWYgKCFzLmluaXRpYWxpemVEZWZhdWx0UGx1Z2lucygpKSB7IHJldHVybiBuZXcgY3JlYXRlanMuRGVmYXVsdFNvdW5kSW5zdGFuY2Uoc3JjLCBzdGFydFRpbWUsIGR1cmF0aW9uKTsgfVxuXG5cdFx0dmFyIGRlZmF1bHRQbGF5UHJvcHMgPSBzLl9kZWZhdWx0UGxheVByb3BzSGFzaFtzcmNdO1x0Ly8gZm9yIGF1ZGlvIHNwcml0ZXMsIHdoaWNoIGNyZWF0ZSBhbmQgc3RvcmUgZGVmYXVsdHMgYnkgaWRcblx0XHRzcmMgPSBzLl9nZXRTcmNCeUlkKHNyYyk7XG5cblx0XHR2YXIgZGV0YWlscyA9IHMuX3BhcnNlUGF0aChzcmMuc3JjKTtcblxuXHRcdHZhciBpbnN0YW5jZSA9IG51bGw7XG5cdFx0aWYgKGRldGFpbHMgIT0gbnVsbCAmJiBkZXRhaWxzLnNyYyAhPSBudWxsKSB7XG5cdFx0XHRTb3VuZENoYW5uZWwuY3JlYXRlKGRldGFpbHMuc3JjKTtcblx0XHRcdGlmIChzdGFydFRpbWUgPT0gbnVsbCkgeyBzdGFydFRpbWUgPSBzcmMuc3RhcnRUaW1lOyB9XG5cdFx0XHRpbnN0YW5jZSA9IHMuYWN0aXZlUGx1Z2luLmNyZWF0ZShkZXRhaWxzLnNyYywgc3RhcnRUaW1lLCBkdXJhdGlvbiB8fCBzcmMuZHVyYXRpb24pO1xuXG5cdFx0XHRkZWZhdWx0UGxheVByb3BzID0gZGVmYXVsdFBsYXlQcm9wcyB8fCBzLl9kZWZhdWx0UGxheVByb3BzSGFzaFtkZXRhaWxzLnNyY107XG5cdFx0XHRpZiAoZGVmYXVsdFBsYXlQcm9wcykge1xuXHRcdFx0XHRpbnN0YW5jZS5hcHBseVBsYXlQcm9wcyhkZWZhdWx0UGxheVByb3BzKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aW5zdGFuY2UgPSBuZXcgY3JlYXRlanMuRGVmYXVsdFNvdW5kSW5zdGFuY2Uoc3JjLCBzdGFydFRpbWUsIGR1cmF0aW9uKTtcblx0XHR9XG5cblx0XHRpbnN0YW5jZS51bmlxdWVJZCA9IHMuX2xhc3RJRCsrO1xuXG5cdFx0cmV0dXJuIGluc3RhbmNlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTdG9wIGFsbCBhdWRpbyAoZ2xvYmFsIHN0b3ApLiBTdG9wcGVkIGF1ZGlvIGlzIHJlc2V0LCBhbmQgbm90IHBhdXNlZC4gVG8gcGxheSBhdWRpbyB0aGF0IGhhcyBiZWVuIHN0b3BwZWQsXG5cdCAqIGNhbGwgQWJzdHJhY3RTb3VuZEluc3RhbmNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9wbGF5XCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICBjcmVhdGVqcy5Tb3VuZC5zdG9wKCk7XG5cdCAqXG5cdCAqIEBtZXRob2Qgc3RvcFxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIGluc3RhbmNlcyA9IHRoaXMuX2luc3RhbmNlcztcblx0XHRmb3IgKHZhciBpID0gaW5zdGFuY2VzLmxlbmd0aDsgaS0tOyApIHtcblx0XHRcdGluc3RhbmNlc1tpXS5zdG9wKCk7ICAvLyBOT1RFIHN0b3AgcmVtb3ZlcyBpbnN0YW5jZSBmcm9tIHRoaXMuX2luc3RhbmNlc1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogU2V0IHRoZSBkZWZhdWx0IHBsYXliYWNrIHByb3BlcnRpZXMgZm9yIGFsbCBuZXcgU291bmRJbnN0YW5jZXMgb2YgdGhlIHBhc3NlZCBpbiBzcmMgb3IgSUQuXG5cdCAqIFNlZSB7eyNjcm9zc0xpbmsgXCJQbGF5UHJvcHNDb25maWdcIn19e3svY3Jvc3NMaW5rfX0gZm9yIGF2YWlsYWJsZSBwcm9wZXJ0aWVzLlxuXHQgKlxuXHQgKiBAbWV0aG9kIHNldERlZmF1bHRQbGF5UHJvcHNcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNyYyBUaGUgc3JjIG9yIElEIHVzZWQgdG8gcmVnaXN0ZXIgdGhlIGF1ZGlvLlxuXHQgKiBAcGFyYW0ge09iamVjdCB8IFBsYXlQcm9wc0NvbmZpZ30gcGxheVByb3BzIFRoZSBwbGF5YmFjayBwcm9wZXJ0aWVzIHlvdSB3b3VsZCBsaWtlIHRvIHNldC5cblx0ICogQHNpbmNlIDAuNi4xXG5cdCAqL1xuXHRzLnNldERlZmF1bHRQbGF5UHJvcHMgPSBmdW5jdGlvbihzcmMsIHBsYXlQcm9wcykge1xuXHRcdHNyYyA9IHMuX2dldFNyY0J5SWQoc3JjKTtcblx0XHRzLl9kZWZhdWx0UGxheVByb3BzSGFzaFtzLl9wYXJzZVBhdGgoc3JjLnNyYykuc3JjXSA9IGNyZWF0ZWpzLlBsYXlQcm9wc0NvbmZpZy5jcmVhdGUocGxheVByb3BzKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0IHRoZSBkZWZhdWx0IHBsYXliYWNrIHByb3BlcnRpZXMgZm9yIHRoZSBwYXNzZWQgaW4gc3JjIG9yIElELiAgVGhlc2UgcHJvcGVydGllcyBhcmUgYXBwbGllZCB0byBhbGxcblx0ICogbmV3IFNvdW5kSW5zdGFuY2VzLiAgUmV0dXJucyBudWxsIGlmIGRlZmF1bHQgZG9lcyBub3QgZXhpc3QuXG5cdCAqXG5cdCAqIEBtZXRob2QgZ2V0RGVmYXVsdFBsYXlQcm9wc1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzcmMgb3IgSUQgdXNlZCB0byByZWdpc3RlciB0aGUgYXVkaW8uXG5cdCAqIEByZXR1cm5zIHtQbGF5UHJvcHNDb25maWd9IHJldHVybnMgYW4gZXhpc3RpbmcgUGxheVByb3BzQ29uZmlnIG9yIG51bGwgaWYgb25lIGRvZXMgbm90IGV4aXN0XG5cdCAqIEBzaW5jZSAwLjYuMVxuXHQgKi9cblx0cy5nZXREZWZhdWx0UGxheVByb3BzID0gZnVuY3Rpb24oc3JjKSB7XG5cdFx0c3JjID0gcy5fZ2V0U3JjQnlJZChzcmMpO1xuXHRcdHJldHVybiBzLl9kZWZhdWx0UGxheVByb3BzSGFzaFtzLl9wYXJzZVBhdGgoc3JjLnNyYykuc3JjXTtcblx0fTtcblxuXG5cdC8qIC0tLS0tLS0tLS0tLS0tLVxuXHQgSW50ZXJuYWwgbWV0aG9kc1xuXHQgLS0tLS0tLS0tLS0tLS0tICovXG5cdC8qKlxuXHQgKiBQbGF5IGFuIGluc3RhbmNlLiBUaGlzIGlzIGNhbGxlZCBieSB0aGUgc3RhdGljIEFQSSwgYXMgd2VsbCBhcyBmcm9tIHBsdWdpbnMuIFRoaXMgYWxsb3dzIHRoZSBjb3JlIGNsYXNzIHRvXG5cdCAqIGNvbnRyb2wgZGVsYXlzLlxuXHQgKiBAbWV0aG9kIF9wbGF5SW5zdGFuY2Vcblx0ICogQHBhcmFtIHtBYnN0cmFjdFNvdW5kSW5zdGFuY2V9IGluc3RhbmNlIFRoZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2VcIn19e3svY3Jvc3NMaW5rfX0gdG8gc3RhcnQgcGxheWluZy5cblx0ICogQHBhcmFtIHtQbGF5UHJvcHNDb25maWd9IHBsYXlQcm9wcyBBIFBsYXlQcm9wc0NvbmZpZyBvYmplY3QuXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBzb3VuZCBjYW4gc3RhcnQgcGxheWluZy4gU291bmRzIHRoYXQgZmFpbCBpbW1lZGlhdGVseSB3aWxsIHJldHVybiBmYWxzZS4gU291bmRzIHRoYXRcblx0ICogaGF2ZSBhIGRlbGF5IHdpbGwgcmV0dXJuIHRydWUsIGJ1dCBtYXkgc3RpbGwgZmFpbCB0byBwbGF5LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLl9wbGF5SW5zdGFuY2UgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIHBsYXlQcm9wcykge1xuXHRcdHZhciBkZWZhdWx0UGxheVByb3BzID0gcy5fZGVmYXVsdFBsYXlQcm9wc0hhc2hbaW5zdGFuY2Uuc3JjXSB8fCB7fTtcblx0XHRpZiAocGxheVByb3BzLmludGVycnVwdCA9PSBudWxsKSB7cGxheVByb3BzLmludGVycnVwdCA9IGRlZmF1bHRQbGF5UHJvcHMuaW50ZXJydXB0IHx8IHMuZGVmYXVsdEludGVycnVwdEJlaGF2aW9yfTtcblx0XHRpZiAocGxheVByb3BzLmRlbGF5ID09IG51bGwpIHtwbGF5UHJvcHMuZGVsYXkgPSBkZWZhdWx0UGxheVByb3BzLmRlbGF5IHx8IDA7fVxuXHRcdGlmIChwbGF5UHJvcHMub2Zmc2V0ID09IG51bGwpIHtwbGF5UHJvcHMub2Zmc2V0ID0gaW5zdGFuY2UucG9zaXRpb247fVxuXHRcdGlmIChwbGF5UHJvcHMubG9vcCA9PSBudWxsKSB7cGxheVByb3BzLmxvb3AgPSBpbnN0YW5jZS5sb29wO31cblx0XHRpZiAocGxheVByb3BzLnZvbHVtZSA9PSBudWxsKSB7cGxheVByb3BzLnZvbHVtZSA9IGluc3RhbmNlLnZvbHVtZTt9XG5cdFx0aWYgKHBsYXlQcm9wcy5wYW4gPT0gbnVsbCkge3BsYXlQcm9wcy5wYW4gPSBpbnN0YW5jZS5wYW47fVxuXG5cdFx0aWYgKHBsYXlQcm9wcy5kZWxheSA9PSAwKSB7XG5cdFx0XHR2YXIgb2sgPSBzLl9iZWdpblBsYXlpbmcoaW5zdGFuY2UsIHBsYXlQcm9wcyk7XG5cdFx0XHRpZiAoIW9rKSB7cmV0dXJuIGZhbHNlO31cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly9Ob3RlIHRoYXQgd2UgY2FuJ3QgcGFzcyBhcmd1bWVudHMgdG8gcHJveHkgT1Igc2V0VGltZW91dCAoSUUgb25seSksIHNvIGp1c3Qgd3JhcCB0aGUgZnVuY3Rpb24gY2FsbC5cblx0XHRcdC8vIE9KUiBXZWJBdWRpbyBtYXkgd2FudCB0byBoYW5kbGUgdGhpcyBkaWZmZXJlbnRseSwgc28gaXQgbWlnaHQgbWFrZSBzZW5zZSB0byBtb3ZlIHRoaXMgZnVuY3Rpb25hbGl0eSBpbnRvIHRoZSBwbHVnaW5zIGluIHRoZSBmdXR1cmVcblx0XHRcdHZhciBkZWxheVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzLl9iZWdpblBsYXlpbmcoaW5zdGFuY2UsIHBsYXlQcm9wcyk7XG5cdFx0XHR9LCBwbGF5UHJvcHMuZGVsYXkpO1xuXHRcdFx0aW5zdGFuY2UuZGVsYXlUaW1lb3V0SWQgPSBkZWxheVRpbWVvdXRJZDtcblx0XHR9XG5cblx0XHR0aGlzLl9pbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogQmVnaW4gcGxheWJhY2suIFRoaXMgaXMgY2FsbGVkIGltbWVkaWF0ZWx5IG9yIGFmdGVyIGRlbGF5IGJ5IHt7I2Nyb3NzTGluayBcIlNvdW5kL3BsYXlJbnN0YW5jZVwifX17ey9jcm9zc0xpbmt9fS5cblx0ICogQG1ldGhvZCBfYmVnaW5QbGF5aW5nXG5cdCAqIEBwYXJhbSB7QWJzdHJhY3RTb3VuZEluc3RhbmNlfSBpbnN0YW5jZSBBIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZVwifX17ey9jcm9zc0xpbmt9fSB0byBiZWdpbiBwbGF5YmFjay5cblx0ICogQHBhcmFtIHtQbGF5UHJvcHNDb25maWd9IHBsYXlQcm9wcyBBIFBsYXlQcm9wc0NvbmZpZyBvYmplY3QuXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBzb3VuZCBjYW4gc3RhcnQgcGxheWluZy4gSWYgdGhlcmUgYXJlIG5vIGF2YWlsYWJsZSBjaGFubmVscywgb3IgdGhlIGluc3RhbmNlIGZhaWxzIHRvXG5cdCAqIHN0YXJ0LCB0aGlzIHdpbGwgcmV0dXJuIGZhbHNlLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLl9iZWdpblBsYXlpbmcgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIHBsYXlQcm9wcykge1xuXHRcdGlmICghU291bmRDaGFubmVsLmFkZChpbnN0YW5jZSwgcGxheVByb3BzLmludGVycnVwdCkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dmFyIHJlc3VsdCA9IGluc3RhbmNlLl9iZWdpblBsYXlpbmcocGxheVByb3BzKTtcblx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0dmFyIGluZGV4ID0gY3JlYXRlanMuaW5kZXhPZih0aGlzLl9pbnN0YW5jZXMsIGluc3RhbmNlKTtcblx0XHRcdGlmIChpbmRleCA+IC0xKSB7dGhpcy5faW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0IHRoZSBzb3VyY2Ugb2YgYSBzb3VuZCB2aWEgdGhlIElEIHBhc3NlZCBpbiB3aXRoIGEgcmVnaXN0ZXIgY2FsbC4gSWYgbm8gSUQgaXMgZm91bmQgdGhlIHZhbHVlIGlzIHJldHVybmVkXG5cdCAqIGluc3RlYWQuXG5cdCAqIEBtZXRob2QgX2dldFNyY0J5SWRcblx0ICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIFRoZSBJRCB0aGUgc291bmQgd2FzIHJlZ2lzdGVyZWQgd2l0aC5cblx0ICogQHJldHVybiB7U3RyaW5nfSBUaGUgc291cmNlIG9mIHRoZSBzb3VuZCBpZiBpdCBoYXMgYmVlbiByZWdpc3RlcmVkIHdpdGggdGhpcyBJRCBvciB0aGUgdmFsdWUgdGhhdCB3YXMgcGFzc2VkIGluLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLl9nZXRTcmNCeUlkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHMuX2lkSGFzaFt2YWx1ZV0gfHwge3NyYzogdmFsdWV9O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBIHNvdW5kIGhhcyBjb21wbGV0ZWQgcGxheWJhY2ssIGJlZW4gaW50ZXJydXB0ZWQsIGZhaWxlZCwgb3IgYmVlbiBzdG9wcGVkLiBUaGlzIG1ldGhvZCByZW1vdmVzIHRoZSBpbnN0YW5jZSBmcm9tXG5cdCAqIFNvdW5kIG1hbmFnZW1lbnQuIEl0IHdpbGwgYmUgYWRkZWQgYWdhaW4sIGlmIHRoZSBzb3VuZCByZS1wbGF5cy4gTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGlzIGNhbGxlZCBmcm9tIHRoZVxuXHQgKiBpbnN0YW5jZXMgdGhlbXNlbHZlcy5cblx0ICogQG1ldGhvZCBfcGxheUZpbmlzaGVkXG5cdCAqIEBwYXJhbSB7QWJzdHJhY3RTb3VuZEluc3RhbmNlfSBpbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBmaW5pc2hlZCBwbGF5YmFjay5cblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5fcGxheUZpbmlzaGVkID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG5cdFx0U291bmRDaGFubmVsLnJlbW92ZShpbnN0YW5jZSk7XG5cdFx0dmFyIGluZGV4ID0gY3JlYXRlanMuaW5kZXhPZih0aGlzLl9pbnN0YW5jZXMsIGluc3RhbmNlKTtcblx0XHRpZiAoaW5kZXggPiAtMSkge3RoaXMuX2luc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO31cdC8vIE9KUiB0aGlzIHdpbGwgYWx3YXlzIGJlID4gLTEsIHRoZXJlIGlzIG5vIHdheSBmb3IgYW4gaW5zdGFuY2UgdG8gZXhpc3Qgd2l0aG91dCBiZWluZyBhZGRlZCB0byB0aGlzLl9pbnN0YW5jZXNcblx0fTtcblxuXHRjcmVhdGVqcy5Tb3VuZCA9IFNvdW5kO1xuXG5cdC8qKlxuXHQgKiBBbiBpbnRlcm5hbCBjbGFzcyB0aGF0IG1hbmFnZXMgdGhlIG51bWJlciBvZiBhY3RpdmUge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlXCJ9fXt7L2Nyb3NzTGlua319IGluc3RhbmNlcyBmb3Jcblx0ICogZWFjaCBzb3VuZCB0eXBlLiBUaGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgaW50ZXJuYWxseSBieSB0aGUge3sjY3Jvc3NMaW5rIFwiU291bmRcIn19e3svY3Jvc3NMaW5rfX0gY2xhc3MuXG5cdCAqXG5cdCAqIFRoZSBudW1iZXIgb2Ygc291bmRzIGlzIGFydGlmaWNpYWxseSBsaW1pdGVkIGJ5IFNvdW5kIGluIG9yZGVyIHRvIHByZXZlbnQgb3Zlci1zYXR1cmF0aW9uIG9mIGFcblx0ICogc2luZ2xlIHNvdW5kLCBhcyB3ZWxsIGFzIHRvIHN0YXkgd2l0aGluIGhhcmR3YXJlIGxpbWl0YXRpb25zLCBhbHRob3VnaCB0aGUgbGF0dGVyIG1heSBkaXNhcHBlYXIgd2l0aCBiZXR0ZXJcblx0ICogYnJvd3NlciBzdXBwb3J0LlxuXHQgKlxuXHQgKiBXaGVuIGEgc291bmQgaXMgcGxheWVkLCB0aGlzIGNsYXNzIGVuc3VyZXMgdGhhdCB0aGVyZSBpcyBhbiBhdmFpbGFibGUgaW5zdGFuY2UsIG9yIGludGVycnVwdHMgYW4gYXBwcm9wcmlhdGVcblx0ICogc291bmQgdGhhdCBpcyBhbHJlYWR5IHBsYXlpbmcuXG5cdCAqICNjbGFzcyBTb3VuZENoYW5uZWxcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNyYyBUaGUgc291cmNlIG9mIHRoZSBpbnN0YW5jZXNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFttYXg9MV0gVGhlIG51bWJlciBvZiBpbnN0YW5jZXMgYWxsb3dlZFxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0ZnVuY3Rpb24gU291bmRDaGFubmVsKHNyYywgbWF4KSB7XG5cdFx0dGhpcy5pbml0KHNyYywgbWF4KTtcblx0fVxuXG5cdC8qIC0tLS0tLS0tLS0tLVxuXHQgU3RhdGljIEFQSVxuXHQgLS0tLS0tLS0tLS0tICovXG5cdC8qKlxuXHQgKiBBIGhhc2ggb2YgY2hhbm5lbCBpbnN0YW5jZXMgaW5kZXhlZCBieSBzb3VyY2UuXG5cdCAqICNwcm9wZXJ0eSBjaGFubmVsc1xuXHQgKiBAdHlwZSB7T2JqZWN0fVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRTb3VuZENoYW5uZWwuY2hhbm5lbHMgPSB7fTtcblxuXHQvKipcblx0ICogQ3JlYXRlIGEgc291bmQgY2hhbm5lbC4gTm90ZSB0aGF0IGlmIHRoZSBzb3VuZCBjaGFubmVsIGFscmVhZHkgZXhpc3RzLCB0aGlzIHdpbGwgZmFpbC5cblx0ICogI21ldGhvZCBjcmVhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNyYyBUaGUgc291cmNlIGZvciB0aGUgY2hhbm5lbFxuXHQgKiBAcGFyYW0ge051bWJlcn0gbWF4IFRoZSBtYXhpbXVtIGFtb3VudCB0aGlzIGNoYW5uZWwgaG9sZHMuIFRoZSBkZWZhdWx0IGlzIHt7I2Nyb3NzTGluayBcIlNvdW5kQ2hhbm5lbC5tYXhEZWZhdWx0XCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgY2hhbm5lbHMgd2VyZSBjcmVhdGVkLlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRTb3VuZENoYW5uZWwuY3JlYXRlID0gZnVuY3Rpb24gKHNyYywgbWF4KSB7XG5cdFx0dmFyIGNoYW5uZWwgPSBTb3VuZENoYW5uZWwuZ2V0KHNyYyk7XG5cdFx0aWYgKGNoYW5uZWwgPT0gbnVsbCkge1xuXHRcdFx0U291bmRDaGFubmVsLmNoYW5uZWxzW3NyY10gPSBuZXcgU291bmRDaGFubmVsKHNyYywgbWF4KTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cdC8qKlxuXHQgKiBEZWxldGUgYSBzb3VuZCBjaGFubmVsLCBzdG9wIGFuZCBkZWxldGUgYWxsIHJlbGF0ZWQgaW5zdGFuY2VzLiBOb3RlIHRoYXQgaWYgdGhlIHNvdW5kIGNoYW5uZWwgZG9lcyBub3QgZXhpc3QsIHRoaXMgd2lsbCBmYWlsLlxuXHQgKiAjbWV0aG9kIHJlbW92ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzb3VyY2UgZm9yIHRoZSBjaGFubmVsXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBjaGFubmVscyB3ZXJlIGRlbGV0ZWQuXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdFNvdW5kQ2hhbm5lbC5yZW1vdmVTcmMgPSBmdW5jdGlvbiAoc3JjKSB7XG5cdFx0dmFyIGNoYW5uZWwgPSBTb3VuZENoYW5uZWwuZ2V0KHNyYyk7XG5cdFx0aWYgKGNoYW5uZWwgPT0gbnVsbCkge3JldHVybiBmYWxzZTt9XG5cdFx0Y2hhbm5lbC5fcmVtb3ZlQWxsKCk7XHQvLyB0aGlzIHN0b3BzIGFuZCByZW1vdmVzIGFsbCBhY3RpdmUgaW5zdGFuY2VzXG5cdFx0ZGVsZXRlKFNvdW5kQ2hhbm5lbC5jaGFubmVsc1tzcmNdKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblx0LyoqXG5cdCAqIERlbGV0ZSBhbGwgc291bmQgY2hhbm5lbHMsIHN0b3AgYW5kIGRlbGV0ZSBhbGwgcmVsYXRlZCBpbnN0YW5jZXMuXG5cdCAqICNtZXRob2QgcmVtb3ZlQWxsXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdFNvdW5kQ2hhbm5lbC5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Zm9yKHZhciBjaGFubmVsIGluIFNvdW5kQ2hhbm5lbC5jaGFubmVscykge1xuXHRcdFx0U291bmRDaGFubmVsLmNoYW5uZWxzW2NoYW5uZWxdLl9yZW1vdmVBbGwoKTtcdC8vIHRoaXMgc3RvcHMgYW5kIHJlbW92ZXMgYWxsIGFjdGl2ZSBpbnN0YW5jZXNcblx0XHR9XG5cdFx0U291bmRDaGFubmVsLmNoYW5uZWxzID0ge307XG5cdH07XG5cdC8qKlxuXHQgKiBBZGQgYW4gaW5zdGFuY2UgdG8gYSBzb3VuZCBjaGFubmVsLlxuXHQgKiAjbWV0aG9kIGFkZFxuXHQgKiBAcGFyYW0ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gaW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIGFkZCB0byB0aGUgY2hhbm5lbFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW50ZXJydXB0IFRoZSBpbnRlcnJ1cHQgdmFsdWUgdG8gdXNlLiBQbGVhc2Ugc2VlIHRoZSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9wbGF5XCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqIGZvciBkZXRhaWxzIG9uIGludGVycnVwdCBtb2Rlcy5cblx0ICogQHJldHVybiB7Qm9vbGVhbn0gVGhlIHN1Y2Nlc3Mgb2YgdGhlIG1ldGhvZCBjYWxsLiBJZiB0aGUgY2hhbm5lbCBpcyBmdWxsLCBpdCB3aWxsIHJldHVybiBmYWxzZS5cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0U291bmRDaGFubmVsLmFkZCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgaW50ZXJydXB0KSB7XG5cdFx0dmFyIGNoYW5uZWwgPSBTb3VuZENoYW5uZWwuZ2V0KGluc3RhbmNlLnNyYyk7XG5cdFx0aWYgKGNoYW5uZWwgPT0gbnVsbCkge3JldHVybiBmYWxzZTt9XG5cdFx0cmV0dXJuIGNoYW5uZWwuX2FkZChpbnN0YW5jZSwgaW50ZXJydXB0KTtcblx0fTtcblx0LyoqXG5cdCAqIFJlbW92ZSBhbiBpbnN0YW5jZSBmcm9tIHRoZSBjaGFubmVsLlxuXHQgKiAjbWV0aG9kIHJlbW92ZVxuXHQgKiBAcGFyYW0ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gaW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIHJlbW92ZSBmcm9tIHRoZSBjaGFubmVsXG5cdCAqIEByZXR1cm4gVGhlIHN1Y2Nlc3Mgb2YgdGhlIG1ldGhvZCBjYWxsLiBJZiB0aGVyZSBpcyBubyBjaGFubmVsLCBpdCB3aWxsIHJldHVybiBmYWxzZS5cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0U291bmRDaGFubmVsLnJlbW92ZSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuXHRcdHZhciBjaGFubmVsID0gU291bmRDaGFubmVsLmdldChpbnN0YW5jZS5zcmMpO1xuXHRcdGlmIChjaGFubmVsID09IG51bGwpIHtyZXR1cm4gZmFsc2U7fVxuXHRcdGNoYW5uZWwuX3JlbW92ZShpbnN0YW5jZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cdC8qKlxuXHQgKiBHZXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHNvdW5kcyB5b3UgY2FuIGhhdmUgaW4gYSBjaGFubmVsLlxuXHQgKiAjbWV0aG9kIG1heFBlckNoYW5uZWxcblx0ICogQHJldHVybiB7TnVtYmVyfSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc291bmRzIHlvdSBjYW4gaGF2ZSBpbiBhIGNoYW5uZWwuXG5cdCAqL1xuXHRTb3VuZENoYW5uZWwubWF4UGVyQ2hhbm5lbCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gcC5tYXhEZWZhdWx0O1xuXHR9O1xuXHQvKipcblx0ICogR2V0IGEgY2hhbm5lbCBpbnN0YW5jZSBieSBpdHMgc3JjLlxuXHQgKiAjbWV0aG9kIGdldFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzcmMgdG8gdXNlIHRvIGxvb2sgdXAgdGhlIGNoYW5uZWxcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0U291bmRDaGFubmVsLmdldCA9IGZ1bmN0aW9uIChzcmMpIHtcblx0XHRyZXR1cm4gU291bmRDaGFubmVsLmNoYW5uZWxzW3NyY107XG5cdH07XG5cblx0dmFyIHAgPSBTb3VuZENoYW5uZWwucHJvdG90eXBlO1xuXHRwLmNvbnN0cnVjdG9yID0gU291bmRDaGFubmVsO1xuXG5cdC8qKlxuXHQgKiBUaGUgc291cmNlIG9mIHRoZSBjaGFubmVsLlxuXHQgKiAjcHJvcGVydHkgc3JjXG5cdCAqIEB0eXBlIHtTdHJpbmd9XG5cdCAqL1xuXHRwLnNyYyA9IG51bGw7XG5cblx0LyoqXG5cdCAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBpbnN0YW5jZXMgaW4gdGhpcyBjaGFubmVsLiAgLTEgaW5kaWNhdGVzIG5vIGxpbWl0XG5cdCAqICNwcm9wZXJ0eSBtYXhcblx0ICogQHR5cGUge051bWJlcn1cblx0ICovXG5cdHAubWF4ID0gbnVsbDtcblxuXHQvKipcblx0ICogVGhlIGRlZmF1bHQgdmFsdWUgdG8gc2V0IGZvciBtYXgsIGlmIGl0IGlzbid0IHBhc3NlZCBpbi4gIEFsc28gdXNlZCBpZiAtMSBpcyBwYXNzZWQuXG5cdCAqICNwcm9wZXJ0eSBtYXhEZWZhdWx0XG5cdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdCAqIEBkZWZhdWx0IDEwMFxuXHQgKiBAc2luY2UgMC40LjBcblx0ICovXG5cdHAubWF4RGVmYXVsdCA9IDEwMDtcblxuXHQvKipcblx0ICogVGhlIGN1cnJlbnQgbnVtYmVyIG9mIGFjdGl2ZSBpbnN0YW5jZXMuXG5cdCAqICNwcm9wZXJ0eSBsZW5ndGhcblx0ICogQHR5cGUge051bWJlcn1cblx0ICovXG5cdHAubGVuZ3RoID0gMDtcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZSB0aGUgY2hhbm5lbC5cblx0ICogI21ldGhvZCBpbml0XG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBvZiB0aGUgY2hhbm5lbFxuXHQgKiBAcGFyYW0ge051bWJlcn0gbWF4IFRoZSBtYXhpbXVtIG51bWJlciBvZiBpbnN0YW5jZXMgaW4gdGhlIGNoYW5uZWxcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5pbml0ID0gZnVuY3Rpb24gKHNyYywgbWF4KSB7XG5cdFx0dGhpcy5zcmMgPSBzcmM7XG5cdFx0dGhpcy5tYXggPSBtYXggfHwgdGhpcy5tYXhEZWZhdWx0O1xuXHRcdGlmICh0aGlzLm1heCA9PSAtMSkge3RoaXMubWF4ID0gdGhpcy5tYXhEZWZhdWx0O31cblx0XHR0aGlzLl9pbnN0YW5jZXMgPSBbXTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0IGFuIGluc3RhbmNlIGJ5IGluZGV4LlxuXHQgKiAjbWV0aG9kIGdldFxuXHQgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4IHRvIHJldHVybi5cblx0ICogQHJldHVybiB7QWJzdHJhY3RTb3VuZEluc3RhbmNlfSBUaGUgQWJzdHJhY3RTb3VuZEluc3RhbmNlIGF0IGEgc3BlY2lmaWMgaW5zdGFuY2UuXG5cdCAqL1xuXHRwLl9nZXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcblx0XHRyZXR1cm4gdGhpcy5faW5zdGFuY2VzW2luZGV4XTtcblx0fTtcblxuXHQvKipcblx0ICogQWRkIGEgbmV3IGluc3RhbmNlIHRvIHRoZSBjaGFubmVsLlxuXHQgKiAjbWV0aG9kIGFkZFxuXHQgKiBAcGFyYW0ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gaW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIGFkZC5cblx0ICogQHJldHVybiB7Qm9vbGVhbn0gVGhlIHN1Y2Nlc3Mgb2YgdGhlIG1ldGhvZCBjYWxsLiBJZiB0aGUgY2hhbm5lbCBpcyBmdWxsLCBpdCB3aWxsIHJldHVybiBmYWxzZS5cblx0ICovXG5cdHAuX2FkZCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgaW50ZXJydXB0KSB7XG5cdFx0aWYgKCF0aGlzLl9nZXRTbG90KGludGVycnVwdCwgaW5zdGFuY2UpKSB7cmV0dXJuIGZhbHNlO31cblx0XHR0aGlzLl9pbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG5cdFx0dGhpcy5sZW5ndGgrKztcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogUmVtb3ZlIGFuIGluc3RhbmNlIGZyb20gdGhlIGNoYW5uZWwsIGVpdGhlciB3aGVuIGl0IGhhcyBmaW5pc2hlZCBwbGF5aW5nLCBvciBpdCBoYXMgYmVlbiBpbnRlcnJ1cHRlZC5cblx0ICogI21ldGhvZCByZW1vdmVcblx0ICogQHBhcmFtIHtBYnN0cmFjdFNvdW5kSW5zdGFuY2V9IGluc3RhbmNlIFRoZSBpbnN0YW5jZSB0byByZW1vdmVcblx0ICogQHJldHVybiB7Qm9vbGVhbn0gVGhlIHN1Y2Nlc3Mgb2YgdGhlIHJlbW92ZSBjYWxsLiBJZiB0aGUgaW5zdGFuY2UgaXMgbm90IGZvdW5kIGluIHRoaXMgY2hhbm5lbCwgaXQgd2lsbFxuXHQgKiByZXR1cm4gZmFsc2UuXG5cdCAqL1xuXHRwLl9yZW1vdmUgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcblx0XHR2YXIgaW5kZXggPSBjcmVhdGVqcy5pbmRleE9mKHRoaXMuX2luc3RhbmNlcywgaW5zdGFuY2UpO1xuXHRcdGlmIChpbmRleCA9PSAtMSkge3JldHVybiBmYWxzZTt9XG5cdFx0dGhpcy5faW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0dGhpcy5sZW5ndGgtLTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogU3RvcCBwbGF5YmFjayBhbmQgcmVtb3ZlIGFsbCBpbnN0YW5jZXMgZnJvbSB0aGUgY2hhbm5lbC4gIFVzdWFsbHkgaW4gcmVzcG9uc2UgdG8gYSBkZWxldGUgY2FsbC5cblx0ICogI21ldGhvZCByZW1vdmVBbGxcblx0ICovXG5cdHAuX3JlbW92ZUFsbCA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBOb3RlIHRoYXQgc3RvcCgpIHJlbW92ZXMgdGhlIGl0ZW0gZnJvbSB0aGUgbGlzdFxuXHRcdGZvciAodmFyIGk9dGhpcy5sZW5ndGgtMTsgaT49MDsgaS0tKSB7XG5cdFx0XHR0aGlzLl9pbnN0YW5jZXNbaV0uc3RvcCgpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogR2V0IGFuIGF2YWlsYWJsZSBzbG90IGRlcGVuZGluZyBvbiBpbnRlcnJ1cHQgdmFsdWUgYW5kIGlmIHNsb3RzIGFyZSBhdmFpbGFibGUuXG5cdCAqICNtZXRob2QgZ2V0U2xvdFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW50ZXJydXB0IFRoZSBpbnRlcnJ1cHQgdmFsdWUgdG8gdXNlLlxuXHQgKiBAcGFyYW0ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gaW5zdGFuY2UgVGhlIHNvdW5kIGluc3RhbmNlIHRoYXQgd2lsbCBnbyBpbiB0aGUgY2hhbm5lbCBpZiBzdWNjZXNzZnVsLlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBEZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFuIGF2YWlsYWJsZSBzbG90LiBEZXBlbmRpbmcgb24gdGhlIGludGVycnVwdCBtb2RlLCBpZiB0aGVyZSBhcmUgbm8gc2xvdHMsXG5cdCAqIGFuIGV4aXN0aW5nIEFic3RyYWN0U291bmRJbnN0YW5jZSBtYXkgYmUgaW50ZXJydXB0ZWQuIElmIHRoZXJlIGFyZSBubyBzbG90cywgdGhpcyBtZXRob2QgcmV0dXJucyBmYWxzZS5cblx0ICovXG5cdHAuX2dldFNsb3QgPSBmdW5jdGlvbiAoaW50ZXJydXB0LCBpbnN0YW5jZSkge1xuXHRcdHZhciB0YXJnZXQsIHJlcGxhY2VtZW50O1xuXG5cdFx0aWYgKGludGVycnVwdCAhPSBTb3VuZC5JTlRFUlJVUFRfTk9ORSkge1xuXHRcdFx0Ly8gRmlyc3QgcmVwbGFjZW1lbnQgY2FuZGlkYXRlXG5cdFx0XHRyZXBsYWNlbWVudCA9IHRoaXMuX2dldCgwKTtcblx0XHRcdGlmIChyZXBsYWNlbWVudCA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5tYXg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHRhcmdldCA9IHRoaXMuX2dldChpKTtcblxuXHRcdFx0Ly8gQXZhaWxhYmxlIFNwYWNlXG5cdFx0XHRpZiAodGFyZ2V0ID09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEF1ZGlvIGlzIGNvbXBsZXRlIG9yIG5vdCBwbGF5aW5nXG5cdFx0XHRpZiAodGFyZ2V0LnBsYXlTdGF0ZSA9PSBTb3VuZC5QTEFZX0ZJTklTSEVEIHx8XG5cdFx0XHRcdHRhcmdldC5wbGF5U3RhdGUgPT0gU291bmQuUExBWV9JTlRFUlJVUFRFRCB8fFxuXHRcdFx0XHR0YXJnZXQucGxheVN0YXRlID09IFNvdW5kLlBMQVlfRkFJTEVEKSB7XG5cdFx0XHRcdHJlcGxhY2VtZW50ID0gdGFyZ2V0O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblxuXHRcdFx0aWYgKGludGVycnVwdCA9PSBTb3VuZC5JTlRFUlJVUFRfTk9ORSkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXVkaW8gaXMgYSBiZXR0ZXIgY2FuZGlkYXRlIHRoYW4gdGhlIGN1cnJlbnQgdGFyZ2V0LCBhY2NvcmRpbmcgdG8gcGxheWhlYWRcblx0XHRcdGlmICgoaW50ZXJydXB0ID09IFNvdW5kLklOVEVSUlVQVF9FQVJMWSAmJiB0YXJnZXQucG9zaXRpb24gPCByZXBsYWNlbWVudC5wb3NpdGlvbikgfHxcblx0XHRcdFx0KGludGVycnVwdCA9PSBTb3VuZC5JTlRFUlJVUFRfTEFURSAmJiB0YXJnZXQucG9zaXRpb24gPiByZXBsYWNlbWVudC5wb3NpdGlvbikpIHtcblx0XHRcdFx0XHRyZXBsYWNlbWVudCA9IHRhcmdldDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocmVwbGFjZW1lbnQgIT0gbnVsbCkge1xuXHRcdFx0cmVwbGFjZW1lbnQuX2ludGVycnVwdCgpO1xuXHRcdFx0dGhpcy5fcmVtb3ZlKHJlcGxhY2VtZW50KTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cblx0cC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gXCJbU291bmQgU291bmRDaGFubmVsXVwiO1xuXHR9O1xuXHQvLyBkbyBub3QgYWRkIFNvdW5kQ2hhbm5lbCB0byBuYW1lc3BhY2VcblxufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEFic3RyYWN0U291bmRJbnN0YW5jZS5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG4vKipcbiAqIEEgQWJzdHJhY3RTb3VuZEluc3RhbmNlIGlzIGNyZWF0ZWQgd2hlbiBhbnkgY2FsbHMgdG8gdGhlIFNvdW5kIEFQSSBtZXRob2Qge3sjY3Jvc3NMaW5rIFwiU291bmQvcGxheVwifX17ey9jcm9zc0xpbmt9fSBvclxuICoge3sjY3Jvc3NMaW5rIFwiU291bmQvY3JlYXRlSW5zdGFuY2VcIn19e3svY3Jvc3NMaW5rfX0gYXJlIG1hZGUuIFRoZSBBYnN0cmFjdFNvdW5kSW5zdGFuY2UgaXMgcmV0dXJuZWQgYnkgdGhlIGFjdGl2ZSBwbHVnaW5cbiAqIGZvciBjb250cm9sIGJ5IHRoZSB1c2VyLlxuICpcbiAqIDxoND5FeGFtcGxlPC9oND5cbiAqXG4gKiAgICAgIHZhciBteUluc3RhbmNlID0gY3JlYXRlanMuU291bmQucGxheShcIm15QXNzZXRQYXRoL215U3JjRmlsZS5tcDNcIik7XG4gKlxuICogQSBudW1iZXIgb2YgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHByb3ZpZGUgYSBxdWljayB3YXkgdG8gZGV0ZXJtaW5lIGhvdyBhIHNvdW5kIGlzIHBsYXllZC4gUGxlYXNlIHNlZSB0aGUgU291bmRcbiAqIEFQSSBtZXRob2Qge3sjY3Jvc3NMaW5rIFwiU291bmQvcGxheVwifX17ey9jcm9zc0xpbmt9fSBmb3IgYSBsaXN0IG9mIGFyZ3VtZW50cy5cbiAqXG4gKiBPbmNlIGEgQWJzdHJhY3RTb3VuZEluc3RhbmNlIGlzIGNyZWF0ZWQsIGEgcmVmZXJlbmNlIGNhbiBiZSBzdG9yZWQgdGhhdCBjYW4gYmUgdXNlZCB0byBjb250cm9sIHRoZSBhdWRpbyBkaXJlY3RseSB0aHJvdWdoXG4gKiB0aGUgQWJzdHJhY3RTb3VuZEluc3RhbmNlLiBJZiB0aGUgcmVmZXJlbmNlIGlzIG5vdCBzdG9yZWQsIHRoZSBBYnN0cmFjdFNvdW5kSW5zdGFuY2Ugd2lsbCBwbGF5IG91dCBpdHMgYXVkaW8gKGFuZCBhbnkgbG9vcHMpLCBhbmRcbiAqIGlzIHRoZW4gZGUtcmVmZXJlbmNlZCBmcm9tIHRoZSB7eyNjcm9zc0xpbmsgXCJTb3VuZFwifX17ey9jcm9zc0xpbmt9fSBjbGFzcyBzbyB0aGF0IGl0IGNhbiBiZSBjbGVhbmVkIHVwLiBJZiBhdWRpb1xuICogcGxheWJhY2sgaGFzIGNvbXBsZXRlZCwgYSBzaW1wbGUgY2FsbCB0byB0aGUge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL3BsYXlcIn19e3svY3Jvc3NMaW5rfX0gaW5zdGFuY2UgbWV0aG9kXG4gKiB3aWxsIHJlYnVpbGQgdGhlIHJlZmVyZW5jZXMgdGhlIFNvdW5kIGNsYXNzIG5lZWQgdG8gY29udHJvbCBpdC5cbiAqXG4gKiAgICAgIHZhciBteUluc3RhbmNlID0gY3JlYXRlanMuU291bmQucGxheShcIm15QXNzZXRQYXRoL215U3JjRmlsZS5tcDNcIiwge2xvb3A6Mn0pO1xuICogICAgICBteUluc3RhbmNlLm9uKFwibG9vcFwiLCBoYW5kbGVMb29wKTtcbiAqICAgICAgZnVuY3Rpb24gaGFuZGxlTG9vcChldmVudCkge1xuICogICAgICAgICAgbXlJbnN0YW5jZS52b2x1bWUgPSBteUluc3RhbmNlLnZvbHVtZSAqIDAuNTtcbiAqICAgICAgfVxuICpcbiAqIEV2ZW50cyBhcmUgZGlzcGF0Y2hlZCBmcm9tIHRoZSBpbnN0YW5jZSB0byBub3RpZnkgd2hlbiB0aGUgc291bmQgaGFzIGNvbXBsZXRlZCwgbG9vcGVkLCBvciB3aGVuIHBsYXliYWNrIGZhaWxzXG4gKlxuICogICAgICB2YXIgbXlJbnN0YW5jZSA9IGNyZWF0ZWpzLlNvdW5kLnBsYXkoXCJteUFzc2V0UGF0aC9teVNyY0ZpbGUubXAzXCIpO1xuICogICAgICBteUluc3RhbmNlLm9uKFwiY29tcGxldGVcIiwgaGFuZGxlQ29tcGxldGUpO1xuICogICAgICBteUluc3RhbmNlLm9uKFwibG9vcFwiLCBoYW5kbGVMb29wKTtcbiAqICAgICAgbXlJbnN0YW5jZS5vbihcImZhaWxlZFwiLCBoYW5kbGVGYWlsZWQpO1xuICpcbiAqXG4gKiBAY2xhc3MgQWJzdHJhY3RTb3VuZEluc3RhbmNlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBwYXRoIHRvIGFuZCBmaWxlIG5hbWUgb2YgdGhlIHNvdW5kLlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0VGltZSBBdWRpbyBzcHJpdGUgcHJvcGVydHkgdXNlZCB0byBhcHBseSBhbiBvZmZzZXQsIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBBdWRpbyBzcHJpdGUgcHJvcGVydHkgdXNlZCB0byBzZXQgdGhlIHRpbWUgdGhlIGNsaXAgcGxheXMgZm9yLCBpbiBtaWxsaXNlY29uZHMuXG4gKiBAcGFyYW0ge09iamVjdH0gcGxheWJhY2tSZXNvdXJjZSBBbnkgcmVzb3VyY2UgbmVlZGVkIGJ5IHBsdWdpbiB0byBzdXBwb3J0IGF1ZGlvIHBsYXliYWNrLlxuICogQGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXG4vLyBDb25zdHJ1Y3Rvcjpcblx0dmFyIEFic3RyYWN0U291bmRJbnN0YW5jZSA9IGZ1bmN0aW9uIChzcmMsIHN0YXJ0VGltZSwgZHVyYXRpb24sIHBsYXliYWNrUmVzb3VyY2UpIHtcblx0XHR0aGlzLkV2ZW50RGlzcGF0Y2hlcl9jb25zdHJ1Y3RvcigpO1xuXG5cblx0Ly8gcHVibGljIHByb3BlcnRpZXM6XG5cdFx0LyoqXG5cdFx0ICogVGhlIHNvdXJjZSBvZiB0aGUgc291bmQuXG5cdFx0ICogQHByb3BlcnR5IHNyY1xuXHRcdCAqIEB0eXBlIHtTdHJpbmd9XG5cdFx0ICogQGRlZmF1bHQgbnVsbFxuXHRcdCAqL1xuXHRcdHRoaXMuc3JjID0gc3JjO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgaW5zdGFuY2UuIFRoaXMgaXMgc2V0IGJ5IHt7I2Nyb3NzTGluayBcIlNvdW5kXCJ9fXt7L2Nyb3NzTGlua319LlxuXHRcdCAqIEBwcm9wZXJ0eSB1bmlxdWVJZFxuXHRcdCAqIEB0eXBlIHtTdHJpbmd9IHwgTnVtYmVyXG5cdFx0ICogQGRlZmF1bHQgLTFcblx0XHQgKi9cblx0XHR0aGlzLnVuaXF1ZUlkID0gLTE7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgcGxheSBzdGF0ZSBvZiB0aGUgc291bmQuIFBsYXkgc3RhdGVzIGFyZSBkZWZpbmVkIGFzIGNvbnN0YW50cyBvbiB7eyNjcm9zc0xpbmsgXCJTb3VuZFwifX17ey9jcm9zc0xpbmt9fS5cblx0XHQgKiBAcHJvcGVydHkgcGxheVN0YXRlXG5cdFx0ICogQHR5cGUge1N0cmluZ31cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICovXG5cdFx0dGhpcy5wbGF5U3RhdGUgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQSBUaW1lb3V0IGNyZWF0ZWQgYnkge3sjY3Jvc3NMaW5rIFwiU291bmRcIn19e3svY3Jvc3NMaW5rfX0gd2hlbiB0aGlzIEFic3RyYWN0U291bmRJbnN0YW5jZSBpcyBwbGF5ZWQgd2l0aCBhIGRlbGF5LlxuXHRcdCAqIFRoaXMgYWxsb3dzIEFic3RyYWN0U291bmRJbnN0YW5jZSB0byByZW1vdmUgdGhlIGRlbGF5IGlmIHN0b3AsIHBhdXNlLCBvciBjbGVhbnVwIGFyZSBjYWxsZWQgYmVmb3JlIHBsYXliYWNrIGJlZ2lucy5cblx0XHQgKiBAcHJvcGVydHkgZGVsYXlUaW1lb3V0SWRcblx0XHQgKiBAdHlwZSB7dGltZW91dFZhcmlhYmxlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHNpbmNlIDAuNC4wXG5cdFx0ICovXG5cdFx0dGhpcy5kZWxheVRpbWVvdXRJZCA9IG51bGw7XG5cdFx0Ly8gVE9ETyBjb25zaWRlciBtb3ZpbmcgZGVsYXkgaW50byBBYnN0cmFjdFNvdW5kSW5zdGFuY2Ugc28gaXQgY2FuIGJlIGhhbmRsZWQgYnkgcGx1Z2luc1xuXG5cblx0Ly8gcHJpdmF0ZSBwcm9wZXJ0aWVzXG5cdC8vIEdldHRlciAvIFNldHRlciBQcm9wZXJ0aWVzXG5cdFx0Ly8gT0pSIFRPRE8gZmluZCBvcmlnaW5hbCByZWFzb24gdGhhdCB3ZSBkaWRuJ3QgdXNlIGRlZmluZWQgZnVuY3Rpb25zLiAgSSB0aGluayBpdCB3YXMgcGVyZm9ybWFuY2UgcmVsYXRlZFxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2b2x1bWUgb2YgdGhlIHNvdW5kLCBiZXR3ZWVuIDAgYW5kIDEuXG5cdFx0ICpcblx0XHQgKiBUaGUgYWN0dWFsIG91dHB1dCB2b2x1bWUgb2YgYSBzb3VuZCBjYW4gYmUgY2FsY3VsYXRlZCB1c2luZzpcblx0XHQgKiA8Y29kZT5teUluc3RhbmNlLnZvbHVtZSAqIGNyZWF0ZWpzLlNvdW5kLl9nZXRWb2x1bWUoKTs8L2NvZGU+XG5cdFx0ICpcblx0XHQgKiBAcHJvcGVydHkgdm9sdW1lXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICovXG5cdFx0dGhpcy5fdm9sdW1lID0gIDE7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidm9sdW1lXCIsIHtcblx0XHRcdGdldDogdGhpcy5fZ2V0Vm9sdW1lLFxuXHRcdFx0c2V0OiB0aGlzLl9zZXRWb2x1bWVcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBwYW4gb2YgdGhlIHNvdW5kLCBiZXR3ZWVuIC0xIChsZWZ0KSBhbmQgMSAocmlnaHQpLiBOb3RlIHRoYXQgcGFuIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSFRNTCBBdWRpby5cblx0XHQgKlxuXHRcdCAqIE5vdGUgaW4gV2ViQXVkaW9QbHVnaW4gdGhpcyBvbmx5IGdpdmVzIHVzIHRoZSBcInhcIiB2YWx1ZSBvZiB3aGF0IGlzIGFjdHVhbGx5IDNEIGF1ZGlvXG5cdFx0ICogQHByb3BlcnR5IHBhblxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqL1xuXHRcdHRoaXMuX3BhbiA9ICAwO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhblwiLCB7XG5cdFx0XHRnZXQ6IHRoaXMuX2dldFBhbixcblx0XHRcdHNldDogdGhpcy5fc2V0UGFuXG5cdFx0fSk7XG5cblx0XHQvKipcblx0XHQgKiBBdWRpbyBzcHJpdGUgcHJvcGVydHkgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHN0YXJ0aW5nIG9mZnNldC5cblx0XHQgKiBAcHJvcGVydHkgc3RhcnRUaW1lXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICogQHNpbmNlIDAuNi4xXG5cdFx0ICovXG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gTWF0aC5tYXgoMCwgc3RhcnRUaW1lIHx8IDApO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0YXJ0VGltZVwiLCB7XG5cdFx0XHRnZXQ6IHRoaXMuX2dldFN0YXJ0VGltZSxcblx0XHRcdHNldDogdGhpcy5fc2V0U3RhcnRUaW1lXG5cdFx0fSk7XG5cblx0XHQvKipcblx0XHQgKiBTZXRzIG9yIGdldHMgdGhlIGxlbmd0aCBvZiB0aGUgYXVkaW8gY2xpcCwgdmFsdWUgaXMgaW4gbWlsbGlzZWNvbmRzLlxuXHRcdCAqXG5cdFx0ICogQHByb3BlcnR5IGR1cmF0aW9uXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAwXG5cdFx0ICogQHNpbmNlIDAuNi4wXG5cdFx0ICovXG5cdFx0dGhpcy5fZHVyYXRpb24gPSBNYXRoLm1heCgwLCBkdXJhdGlvbiB8fCAwKTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkdXJhdGlvblwiLCB7XG5cdFx0XHRnZXQ6IHRoaXMuX2dldER1cmF0aW9uLFxuXHRcdFx0c2V0OiB0aGlzLl9zZXREdXJhdGlvblxuXHRcdH0pO1xuXG5cdFx0LyoqXG5cdFx0ICogT2JqZWN0IHRoYXQgaG9sZHMgcGx1Z2luIHNwZWNpZmljIHJlc291cmNlIG5lZWQgZm9yIGF1ZGlvIHBsYXliYWNrLlxuXHRcdCAqIFRoaXMgaXMgc2V0IGludGVybmFsbHkgYnkgdGhlIHBsdWdpbi4gIEZvciBleGFtcGxlLCBXZWJBdWRpb1BsdWdpbiB3aWxsIHNldCBhbiBhcnJheSBidWZmZXIsXG5cdFx0ICogSFRNTEF1ZGlvUGx1Z2luIHdpbGwgc2V0IGEgdGFnLCBGbGFzaEF1ZGlvUGx1Z2luIHdpbGwgc2V0IGEgZmxhc2ggcmVmZXJlbmNlLlxuXHRcdCAqXG5cdFx0ICogQHByb3BlcnR5IHBsYXliYWNrUmVzb3VyY2Vcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKi9cblx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlID0gbnVsbDtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwbGF5YmFja1Jlc291cmNlXCIsIHtcblx0XHRcdGdldDogdGhpcy5fZ2V0UGxheWJhY2tSZXNvdXJjZSxcblx0XHRcdHNldDogdGhpcy5fc2V0UGxheWJhY2tSZXNvdXJjZVxuXHRcdH0pO1xuXHRcdGlmKHBsYXliYWNrUmVzb3VyY2UgIT09IGZhbHNlICYmIHBsYXliYWNrUmVzb3VyY2UgIT09IHRydWUpIHsgdGhpcy5fc2V0UGxheWJhY2tSZXNvdXJjZShwbGF5YmFja1Jlc291cmNlKTsgfVxuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHBvc2l0aW9uIG9mIHRoZSBwbGF5aGVhZCBpbiBtaWxsaXNlY29uZHMuIFRoaXMgY2FuIGJlIHNldCB3aGlsZSBhIHNvdW5kIGlzIHBsYXlpbmcsIHBhdXNlZCwgb3Igc3RvcHBlZC5cblx0XHQgKlxuXHRcdCAqIEBwcm9wZXJ0eSBwb3NpdGlvblxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqIEBzaW5jZSAwLjYuMFxuXHRcdCAqL1xuXHRcdHRoaXMuX3Bvc2l0aW9uID0gMDtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJwb3NpdGlvblwiLCB7XG5cdFx0XHRnZXQ6IHRoaXMuX2dldFBvc2l0aW9uLFxuXHRcdFx0c2V0OiB0aGlzLl9zZXRQb3NpdGlvblxuXHRcdH0pO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIG51bWJlciBvZiBwbGF5IGxvb3BzIHJlbWFpbmluZy4gTmVnYXRpdmUgdmFsdWVzIHdpbGwgbG9vcCBpbmZpbml0ZWx5LlxuXHRcdCAqXG5cdFx0ICogQHByb3BlcnR5IGxvb3Bcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqIEBkZWZhdWx0IDBcblx0XHQgKiBAcHVibGljXG5cdFx0ICogQHNpbmNlIDAuNi4wXG5cdFx0ICovXG5cdFx0dGhpcy5fbG9vcCA9IDA7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibG9vcFwiLCB7XG5cdFx0XHRnZXQ6IHRoaXMuX2dldExvb3AsXG5cdFx0XHRzZXQ6IHRoaXMuX3NldExvb3Bcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIE11dGVzIG9yIHVubXV0ZXMgdGhlIGN1cnJlbnQgYXVkaW8gaW5zdGFuY2UuXG5cdFx0ICpcblx0XHQgKiBAcHJvcGVydHkgbXV0ZWRcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiBAZGVmYXVsdCBmYWxzZVxuXHRcdCAqIEBzaW5jZSAwLjYuMFxuXHRcdCAqL1xuXHRcdHRoaXMuX211dGVkID0gZmFsc2U7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibXV0ZWRcIiwge1xuXHRcdFx0Z2V0OiB0aGlzLl9nZXRNdXRlZCxcblx0XHRcdHNldDogdGhpcy5fc2V0TXV0ZWRcblx0XHR9KTtcblxuXHRcdC8qKlxuXHRcdCAqIFBhdXNlcyBvciByZXN1bWVzIHRoZSBjdXJyZW50IGF1ZGlvIGluc3RhbmNlLlxuXHRcdCAqXG5cdFx0ICogQHByb3BlcnR5IHBhdXNlZFxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInBhdXNlZFwiLCB7XG5cdFx0XHRnZXQ6IHRoaXMuX2dldFBhdXNlZCxcblx0XHRcdHNldDogdGhpcy5fc2V0UGF1c2VkXG5cdFx0fSk7XG5cblxuXHQvLyBFdmVudHNcblx0XHQvKipcblx0XHQgKiBUaGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHBsYXliYWNrIGhhcyBzdGFydGVkIHN1Y2Nlc3NmdWxseS5cblx0XHQgKiBAZXZlbnQgc3VjY2VlZGVkXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgb2JqZWN0IHRoYXQgZGlzcGF0Y2hlZCB0aGUgZXZlbnQuXG5cdFx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUuXG5cdFx0ICogQHNpbmNlIDAuNC4wXG5cdFx0ICovXG5cblx0XHQvKipcblx0XHQgKiBUaGUgZXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIHBsYXliYWNrIGlzIGludGVycnVwdGVkLiBUaGlzIGhhcHBlbnMgd2hlbiBhbm90aGVyIHNvdW5kIHdpdGggdGhlIHNhbWVcblx0XHQgKiBzcmMgcHJvcGVydHkgaXMgcGxheWVkIHVzaW5nIGFuIGludGVycnVwdCB2YWx1ZSB0aGF0IGNhdXNlcyB0aGlzIGluc3RhbmNlIHRvIHN0b3AgcGxheWluZy5cblx0XHQgKiBAZXZlbnQgaW50ZXJydXB0ZWRcblx0XHQgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSBvYmplY3QgdGhhdCBkaXNwYXRjaGVkIHRoZSBldmVudC5cblx0XHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZS5cblx0XHQgKiBAc2luY2UgMC40LjBcblx0XHQgKi9cblxuXHRcdC8qKlxuXHRcdCAqIFRoZSBldmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gcGxheWJhY2sgaGFzIGZhaWxlZC4gVGhpcyBoYXBwZW5zIHdoZW4gdGhlcmUgYXJlIHRvbyBtYW55IGNoYW5uZWxzIHdpdGggdGhlIHNhbWVcblx0XHQgKiBzcmMgcHJvcGVydHkgYWxyZWFkeSBwbGF5aW5nIChhbmQgdGhlIGludGVycnVwdCB2YWx1ZSBkb2Vzbid0IGNhdXNlIGFuIGludGVycnVwdCBvZiBhbm90aGVyIGluc3RhbmNlKSwgb3Jcblx0XHQgKiB0aGUgc291bmQgY291bGQgbm90IGJlIHBsYXllZCwgcGVyaGFwcyBkdWUgdG8gYSA0MDQgZXJyb3IuXG5cdFx0ICogQGV2ZW50IGZhaWxlZFxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIG9iamVjdCB0aGF0IGRpc3BhdGNoZWQgdGhlIGV2ZW50LlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlLlxuXHRcdCAqIEBzaW5jZSAwLjQuMFxuXHRcdCAqL1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBhIHNvdW5kIGhhcyBjb21wbGV0ZWQgcGxheWluZyBidXQgaGFzIGxvb3BzIHJlbWFpbmluZy5cblx0XHQgKiBAZXZlbnQgbG9vcFxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIG9iamVjdCB0aGF0IGRpc3BhdGNoZWQgdGhlIGV2ZW50LlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlLlxuXHRcdCAqIEBzaW5jZSAwLjQuMFxuXHRcdCAqL1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBwbGF5YmFjayBjb21wbGV0ZXMuIFRoaXMgbWVhbnMgdGhhdCB0aGUgc291bmQgaGFzIGZpbmlzaGVkIHBsYXlpbmcgaW4gaXRzXG5cdFx0ICogZW50aXJldHksIGluY2x1ZGluZyBpdHMgbG9vcCBpdGVyYXRpb25zLlxuXHRcdCAqIEBldmVudCBjb21wbGV0ZVxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIG9iamVjdCB0aGF0IGRpc3BhdGNoZWQgdGhlIGV2ZW50LlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlLlxuXHRcdCAqIEBzaW5jZSAwLjQuMFxuXHRcdCAqL1xuXHR9O1xuXG5cdHZhciBwID0gY3JlYXRlanMuZXh0ZW5kKEFic3RyYWN0U291bmRJbnN0YW5jZSwgY3JlYXRlanMuRXZlbnREaXNwYXRjaGVyKTtcblxuLy8gUHVibGljIE1ldGhvZHM6XG5cdC8qKlxuXHQgKiBQbGF5IGFuIGluc3RhbmNlLiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgb24gU291bmRJbnN0YW5jZXMgdGhhdCBhbHJlYWR5IGV4aXN0IChjcmVhdGVkXG5cdCAqIHdpdGggdGhlIFNvdW5kIEFQSSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9jcmVhdGVJbnN0YW5jZVwifX17ey9jcm9zc0xpbmt9fSBvciB7eyNjcm9zc0xpbmsgXCJTb3VuZC9wbGF5XCJ9fXt7L2Nyb3NzTGlua319KS5cblx0ICpcblx0ICogPGg0PkV4YW1wbGU8L2g0PlxuXHQgKlxuXHQgKiAgICAgIHZhciBteUluc3RhbmNlID0gY3JlYXRlanMuU291bmQuY3JlYXRlSW5zdGFuY2UobXlTcmMpO1xuXHQgKiAgICAgIG15SW5zdGFuY2UucGxheSh7aW50ZXJydXB0OmNyZWF0ZWpzLlNvdW5kLklOVEVSUlVQVF9BTlksIGxvb3A6MiwgcGFuOjAuNX0pO1xuXHQgKlxuXHQgKiBOb3RlIHRoYXQgaWYgdGhpcyBzb3VuZCBpcyBhbHJlYWR5IHBsYXlpbmcsIHRoaXMgY2FsbCB3aWxsIHN0aWxsIHNldCB0aGUgcGFzc2VkIGluIHBhcmFtZXRlcnMuXG5cblx0ICogPGI+UGFyYW1ldGVycyBEZXByZWNhdGVkPC9iPjxiciAvPlxuXHQgKiBUaGUgcGFyYW1ldGVycyBmb3IgdGhpcyBtZXRob2QgYXJlIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgYSBzaW5nbGUgcGFyYW1ldGVyIHRoYXQgaXMgYW4gT2JqZWN0IG9yIHt7I2Nyb3NzTGluayBcIlBsYXlQcm9wc0NvbmZpZ1wifX17ey9jcm9zc0xpbmt9fS5cblx0ICpcblx0ICogQG1ldGhvZCBwbGF5XG5cdCAqIEBwYXJhbSB7T2JqZWN0IHwgUGxheVByb3BzQ29uZmlnfSBwcm9wcyBBIFBsYXlQcm9wc0NvbmZpZyBpbnN0YW5jZSwgb3IgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHBhcmFtZXRlcnMgdG9cblx0ICogcGxheSBhIHNvdW5kLiBTZWUgdGhlIHt7I2Nyb3NzTGluayBcIlBsYXlQcm9wc0NvbmZpZ1wifX17ey9jcm9zc0xpbmt9fSBmb3IgbW9yZSBpbmZvLlxuXHQgKiBAcmV0dXJuIHtBYnN0cmFjdFNvdW5kSW5zdGFuY2V9IEEgcmVmZXJlbmNlIHRvIGl0c2VsZiwgaW50ZW5kZWQgZm9yIGNoYWluaW5nIGNhbGxzLlxuXHQgKi9cblx0cC5wbGF5ID0gZnVuY3Rpb24gKHByb3BzKSB7XG5cdFx0dmFyIHBsYXlQcm9wcyA9IGNyZWF0ZWpzLlBsYXlQcm9wc0NvbmZpZy5jcmVhdGUocHJvcHMpO1xuXHRcdGlmICh0aGlzLnBsYXlTdGF0ZSA9PSBjcmVhdGVqcy5Tb3VuZC5QTEFZX1NVQ0NFRURFRCkge1xuXHRcdFx0dGhpcy5hcHBseVBsYXlQcm9wcyhwbGF5UHJvcHMpO1xuXHRcdFx0aWYgKHRoaXMuX3BhdXNlZCkge1x0dGhpcy5fc2V0UGF1c2VkKGZhbHNlKTsgfVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHR0aGlzLl9jbGVhblVwKCk7XG5cdFx0Y3JlYXRlanMuU291bmQuX3BsYXlJbnN0YW5jZSh0aGlzLCBwbGF5UHJvcHMpO1x0Ly8gbWFrZSB0aGlzIGFuIGV2ZW50IGRpc3BhdGNoPz9cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogU3RvcCBwbGF5YmFjayBvZiB0aGUgaW5zdGFuY2UuIFN0b3BwZWQgc291bmRzIHdpbGwgcmVzZXQgdGhlaXIgcG9zaXRpb24gdG8gMCwgYW5kIGNhbGxzIHRvIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9yZXN1bWVcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogd2lsbCBmYWlsLiBUbyBzdGFydCBwbGF5YmFjayBhZ2FpbiwgY2FsbCB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvcGxheVwifX17ey9jcm9zc0xpbmt9fS5cbiAgICAgKlxuICAgICAqIElmIHlvdSBkb24ndCB3YW50IHRvIGxvc2UgeW91ciBwb3NpdGlvbiB1c2UgeW91clNvdW5kSW5zdGFuY2UucGF1c2VkID0gdHJ1ZSBpbnN0ZWFkLiB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvcGF1c2VkXCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICBteUluc3RhbmNlLnN0b3AoKTtcblx0ICpcblx0ICogQG1ldGhvZCBzdG9wXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gQSByZWZlcmVuY2UgdG8gaXRzZWxmLCBpbnRlbmRlZCBmb3IgY2hhaW5pbmcgY2FsbHMuXG5cdCAqL1xuXHRwLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fcG9zaXRpb24gPSAwO1xuXHRcdHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuXHRcdHRoaXMuX2hhbmRsZVN0b3AoKTtcblx0XHR0aGlzLl9jbGVhblVwKCk7XG5cdFx0dGhpcy5wbGF5U3RhdGUgPSBjcmVhdGVqcy5Tb3VuZC5QTEFZX0ZJTklTSEVEO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZW1vdmUgYWxsIGV4dGVybmFsIHJlZmVyZW5jZXMgYW5kIHJlc291cmNlcyBmcm9tIEFic3RyYWN0U291bmRJbnN0YW5jZS4gIE5vdGUgdGhpcyBpcyBpcnJldmVyc2libGUgYW5kIEFic3RyYWN0U291bmRJbnN0YW5jZSB3aWxsIG5vIGxvbmdlciB3b3JrXG5cdCAqIEBtZXRob2QgZGVzdHJveVxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2NsZWFuVXAoKTtcblx0XHR0aGlzLnNyYyA9IG51bGw7XG5cdFx0dGhpcy5wbGF5YmFja1Jlc291cmNlID0gbnVsbDtcblxuXHRcdHRoaXMucmVtb3ZlQWxsRXZlbnRMaXN0ZW5lcnMoKTtcblx0fTtcblxuXHQvKipcblx0ICogVGFrZXMgYW4gUGxheVByb3BzQ29uZmlnIG9yIE9iamVjdCB3aXRoIHRoZSBzYW1lIHByb3BlcnRpZXMgYW5kIHNldHMgdGhlbSBvbiB0aGlzIGluc3RhbmNlLlxuXHQgKiBAbWV0aG9kIGFwcGx5UGxheVByb3BzXG5cdCAqIEBwYXJhbSB7UGxheVByb3BzQ29uZmlnIHwgT2JqZWN0fSBwbGF5UHJvcHMgQSBQbGF5UHJvcHNDb25maWcgb3Igb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHNhbWUgcHJvcGVydGllcy5cblx0ICogQHNpbmNlIDAuNi4xXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gQSByZWZlcmVuY2UgdG8gaXRzZWxmLCBpbnRlbmRlZCBmb3IgY2hhaW5pbmcgY2FsbHMuXG5cdCAqL1xuXHRwLmFwcGx5UGxheVByb3BzID0gZnVuY3Rpb24ocGxheVByb3BzKSB7XG5cdFx0aWYgKHBsYXlQcm9wcy5vZmZzZXQgIT0gbnVsbCkgeyB0aGlzLl9zZXRQb3NpdGlvbihwbGF5UHJvcHMub2Zmc2V0KSB9XG5cdFx0aWYgKHBsYXlQcm9wcy5sb29wICE9IG51bGwpIHsgdGhpcy5fc2V0TG9vcChwbGF5UHJvcHMubG9vcCk7IH1cblx0XHRpZiAocGxheVByb3BzLnZvbHVtZSAhPSBudWxsKSB7IHRoaXMuX3NldFZvbHVtZShwbGF5UHJvcHMudm9sdW1lKTsgfVxuXHRcdGlmIChwbGF5UHJvcHMucGFuICE9IG51bGwpIHsgdGhpcy5fc2V0UGFuKHBsYXlQcm9wcy5wYW4pOyB9XG5cdFx0aWYgKHBsYXlQcm9wcy5zdGFydFRpbWUgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fc2V0U3RhcnRUaW1lKHBsYXlQcm9wcy5zdGFydFRpbWUpO1xuXHRcdFx0dGhpcy5fc2V0RHVyYXRpb24ocGxheVByb3BzLmR1cmF0aW9uKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0cC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gXCJbQWJzdHJhY3RTb3VuZEluc3RhbmNlXVwiO1xuXHR9O1xuXG4vLyBnZXQvc2V0IG1ldGhvZHMgdGhhdCBhbGxvdyBzdXBwb3J0IGZvciBJRThcblx0LyoqXG5cdCAqIFBsZWFzZSB1c2Uge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL3BhdXNlZDpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBkaXJlY3RseSBhcyBhIHByb3BlcnR5LlxuXHQgKiBAbWV0aG9kIF9nZXRQYXVzZWRcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJuIHtib29sZWFufSBJZiB0aGUgaW5zdGFuY2UgaXMgY3VycmVudGx5IHBhdXNlZFxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuX2dldFBhdXNlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wYXVzZWQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIFBsZWFzZSB1c2Uge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL3BhdXNlZDpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBkaXJlY3RseSBhcyBhIHByb3BlcnR5XG5cdCAqIEBtZXRob2QgX3NldFBhdXNlZFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gQSByZWZlcmVuY2UgdG8gaXRzZWxmLCBpbnRlbmRlZCBmb3IgY2hhaW5pbmcgY2FsbHMuXG5cdCAqL1xuXHRwLl9zZXRQYXVzZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRpZiAoKHZhbHVlICE9PSB0cnVlICYmIHZhbHVlICE9PSBmYWxzZSkgfHwgdGhpcy5fcGF1c2VkID09IHZhbHVlKSB7cmV0dXJuO31cblx0XHRpZiAodmFsdWUgPT0gdHJ1ZSAmJiB0aGlzLnBsYXlTdGF0ZSAhPSBjcmVhdGVqcy5Tb3VuZC5QTEFZX1NVQ0NFRURFRCkge3JldHVybjt9XG5cdFx0dGhpcy5fcGF1c2VkID0gdmFsdWU7XG5cdFx0aWYodmFsdWUpIHtcblx0XHRcdHRoaXMuX3BhdXNlKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdH1cblx0XHRjbGVhclRpbWVvdXQodGhpcy5kZWxheVRpbWVvdXRJZCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIFBsZWFzZSB1c2Uge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL3ZvbHVtZTpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBkaXJlY3RseSBhcyBhIHByb3BlcnR5XG5cdCAqIEBtZXRob2QgX3NldFZvbHVtZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBUaGUgdm9sdW1lIHRvIHNldCwgYmV0d2VlbiAwIGFuZCAxLlxuXHQgKiBAcmV0dXJuIHtBYnN0cmFjdFNvdW5kSW5zdGFuY2V9IEEgcmVmZXJlbmNlIHRvIGl0c2VsZiwgaW50ZW5kZWQgZm9yIGNoYWluaW5nIGNhbGxzLlxuXHQgKi9cblx0cC5fc2V0Vm9sdW1lID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0aWYgKHZhbHVlID09IHRoaXMuX3ZvbHVtZSkgeyByZXR1cm4gdGhpczsgfVxuXHRcdHRoaXMuX3ZvbHVtZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHZhbHVlKSk7XG5cdFx0aWYgKCF0aGlzLl9tdXRlZCkge1xuXHRcdFx0dGhpcy5fdXBkYXRlVm9sdW1lKCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS92b2x1bWU6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9nZXRWb2x1bWVcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBjdXJyZW50IHZvbHVtZSBvZiB0aGUgc291bmQgaW5zdGFuY2UuXG5cdCAqL1xuXHRwLl9nZXRWb2x1bWUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZvbHVtZTtcblx0fTtcblxuXHQvKipcblx0ICogUGxlYXNlIHVzZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvbXV0ZWQ6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9zZXRNdXRlZFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWUgSWYgdGhlIHNvdW5kIHNob3VsZCBiZSBtdXRlZC5cblx0ICogQHJldHVybiB7QWJzdHJhY3RTb3VuZEluc3RhbmNlfSBBIHJlZmVyZW5jZSB0byBpdHNlbGYsIGludGVuZGVkIGZvciBjaGFpbmluZyBjYWxscy5cblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLl9zZXRNdXRlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdGlmICh2YWx1ZSAhPT0gdHJ1ZSAmJiB2YWx1ZSAhPT0gZmFsc2UpIHtyZXR1cm47fVxuXHRcdHRoaXMuX211dGVkID0gdmFsdWU7XG5cdFx0dGhpcy5fdXBkYXRlVm9sdW1lKCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIFBsZWFzZSB1c2Uge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL211dGVkOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IGRpcmVjdGx5IGFzIGEgcHJvcGVydHlcblx0ICogQG1ldGhvZCBfZ2V0TXV0ZWRcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgc291bmQgaXMgbXV0ZWQuXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5fZ2V0TXV0ZWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX211dGVkO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9wYW46cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9zZXRQYW5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgVGhlIHBhbiB2YWx1ZSwgYmV0d2VlbiAtMSAobGVmdCkgYW5kIDEgKHJpZ2h0KS5cblx0ICogQHJldHVybiB7QWJzdHJhY3RTb3VuZEluc3RhbmNlfSBSZXR1cm5zIHJlZmVyZW5jZSB0byBpdHNlbGYgZm9yIGNoYWluaW5nIGNhbGxzXG5cdCAqL1xuXHRwLl9zZXRQYW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRpZih2YWx1ZSA9PSB0aGlzLl9wYW4pIHsgcmV0dXJuIHRoaXM7IH1cblx0XHR0aGlzLl9wYW4gPSBNYXRoLm1heCgtMSwgTWF0aC5taW4oMSwgdmFsdWUpKTtcblx0XHR0aGlzLl91cGRhdGVQYW4oKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogUGxlYXNlIHVzZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvcGFuOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IGRpcmVjdGx5IGFzIGEgcHJvcGVydHlcblx0ICogQG1ldGhvZCBfZ2V0UGFuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHJldHVybiB7TnVtYmVyfSBUaGUgdmFsdWUgb2YgdGhlIHBhbiwgYmV0d2VlbiAtMSAobGVmdCkgYW5kIDEgKHJpZ2h0KS5cblx0ICovXG5cdHAuX2dldFBhbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFuO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9wb3NpdGlvbjpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBkaXJlY3RseSBhcyBhIHByb3BlcnR5XG5cdCAqIEBtZXRob2QgX2dldFBvc2l0aW9uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHJldHVybiB7TnVtYmVyfSBUaGUgcG9zaXRpb24gb2YgdGhlIHBsYXloZWFkIGluIHRoZSBzb3VuZCwgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKi9cblx0cC5fZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLl9wYXVzZWQgJiYgdGhpcy5wbGF5U3RhdGUgPT0gY3JlYXRlanMuU291bmQuUExBWV9TVUNDRUVERUQpIHtcblx0XHRcdHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5fY2FsY3VsYXRlQ3VycmVudFBvc2l0aW9uKCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9wb3NpdGlvbjtcblx0fTtcblxuXHQvKipcblx0ICogUGxlYXNlIHVzZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvcG9zaXRpb246cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9zZXRQb3NpdGlvblxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBUaGUgcG9zaXRpb24gdG8gcGxhY2UgdGhlIHBsYXloZWFkLCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gUmV0dXJucyByZWZlcmVuY2UgdG8gaXRzZWxmIGZvciBjaGFpbmluZyBjYWxsc1xuXHQgKi9cblx0cC5fc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHR0aGlzLl9wb3NpdGlvbiA9IE1hdGgubWF4KDAsIHZhbHVlKTtcblx0XHRpZiAodGhpcy5wbGF5U3RhdGUgPT0gY3JlYXRlanMuU291bmQuUExBWV9TVUNDRUVERUQpIHtcblx0XHRcdHRoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9zdGFydFRpbWU6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9nZXRTdGFydFRpbWVcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBzdGFydFRpbWUgb2YgdGhlIHNvdW5kIGluc3RhbmNlIGluIG1pbGxpc2Vjb25kcy5cblx0ICovXG5cdHAuX2dldFN0YXJ0VGltZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5fc3RhcnRUaW1lO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9zdGFydFRpbWU6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9zZXRTdGFydFRpbWVcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG5ldyBzdGFydFRpbWUgdGltZSBpbiBtaWxsaSBzZWNvbmRzLlxuXHQgKiBAcmV0dXJuIHtBYnN0cmFjdFNvdW5kSW5zdGFuY2V9IFJldHVybnMgcmVmZXJlbmNlIHRvIGl0c2VsZiBmb3IgY2hhaW5pbmcgY2FsbHNcblx0ICovXG5cdHAuX3NldFN0YXJ0VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdGlmICh2YWx1ZSA9PSB0aGlzLl9zdGFydFRpbWUpIHsgcmV0dXJuIHRoaXM7IH1cblx0XHR0aGlzLl9zdGFydFRpbWUgPSBNYXRoLm1heCgwLCB2YWx1ZSB8fCAwKTtcblx0XHR0aGlzLl91cGRhdGVTdGFydFRpbWUoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogUGxlYXNlIHVzZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvZHVyYXRpb246cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9nZXREdXJhdGlvblxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm4ge051bWJlcn0gVGhlIGR1cmF0aW9uIG9mIHRoZSBzb3VuZCBpbnN0YW5jZSBpbiBtaWxsaXNlY29uZHMuXG5cdCAqL1xuXHRwLl9nZXREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5fZHVyYXRpb247XG5cdH07XG5cblx0LyoqXG5cdCAqIFBsZWFzZSB1c2Uge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL2R1cmF0aW9uOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IGRpcmVjdGx5IGFzIGEgcHJvcGVydHlcblx0ICogQG1ldGhvZCBfc2V0RHVyYXRpb25cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG5ldyBkdXJhdGlvbiB0aW1lIGluIG1pbGxpIHNlY29uZHMuXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gUmV0dXJucyByZWZlcmVuY2UgdG8gaXRzZWxmIGZvciBjaGFpbmluZyBjYWxsc1xuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuX3NldER1cmF0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0aWYgKHZhbHVlID09IHRoaXMuX2R1cmF0aW9uKSB7IHJldHVybiB0aGlzOyB9XG5cdFx0dGhpcy5fZHVyYXRpb24gPSBNYXRoLm1heCgwLCB2YWx1ZSB8fCAwKTtcblx0XHR0aGlzLl91cGRhdGVEdXJhdGlvbigpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9wbGF5YmFja1Jlc291cmNlOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IGRpcmVjdGx5IGFzIGEgcHJvcGVydHlcblx0ICogQG1ldGhvZCBfc2V0UGxheWJhY2tSZXNvdXJjZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZSBUaGUgbmV3IHBsYXliYWNrIHJlc291cmNlLlxuXHQgKiBAcmV0dXJuIHtBYnN0cmFjdFNvdW5kSW5zdGFuY2V9IFJldHVybnMgcmVmZXJlbmNlIHRvIGl0c2VsZiBmb3IgY2hhaW5pbmcgY2FsbHNcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqKi9cblx0cC5fc2V0UGxheWJhY2tSZXNvdXJjZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UgPSB2YWx1ZTtcblx0XHRpZiAodGhpcy5fZHVyYXRpb24gPT0gMCAmJiB0aGlzLl9wbGF5YmFja1Jlc291cmNlKSB7IHRoaXMuX3NldER1cmF0aW9uRnJvbVNvdXJjZSgpOyB9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIFBsZWFzZSB1c2Uge3sjY3Jvc3NMaW5rIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlL3BsYXliYWNrUmVzb3VyY2U6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0gZGlyZWN0bHkgYXMgYSBwcm9wZXJ0eVxuXHQgKiBAbWV0aG9kIF9nZXRQbGF5YmFja1Jlc291cmNlXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtPYmplY3R9IHZhbHVlIFRoZSBuZXcgcGxheWJhY2sgcmVzb3VyY2UuXG5cdCAqIEByZXR1cm4ge09iamVjdH0gcGxheWJhY2sgcmVzb3VyY2UgdXNlZCBmb3IgcGxheWluZyBhdWRpb1xuXHQgKiBAc2luY2UgMC42LjBcblx0ICoqL1xuXHRwLl9nZXRQbGF5YmFja1Jlc291cmNlID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLl9wbGF5YmFja1Jlc291cmNlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZS9sb29wOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IGRpcmVjdGx5IGFzIGEgcHJvcGVydHlcblx0ICogQG1ldGhvZCBfZ2V0TG9vcFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm4ge251bWJlcn1cblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqKi9cblx0cC5fZ2V0TG9vcCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5fbG9vcDtcblx0fTtcblxuXHQvKipcblx0ICogUGxlYXNlIHVzZSB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2UvbG9vcDpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fSBkaXJlY3RseSBhcyBhIHByb3BlcnR5XG5cdCAqIEBtZXRob2QgX3NldExvb3Bcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG51bWJlciBvZiB0aW1lcyB0byBsb29wIGFmdGVyIHBsYXkuXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5fc2V0TG9vcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdGlmKHRoaXMuX3BsYXliYWNrUmVzb3VyY2UgIT0gbnVsbCkge1xuXHRcdFx0Ly8gcmVtb3ZlIGxvb3Bpbmdcblx0XHRcdGlmICh0aGlzLl9sb29wICE9IDAgJiYgdmFsdWUgPT0gMCkge1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVMb29waW5nKHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdC8vIGFkZCBsb29waW5nXG5cdFx0XHRlbHNlIGlmICh0aGlzLl9sb29wID09IDAgJiYgdmFsdWUgIT0gMCkge1xuXHRcdFx0XHR0aGlzLl9hZGRMb29waW5nKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5fbG9vcCA9IHZhbHVlO1xuXHR9O1xuXG5cbi8vIFByaXZhdGUgTWV0aG9kczpcblx0LyoqXG5cdCAqIEEgaGVscGVyIG1ldGhvZCB0aGF0IGRpc3BhdGNoZXMgYWxsIGV2ZW50cyBmb3IgQWJzdHJhY3RTb3VuZEluc3RhbmNlLlxuXHQgKiBAbWV0aG9kIF9zZW5kRXZlbnRcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5fc2VuZEV2ZW50ID0gZnVuY3Rpb24gKHR5cGUpIHtcblx0XHR2YXIgZXZlbnQgPSBuZXcgY3JlYXRlanMuRXZlbnQodHlwZSk7XG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0fTtcblxuXHQvKipcblx0ICogQ2xlYW4gdXAgdGhlIGluc3RhbmNlLiBSZW1vdmUgcmVmZXJlbmNlcyBhbmQgY2xlYW4gdXAgYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBzdWNoIGFzIHRpbWVycy5cblx0ICogQG1ldGhvZCBfY2xlYW5VcFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRwLl9jbGVhblVwID0gZnVuY3Rpb24gKCkge1xuXHRcdGNsZWFyVGltZW91dCh0aGlzLmRlbGF5VGltZW91dElkKTsgLy8gY2xlYXIgdGltZW91dCB0aGF0IHBsYXlzIGRlbGF5ZWQgc291bmRcblx0XHR0aGlzLl9oYW5kbGVDbGVhblVwKCk7XG5cdFx0dGhpcy5fcGF1c2VkID0gZmFsc2U7XG5cblx0XHRjcmVhdGVqcy5Tb3VuZC5fcGxheUZpbmlzaGVkKHRoaXMpO1x0Ly8gVE9ETyBjaGFuZ2UgdG8gYW4gZXZlbnRcblx0fTtcblxuXHQvKipcblx0ICogVGhlIHNvdW5kIGhhcyBiZWVuIGludGVycnVwdGVkLlxuXHQgKiBAbWV0aG9kIF9pbnRlcnJ1cHRcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5faW50ZXJydXB0ID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX2NsZWFuVXAoKTtcblx0XHR0aGlzLnBsYXlTdGF0ZSA9IGNyZWF0ZWpzLlNvdW5kLlBMQVlfSU5URVJSVVBURUQ7XG5cdFx0dGhpcy5fc2VuZEV2ZW50KFwiaW50ZXJydXB0ZWRcIik7XG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGxlZCBieSB0aGUgU291bmQgY2xhc3Mgd2hlbiB0aGUgYXVkaW8gaXMgcmVhZHkgdG8gcGxheSAoZGVsYXkgaGFzIGNvbXBsZXRlZCkuIFN0YXJ0cyBzb3VuZCBwbGF5aW5nIGlmIHRoZVxuXHQgKiBzcmMgaXMgbG9hZGVkLCBvdGhlcndpc2UgcGxheWJhY2sgd2lsbCBmYWlsLlxuXHQgKiBAbWV0aG9kIF9iZWdpblBsYXlpbmdcblx0ICogQHBhcmFtIHtQbGF5UHJvcHNDb25maWd9IHBsYXlQcm9wcyBBIFBsYXlQcm9wc0NvbmZpZyBvYmplY3QuXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHBsYXliYWNrIHN1Y2NlZWRlZC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0Ly8gT0pSIEZsYXNoQXVkaW9Tb3VuZEluc3RhbmNlIG92ZXJ3cml0ZXNcblx0cC5fYmVnaW5QbGF5aW5nID0gZnVuY3Rpb24gKHBsYXlQcm9wcykge1xuXHRcdHRoaXMuX3NldFBvc2l0aW9uKHBsYXlQcm9wcy5vZmZzZXQpO1xuXHRcdHRoaXMuX3NldExvb3AocGxheVByb3BzLmxvb3ApO1xuXHRcdHRoaXMuX3NldFZvbHVtZShwbGF5UHJvcHMudm9sdW1lKTtcblx0XHR0aGlzLl9zZXRQYW4ocGxheVByb3BzLnBhbik7XG5cdFx0aWYgKHBsYXlQcm9wcy5zdGFydFRpbWUgIT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fc2V0U3RhcnRUaW1lKHBsYXlQcm9wcy5zdGFydFRpbWUpO1xuXHRcdFx0dGhpcy5fc2V0RHVyYXRpb24ocGxheVByb3BzLmR1cmF0aW9uKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fcGxheWJhY2tSZXNvdXJjZSAhPSBudWxsICYmIHRoaXMuX3Bvc2l0aW9uIDwgdGhpcy5fZHVyYXRpb24pIHtcblx0XHRcdHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5faGFuZGxlU291bmRSZWFkeSgpO1xuXHRcdFx0dGhpcy5wbGF5U3RhdGUgPSBjcmVhdGVqcy5Tb3VuZC5QTEFZX1NVQ0NFRURFRDtcblx0XHRcdHRoaXMuX3NlbmRFdmVudChcInN1Y2NlZWRlZFwiKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9wbGF5RmFpbGVkKCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbGF5IGhhcyBmYWlsZWQsIHdoaWNoIGNhbiBoYXBwZW4gZm9yIGEgdmFyaWV0eSBvZiByZWFzb25zLlxuXHQgKiBDbGVhbnMgdXAgaW5zdGFuY2UgYW5kIGRpc3BhdGNoZXMgZmFpbGVkIGV2ZW50XG5cdCAqIEBtZXRob2QgX3BsYXlGYWlsZWRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX3BsYXlGYWlsZWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fY2xlYW5VcCgpO1xuXHRcdHRoaXMucGxheVN0YXRlID0gY3JlYXRlanMuU291bmQuUExBWV9GQUlMRUQ7XG5cdFx0dGhpcy5fc2VuZEV2ZW50KFwiZmFpbGVkXCIpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBBdWRpbyBoYXMgZmluaXNoZWQgcGxheWluZy4gTWFudWFsbHkgbG9vcCBpdCBpZiByZXF1aXJlZC5cblx0ICogQG1ldGhvZCBfaGFuZGxlU291bmRDb21wbGV0ZVxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5faGFuZGxlU291bmRDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdHRoaXMuX3Bvc2l0aW9uID0gMDsgIC8vIGhhdmUgdG8gc2V0IHRoaXMgYXMgaXQgY2FuIGJlIHNldCBieSBwYXVzZSBkdXJpbmcgcGxheWJhY2tcblxuXHRcdGlmICh0aGlzLl9sb29wICE9IDApIHtcblx0XHRcdHRoaXMuX2xvb3AtLTsgIC8vIE5PVEUgdGhpcyBpbnRyb2R1Y2VzIGEgdGhlb3JldGljYWwgbGltaXQgb24gbG9vcHMgPSBmbG9hdCBtYXggc2l6ZSB4IDIgLSAxXG5cdFx0XHR0aGlzLl9oYW5kbGVMb29wKCk7XG5cdFx0XHR0aGlzLl9zZW5kRXZlbnQoXCJsb29wXCIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NsZWFuVXAoKTtcblx0XHR0aGlzLnBsYXlTdGF0ZSA9IGNyZWF0ZWpzLlNvdW5kLlBMQVlfRklOSVNIRUQ7XG5cdFx0dGhpcy5fc2VuZEV2ZW50KFwiY29tcGxldGVcIik7XG5cdH07XG5cbi8vIFBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdC8qKlxuXHQgKiBIYW5kbGVzIHN0YXJ0aW5nIHBsYXliYWNrIHdoZW4gdGhlIHNvdW5kIGlzIHJlYWR5IGZvciBwbGF5aW5nLlxuXHQgKiBAbWV0aG9kIF9oYW5kbGVTb3VuZFJlYWR5XG5cdCAqIEBwcm90ZWN0ZWRcbiBcdCAqL1xuXHRwLl9oYW5kbGVTb3VuZFJlYWR5ID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIHBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdH07XG5cblx0LyoqXG5cdCAqIEludGVybmFsIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSB2b2x1bWUgYmFzZWQgb24gdGhlIGluc3RhbmNlIHZvbHVtZSwgbWFzdGVyIHZvbHVtZSwgaW5zdGFuY2UgbXV0ZSB2YWx1ZSxcblx0ICogYW5kIG1hc3RlciBtdXRlIHZhbHVlLlxuXHQgKiBAbWV0aG9kIF91cGRhdGVWb2x1bWVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5fdXBkYXRlVm9sdW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIHBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdH07XG5cblx0LyoqXG5cdCAqIEludGVybmFsIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBwYW5cblx0ICogQG1ldGhvZCBfdXBkYXRlUGFuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLl91cGRhdGVQYW4gPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gcGx1Z2luIHNwZWNpZmljIGNvZGVcblx0fTtcblxuXHQvKipcblx0ICogSW50ZXJuYWwgZnVuY3Rpb24gdXNlZCB0byB1cGRhdGUgdGhlIHN0YXJ0VGltZSBvZiB0aGUgYXVkaW8uXG5cdCAqIEBtZXRob2QgX3VwZGF0ZVN0YXJ0VGltZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBzaW5jZSAwLjYuMVxuXHQgKi9cblx0cC5fdXBkYXRlU3RhcnRUaW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIHBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdH07XG5cblx0LyoqXG5cdCAqIEludGVybmFsIGZ1bmN0aW9uIHVzZWQgdG8gdXBkYXRlIHRoZSBkdXJhdGlvbiBvZiB0aGUgYXVkaW8uXG5cdCAqIEBtZXRob2QgX3VwZGF0ZUR1cmF0aW9uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLl91cGRhdGVEdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBwbHVnaW4gc3BlY2lmaWMgY29kZVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBJbnRlcm5hbCBmdW5jdGlvbiB1c2VkIHRvIGdldCB0aGUgZHVyYXRpb24gb2YgdGhlIGF1ZGlvIGZyb20gdGhlIHNvdXJjZSB3ZSdsbCBiZSBwbGF5aW5nLlxuXHQgKiBAbWV0aG9kIF91cGRhdGVEdXJhdGlvblxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5fc2V0RHVyYXRpb25Gcm9tU291cmNlID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIHBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdH07XG5cblx0LyoqXG5cdCAqIEludGVybmFsIGZ1bmN0aW9uIHRoYXQgY2FsY3VsYXRlcyB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgcGxheWhlYWQgYW5kIHNldHMgdGhpcy5fcG9zaXRpb24gdG8gdGhhdCB2YWx1ZVxuXHQgKiBAbWV0aG9kIF9jYWxjdWxhdGVDdXJyZW50UG9zaXRpb25cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuX2NhbGN1bGF0ZUN1cnJlbnRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBwbHVnaW4gc3BlY2lmaWMgY29kZSB0aGF0IHNldHMgdGhpcy5wb3NpdGlvblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBJbnRlcm5hbCBmdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIHBsYXloZWFkLlxuXHQgKiBAbWV0aG9kIF91cGRhdGVQb3NpdGlvblxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5fdXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gcGx1Z2luIHNwZWNpZmljIGNvZGVcblx0fTtcblxuXHQvKipcblx0ICogSW50ZXJuYWwgZnVuY3Rpb24gY2FsbGVkIHdoZW4gbG9vcGluZyBpcyByZW1vdmVkIGR1cmluZyBwbGF5YmFjay5cblx0ICogQG1ldGhvZCBfcmVtb3ZlTG9vcGluZ1xuXHQgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIG51bWJlciBvZiB0aW1lcyB0byBsb29wIGFmdGVyIHBsYXkuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLl9yZW1vdmVMb29waW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0Ly8gcGx1Z2luIHNwZWNpZmljIGNvZGVcblx0fTtcblxuXHQvKipcblx0ICogSW50ZXJuYWwgZnVuY3Rpb24gY2FsbGVkIHdoZW4gbG9vcGluZyBpcyBhZGRlZCBkdXJpbmcgcGxheWJhY2suXG5cdCAqIEBtZXRob2QgX2FkZExvb3Bpbmdcblx0ICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gbG9vcCBhZnRlciBwbGF5LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5fYWRkTG9vcGluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdC8vIHBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdH07XG5cblx0LyoqXG5cdCAqIEludGVybmFsIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHBhdXNpbmcgcGxheWJhY2tcblx0ICogQG1ldGhvZCBfcGF1c2Vcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuX3BhdXNlID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIHBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdH07XG5cblx0LyoqXG5cdCAqIEludGVybmFsIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHJlc3VtaW5nIHBsYXliYWNrXG5cdCAqIEBtZXRob2QgX3Jlc3VtZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cC5fcmVzdW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIHBsdWdpbiBzcGVjaWZpYyBjb2RlXG5cdH07XG5cblx0LyoqXG5cdCAqIEludGVybmFsIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHN0b3BwaW5nIHBsYXliYWNrXG5cdCAqIEBtZXRob2QgX2hhbmRsZVN0b3Bcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuX2hhbmRsZVN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBwbHVnaW4gc3BlY2lmaWMgY29kZVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBJbnRlcm5hbCBmdW5jdGlvbiBjYWxsZWQgd2hlbiBBYnN0cmFjdFNvdW5kSW5zdGFuY2UgaXMgYmVpbmcgY2xlYW5lZCB1cFxuXHQgKiBAbWV0aG9kIF9oYW5kbGVDbGVhblVwXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRwLl9oYW5kbGVDbGVhblVwID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gcGx1Z2luIHNwZWNpZmljIGNvZGVcblx0fTtcblxuXHQvKipcblx0ICogSW50ZXJuYWwgZnVuY3Rpb24gY2FsbGVkIHdoZW4gQWJzdHJhY3RTb3VuZEluc3RhbmNlIGhhcyBwbGF5ZWQgdG8gZW5kIGFuZCBpcyBsb29waW5nXG5cdCAqIEBtZXRob2QgX2hhbmRsZUxvb3Bcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuX2hhbmRsZUxvb3AgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gcGx1Z2luIHNwZWNpZmljIGNvZGVcblx0fTtcblxuXHRjcmVhdGVqcy5BYnN0cmFjdFNvdW5kSW5zdGFuY2UgPSBjcmVhdGVqcy5wcm9tb3RlKEFic3RyYWN0U291bmRJbnN0YW5jZSwgXCJFdmVudERpc3BhdGNoZXJcIik7XG5cdGNyZWF0ZWpzLkRlZmF1bHRTb3VuZEluc3RhbmNlID0gY3JlYXRlanMuQWJzdHJhY3RTb3VuZEluc3RhbmNlO1x0Ly8gdXNlZCB3aGVuIG5vIHBsdWdpbiBpcyBzdXBwb3J0ZWRcbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBBYnN0cmFjdFBsdWdpbi5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXG4vLyBjb25zdHJ1Y3RvcjpcbiBcdC8qKlxuXHQgKiBBIGRlZmF1bHQgcGx1Z2luIGNsYXNzIHVzZWQgYXMgYSBiYXNlIGZvciBhbGwgb3RoZXIgcGx1Z2lucy5cblx0ICogQGNsYXNzIEFic3RyYWN0UGx1Z2luXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cblx0dmFyIEFic3RyYWN0UGx1Z2luID0gZnVuY3Rpb24gKCkge1xuXHQvLyBwcml2YXRlIHByb3BlcnRpZXM6XG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgcGx1Z2luLlxuXHRcdCAqIG1ldGhvZCBhbmQgaXMgdXNlZCBpbnRlcm5hbGx5LlxuXHRcdCAqIEBwcm9wZXJ0eSBfY2FwYWJpbGl0aWVzXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEBzdGF0aWNcblx0XHQgKi9cblx0XHR0aGlzLl9jYXBhYmlsaXRpZXMgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogT2JqZWN0IGhhc2ggaW5kZXhlZCBieSB0aGUgc291cmNlIFVSSSBvZiBhbGwgY3JlYXRlZCBsb2FkZXJzLCB1c2VkIHRvIHByb3Blcmx5IGRlc3Ryb3kgdGhlbSBpZiBzb3VyY2VzIGFyZSByZW1vdmVkLlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2xvYWRlcnMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIE9iamVjdCBoYXNoIGluZGV4ZWQgYnkgdGhlIHNvdXJjZSBVUkkgb2YgZWFjaCBmaWxlIHRvIGluZGljYXRlIGlmIGFuIGF1ZGlvIHNvdXJjZSBoYXMgYmVndW4gbG9hZGluZyxcblx0XHQgKiBpcyBjdXJyZW50bHkgbG9hZGluZywgb3IgaGFzIGNvbXBsZXRlZCBsb2FkaW5nLiAgQ2FuIGJlIHVzZWQgdG8gc3RvcmUgbm9uIGJvb2xlYW4gZGF0YSBhZnRlciBsb2FkaW5nXG5cdFx0ICogaXMgY29tcGxldGUgKGZvciBleGFtcGxlIGFycmF5QnVmZmVycyBmb3Igd2ViIGF1ZGlvKS5cblx0XHQgKiBAcHJvcGVydHkgX2F1ZGlvU291cmNlc1xuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2F1ZGlvU291cmNlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogT2JqZWN0IGhhc2ggaW5kZXhlZCBieSB0aGUgc291cmNlIFVSSSBvZiBhbGwgY3JlYXRlZCBTb3VuZEluc3RhbmNlcywgdXBkYXRlcyB0aGUgcGxheWJhY2tSZXNvdXJjZSBpZiBpdCBsb2FkcyBhZnRlciB0aGV5IGFyZSBjcmVhdGVkLFxuXHRcdCAqIGFuZCBwcm9wZXJseSBkZXN0cm95IHRoZW0gaWYgc291cmNlcyBhcmUgcmVtb3ZlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3NvdW5kSW5zdGFuY2VzID0ge307XG5cblx0XHQvKipcblx0XHQgKiBUaGUgaW50ZXJuYWwgbWFzdGVyIHZvbHVtZSB2YWx1ZSBvZiB0aGUgcGx1Z2luLlxuXHRcdCAqIEBwcm9wZXJ0eSBfdm9sdW1lXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKiBAZGVmYXVsdCAxXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3ZvbHVtZSA9IDE7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhIGxvYWRlciBjbGFzcyB1c2VkIGJ5IGEgcGx1Z2luIHRoYXQgbXVzdCBiZSBzZXQuXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fbG9hZGVyQ2xhc3M7XG5cblx0XHQvKipcblx0XHQgKiBBIHJlZmVyZW5jZSB0byBhbiBBYnN0cmFjdFNvdW5kSW5zdGFuY2UgY2xhc3MgdXNlZCBieSBhIHBsdWdpbiB0aGF0IG11c3QgYmUgc2V0LlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQHByb3RlY3RlZDtcblx0XHQgKi9cblx0XHR0aGlzLl9zb3VuZEluc3RhbmNlQ2xhc3M7XG5cdH07XG5cdHZhciBwID0gQWJzdHJhY3RQbHVnaW4ucHJvdG90eXBlO1xuXG4vLyBTdGF0aWMgUHJvcGVydGllczpcbi8vIE5PVEUgVEhFU0UgUFJPUEVSVElFUyBORUVEIFRPIEJFIEFEREVEIFRPIEVBQ0ggUExVR0lOXG5cdC8qKlxuXHQgKiBUaGUgY2FwYWJpbGl0aWVzIG9mIHRoZSBwbHVnaW4uIFRoaXMgaXMgZ2VuZXJhdGVkIHZpYSB0aGUgX2dlbmVyYXRlQ2FwYWJpbGl0aWVzIG1ldGhvZCBhbmQgaXMgdXNlZCBpbnRlcm5hbGx5LlxuXHQgKiBAcHJvcGVydHkgX2NhcGFiaWxpdGllc1xuXHQgKiBAdHlwZSB7T2JqZWN0fVxuXHQgKiBAZGVmYXVsdCBudWxsXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdEFic3RyYWN0UGx1Z2luLl9jYXBhYmlsaXRpZXMgPSBudWxsO1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgaWYgdGhlIHBsdWdpbiBjYW4gYmUgdXNlZCBpbiB0aGUgY3VycmVudCBicm93c2VyL09TLlxuXHQgKiBAbWV0aG9kIGlzU3VwcG9ydGVkXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBwbHVnaW4gY2FuIGJlIGluaXRpYWxpemVkLlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRBYnN0cmFjdFBsdWdpbi5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXG4vLyBwdWJsaWMgbWV0aG9kczpcblx0LyoqXG5cdCAqIFByZS1yZWdpc3RlciBhIHNvdW5kIGZvciBwcmVsb2FkaW5nIGFuZCBzZXR1cC4gVGhpcyBpcyBjYWxsZWQgYnkge3sjY3Jvc3NMaW5rIFwiU291bmRcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIE5vdGUgYWxsIHBsdWdpbnMgcHJvdmlkZSBhIDxjb2RlPkxvYWRlcjwvY29kZT4gaW5zdGFuY2UsIHdoaWNoIDxhIGhyZWY9XCJodHRwOi8vcHJlbG9hZGpzLmNvbVwiIHRhcmdldD1cIl9ibGFua1wiPlByZWxvYWRKUzwvYT5cblx0ICogY2FuIHVzZSB0byBhc3Npc3Qgd2l0aCBwcmVsb2FkaW5nLlxuXHQgKiBAbWV0aG9kIHJlZ2lzdGVyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBsb2FkSXRlbSBBbiBPYmplY3QgY29udGFpbmluZyB0aGUgc291cmNlIG9mIHRoZSBhdWRpb1xuXHQgKiBOb3RlIHRoYXQgbm90IGV2ZXJ5IHBsdWdpbiB3aWxsIG1hbmFnZSB0aGlzIHZhbHVlLlxuXHQgKiBAcmV0dXJuIHtPYmplY3R9IEEgcmVzdWx0IG9iamVjdCwgY29udGFpbmluZyBhIFwidGFnXCIgZm9yIHByZWxvYWRpbmcgcHVycG9zZXMuXG5cdCAqL1xuXHRwLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGxvYWRJdGVtKSB7XG5cdFx0dmFyIGxvYWRlciA9IHRoaXMuX2xvYWRlcnNbbG9hZEl0ZW0uc3JjXTtcblx0XHRpZihsb2FkZXIgJiYgIWxvYWRlci5jYW5jZWxlZCkge3JldHVybiB0aGlzLl9sb2FkZXJzW2xvYWRJdGVtLnNyY107fVx0Ly8gYWxyZWFkeSBsb2FkaW5nL2xvYWRlZCB0aGlzLCBzbyBkb24ndCBsb2FkIHR3aWNlXG5cdFx0Ly8gT0pSIHBvdGVudGlhbCBpc3N1ZSB0aGF0IHdlIHdvbid0IGJlIGZpcmluZyBsb2FkZWQgZXZlbnQsIG1pZ2h0IG5lZWQgdG8gdHJpZ2dlciBpZiB0aGlzIGlzIGFscmVhZHkgbG9hZGVkP1xuXHRcdHRoaXMuX2F1ZGlvU291cmNlc1tsb2FkSXRlbS5zcmNdID0gdHJ1ZTtcblx0XHR0aGlzLl9zb3VuZEluc3RhbmNlc1tsb2FkSXRlbS5zcmNdID0gW107XG5cdFx0bG9hZGVyID0gbmV3IHRoaXMuX2xvYWRlckNsYXNzKGxvYWRJdGVtKTtcblx0XHRsb2FkZXIub24oXCJjb21wbGV0ZVwiLCB0aGlzLl9oYW5kbGVQcmVsb2FkQ29tcGxldGUsIHRoaXMpO1xuXHRcdHRoaXMuX2xvYWRlcnNbbG9hZEl0ZW0uc3JjXSA9IGxvYWRlcjtcblx0XHRyZXR1cm4gbG9hZGVyO1xuXHR9O1xuXG5cdC8vIG5vdGUgc291bmQgY2FsbHMgcmVnaXN0ZXIgYmVmb3JlIGNhbGxpbmcgcHJlbG9hZFxuXHQvKipcblx0ICogSW50ZXJuYWxseSBwcmVsb2FkIGEgc291bmQuXG5cdCAqIEBtZXRob2QgcHJlbG9hZFxuXHQgKiBAcGFyYW0ge0xvYWRlcn0gbG9hZGVyIFRoZSBzb3VuZCBVUkkgdG8gbG9hZC5cblx0ICovXG5cdHAucHJlbG9hZCA9IGZ1bmN0aW9uIChsb2FkZXIpIHtcblx0XHRsb2FkZXIub24oXCJlcnJvclwiLCB0aGlzLl9oYW5kbGVQcmVsb2FkRXJyb3IsIHRoaXMpO1xuXHRcdGxvYWRlci5sb2FkKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBwcmVsb2FkaW5nIGhhcyBzdGFydGVkIGZvciBhIHNwZWNpZmljIHNvdXJjZS4gSWYgdGhlIHNvdXJjZSBpcyBmb3VuZCwgd2UgY2FuIGFzc3VtZSBpdCBpcyBsb2FkaW5nLFxuXHQgKiBvciBoYXMgYWxyZWFkeSBmaW5pc2hlZCBsb2FkaW5nLlxuXHQgKiBAbWV0aG9kIGlzUHJlbG9hZFN0YXJ0ZWRcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNyYyBUaGUgc291bmQgVVJJIHRvIGNoZWNrLlxuXHQgKiBAcmV0dXJuIHtCb29sZWFufVxuXHQgKi9cblx0cC5pc1ByZWxvYWRTdGFydGVkID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdHJldHVybiAodGhpcy5fYXVkaW9Tb3VyY2VzW3NyY10gIT0gbnVsbCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBwcmVsb2FkaW5nIGhhcyBmaW5pc2hlZCBmb3IgYSBzcGVjaWZpYyBzb3VyY2UuXG5cdCAqIEBtZXRob2QgaXNQcmVsb2FkQ29tcGxldGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNyYyBUaGUgc291bmQgVVJJIHRvIGxvYWQuXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCAqL1xuXHRwLmlzUHJlbG9hZENvbXBsZXRlID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdHJldHVybiAoISh0aGlzLl9hdWRpb1NvdXJjZXNbc3JjXSA9PSBudWxsIHx8IHRoaXMuX2F1ZGlvU291cmNlc1tzcmNdID09IHRydWUpKTtcblx0fTtcblxuXHQvKipcblx0ICogUmVtb3ZlIGEgc291bmQgYWRkZWQgdXNpbmcge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9QbHVnaW4vcmVnaXN0ZXJcIn19e3svY3Jvc3NMaW5rfX0uIE5vdGUgdGhpcyBkb2VzIG5vdCBjYW5jZWwgYSBwcmVsb2FkLlxuXHQgKiBAbWV0aG9kIHJlbW92ZVNvdW5kXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdW5kIFVSSSB0byB1bmxvYWQuXG5cdCAqL1xuXHRwLnJlbW92ZVNvdW5kID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdGlmICghdGhpcy5fc291bmRJbnN0YW5jZXNbc3JjXSkgeyByZXR1cm47IH1cblx0XHRmb3IgKHZhciBpID0gdGhpcy5fc291bmRJbnN0YW5jZXNbc3JjXS5sZW5ndGg7IGktLTsgKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHRoaXMuX3NvdW5kSW5zdGFuY2VzW3NyY11baV07XG5cdFx0XHRpdGVtLmRlc3Ryb3koKTtcblx0XHR9XG5cdFx0ZGVsZXRlKHRoaXMuX3NvdW5kSW5zdGFuY2VzW3NyY10pO1xuXHRcdGRlbGV0ZSh0aGlzLl9hdWRpb1NvdXJjZXNbc3JjXSk7XG5cdFx0aWYodGhpcy5fbG9hZGVyc1tzcmNdKSB7IHRoaXMuX2xvYWRlcnNbc3JjXS5kZXN0cm95KCk7IH1cblx0XHRkZWxldGUodGhpcy5fbG9hZGVyc1tzcmNdKTtcblx0fTtcblxuXHQvKipcblx0ICogUmVtb3ZlIGFsbCBzb3VuZHMgYWRkZWQgdXNpbmcge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9QbHVnaW4vcmVnaXN0ZXJcIn19e3svY3Jvc3NMaW5rfX0uIE5vdGUgdGhpcyBkb2VzIG5vdCBjYW5jZWwgYSBwcmVsb2FkLlxuXHQgKiBAbWV0aG9kIHJlbW92ZUFsbFNvdW5kc1xuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzb3VuZCBVUkkgdG8gdW5sb2FkLlxuXHQgKi9cblx0cC5yZW1vdmVBbGxTb3VuZHMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Zm9yKHZhciBrZXkgaW4gdGhpcy5fYXVkaW9Tb3VyY2VzKSB7XG5cdFx0XHR0aGlzLnJlbW92ZVNvdW5kKGtleSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDcmVhdGUgYSBzb3VuZCBpbnN0YW5jZS4gSWYgdGhlIHNvdW5kIGhhcyBub3QgYmVlbiBwcmVsb2FkZWQsIGl0IGlzIGludGVybmFsbHkgcHJlbG9hZGVkIGhlcmUuXG5cdCAqIEBtZXRob2QgY3JlYXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdW5kIHNvdXJjZSB0byB1c2UuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFRpbWUgQXVkaW8gc3ByaXRlIHByb3BlcnR5IHVzZWQgdG8gYXBwbHkgYW4gb2Zmc2V0LCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBBdWRpbyBzcHJpdGUgcHJvcGVydHkgdXNlZCB0byBzZXQgdGhlIHRpbWUgdGhlIGNsaXAgcGxheXMgZm9yLCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqIEByZXR1cm4ge0Fic3RyYWN0U291bmRJbnN0YW5jZX0gQSBzb3VuZCBpbnN0YW5jZSBmb3IgcGxheWJhY2sgYW5kIGNvbnRyb2wuXG5cdCAqL1xuXHRwLmNyZWF0ZSA9IGZ1bmN0aW9uIChzcmMsIHN0YXJ0VGltZSwgZHVyYXRpb24pIHtcblx0XHRpZiAoIXRoaXMuaXNQcmVsb2FkU3RhcnRlZChzcmMpKSB7XG5cdFx0XHR0aGlzLnByZWxvYWQodGhpcy5yZWdpc3RlcihzcmMpKTtcblx0XHR9XG5cdFx0dmFyIHNpID0gbmV3IHRoaXMuX3NvdW5kSW5zdGFuY2VDbGFzcyhzcmMsIHN0YXJ0VGltZSwgZHVyYXRpb24sIHRoaXMuX2F1ZGlvU291cmNlc1tzcmNdKTtcblx0XHRpZih0aGlzLl9zb3VuZEluc3RhbmNlc1tzcmNdKXtcblx0XHRcdHRoaXMuX3NvdW5kSW5zdGFuY2VzW3NyY10ucHVzaChzaSk7XG5cdFx0fVxuXG5cdFx0Ly8gUGx1Z2lucyB0aGF0IGRvbid0IGhhdmUgYSBzZXRWb2x1bWUgc2hvdWxkIGltcGxlbWVudCBhIHNldE1hc3RlclZvbHVuZS9zZXRNYXN0ZXJNdXRlXG5cdFx0Ly8gU28gd2UgaGF2ZSB0byBjaGVjayB0aGF0IGhlcmUuXG5cdFx0c2kuc2V0TWFzdGVyVm9sdW1lICYmIHNpLnNldE1hc3RlclZvbHVtZShjcmVhdGVqcy5Tb3VuZC52b2x1bWUpO1xuXHRcdHNpLnNldE1hc3Rlck11dGUgJiYgc2kuc2V0TWFzdGVyTXV0ZShjcmVhdGVqcy5Tb3VuZC5tdXRlZCk7XG5cblx0XHRyZXR1cm4gc2k7XG5cdH07XG5cblx0Ly8gaWYgYSBwbHVnaW4gZG9lcyBub3Qgc3VwcG9ydCB2b2x1bWUgYW5kIG11dGUsIGl0IHNob3VsZCBzZXQgdGhlc2UgdG8gbnVsbFxuXHQvKipcblx0ICogU2V0IHRoZSBtYXN0ZXIgdm9sdW1lIG9mIHRoZSBwbHVnaW4sIHdoaWNoIGFmZmVjdHMgYWxsIFNvdW5kSW5zdGFuY2VzLlxuXHQgKiBAbWV0aG9kIHNldFZvbHVtZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgVGhlIHZvbHVtZSB0byBzZXQsIGJldHdlZW4gMCBhbmQgMS5cblx0ICogQHJldHVybiB7Qm9vbGVhbn0gSWYgdGhlIHBsdWdpbiBwcm9jZXNzZXMgdGhlIHNldFZvbHVtZSBjYWxsICh0cnVlKS4gVGhlIFNvdW5kIGNsYXNzIHdpbGwgYWZmZWN0IGFsbCB0aGVcblx0ICogaW5zdGFuY2VzIG1hbnVhbGx5IG90aGVyd2lzZS5cblx0ICovXG5cdHAuc2V0Vm9sdW1lID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0dGhpcy5fdm9sdW1lID0gdmFsdWU7XG5cdFx0dGhpcy5fdXBkYXRlVm9sdW1lKCk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgbWFzdGVyIHZvbHVtZSBvZiB0aGUgcGx1Z2luLCB3aGljaCBhZmZlY3RzIGFsbCBTb3VuZEluc3RhbmNlcy5cblx0ICogQG1ldGhvZCBnZXRWb2x1bWVcblx0ICogQHJldHVybiB7TnVtYmVyfSBUaGUgdm9sdW1lIGxldmVsLCBiZXR3ZWVuIDAgYW5kIDEuXG5cdCAqL1xuXHRwLmdldFZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5fdm9sdW1lO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBNdXRlIGFsbCBzb3VuZHMgdmlhIHRoZSBwbHVnaW4uXG5cdCAqIEBtZXRob2Qgc2V0TXV0ZVxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlIElmIGFsbCBzb3VuZCBzaG91bGQgYmUgbXV0ZWQgb3Igbm90LiBOb3RlIHRoYXQgcGx1Z2luLWxldmVsIG11dGluZyBqdXN0IGxvb2tzIHVwXG5cdCAqIHRoZSBtdXRlIHZhbHVlIG9mIFNvdW5kIHt7I2Nyb3NzTGluayBcIlNvdW5kL211dGVkOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319LCBzbyB0aGlzIHByb3BlcnR5IGlzIG5vdCB1c2VkIGhlcmUuXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBtdXRlIGNhbGwgc3VjY2VlZHMuXG5cdCAqL1xuXHRwLnNldE11dGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHR0aGlzLl91cGRhdGVWb2x1bWUoKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvLyBwbHVnaW5zIHNob3VsZCBvdmVyd3JpdGUgdGhpcyBtZXRob2Rcblx0cC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gXCJbQWJzdHJhY3RQbHVnaW5dXCI7XG5cdH07XG5cblxuLy8gcHJpdmF0ZSBtZXRob2RzOlxuXHQvKipcblx0ICogSGFuZGxlcyBpbnRlcm5hbCBwcmVsb2FkIGNvbXBsZXRpb24uXG5cdCAqIEBtZXRob2QgX2hhbmRsZVByZWxvYWRDb21wbGV0ZVxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5faGFuZGxlUHJlbG9hZENvbXBsZXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0dmFyIHNyYyA9IGV2ZW50LnRhcmdldC5nZXRJdGVtKCkuc3JjO1xuXHRcdHRoaXMuX2F1ZGlvU291cmNlc1tzcmNdID0gZXZlbnQucmVzdWx0O1xuXHRcdGlmICghdGhpcy5fc291bmRJbnN0YW5jZXNbc3JjXSkgeyByZXR1cm47IH1cblx0XHRmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX3NvdW5kSW5zdGFuY2VzW3NyY10ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHRoaXMuX3NvdW5kSW5zdGFuY2VzW3NyY11baV07XG5cdFx0XHRpdGVtLnBsYXliYWNrUmVzb3VyY2UgPSB0aGlzLl9hdWRpb1NvdXJjZXNbc3JjXTtcblx0XHRcdC8vIFRvRG8gY29uc2lkZXIgYWRkaW5nIHBsYXkgY2FsbCBoZXJlIGlmIHBsYXlzdGF0ZSA9PSBwbGF5ZmFpbGVkXG5cdFx0XHR0aGlzLl9zb3VuZEluc3RhbmNlc1tzcmNdID0gbnVsbDtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgaW50ZXJuYWwgcHJlbG9hZCBlcnJvcnNcblx0ICogQG1ldGhvZCBfaGFuZGxlUHJlbG9hZEVycm9yXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRwLl9oYW5kbGVQcmVsb2FkRXJyb3IgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdC8vZGVsZXRlKHRoaXMuX2F1ZGlvU291cmNlc1tzcmNdKTtcblx0fTtcblxuXHQvKipcblx0ICogU2V0IHRoZSBnYWluIHZhbHVlIGZvciBtYXN0ZXIgYXVkaW8uIFNob3VsZCBub3QgYmUgY2FsbGVkIGV4dGVybmFsbHkuXG5cdCAqIEBtZXRob2QgX3VwZGF0ZVZvbHVtZVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRwLl91cGRhdGVWb2x1bWUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gUGx1Z2luIFNwZWNpZmljIGNvZGVcblx0fTtcblxuXHRjcmVhdGVqcy5BYnN0cmFjdFBsdWdpbiA9IEFic3RyYWN0UGx1Z2luO1xufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFdlYkF1ZGlvTG9hZGVyLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanMgfHwge307XG5cbihmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBMb2FkZXIgcHJvdmlkZXMgYSBtZWNoYW5pc20gdG8gcHJlbG9hZCBXZWIgQXVkaW8gY29udGVudCB2aWEgUHJlbG9hZEpTIG9yIGludGVybmFsbHkuIEluc3RhbmNlcyBhcmUgcmV0dXJuZWQgdG9cblx0ICogdGhlIHByZWxvYWRlciwgYW5kIHRoZSBsb2FkIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgYXNzZXQgbmVlZHMgdG8gYmUgcmVxdWVzdGVkLlxuXHQgKlxuXHQgKiBAY2xhc3MgV2ViQXVkaW9Mb2FkZXJcblx0ICogQHBhcmFtIHtTdHJpbmd9IGxvYWRJdGVtIFRoZSBpdGVtIHRvIGJlIGxvYWRlZFxuXHQgKiBAZXh0ZW5kcyBYSFJSZXF1ZXN0XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGZ1bmN0aW9uIExvYWRlcihsb2FkSXRlbSkge1xuXHRcdHRoaXMuQWJzdHJhY3RMb2FkZXJfY29uc3RydWN0b3IobG9hZEl0ZW0sIHRydWUsIGNyZWF0ZWpzLlR5cGVzLlNPVU5EKTtcblxuXHR9O1xuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChMb2FkZXIsIGNyZWF0ZWpzLkFic3RyYWN0TG9hZGVyKTtcblxuXHQvKipcblx0ICogd2ViIGF1ZGlvIGNvbnRleHQgcmVxdWlyZWQgZm9yIGRlY29kaW5nIGF1ZGlvXG5cdCAqIEBwcm9wZXJ0eSBjb250ZXh0XG5cdCAqIEB0eXBlIHtBdWRpb0NvbnRleHR9XG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdExvYWRlci5jb250ZXh0ID0gbnVsbDtcblxuXG4vLyBwdWJsaWMgbWV0aG9kc1xuXHRwLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBcIltXZWJBdWRpb0xvYWRlcl1cIjtcblx0fTtcblxuXG4vLyBwcml2YXRlIG1ldGhvZHNcblx0cC5fY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX3JlcXVlc3QgPSBuZXcgY3JlYXRlanMuWEhSUmVxdWVzdCh0aGlzLl9pdGVtLCBmYWxzZSk7XG5cdFx0dGhpcy5fcmVxdWVzdC5zZXRSZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTtcblx0fTtcblxuXHRwLl9zZW5kQ29tcGxldGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHQvLyBPSlIgd2UgbGVhdmUgdGhpcyB3cmFwcGVkIGluIExvYWRlciBiZWNhdXNlIHdlIG5lZWQgdG8gcmVmZXJlbmNlIHNyYyBhbmQgdGhlIGhhbmRsZXIgb25seSByZWNlaXZlcyBhIHNpbmdsZSBhcmd1bWVudCwgdGhlIGRlY29kZWRBdWRpb1xuXHRcdExvYWRlci5jb250ZXh0LmRlY29kZUF1ZGlvRGF0YSh0aGlzLl9yYXdSZXN1bHQsXG5cdCAgICAgICAgIGNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZUF1ZGlvRGVjb2RlZCwgdGhpcyksXG5cdCAgICAgICAgIGNyZWF0ZWpzLnByb3h5KHRoaXMuX3NlbmRFcnJvciwgdGhpcykpO1xuXHR9O1xuXG5cblx0LyoqXG5cdCogVGhlIGF1ZGlvIGhhcyBiZWVuIGRlY29kZWQuXG5cdCogQG1ldGhvZCBoYW5kbGVBdWRpb0RlY29kZWRcblx0KiBAcGFyYW0gZGVjb2RlZFxuXHQqIEBwcm90ZWN0ZWRcblx0Ki9cblx0cC5faGFuZGxlQXVkaW9EZWNvZGVkID0gZnVuY3Rpb24gKGRlY29kZWRBdWRpbykge1xuXHRcdHRoaXMuX3Jlc3VsdCA9IGRlY29kZWRBdWRpbztcblx0XHR0aGlzLkFic3RyYWN0TG9hZGVyX19zZW5kQ29tcGxldGUoKTtcblx0fTtcblxuXHRjcmVhdGVqcy5XZWJBdWRpb0xvYWRlciA9IGNyZWF0ZWpzLnByb21vdGUoTG9hZGVyLCBcIkFic3RyYWN0TG9hZGVyXCIpO1xufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIFdlYkF1ZGlvU291bmRJbnN0YW5jZS5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG4vKipcbiAqIFdlYkF1ZGlvU291bmRJbnN0YW5jZSBleHRlbmRzIHRoZSBiYXNlIGFwaSBvZiB7eyNjcm9zc0xpbmsgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2VcIn19e3svY3Jvc3NMaW5rfX0gYW5kIGlzIHVzZWQgYnlcbiAqIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luXCJ9fXt7L2Nyb3NzTGlua319LlxuICpcbiAqIFdlYkF1ZGlvU291bmRJbnN0YW5jZSBleHBvc2VzIGF1ZGlvTm9kZXMgZm9yIGFkdmFuY2VkIHVzZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHBhdGggdG8gYW5kIGZpbGUgbmFtZSBvZiB0aGUgc291bmQuXG4gKiBAcGFyYW0ge051bWJlcn0gc3RhcnRUaW1lIEF1ZGlvIHNwcml0ZSBwcm9wZXJ0eSB1c2VkIHRvIGFwcGx5IGFuIG9mZnNldCwgaW4gbWlsbGlzZWNvbmRzLlxuICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIEF1ZGlvIHNwcml0ZSBwcm9wZXJ0eSB1c2VkIHRvIHNldCB0aGUgdGltZSB0aGUgY2xpcCBwbGF5cyBmb3IsIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5YmFja1Jlc291cmNlIEFueSByZXNvdXJjZSBuZWVkZWQgYnkgcGx1Z2luIHRvIHN1cHBvcnQgYXVkaW8gcGxheWJhY2suXG4gKiBAY2xhc3MgV2ViQXVkaW9Tb3VuZEluc3RhbmNlXG4gKiBAZXh0ZW5kcyBBYnN0cmFjdFNvdW5kSW5zdGFuY2VcbiAqIEBjb25zdHJ1Y3RvclxuICovXG4oZnVuY3Rpb24gKCkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRmdW5jdGlvbiBXZWJBdWRpb1NvdW5kSW5zdGFuY2Uoc3JjLCBzdGFydFRpbWUsIGR1cmF0aW9uLCBwbGF5YmFja1Jlc291cmNlKSB7XG5cdFx0dGhpcy5BYnN0cmFjdFNvdW5kSW5zdGFuY2VfY29uc3RydWN0b3Ioc3JjLCBzdGFydFRpbWUsIGR1cmF0aW9uLCBwbGF5YmFja1Jlc291cmNlKTtcblxuXG4vLyBwdWJsaWMgcHJvcGVydGllc1xuXHRcdC8qKlxuXHRcdCAqIE5PVEUgdGhpcyBpcyBvbmx5IGludGVuZGVkIGZvciB1c2UgYnkgYWR2YW5jZWQgdXNlcnMuXG5cdFx0ICogPGJyIC8+R2Fpbk5vZGUgZm9yIGNvbnRyb2xsaW5nIDxjb2RlPldlYkF1ZGlvU291bmRJbnN0YW5jZTwvY29kZT4gdm9sdW1lLiBDb25uZWN0ZWQgdG8gdGhlIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvU291bmRJbnN0YW5jZS9kZXN0aW5hdGlvbk5vZGU6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0uXG5cdFx0ICogQHByb3BlcnR5IGdhaW5Ob2RlXG5cdFx0ICogQHR5cGUge0F1ZGlvR2Fpbk5vZGV9XG5cdFx0ICogQHNpbmNlIDAuNC4wXG5cdFx0ICpcblx0XHQgKi9cblx0XHR0aGlzLmdhaW5Ob2RlID0gcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblxuXHRcdC8qKlxuXHRcdCAqIE5PVEUgdGhpcyBpcyBvbmx5IGludGVuZGVkIGZvciB1c2UgYnkgYWR2YW5jZWQgdXNlcnMuXG5cdFx0ICogPGJyIC8+QSBwYW5Ob2RlIGFsbG93aW5nIGxlZnQgYW5kIHJpZ2h0IGF1ZGlvIGNoYW5uZWwgcGFubmluZyBvbmx5LiBDb25uZWN0ZWQgdG8gV2ViQXVkaW9Tb3VuZEluc3RhbmNlIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvU291bmRJbnN0YW5jZS9nYWluTm9kZTpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fS5cblx0XHQgKiBAcHJvcGVydHkgcGFuTm9kZVxuXHRcdCAqIEB0eXBlIHtBdWRpb1Bhbm5lck5vZGV9XG5cdFx0ICogQHNpbmNlIDAuNC4wXG5cdFx0ICovXG5cdFx0dGhpcy5wYW5Ob2RlID0gcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpO1xuXHRcdHRoaXMucGFuTm9kZS5wYW5uaW5nTW9kZWwgPSBzLl9wYW5uaW5nTW9kZWw7XG5cdFx0dGhpcy5wYW5Ob2RlLmNvbm5lY3QodGhpcy5nYWluTm9kZSk7XG5cdFx0dGhpcy5fdXBkYXRlUGFuKCk7XG5cblx0XHQvKipcblx0XHQgKiBOT1RFIHRoaXMgaXMgb25seSBpbnRlbmRlZCBmb3IgdXNlIGJ5IGFkdmFuY2VkIHVzZXJzLlxuXHRcdCAqIDxiciAvPnNvdXJjZU5vZGUgaXMgdGhlIGF1ZGlvIHNvdXJjZS4gQ29ubmVjdGVkIHRvIFdlYkF1ZGlvU291bmRJbnN0YW5jZSB7eyNjcm9zc0xpbmsgXCJXZWJBdWRpb1NvdW5kSW5zdGFuY2UvcGFuTm9kZTpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fS5cblx0XHQgKiBAcHJvcGVydHkgc291cmNlTm9kZVxuXHRcdCAqIEB0eXBlIHtBdWRpb05vZGV9XG5cdFx0ICogQHNpbmNlIDAuNC4wXG5cdFx0ICpcblx0XHQgKi9cblx0XHR0aGlzLnNvdXJjZU5vZGUgPSBudWxsO1xuXG5cbi8vIHByaXZhdGUgcHJvcGVydGllc1xuXHRcdC8qKlxuXHRcdCAqIFRpbWVvdXQgdGhhdCBpcyBjcmVhdGVkIGludGVybmFsbHkgdG8gaGFuZGxlIHNvdW5kIHBsYXlpbmcgdG8gY29tcGxldGlvbi5cblx0XHQgKiBTdG9yZWQgc28gd2UgY2FuIHJlbW92ZSBpdCB3aGVuIHN0b3AsIHBhdXNlLCBvciBjbGVhbnVwIGFyZSBjYWxsZWRcblx0XHQgKiBAcHJvcGVydHkgX3NvdW5kQ29tcGxldGVUaW1lb3V0XG5cdFx0ICogQHR5cGUge3RpbWVvdXRWYXJpYWJsZX1cblx0XHQgKiBAZGVmYXVsdCBudWxsXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEBzaW5jZSAwLjQuMFxuXHRcdCAqL1xuXHRcdHRoaXMuX3NvdW5kQ29tcGxldGVUaW1lb3V0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIE5PVEUgdGhpcyBpcyBvbmx5IGludGVuZGVkIGZvciB1c2UgYnkgdmVyeSBhZHZhbmNlZCB1c2Vycy5cblx0XHQgKiBfc291cmNlTm9kZU5leHQgaXMgdGhlIGF1ZGlvIHNvdXJjZSBmb3IgdGhlIG5leHQgbG9vcCwgaW5zZXJ0ZWQgaW4gYSBsb29rIGFoZWFkIGFwcHJvYWNoIHRvIGFsbG93IGZvciBzbW9vdGhcblx0XHQgKiBsb29waW5nLiBDb25uZWN0ZWQgdG8ge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9Tb3VuZEluc3RhbmNlL2dhaW5Ob2RlOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319LlxuXHRcdCAqIEBwcm9wZXJ0eSBfc291cmNlTm9kZU5leHRcblx0XHQgKiBAdHlwZSB7QXVkaW9Ob2RlfVxuXHRcdCAqIEBkZWZhdWx0IG51bGxcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHNpbmNlIDAuNC4xXG5cdFx0ICpcblx0XHQgKi9cblx0XHR0aGlzLl9zb3VyY2VOb2RlTmV4dCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBUaW1lIGF1ZGlvIHN0YXJ0ZWQgcGxheWJhY2ssIGluIHNlY29uZHMuIFVzZWQgdG8gaGFuZGxlIHNldCBwb3NpdGlvbiwgZ2V0IHBvc2l0aW9uLCBhbmQgcmVzdW1pbmcgZnJvbSBwYXVzZWQuXG5cdFx0ICogQHByb3BlcnR5IF9wbGF5YmFja1N0YXJ0VGltZVxuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICogQGRlZmF1bHQgMFxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAc2luY2UgMC40LjBcblx0XHQgKi9cblx0XHR0aGlzLl9wbGF5YmFja1N0YXJ0VGltZSA9IDA7XG5cblx0XHQvLyBQcm94aWVzLCBtYWtlIHJlbW92aW5nIGxpc3RlbmVycyBlYXNpZXIuXG5cdFx0dGhpcy5fZW5kZWRIYW5kbGVyID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlU291bmRDb21wbGV0ZSwgdGhpcyk7XG5cdH07XG5cdHZhciBwID0gY3JlYXRlanMuZXh0ZW5kKFdlYkF1ZGlvU291bmRJbnN0YW5jZSwgY3JlYXRlanMuQWJzdHJhY3RTb3VuZEluc3RhbmNlKTtcblx0dmFyIHMgPSBXZWJBdWRpb1NvdW5kSW5zdGFuY2U7XG5cblx0LyoqXG5cdCAqIE5vdGUgdGhpcyBpcyBvbmx5IGludGVuZGVkIGZvciB1c2UgYnkgYWR2YW5jZWQgdXNlcnMuXG5cdCAqIDxiciAvPkF1ZGlvIGNvbnRleHQgdXNlZCB0byBjcmVhdGUgbm9kZXMuICBUaGlzIGlzIGFuZCBuZWVkcyB0byBiZSB0aGUgc2FtZSBjb250ZXh0IHVzZWQgYnkge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0uXG4gIFx0ICogQHByb3BlcnR5IGNvbnRleHRcblx0ICogQHR5cGUge0F1ZGlvQ29udGV4dH1cblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHMuY29udGV4dCA9IG51bGw7XG5cblx0LyoqXG5cdCAqIE5vdGUgdGhpcyBpcyBvbmx5IGludGVuZGVkIGZvciB1c2UgYnkgYWR2YW5jZWQgdXNlcnMuXG5cdCAqIDxiciAvPlRoZSBzY3JhdGNoIGJ1ZmZlciB0aGF0IHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGJ1ZmZlciBwcm9wZXJ0eSBvZiBhIHNvdXJjZSBub2RlIG9uIGNsb3NlLiAgXG5cdCAqIFRoaXMgaXMgYW5kIHNob3VsZCBiZSB0aGUgc2FtZSBzY3JhdGNoIGJ1ZmZlciByZWZlcmVuY2VkIGJ5IHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luXCJ9fXt7L2Nyb3NzTGlua319LlxuICBcdCAqIEBwcm9wZXJ0eSBfc2NyYXRjaEJ1ZmZlclxuXHQgKiBAdHlwZSB7QXVkaW9CdWZmZXJTb3VyY2VOb2RlfVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLl9zY3JhdGNoQnVmZmVyID0gbnVsbDtcblxuXHQvKipcblx0ICogTm90ZSB0aGlzIGlzIG9ubHkgaW50ZW5kZWQgZm9yIHVzZSBieSBhZHZhbmNlZCB1c2Vycy5cblx0ICogPGJyIC8+IEF1ZGlvIG5vZGUgZnJvbSBXZWJBdWRpb1BsdWdpbiB0aGF0IHNlcXVlbmNlcyB0byA8Y29kZT5jb250ZXh0LmRlc3RpbmF0aW9uPC9jb2RlPlxuXHQgKiBAcHJvcGVydHkgZGVzdGluYXRpb25Ob2RlXG5cdCAqIEB0eXBlIHtBdWRpb05vZGV9XG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDAuNi4wXG5cdCAqL1xuXHRzLmRlc3RpbmF0aW9uTm9kZSA9IG51bGw7XG5cblx0LyoqXG5cdCAqIFZhbHVlIHRvIHNldCBwYW5uaW5nIG1vZGVsIHRvIGVxdWFsIHBvd2VyIGZvciBXZWJBdWRpb1NvdW5kSW5zdGFuY2UuICBDYW4gYmUgXCJlcXVhbHBvd2VyXCIgb3IgMCBkZXBlbmRpbmcgb24gYnJvd3NlciBpbXBsZW1lbnRhdGlvbi5cblx0ICogQHByb3BlcnR5IF9wYW5uaW5nTW9kZWxcblx0ICogQHR5cGUge051bWJlciAvIFN0cmluZ31cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAc3RhdGljXG5cdCAqIEBzaW5jZSAwLjYuMFxuXHQgKi9cblx0cy5fcGFubmluZ01vZGVsID0gXCJlcXVhbHBvd2VyXCI7XG5cblxuLy8gUHVibGljIG1ldGhvZHNcblx0cC5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5BYnN0cmFjdFNvdW5kSW5zdGFuY2VfZGVzdHJveSgpO1xuXG5cdFx0dGhpcy5wYW5Ob2RlLmRpc2Nvbm5lY3QoMCk7XG5cdFx0dGhpcy5wYW5Ob2RlID0gbnVsbDtcblx0XHR0aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3QoMCk7XG5cdFx0dGhpcy5nYWluTm9kZSA9IG51bGw7XG5cdH07XG5cblx0cC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gXCJbV2ViQXVkaW9Tb3VuZEluc3RhbmNlXVwiO1xuXHR9O1xuXG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXHRwLl91cGRhdGVQYW4gPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnBhbk5vZGUuc2V0UG9zaXRpb24odGhpcy5fcGFuLCAwLCAtMC41KTtcblx0XHQvLyB6IG5lZWQgdG8gYmUgLTAuNSBvdGhlcndpc2UgdGhlIHNvdW5kIG9ubHkgcGxheXMgaW4gbGVmdCwgcmlnaHQsIG9yIGNlbnRlclxuXHR9O1xuXG5cdHAuX3JlbW92ZUxvb3BpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHRoaXMuX3NvdXJjZU5vZGVOZXh0ID0gdGhpcy5fY2xlYW5VcEF1ZGlvTm9kZSh0aGlzLl9zb3VyY2VOb2RlTmV4dCk7XG5cdH07XG5cblx0cC5fYWRkTG9vcGluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0aWYgKHRoaXMucGxheVN0YXRlICE9IGNyZWF0ZWpzLlNvdW5kLlBMQVlfU1VDQ0VFREVEKSB7IHJldHVybjsgfVxuXHRcdHRoaXMuX3NvdXJjZU5vZGVOZXh0ID0gdGhpcy5fY3JlYXRlQW5kUGxheUF1ZGlvTm9kZSh0aGlzLl9wbGF5YmFja1N0YXJ0VGltZSwgMCk7XG5cdH07XG5cblx0cC5fc2V0RHVyYXRpb25Gcm9tU291cmNlID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX2R1cmF0aW9uID0gdGhpcy5wbGF5YmFja1Jlc291cmNlLmR1cmF0aW9uICogMTAwMDtcblx0fTtcblxuXHRwLl9oYW5kbGVDbGVhblVwID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0aGlzLnNvdXJjZU5vZGUgJiYgdGhpcy5wbGF5U3RhdGUgPT0gY3JlYXRlanMuU291bmQuUExBWV9TVUNDRUVERUQpIHtcblx0XHRcdHRoaXMuc291cmNlTm9kZSA9IHRoaXMuX2NsZWFuVXBBdWRpb05vZGUodGhpcy5zb3VyY2VOb2RlKTtcblx0XHRcdHRoaXMuX3NvdXJjZU5vZGVOZXh0ID0gdGhpcy5fY2xlYW5VcEF1ZGlvTm9kZSh0aGlzLl9zb3VyY2VOb2RlTmV4dCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuZ2Fpbk5vZGUubnVtYmVyT2ZPdXRwdXRzICE9IDApIHt0aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3QoMCk7fVxuXHRcdC8vIE9KUiB0aGVyZSBhcHBlYXJzIHRvIGJlIGEgYnVnIHRoYXQgdGhpcyBkb2Vzbid0IGFsd2F5cyB3b3JrIGluIHdlYmtpdCAoQ2hyb21lIGFuZCBTYWZhcmkpLiBBY2NvcmRpbmcgdG8gdGhlIGRvY3VtZW50YXRpb24sIHRoaXMgc2hvdWxkIHdvcmsuXG5cblx0XHRjbGVhclRpbWVvdXQodGhpcy5fc291bmRDb21wbGV0ZVRpbWVvdXQpO1xuXG5cdFx0dGhpcy5fcGxheWJhY2tTdGFydFRpbWUgPSAwO1x0Ly8gVGhpcyBpcyB1c2VkIGJ5IF9nZXRQb3NpdGlvblxuXHR9O1xuXG5cdC8qKlxuXHQgKiBUdXJuIG9mZiBhbmQgZGlzY29ubmVjdCBhbiBhdWRpb05vZGUsIHRoZW4gc2V0IHJlZmVyZW5jZSB0byBudWxsIHRvIHJlbGVhc2UgaXQgZm9yIGdhcmJhZ2UgY29sbGVjdGlvblxuXHQgKiBAbWV0aG9kIF9jbGVhblVwQXVkaW9Ob2RlXG5cdCAqIEBwYXJhbSBhdWRpb05vZGVcblx0ICogQHJldHVybiB7YXVkaW9Ob2RlfVxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBzaW5jZSAwLjQuMVxuXHQgKi9cblx0cC5fY2xlYW5VcEF1ZGlvTm9kZSA9IGZ1bmN0aW9uKGF1ZGlvTm9kZSkge1xuXHRcdGlmKGF1ZGlvTm9kZSkge1xuXHRcdFx0YXVkaW9Ob2RlLnN0b3AoMCk7XG5cdFx0XHRhdWRpb05vZGUuZGlzY29ubmVjdCgwKTtcblx0XHRcdC8vIG5lY2Vzc2FyeSB0byBwcmV2ZW50IGxlYWsgb24gaU9TIFNhZmFyaSA3LTkuIHdpbGwgdGhyb3cgaW4gYWxtb3N0IGFsbCBvdGhlclxuXHRcdFx0Ly8gYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMuXG5cdFx0XHRpZiAoIGNyZWF0ZWpzLkJyb3dzZXJEZXRlY3QuaXNJT1MgKSB7XG5cdFx0XHRcdHRyeSB7IGF1ZGlvTm9kZS5idWZmZXIgPSBzLl9zY3JhdGNoQnVmZmVyOyB9IGNhdGNoKGUpIHt9XG5cdFx0XHR9XG5cdFx0XHRhdWRpb05vZGUgPSBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gYXVkaW9Ob2RlO1xuXHR9O1xuXG5cdHAuX2hhbmRsZVNvdW5kUmVhZHkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHR0aGlzLmdhaW5Ob2RlLmNvbm5lY3Qocy5kZXN0aW5hdGlvbk5vZGUpOyAgLy8gdGhpcyBsaW5lIGNhbiBjYXVzZSBhIG1lbW9yeSBsZWFrLiAgTm9kZXMgbmVlZCB0byBiZSBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgYXVkaW9EZXN0aW5hdGlvbiBvciBhbnkgc2VxdWVuY2UgdGhhdCBsZWFkcyB0byBpdC5cblxuXHRcdHZhciBkdXIgPSB0aGlzLl9kdXJhdGlvbiAqIDAuMDAxLFxuXHRcdFx0cG9zID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgdGhpcy5fcG9zaXRpb24pICogMC4wMDEsIGR1cik7XG5cdFx0dGhpcy5zb3VyY2VOb2RlID0gdGhpcy5fY3JlYXRlQW5kUGxheUF1ZGlvTm9kZSgocy5jb250ZXh0LmN1cnJlbnRUaW1lIC0gZHVyKSwgcG9zKTtcblx0XHR0aGlzLl9wbGF5YmFja1N0YXJ0VGltZSA9IHRoaXMuc291cmNlTm9kZS5zdGFydFRpbWUgLSBwb3M7XG5cblx0XHR0aGlzLl9zb3VuZENvbXBsZXRlVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fZW5kZWRIYW5kbGVyLCAoZHVyIC0gcG9zKSAqIDEwMDApO1xuXG5cdFx0aWYodGhpcy5fbG9vcCAhPSAwKSB7XG5cdFx0XHR0aGlzLl9zb3VyY2VOb2RlTmV4dCA9IHRoaXMuX2NyZWF0ZUFuZFBsYXlBdWRpb05vZGUodGhpcy5fcGxheWJhY2tTdGFydFRpbWUsIDApO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhdWRpbyBub2RlIHVzaW5nIHRoZSBjdXJyZW50IHNyYyBhbmQgY29udGV4dCwgY29ubmVjdHMgaXQgdG8gdGhlIGdhaW4gbm9kZSwgYW5kIHN0YXJ0cyBwbGF5YmFjay5cblx0ICogQG1ldGhvZCBfY3JlYXRlQW5kUGxheUF1ZGlvTm9kZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRUaW1lIFRoZSB0aW1lIHRvIGFkZCB0aGlzIHRvIHRoZSB3ZWIgYXVkaW8gY29udGV4dCwgaW4gc2Vjb25kcy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBUaGUgYW1vdW50IG9mIHRpbWUgaW50byB0aGUgc3JjIGF1ZGlvIHRvIHN0YXJ0IHBsYXliYWNrLCBpbiBzZWNvbmRzLlxuXHQgKiBAcmV0dXJuIHthdWRpb05vZGV9XG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHNpbmNlIDAuNC4xXG5cdCAqL1xuXHRwLl9jcmVhdGVBbmRQbGF5QXVkaW9Ob2RlID0gZnVuY3Rpb24oc3RhcnRUaW1lLCBvZmZzZXQpIHtcblx0XHR2YXIgYXVkaW9Ob2RlID0gcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuXHRcdGF1ZGlvTm9kZS5idWZmZXIgPSB0aGlzLnBsYXliYWNrUmVzb3VyY2U7XG5cdFx0YXVkaW9Ob2RlLmNvbm5lY3QodGhpcy5wYW5Ob2RlKTtcblx0XHR2YXIgZHVyID0gdGhpcy5fZHVyYXRpb24gKiAwLjAwMTtcblx0XHRhdWRpb05vZGUuc3RhcnRUaW1lID0gc3RhcnRUaW1lICsgZHVyO1xuXHRcdGF1ZGlvTm9kZS5zdGFydChhdWRpb05vZGUuc3RhcnRUaW1lLCBvZmZzZXQrKHRoaXMuX3N0YXJ0VGltZSowLjAwMSksIGR1ciAtIG9mZnNldCk7XG5cdFx0cmV0dXJuIGF1ZGlvTm9kZTtcblx0fTtcblxuXHRwLl9wYXVzZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9wb3NpdGlvbiA9IChzLmNvbnRleHQuY3VycmVudFRpbWUgLSB0aGlzLl9wbGF5YmFja1N0YXJ0VGltZSkgKiAxMDAwOyAgLy8gKiAxMDAwIHRvIGdpdmUgbWlsbGlzZWNvbmRzLCBsZXRzIHVzIHJlc3RhcnQgYXQgc2FtZSBwb2ludFxuXHRcdHRoaXMuc291cmNlTm9kZSA9IHRoaXMuX2NsZWFuVXBBdWRpb05vZGUodGhpcy5zb3VyY2VOb2RlKTtcblx0XHR0aGlzLl9zb3VyY2VOb2RlTmV4dCA9IHRoaXMuX2NsZWFuVXBBdWRpb05vZGUodGhpcy5fc291cmNlTm9kZU5leHQpO1xuXG5cdFx0aWYgKHRoaXMuZ2Fpbk5vZGUubnVtYmVyT2ZPdXRwdXRzICE9IDApIHt0aGlzLmdhaW5Ob2RlLmRpc2Nvbm5lY3QoMCk7fVxuXG5cdFx0Y2xlYXJUaW1lb3V0KHRoaXMuX3NvdW5kQ29tcGxldGVUaW1lb3V0KTtcblx0fTtcblxuXHRwLl9yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5faGFuZGxlU291bmRSZWFkeSgpO1xuXHR9O1xuXG5cdC8qXG5cdHAuX2hhbmRsZVN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gd2ViIGF1ZGlvIGRvZXMgbm90IG5lZWQgdG8gZG8gYW55dGhpbmcgZXh0cmFcblx0fTtcblx0Ki9cblxuXHRwLl91cGRhdGVWb2x1bWUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIG5ld1ZvbHVtZSA9IHRoaXMuX211dGVkID8gMCA6IHRoaXMuX3ZvbHVtZTtcblx0ICBcdGlmIChuZXdWb2x1bWUgIT0gdGhpcy5nYWluTm9kZS5nYWluLnZhbHVlKSB7XG5cdFx0ICB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUgPSBuZXdWb2x1bWU7XG4gIFx0XHR9XG5cdH07XG5cblx0cC5fY2FsY3VsYXRlQ3VycmVudFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAoKHMuY29udGV4dC5jdXJyZW50VGltZSAtIHRoaXMuX3BsYXliYWNrU3RhcnRUaW1lKSAqIDEwMDApOyAvLyBwb3MgaW4gc2Vjb25kcyAqIDEwMDAgdG8gZ2l2ZSBtaWxsaXNlY29uZHNcblx0fTtcblxuXHRwLl91cGRhdGVQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLnNvdXJjZU5vZGUgPSB0aGlzLl9jbGVhblVwQXVkaW9Ob2RlKHRoaXMuc291cmNlTm9kZSk7XG5cdFx0dGhpcy5fc291cmNlTm9kZU5leHQgPSB0aGlzLl9jbGVhblVwQXVkaW9Ob2RlKHRoaXMuX3NvdXJjZU5vZGVOZXh0KTtcblx0XHRjbGVhclRpbWVvdXQodGhpcy5fc291bmRDb21wbGV0ZVRpbWVvdXQpO1xuXG5cdFx0aWYgKCF0aGlzLl9wYXVzZWQpIHt0aGlzLl9oYW5kbGVTb3VuZFJlYWR5KCk7fVxuXHR9O1xuXG5cdC8vIE9KUiB3ZSBhcmUgdXNpbmcgYSBsb29rIGFoZWFkIGFwcHJvYWNoIHRvIGVuc3VyZSBzbW9vdGggbG9vcGluZy5cblx0Ly8gV2UgYWRkIF9zb3VyY2VOb2RlTmV4dCB0byB0aGUgYXVkaW8gY29udGV4dCBzbyB0aGF0IGl0IHN0YXJ0cyBwbGF5aW5nIGV2ZW4gaWYgdGhpcyBjYWxsYmFjayBpcyBkZWxheWVkLlxuXHQvLyBUaGlzIHRlY2huaXF1ZSBpcyBkZXNjcmliZWQgaGVyZTogIGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2F1ZGlvL3NjaGVkdWxpbmcvXG5cdC8vIE5PVEUgdGhlIGNvc3Qgb2YgdGhpcyBpcyB0aGF0IG91ciBhdWRpbyBsb29wIG1heSBub3QgYWx3YXlzIG1hdGNoIHRoZSBsb29wIGV2ZW50IHRpbWluZyBwcmVjaXNlbHkuXG5cdHAuX2hhbmRsZUxvb3AgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fY2xlYW5VcEF1ZGlvTm9kZSh0aGlzLnNvdXJjZU5vZGUpO1xuXHRcdHRoaXMuc291cmNlTm9kZSA9IHRoaXMuX3NvdXJjZU5vZGVOZXh0O1xuXHRcdHRoaXMuX3BsYXliYWNrU3RhcnRUaW1lID0gdGhpcy5zb3VyY2VOb2RlLnN0YXJ0VGltZTtcblx0XHR0aGlzLl9zb3VyY2VOb2RlTmV4dCA9IHRoaXMuX2NyZWF0ZUFuZFBsYXlBdWRpb05vZGUodGhpcy5fcGxheWJhY2tTdGFydFRpbWUsIDApO1xuXHRcdHRoaXMuX3NvdW5kQ29tcGxldGVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLl9lbmRlZEhhbmRsZXIsIHRoaXMuX2R1cmF0aW9uKTtcblx0fTtcblxuXHRwLl91cGRhdGVEdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZih0aGlzLnBsYXlTdGF0ZSA9PSBjcmVhdGVqcy5Tb3VuZC5QTEFZX1NVQ0NFRURFRCkge1xuXHRcdFx0dGhpcy5fcGF1c2UoKTtcblx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdH1cblx0fTtcblxuXHRjcmVhdGVqcy5XZWJBdWRpb1NvdW5kSW5zdGFuY2UgPSBjcmVhdGVqcy5wcm9tb3RlKFdlYkF1ZGlvU291bmRJbnN0YW5jZSwgXCJBYnN0cmFjdFNvdW5kSW5zdGFuY2VcIik7XG59KCkpO1xuXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8gV2ViQXVkaW9QbHVnaW4uanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqcyB8fCB7fTtcblxuKGZ1bmN0aW9uICgpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvKipcblx0ICogUGxheSBzb3VuZHMgdXNpbmcgV2ViIEF1ZGlvIGluIHRoZSBicm93c2VyLiBUaGUgV2ViQXVkaW9QbHVnaW4gaXMgY3VycmVudGx5IHRoZSBkZWZhdWx0IHBsdWdpbiwgYW5kIHdpbGwgYmUgdXNlZFxuXHQgKiBhbnl3aGVyZSB0aGF0IGl0IGlzIHN1cHBvcnRlZC4gVG8gY2hhbmdlIHBsdWdpbiBwcmlvcml0eSwgY2hlY2sgb3V0IHRoZSBTb3VuZCBBUElcblx0ICoge3sjY3Jvc3NMaW5rIFwiU291bmQvcmVnaXN0ZXJQbHVnaW5zXCJ9fXt7L2Nyb3NzTGlua319IG1ldGhvZC5cblxuXHQgKiA8aDQ+S25vd24gQnJvd3NlciBhbmQgT1MgaXNzdWVzIGZvciBXZWIgQXVkaW88L2g0PlxuXHQgKiA8Yj5GaXJlZm94IDI1PC9iPlxuXHQgKiA8bGk+XG5cdCAqICAgICBtcDMgYXVkaW8gZmlsZXMgZG8gbm90IGxvYWQgcHJvcGVybHkgb24gYWxsIHdpbmRvd3MgbWFjaGluZXMsIHJlcG9ydGVkIDxhIGhyZWY9XCJodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05Mjk5NjlcIiB0YXJnZXQ9XCJfYmxhbmtcIj5oZXJlPC9hPi5cblx0ICogICAgIDxiciAvPkZvciB0aGlzIHJlYXNvbiBpdCBpcyByZWNvbW1lbmRlZCB0byBwYXNzIGFub3RoZXIgRmlyZUZveC1zdXBwb3J0ZWQgdHlwZSAoaS5lLiBvZ2cpIGFzIHRoZSBkZWZhdWx0XG5cdCAqICAgICBleHRlbnNpb24sIHVudGlsIHRoaXMgYnVnIGlzIHJlc29sdmVkXG5cdCAqIDwvbGk+XG5cdCAqXG5cdCAqIDxiPldlYmtpdCAoQ2hyb21lIGFuZCBTYWZhcmkpPC9iPlxuXHQgKiA8bGk+XG5cdCAqICAgICBBdWRpb05vZGUuZGlzY29ubmVjdCBkb2VzIG5vdCBhbHdheXMgc2VlbSB0byB3b3JrLiAgVGhpcyBjYW4gY2F1c2UgdGhlIGZpbGUgc2l6ZSB0byBncm93IG92ZXIgdGltZSBpZiB5b3Vcblx0ICogXHQgICBhcmUgcGxheWluZyBhIGxvdCBvZiBhdWRpbyBmaWxlcy5cblx0ICogPC9saT5cblx0ICpcblx0ICogPGI+aU9TIDYgbGltaXRhdGlvbnM8L2I+XG5cdCAqIDx1bD5cblx0ICogICAgIDxsaT5cblx0ICogICAgICAgICBTb3VuZCBpcyBpbml0aWFsbHkgbXV0ZWQgYW5kIHdpbGwgb25seSB1bm11dGUgdGhyb3VnaCBwbGF5IGJlaW5nIGNhbGxlZCBpbnNpZGUgYSB1c2VyIGluaXRpYXRlZCBldmVudFxuXHQgKiAgICAgICAgICh0b3VjaC9jbGljaykuIFBsZWFzZSByZWFkIHRoZSBtb2JpbGUgcGxheWJhY2sgbm90ZXMgaW4gdGhlIHRoZSB7eyNjcm9zc0xpbmsgXCJTb3VuZFwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiAgICAgICAgIGNsYXNzIGZvciBhIGZ1bGwgb3ZlcnZpZXcgb2YgdGhlIGxpbWl0YXRpb25zLCBhbmQgaG93IHRvIGdldCBhcm91bmQgdGhlbS5cblx0ICogICAgIDwvbGk+XG5cdCAqXHQgICA8bGk+XG5cdCAqXHQgICAgICAgQSBidWcgZXhpc3RzIHRoYXQgd2lsbCBkaXN0b3J0IHVuLWNhY2hlZCBhdWRpbyB3aGVuIGEgdmlkZW8gZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBET00uIFlvdSBjYW4gYXZvaWRcblx0ICpcdCAgICAgICB0aGlzIGJ1ZyBieSBlbnN1cmluZyB0aGUgYXVkaW8gYW5kIHZpZGVvIGF1ZGlvIHNoYXJlIHRoZSBzYW1lIHNhbXBsZSByYXRlLlxuXHQgKlx0ICAgPC9saT5cblx0ICogPC91bD5cblx0ICogQGNsYXNzIFdlYkF1ZGlvUGx1Z2luXG5cdCAqIEBleHRlbmRzIEFic3RyYWN0UGx1Z2luXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAc2luY2UgMC40LjBcblx0ICovXG5cdGZ1bmN0aW9uIFdlYkF1ZGlvUGx1Z2luKCkge1xuXHRcdHRoaXMuQWJzdHJhY3RQbHVnaW5fY29uc3RydWN0b3IoKTtcblxuXG4vLyBQcml2YXRlIFByb3BlcnRpZXNcblx0XHQvKipcblx0XHQgKiBWYWx1ZSB0byBzZXQgcGFubmluZyBtb2RlbCB0byBlcXVhbCBwb3dlciBmb3IgV2ViQXVkaW9Tb3VuZEluc3RhbmNlLiAgQ2FuIGJlIFwiZXF1YWxwb3dlclwiIG9yIDAgZGVwZW5kaW5nIG9uIGJyb3dzZXIgaW1wbGVtZW50YXRpb24uXG5cdFx0ICogQHByb3BlcnR5IF9wYW5uaW5nTW9kZWxcblx0XHQgKiBAdHlwZSB7TnVtYmVyIC8gU3RyaW5nfVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9wYW5uaW5nTW9kZWwgPSBzLl9wYW5uaW5nTW9kZWw7O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHdlYiBhdWRpbyBjb250ZXh0LCB3aGljaCBXZWJBdWRpbyB1c2VzIHRvIHBsYXkgYXVkaW8uIEFsbCBub2RlcyB0aGF0IGludGVyYWN0IHdpdGggdGhlIFdlYkF1ZGlvUGx1Z2luXG5cdFx0ICogbmVlZCB0byBiZSBjcmVhdGVkIHdpdGhpbiB0aGlzIGNvbnRleHQuXG5cdFx0ICogQHByb3BlcnR5IGNvbnRleHRcblx0XHQgKiBAdHlwZSB7QXVkaW9Db250ZXh0fVxuXHRcdCAqL1xuXHRcdHRoaXMuY29udGV4dCA9IHMuY29udGV4dDtcblxuXHRcdC8qKlxuXHRcdCAqIEEgRHluYW1pY3NDb21wcmVzc29yTm9kZSwgd2hpY2ggaXMgdXNlZCB0byBpbXByb3ZlIHNvdW5kIHF1YWxpdHkgYW5kIHByZXZlbnQgYXVkaW8gZGlzdG9ydGlvbi5cblx0XHQgKiBJdCBpcyBjb25uZWN0ZWQgdG8gPGNvZGU+Y29udGV4dC5kZXN0aW5hdGlvbjwvY29kZT4uXG5cdFx0ICpcblx0XHQgKiBDYW4gYmUgYWNjZXNzZWQgYnkgYWR2YW5jZWQgdXNlcnMgdGhyb3VnaCBjcmVhdGVqcy5Tb3VuZC5hY3RpdmVQbHVnaW4uZHluYW1pY3NDb21wcmVzc29yTm9kZS5cblx0XHQgKiBAcHJvcGVydHkgZHluYW1pY3NDb21wcmVzc29yTm9kZVxuXHRcdCAqIEB0eXBlIHtBdWRpb05vZGV9XG5cdFx0ICovXG5cdFx0dGhpcy5keW5hbWljc0NvbXByZXNzb3JOb2RlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUR5bmFtaWNzQ29tcHJlc3NvcigpO1xuXHRcdHRoaXMuZHluYW1pY3NDb21wcmVzc29yTm9kZS5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbik7XG5cblx0XHQvKipcblx0XHQgKiBBIEdhaW5Ob2RlIGZvciBjb250cm9sbGluZyBtYXN0ZXIgdm9sdW1lLiBJdCBpcyBjb25uZWN0ZWQgdG8ge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9QbHVnaW4vZHluYW1pY3NDb21wcmVzc29yTm9kZTpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fS5cblx0XHQgKlxuXHRcdCAqIENhbiBiZSBhY2Nlc3NlZCBieSBhZHZhbmNlZCB1c2VycyB0aHJvdWdoIGNyZWF0ZWpzLlNvdW5kLmFjdGl2ZVBsdWdpbi5nYWluTm9kZS5cblx0XHQgKiBAcHJvcGVydHkgZ2Fpbk5vZGVcblx0XHQgKiBAdHlwZSB7QXVkaW9HYWluTm9kZX1cblx0XHQgKi9cblx0XHR0aGlzLmdhaW5Ob2RlID0gdGhpcy5jb250ZXh0LmNyZWF0ZUdhaW4oKTtcblx0XHR0aGlzLmdhaW5Ob2RlLmNvbm5lY3QodGhpcy5keW5hbWljc0NvbXByZXNzb3JOb2RlKTtcblx0XHRjcmVhdGVqcy5XZWJBdWRpb1NvdW5kSW5zdGFuY2UuZGVzdGluYXRpb25Ob2RlID0gdGhpcy5nYWluTm9kZTtcblxuXHRcdHRoaXMuX2NhcGFiaWxpdGllcyA9IHMuX2NhcGFiaWxpdGllcztcblxuXHRcdHRoaXMuX2xvYWRlckNsYXNzID0gY3JlYXRlanMuV2ViQXVkaW9Mb2FkZXI7XG5cdFx0dGhpcy5fc291bmRJbnN0YW5jZUNsYXNzID0gY3JlYXRlanMuV2ViQXVkaW9Tb3VuZEluc3RhbmNlO1xuXG5cdFx0dGhpcy5fYWRkUHJvcHNUb0NsYXNzZXMoKTtcblx0fVxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChXZWJBdWRpb1BsdWdpbiwgY3JlYXRlanMuQWJzdHJhY3RQbHVnaW4pO1xuXG4vLyBTdGF0aWMgUHJvcGVydGllc1xuXHR2YXIgcyA9IFdlYkF1ZGlvUGx1Z2luO1xuXHQvKipcblx0ICogVGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgcGx1Z2luLiBUaGlzIGlzIGdlbmVyYXRlZCB2aWEgdGhlIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luL19nZW5lcmF0ZUNhcGFiaWxpdGllczptZXRob2RcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogbWV0aG9kIGFuZCBpcyB1c2VkIGludGVybmFsbHkuXG5cdCAqIEBwcm9wZXJ0eSBfY2FwYWJpbGl0aWVzXG5cdCAqIEB0eXBlIHtPYmplY3R9XG5cdCAqIEBkZWZhdWx0IG51bGxcblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5fY2FwYWJpbGl0aWVzID0gbnVsbDtcblxuXHQvKipcblx0ICogVmFsdWUgdG8gc2V0IHBhbm5pbmcgbW9kZWwgdG8gZXF1YWwgcG93ZXIgZm9yIFdlYkF1ZGlvU291bmRJbnN0YW5jZS4gIENhbiBiZSBcImVxdWFscG93ZXJcIiBvciAwIGRlcGVuZGluZyBvbiBicm93c2VyIGltcGxlbWVudGF0aW9uLlxuXHQgKiBAcHJvcGVydHkgX3Bhbm5pbmdNb2RlbFxuXHQgKiBAdHlwZSB7TnVtYmVyIC8gU3RyaW5nfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLl9wYW5uaW5nTW9kZWwgPSBcImVxdWFscG93ZXJcIjtcblxuXHQvKipcblx0ICogVGhlIHdlYiBhdWRpbyBjb250ZXh0LCB3aGljaCBXZWJBdWRpbyB1c2VzIHRvIHBsYXkgYXVkaW8uIEFsbCBub2RlcyB0aGF0IGludGVyYWN0IHdpdGggdGhlIFdlYkF1ZGlvUGx1Z2luXG5cdCAqIG5lZWQgdG8gYmUgY3JlYXRlZCB3aXRoaW4gdGhpcyBjb250ZXh0LlxuXHQgKlxuXHQgKiBBZHZhbmNlZCB1c2VycyBjYW4gc2V0IHRoaXMgdG8gYW4gZXhpc3RpbmcgY29udGV4dCwgYnV0IDxiPm11c3Q8L2I+IGRvIHNvIGJlZm9yZSB0aGV5IGNhbGxcblx0ICoge3sjY3Jvc3NMaW5rIFwiU291bmQvcmVnaXN0ZXJQbHVnaW5zXCJ9fXt7L2Nyb3NzTGlua319IG9yIHt7I2Nyb3NzTGluayBcIlNvdW5kL2luaXRpYWxpemVEZWZhdWx0UGx1Z2luc1wifX17ey9jcm9zc0xpbmt9fS5cblx0ICpcblx0ICogQHByb3BlcnR5IGNvbnRleHRcblx0ICogQHR5cGUge0F1ZGlvQ29udGV4dH1cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5jb250ZXh0ID0gbnVsbDtcblxuXHQvKipcblx0ICogVGhlIHNjcmF0Y2ggYnVmZmVyIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgYnVmZmVyIHByb3BlcnR5IG9mIGEgc291cmNlIG5vZGUgb24gY2xvc2UuXG5cdCAqIFdvcmtzIGFyb3VuZCBhbiBpT1MgU2FmYXJpIGJ1ZzogaHR0cHM6Ly9naXRodWIuY29tL0NyZWF0ZUpTL1NvdW5kSlMvaXNzdWVzLzEwMlxuXHQgKlxuXHQgKiBBZHZhbmNlZCB1c2VycyBjYW4gc2V0IHRoaXMgdG8gYW4gZXhpc3Rpbmcgc291cmNlIG5vZGUsIGJ1dCA8Yj5tdXN0PC9iPiBkbyBzbyBiZWZvcmUgdGhleSBjYWxsXG5cdCAqIHt7I2Nyb3NzTGluayBcIlNvdW5kL3JlZ2lzdGVyUGx1Z2luc1wifX17ey9jcm9zc0xpbmt9fSBvciB7eyNjcm9zc0xpbmsgXCJTb3VuZC9pbml0aWFsaXplRGVmYXVsdFBsdWdpbnNcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqXG5cdCAqIEBwcm9wZXJ0eSBfc2NyYXRjaEJ1ZmZlclxuXHQgKiBAdHlwZSB7QXVkaW9CdWZmZXJ9XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdCBzLl9zY3JhdGNoQnVmZmVyID0gbnVsbDtcblxuXHQvKipcblx0ICogSW5kaWNhdGVkIHdoZXRoZXIgYXVkaW8gb24gaU9TIGhhcyBiZWVuIHVubG9ja2VkLCB3aGljaCByZXF1aXJlcyBhIHRvdWNoZW5kL21vdXNlZG93biBldmVudCB0aGF0IHBsYXlzIGFuXG5cdCAqIGVtcHR5IHNvdW5kLlxuXHQgKiBAcHJvcGVydHkgX3VubG9ja2VkXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAc2luY2UgMC42LjJcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHMuX3VubG9ja2VkID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFRoZSBkZWZhdWx0IHNhbXBsZSByYXRlIHVzZWQgd2hlbiBjaGVja2luZyBmb3IgaU9TIGNvbXBhdGliaWxpdHkuIFNlZSB7eyNjcm9zc0xpbmsgXCJXZWJBdWRpb1BsdWdpbi9fY3JlYXRlQXVkaW9Db250ZXh0XCJ9fXt7L2Nyb3NzTGlua319LlxuXHQgKiBAcHJvcGVydHkgREVGQVVMVF9TQU1QTEVfUkVBVEVcblx0ICogQHR5cGUge251bWJlcn1cblx0ICogQGRlZmF1bHQgNDQxMDBcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5ERUZBVUxUX1NBTVBMRV9SQVRFID0gNDQxMDA7XG5cbi8vIFN0YXRpYyBQdWJsaWMgTWV0aG9kc1xuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIHRoZSBwbHVnaW4gY2FuIGJlIHVzZWQgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci9PUy5cblx0ICogQG1ldGhvZCBpc1N1cHBvcnRlZFxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgcGx1Z2luIGNhbiBiZSBpbml0aWFsaXplZC5cblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5pc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHQvLyBjaGVjayBpZiB0aGlzIGlzIHNvbWUga2luZCBvZiBtb2JpbGUgZGV2aWNlLCBXZWIgQXVkaW8gd29ya3Mgd2l0aCBsb2NhbCBwcm90b2NvbCB1bmRlciBQaG9uZUdhcCBhbmQgaXQgaXMgdW5saWtlbHkgc29tZW9uZSBpcyB0cnlpbmcgdG8gcnVuIGEgbG9jYWwgZmlsZVxuXHRcdHZhciBpc01vYmlsZVBob25lR2FwID0gY3JlYXRlanMuQnJvd3NlckRldGVjdC5pc0lPUyB8fCBjcmVhdGVqcy5Ccm93c2VyRGV0ZWN0LmlzQW5kcm9pZCB8fCBjcmVhdGVqcy5Ccm93c2VyRGV0ZWN0LmlzQmxhY2tiZXJyeTtcblx0XHQvLyBPSlIgaXNNb2JpbGUgbWF5IGJlIHJlZHVuZGFudCB3aXRoIF9pc0ZpbGVYSFJTdXBwb3J0ZWQgYXZhaWxhYmxlLiAgQ29uc2lkZXIgcmVtb3ZpbmcuXG5cdFx0aWYgKGxvY2F0aW9uLnByb3RvY29sID09IFwiZmlsZTpcIiAmJiAhaXNNb2JpbGVQaG9uZUdhcCAmJiAhdGhpcy5faXNGaWxlWEhSU3VwcG9ydGVkKCkpIHsgcmV0dXJuIGZhbHNlOyB9ICAvLyBXZWIgQXVkaW8gcmVxdWlyZXMgWEhSLCB3aGljaCBpcyBub3QgdXN1YWxseSBhdmFpbGFibGUgbG9jYWxseVxuXHRcdHMuX2dlbmVyYXRlQ2FwYWJpbGl0aWVzKCk7XG5cdFx0aWYgKHMuY29udGV4dCA9PSBudWxsKSB7cmV0dXJuIGZhbHNlO31cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHQvKipcblx0ICogUGxheXMgYW4gZW1wdHkgc291bmQgaW4gdGhlIHdlYiBhdWRpbyBjb250ZXh0LiAgVGhpcyBpcyB1c2VkIHRvIGVuYWJsZSB3ZWIgYXVkaW8gb24gaU9TIGRldmljZXMsIGFzIHRoZXlcblx0ICogcmVxdWlyZSB0aGUgZmlyc3Qgc291bmQgdG8gYmUgcGxheWVkIGluc2lkZSBvZiBhIHVzZXIgaW5pdGlhdGVkIGV2ZW50ICh0b3VjaC9jbGljaykuICBUaGlzIGlzIGNhbGxlZCB3aGVuXG5cdCAqIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luXCJ9fXt7L2Nyb3NzTGlua319IGlzIGluaXRpYWxpemVkIChieSBTb3VuZCB7eyNjcm9zc0xpbmsgXCJTb3VuZC9pbml0aWFsaXplRGVmYXVsdFBsdWdpbnNcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogZm9yIGV4YW1wbGUpLlxuXHQgKlxuXHQgKiA8aDQ+RXhhbXBsZTwvaDQ+XG5cdCAqXG5cdCAqICAgICBmdW5jdGlvbiBoYW5kbGVUb3VjaChldmVudCkge1xuXHQgKiAgICAgICAgIGNyZWF0ZWpzLldlYkF1ZGlvUGx1Z2luLnBsYXlFbXB0eVNvdW5kKCk7XG5cdCAqICAgICB9XG5cdCAqXG5cdCAqIEBtZXRob2QgcGxheUVtcHR5U291bmRcblx0ICogQHN0YXRpY1xuXHQgKiBAc2luY2UgMC40LjFcblx0ICovXG5cdHMucGxheUVtcHR5U291bmQgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAocy5jb250ZXh0ID09IG51bGwpIHtyZXR1cm47fVxuXHRcdHZhciBzb3VyY2UgPSBzLmNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cdFx0c291cmNlLmJ1ZmZlciA9IHMuX3NjcmF0Y2hCdWZmZXI7XG5cdFx0c291cmNlLmNvbm5lY3Qocy5jb250ZXh0LmRlc3RpbmF0aW9uKTtcblx0XHRzb3VyY2Uuc3RhcnQoMCwgMCwgMCk7XG5cdH07XG5cblxuLy8gU3RhdGljIFByaXZhdGUgTWV0aG9kc1xuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIFhIUiBpcyBzdXBwb3J0ZWQsIHdoaWNoIGlzIG5lY2Vzc2FyeSBmb3Igd2ViIGF1ZGlvLlxuXHQgKiBAbWV0aG9kIF9pc0ZpbGVYSFJTdXBwb3J0ZWRcblx0ICogQHJldHVybiB7Qm9vbGVhbn0gSWYgWEhSIGlzIHN1cHBvcnRlZC5cblx0ICogQHNpbmNlIDAuNC4yXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuX2lzRmlsZVhIUlN1cHBvcnRlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIGl0J3MgbXVjaCBlYXNpZXIgdG8gZGV0ZWN0IHdoZW4gc29tZXRoaW5nIGdvZXMgd3JvbmcsIHNvIGxldCdzIHN0YXJ0IG9wdGltaXN0aWNhbGx5XG5cdFx0dmFyIHN1cHBvcnRlZCA9IHRydWU7XG5cblx0XHR2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cdFx0dHJ5IHtcblx0XHRcdHhoci5vcGVuKFwiR0VUXCIsIFwiV2ViQXVkaW9QbHVnaW5UZXN0LmZhaWxcIiwgZmFsc2UpOyAvLyBsb2FkaW5nIG5vbi1leGlzdGFudCBmaWxlIHRyaWdnZXJzIDQwNCBvbmx5IGlmIGl0IGNvdWxkIGxvYWQgKHN5bmNocm9ub3VzIGNhbGwpXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdC8vIGNhdGNoIGVycm9ycyBpbiBjYXNlcyB3aGVyZSB0aGUgb25lcnJvciBpcyBwYXNzZWQgYnlcblx0XHRcdHN1cHBvcnRlZCA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuIHN1cHBvcnRlZDtcblx0XHR9XG5cdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHsgc3VwcG9ydGVkID0gZmFsc2U7IH07IC8vIGNhdXNlIGlycmVsZXZhbnRcblx0XHQvLyB3aXRoIHNlY3VyaXR5IHR1cm5lZCBvZmYsIHdlIGNhbiBnZXQgZW1wdHkgc3VjY2VzcyByZXN1bHRzLCB3aGljaCBpcyBhY3R1YWxseSBhIGZhaWxlZCByZWFkIChzdGF0dXMgY29kZSAwPylcblx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7IHN1cHBvcnRlZCA9IHRoaXMuc3RhdHVzID09IDQwNCB8fCAodGhpcy5zdGF0dXMgPT0gMjAwIHx8ICh0aGlzLnN0YXR1cyA9PSAwICYmIHRoaXMucmVzcG9uc2UgIT0gXCJcIikpOyB9O1xuXHRcdHRyeSB7XG5cdFx0XHR4aHIuc2VuZCgpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHQvLyBjYXRjaCBlcnJvcnMgaW4gY2FzZXMgd2hlcmUgdGhlIG9uZXJyb3IgaXMgcGFzc2VkIGJ5XG5cdFx0XHRzdXBwb3J0ZWQgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3VwcG9ydGVkO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmUgdGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgcGx1Z2luLiBVc2VkIGludGVybmFsbHkuIFBsZWFzZSBzZWUgdGhlIFNvdW5kIEFQSSB7eyNjcm9zc0xpbmsgXCJTb3VuZC9jYXBhYmlsaXRpZXM6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX1cblx0ICogbWV0aG9kIGZvciBhbiBvdmVydmlldyBvZiBwbHVnaW4gY2FwYWJpbGl0aWVzLlxuXHQgKiBAbWV0aG9kIF9nZW5lcmF0ZUNhcGFiaWxpdGllc1xuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRzLl9nZW5lcmF0ZUNhcGFiaWxpdGllcyA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAocy5fY2FwYWJpbGl0aWVzICE9IG51bGwpIHtyZXR1cm47fVxuXHRcdC8vIFdlYiBBdWRpbyBjYW4gYmUgaW4gYW55IGZvcm1hdHMgc3VwcG9ydGVkIGJ5IHRoZSBhdWRpbyBlbGVtZW50LCBmcm9tIGh0dHA6Ly93d3cudzMub3JnL1RSL3dlYmF1ZGlvLyNBdWRpb0NvbnRleHQtc2VjdGlvblxuXHRcdHZhciB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpO1xuXHRcdGlmICh0LmNhblBsYXlUeXBlID09IG51bGwpIHtyZXR1cm4gbnVsbDt9XG5cblx0XHRpZiAocy5jb250ZXh0ID09IG51bGwpIHtcblx0XHRcdHMuY29udGV4dCA9IHMuX2NyZWF0ZUF1ZGlvQ29udGV4dCgpO1xuXHRcdFx0aWYgKHMuY29udGV4dCA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cdFx0fVxuXHRcdGlmIChzLl9zY3JhdGNoQnVmZmVyID09IG51bGwpIHtcblx0XHRcdHMuX3NjcmF0Y2hCdWZmZXIgPSBzLmNvbnRleHQuY3JlYXRlQnVmZmVyKDEsIDEsIDIyMDUwKTtcblx0XHR9XG5cblx0XHRzLl9jb21wYXRpYmlsaXR5U2V0VXAoKTtcblxuXHRcdC8vIExpc3RlbiBmb3IgZG9jdW1lbnQgbGV2ZWwgY2xpY2tzIHRvIHVubG9jayBXZWJBdWRpbyBvbiBpT1MuIFNlZSB0aGUgX3VubG9jayBtZXRob2QuXG5cdFx0aWYgKFwib250b3VjaHN0YXJ0XCIgaW4gd2luZG93ICYmIHMuY29udGV4dC5zdGF0ZSAhPSBcInJ1bm5pbmdcIikge1xuXHRcdFx0cy5fdW5sb2NrKCk7IC8vIFdoZW4gcGxheWVkIGluc2lkZSBvZiBhIHRvdWNoIGV2ZW50LCB0aGlzIHdpbGwgZW5hYmxlIGF1ZGlvIG9uIGlPUyBpbW1lZGlhdGVseS5cblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgcy5fdW5sb2NrLCB0cnVlKTtcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHMuX3VubG9jaywgdHJ1ZSk7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgcy5fdW5sb2NrLCB0cnVlKTtcblx0XHR9XG5cblx0XHRzLl9jYXBhYmlsaXRpZXMgPSB7XG5cdFx0XHRwYW5uaW5nOnRydWUsXG5cdFx0XHR2b2x1bWU6dHJ1ZSxcblx0XHRcdHRyYWNrczotMVxuXHRcdH07XG5cblx0XHQvLyBkZXRlcm1pbmUgd2hpY2ggZXh0ZW5zaW9ucyBvdXIgYnJvd3NlciBzdXBwb3J0cyBmb3IgdGhpcyBwbHVnaW4gYnkgaXRlcmF0aW5nIHRocm91Z2ggU291bmQuU1VQUE9SVEVEX0VYVEVOU0lPTlNcblx0XHR2YXIgc3VwcG9ydGVkRXh0ZW5zaW9ucyA9IGNyZWF0ZWpzLlNvdW5kLlNVUFBPUlRFRF9FWFRFTlNJT05TO1xuXHRcdHZhciBleHRlbnNpb25NYXAgPSBjcmVhdGVqcy5Tb3VuZC5FWFRFTlNJT05fTUFQO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc3VwcG9ydGVkRXh0ZW5zaW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBleHQgPSBzdXBwb3J0ZWRFeHRlbnNpb25zW2ldO1xuXHRcdFx0dmFyIHBsYXlUeXBlID0gZXh0ZW5zaW9uTWFwW2V4dF0gfHwgZXh0O1xuXHRcdFx0cy5fY2FwYWJpbGl0aWVzW2V4dF0gPSAodC5jYW5QbGF5VHlwZShcImF1ZGlvL1wiICsgZXh0KSAhPSBcIm5vXCIgJiYgdC5jYW5QbGF5VHlwZShcImF1ZGlvL1wiICsgZXh0KSAhPSBcIlwiKSB8fCAodC5jYW5QbGF5VHlwZShcImF1ZGlvL1wiICsgcGxheVR5cGUpICE9IFwibm9cIiAmJiB0LmNhblBsYXlUeXBlKFwiYXVkaW8vXCIgKyBwbGF5VHlwZSkgIT0gXCJcIik7XG5cdFx0fSAgLy8gT0pSIGFub3RoZXIgd2F5IHRvIGRvIHRoaXMgbWlnaHQgYmUgY2FuUGxheVR5cGU6XCJtNGFcIiwgY29kZXg6IG1wNFxuXG5cdFx0Ly8gMD1ubyBvdXRwdXQsIDE9bW9ubywgMj1zdGVyZW8sIDQ9c3Vycm91bmQsIDY9NS4xIHN1cnJvdW5kLlxuXHRcdC8vIFNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi93ZWJhdWRpby8jQXVkaW9DaGFubmVsU3BsaXR0ZXIgZm9yIG1vcmUgZGV0YWlscyBvbiBjaGFubmVscy5cblx0XHRpZiAocy5jb250ZXh0LmRlc3RpbmF0aW9uLm51bWJlck9mQ2hhbm5lbHMgPCAyKSB7XG5cdFx0XHRzLl9jYXBhYmlsaXRpZXMucGFubmluZyA9IGZhbHNlO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQ3JlYXRlIGFuIGF1ZGlvIGNvbnRleHQgZm9yIHRoZSBzb3VuZC5cblx0ICpcblx0ICogVGhpcyBtZXRob2QgaGFuZGxlcyBib3RoIHZlbmRvciBwcmVmaXhlcyAoc3BlY2lmaWNhbGx5IHdlYmtpdCBzdXBwb3J0KSwgYXMgd2VsbCBhcyBhIGNhc2Ugb24gaU9TIHdoZXJlXG5cdCAqIGF1ZGlvIHBsYXllZCB3aXRoIGEgZGlmZmVyZW50IHNhbXBsZSByYXRlIG1heSBwbGF5IGdhcmJsZWQgd2hlbiBmaXJzdCBzdGFydGVkLiBUaGUgZGVmYXVsdCBzYW1wbGUgcmF0ZSBpc1xuXHQgKiA0NCwxMDAsIGhvd2V2ZXIgaXQgY2FuIGJlIGNoYW5nZWQgdXNpbmcgdGhlIHt7I2Nyb3NzTGluayBcIldlYkF1ZGlvUGx1Z2luL0RFRkFVTFRfU0FNUExFX1JBVEU6cHJvcGVydHlcIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqIEBtZXRob2QgX2NyZWF0ZUF1ZGlvQ29udGV4dFxuXHQgKiBAcmV0dXJuIHtBdWRpb0NvbnRleHQgfCB3ZWJraXRBdWRpb0NvbnRleHR9XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICogQHNpbmNlIDEuMC4wXG5cdCAqL1xuXHRzLl9jcmVhdGVBdWRpb0NvbnRleHQgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBTbGlnaHRseSBtb2RpZmllZCB2ZXJzaW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9KYW0zL2lvcy1zYWZlLWF1ZGlvLWNvbnRleHRcblx0XHQvLyBSZXNvbHZlcyBpc3N1ZXMgd2l0aCBmaXJzdC1ydW4gY29udGV4dHMgcGxheWluZyBnYXJibGVkIG9uIGlPUy5cblx0XHR2YXIgQXVkaW9DdG9yID0gKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCk7XG5cdFx0aWYgKEF1ZGlvQ3RvciA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG5cdFx0dmFyIGNvbnRleHQgPSBuZXcgQXVkaW9DdG9yKCk7XG5cblx0XHQvLyBDaGVjayBpZiBoYWNrIGlzIG5lY2Vzc2FyeS4gT25seSBvY2N1cnMgaW4gaU9TNisgZGV2aWNlc1xuXHRcdC8vIGFuZCBvbmx5IHdoZW4geW91IGZpcnN0IGJvb3QgdGhlIGlQaG9uZSwgb3IgcGxheSBhIGF1ZGlvL3ZpZGVvXG5cdFx0Ly8gd2l0aCBhIGRpZmZlcmVudCBzYW1wbGUgcmF0ZVxuXHRcdGlmICgvKGlQaG9uZXxpUGFkKS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudClcblx0XHRcdFx0JiYgY29udGV4dC5zYW1wbGVSYXRlICE9PSBzLkRFRkFVTFRfU0FNUExFX1JBVEUpIHtcblx0XHRcdHZhciBidWZmZXIgPSBjb250ZXh0LmNyZWF0ZUJ1ZmZlcigxLCAxLCBzLkRFRkFVTFRfU0FNUExFX1JBVEUpLFxuXHRcdFx0XHRcdGR1bW15ID0gY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblx0XHRcdGR1bW15LmJ1ZmZlciA9IGJ1ZmZlcjtcblx0XHRcdGR1bW15LmNvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XG5cdFx0XHRkdW1teS5zdGFydCgwKTtcblx0XHRcdGR1bW15LmRpc2Nvbm5lY3QoKTtcblx0XHRcdGNvbnRleHQuY2xvc2UoKSAvLyBkaXNwb3NlIG9sZCBjb250ZXh0XG5cblx0XHRcdGNvbnRleHQgPSBuZXcgQXVkaW9DdG9yKCk7XG5cdFx0fVxuXHRcdHJldHVybiBjb250ZXh0O1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldCB1cCBjb21wYXRpYmlsaXR5IGlmIG9ubHkgZGVwcmVjYXRlZCB3ZWIgYXVkaW8gY2FsbHMgYXJlIHN1cHBvcnRlZC5cblx0ICogU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL3dlYmF1ZGlvLyNEZXByZWNhdGlvbk5vdGVzXG5cdCAqIE5lZWRlZCBzbyB3ZSBjYW4gc3VwcG9ydCBuZXcgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IGRlcHJlY2F0ZWQgY2FsbHMgKEZpcmVmb3gpIGFzIHdlbGwgYXMgb2xkIGJyb3dzZXJzIHRoYXRcblx0ICogZG9uJ3Qgc3VwcG9ydCBuZXcgY2FsbHMuXG5cdCAqXG5cdCAqIEBtZXRob2QgX2NvbXBhdGliaWxpdHlTZXRVcFxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzaW5jZSAwLjQuMlxuXHQgKi9cblx0cy5fY29tcGF0aWJpbGl0eVNldFVwID0gZnVuY3Rpb24oKSB7XG5cdFx0cy5fcGFubmluZ01vZGVsID0gXCJlcXVhbHBvd2VyXCI7XG5cdFx0Ly9hc3N1bWUgdGhhdCBpZiBvbmUgbmV3IGNhbGwgaXMgc3VwcG9ydGVkLCB0aGV5IGFsbCBhcmVcblx0XHRpZiAocy5jb250ZXh0LmNyZWF0ZUdhaW4pIHsgcmV0dXJuOyB9XG5cblx0XHQvLyBzaW1wbGUgbmFtZSBjaGFuZ2UsIGZ1bmN0aW9uYWxpdHkgdGhlIHNhbWVcblx0XHRzLmNvbnRleHQuY3JlYXRlR2FpbiA9IHMuY29udGV4dC5jcmVhdGVHYWluTm9kZTtcblxuXHRcdC8vIHNvdXJjZSBub2RlLCBhZGQgdG8gcHJvdG90eXBlXG5cdFx0dmFyIGF1ZGlvTm9kZSA9IHMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblx0XHRhdWRpb05vZGUuX19wcm90b19fLnN0YXJ0ID0gYXVkaW9Ob2RlLl9fcHJvdG9fXy5ub3RlR3JhaW5PbjtcdC8vIG5vdGUgdGhhdCBub3RlR3JhaW5PbiByZXF1aXJlcyBhbGwgMyBwYXJhbWV0ZXJzXG5cdFx0YXVkaW9Ob2RlLl9fcHJvdG9fXy5zdG9wID0gYXVkaW9Ob2RlLl9fcHJvdG9fXy5ub3RlT2ZmO1xuXG5cdFx0Ly8gcGFubmluZ01vZGVsXG5cdFx0cy5fcGFubmluZ01vZGVsID0gMDtcblx0fTtcblxuXHQvKipcblx0ICogVHJ5IHRvIHVubG9jayBhdWRpbyBvbiBpT1MuIFRoaXMgaXMgdHJpZ2dlcmVkIGZyb20gZWl0aGVyIFdlYkF1ZGlvIHBsdWdpbiBzZXR1cCAod2hpY2ggd2lsbCB3b3JrIGlmIGluc2lkZSBvZlxuXHQgKiBhIGBtb3VzZWRvd25gIG9yIGB0b3VjaGVuZGAgZXZlbnQgc3RhY2spLCBvciB0aGUgZmlyc3QgZG9jdW1lbnQgdG91Y2hlbmQvbW91c2Vkb3duIGV2ZW50LiBJZiBpdCBmYWlscyAodG91Y2hlbmRcblx0ICogd2lsbCBmYWlsIGlmIHRoZSB1c2VyIHByZXNzZXMgZm9yIHRvbyBsb25nLCBpbmRpY2F0aW5nIGEgc2Nyb2xsIGV2ZW50IGluc3RlYWQgb2YgYSBjbGljayBldmVudC5cblx0ICpcblx0ICogTm90ZSB0aGF0IGVhcmxpZXIgdmVyc2lvbnMgb2YgaU9TIHN1cHBvcnRlZCBgdG91Y2hzdGFydGAgZm9yIHRoaXMsIGJ1dCBpT1M5IHJlbW92ZWQgdGhpcyBmdW5jdGlvbmFsaXR5LiBBZGRpbmdcblx0ICogYSBgdG91Y2hzdGFydGAgZXZlbnQgdG8gc3VwcG9ydCBvbGRlciBwbGF0Zm9ybXMgbWF5IHByZWNsdWRlIGEgYG1vdXNlZG93bmAgZXZlbiBmcm9tIGdldHRpbmcgZmlyZWQgb24gaU9TOSwgc28gd2Vcblx0ICogc3RpY2sgd2l0aCBgbW91c2Vkb3duYCBhbmQgYHRvdWNoZW5kYC5cblx0ICogQG1ldGhvZCBfdW5sb2NrXG5cdCAqIEBzaW5jZSAwLjYuMlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cy5fdW5sb2NrID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHMuX3VubG9ja2VkKSB7IHJldHVybjsgfVxuXHRcdHMucGxheUVtcHR5U291bmQoKTtcblx0XHRpZiAocy5jb250ZXh0LnN0YXRlID09IFwicnVubmluZ1wiKSB7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHMuX3VubG9jaywgdHJ1ZSk7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgcy5fdW5sb2NrLCB0cnVlKTtcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHMuX3VubG9jaywgdHJ1ZSk7XG5cdFx0XHRzLl91bmxvY2tlZCA9IHRydWU7XG5cdFx0fVxuXHR9O1xuXG5cbi8vIFB1YmxpYyBNZXRob2RzXG5cdHAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIFwiW1dlYkF1ZGlvUGx1Z2luXVwiO1xuXHR9O1xuXG5cbi8vIFByaXZhdGUgTWV0aG9kc1xuXHQvKipcblx0ICogU2V0IHVwIG5lZWRlZCBwcm9wZXJ0aWVzIG9uIHN1cHBvcnRlZCBjbGFzc2VzIFdlYkF1ZGlvU291bmRJbnN0YW5jZSBhbmQgV2ViQXVkaW9Mb2FkZXIuXG5cdCAqIEBtZXRob2QgX2FkZFByb3BzVG9DbGFzc2VzXG5cdCAqIEBzdGF0aWNcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAc2luY2UgMC42LjBcblx0ICovXG5cdHAuX2FkZFByb3BzVG9DbGFzc2VzID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGMgPSB0aGlzLl9zb3VuZEluc3RhbmNlQ2xhc3M7XG5cdFx0Yy5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXHRcdGMuX3NjcmF0Y2hCdWZmZXIgPSBzLl9zY3JhdGNoQnVmZmVyO1xuXHRcdGMuZGVzdGluYXRpb25Ob2RlID0gdGhpcy5nYWluTm9kZTtcblx0XHRjLl9wYW5uaW5nTW9kZWwgPSB0aGlzLl9wYW5uaW5nTW9kZWw7XG5cblx0XHR0aGlzLl9sb2FkZXJDbGFzcy5jb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXHR9O1xuXG5cblx0LyoqXG5cdCAqIFNldCB0aGUgZ2FpbiB2YWx1ZSBmb3IgbWFzdGVyIGF1ZGlvLiBTaG91bGQgbm90IGJlIGNhbGxlZCBleHRlcm5hbGx5LlxuXHQgKiBAbWV0aG9kIF91cGRhdGVWb2x1bWVcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5fdXBkYXRlVm9sdW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdHZhciBuZXdWb2x1bWUgPSBjcmVhdGVqcy5Tb3VuZC5fbWFzdGVyTXV0ZSA/IDAgOiB0aGlzLl92b2x1bWU7XG5cdFx0aWYgKG5ld1ZvbHVtZSAhPSB0aGlzLmdhaW5Ob2RlLmdhaW4udmFsdWUpIHtcblx0XHRcdHRoaXMuZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IG5ld1ZvbHVtZTtcblx0XHR9XG5cdH07XG5cblx0Y3JlYXRlanMuV2ViQXVkaW9QbHVnaW4gPSBjcmVhdGVqcy5wcm9tb3RlKFdlYkF1ZGlvUGx1Z2luLCBcIkFic3RyYWN0UGx1Z2luXCIpO1xufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEhUTUxBdWRpb1RhZ1Bvb2wuanNcbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbndpbmRvdy5jcmVhdGVqcyA9IHdpbmRvdy5jcmVhdGVqcyB8fCB7fTtcblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0LyoqXG5cdCAqIEhUTUxBdWRpb1RhZ1Bvb2wgaXMgYW4gb2JqZWN0IHBvb2wgZm9yIEhUTUxBdWRpbyB0YWcgaW5zdGFuY2VzLlxuXHQgKiBAY2xhc3MgSFRNTEF1ZGlvVGFnUG9vbFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzb3VyY2Ugb2YgdGhlIGNoYW5uZWwuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGZ1bmN0aW9uIEhUTUxBdWRpb1RhZ1Bvb2woKSB7XG5cdFx0XHR0aHJvdyBcIkhUTUxBdWRpb1RhZ1Bvb2wgY2Fubm90IGJlIGluc3RhbnRpYXRlZFwiO1xuXHR9XG5cblx0dmFyIHMgPSBIVE1MQXVkaW9UYWdQb29sO1xuXG4vLyBTdGF0aWMgUHJvcGVydGllc1xuXHQvKipcblx0ICogQSBoYXNoIGxvb2t1cCBvZiBlYWNoIGJhc2UgYXVkaW8gdGFnLCBpbmRleGVkIGJ5IHRoZSBhdWRpbyBzb3VyY2UuXG5cdCAqIEBwcm9wZXJ0eSBfdGFnc1xuXHQgKiBAdHlwZSB7e319XG5cdCAqIEBzdGF0aWNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHMuX3RhZ3MgPSB7fTtcblxuXHQvKipcblx0ICogQW4gb2JqZWN0IHBvb2wgZm9yIGh0bWwgYXVkaW8gdGFnc1xuXHQgKiBAcHJvcGVydHkgX3RhZ1Bvb2xcblx0ICogQHR5cGUge1RhZ1Bvb2x9XG5cdCAqIEBzdGF0aWNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHMuX3RhZ1Bvb2wgPSBuZXcgVGFnUG9vbCgpO1xuXG5cdC8qKlxuXHQgKiBBIGhhc2ggbG9va3VwIG9mIGlmIGEgYmFzZSBhdWRpbyB0YWcgaXMgYXZhaWxhYmxlLCBpbmRleGVkIGJ5IHRoZSBhdWRpbyBzb3VyY2Vcblx0ICogQHByb3BlcnR5IF90YWdzVXNlZFxuXHQgKiBAdHlwZSB7e319XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuX3RhZ1VzZWQgPSB7fTtcblxuLy8gU3RhdGljIE1ldGhvZHNcblx0LyoqXG5cdCAgKiBHZXQgYW4gYXVkaW8gdGFnIHdpdGggdGhlIGdpdmVuIHNvdXJjZS5cblx0ICAqIEBtZXRob2QgZ2V0XG5cdCAgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzb3VyY2UgZmlsZSB1c2VkIGJ5IHRoZSBhdWRpbyB0YWcuXG5cdCAgKiBAc3RhdGljXG5cdCAgKi9cblx0IHMuZ2V0ID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdHZhciB0ID0gcy5fdGFnc1tzcmNdO1xuXHRcdGlmICh0ID09IG51bGwpIHtcblx0XHRcdC8vIGNyZWF0ZSBuZXcgYmFzZSB0YWdcblx0XHRcdHQgPSBzLl90YWdzW3NyY10gPSBzLl90YWdQb29sLmdldCgpO1xuXHRcdFx0dC5zcmMgPSBzcmM7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGdldCBiYXNlIG9yIHBvb2xcblx0XHRcdGlmIChzLl90YWdVc2VkW3NyY10pIHtcblx0XHRcdFx0dCA9IHMuX3RhZ1Bvb2wuZ2V0KCk7XG5cdFx0XHRcdHQuc3JjID0gc3JjO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cy5fdGFnVXNlZFtzcmNdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHQ7XG5cdCB9O1xuXG5cdCAvKipcblx0ICAqIFJldHVybiBhbiBhdWRpbyB0YWcgdG8gdGhlIHBvb2wuXG5cdCAgKiBAbWV0aG9kIHNldFxuXHQgICogQHBhcmFtIHtTdHJpbmd9IHNyYyBUaGUgc291cmNlIGZpbGUgdXNlZCBieSB0aGUgYXVkaW8gdGFnLlxuXHQgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFnIEF1ZGlvIHRhZyB0byBzZXQuXG5cdCAgKiBAc3RhdGljXG5cdCAgKi9cblx0IHMuc2V0ID0gZnVuY3Rpb24gKHNyYywgdGFnKSB7XG5cdFx0IC8vIGNoZWNrIGlmIHRoaXMgaXMgYmFzZSwgaWYgeWVzIHNldCBib29sZWFuIGlmIG5vdCByZXR1cm4gdG8gcG9vbFxuXHRcdCBpZih0YWcgPT0gcy5fdGFnc1tzcmNdKSB7XG5cdFx0XHQgcy5fdGFnVXNlZFtzcmNdID0gZmFsc2U7XG5cdFx0IH0gZWxzZSB7XG5cdFx0XHQgcy5fdGFnUG9vbC5zZXQodGFnKTtcblx0XHQgfVxuXHQgfTtcblxuXHQvKipcblx0ICogRGVsZXRlIHN0b3JlZCB0YWcgcmVmZXJlbmNlIGFuZCByZXR1cm4gdGhlbSB0byBwb29sLiBOb3RlIHRoYXQgaWYgdGhlIHRhZyByZWZlcmVuY2UgZG9lcyBub3QgZXhpc3QsIHRoaXMgd2lsbCBmYWlsLlxuXHQgKiBAbWV0aG9kIHJlbW92ZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzb3VyY2UgZm9yIHRoZSB0YWdcblx0ICogQHJldHVybiB7Qm9vbGVhbn0gSWYgdGhlIFRhZ1Bvb2wgd2FzIGRlbGV0ZWQuXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMucmVtb3ZlID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdHZhciB0YWcgPSBzLl90YWdzW3NyY107XG5cdFx0aWYgKHRhZyA9PSBudWxsKSB7cmV0dXJuIGZhbHNlO31cblx0XHRzLl90YWdQb29sLnNldCh0YWcpO1xuXHRcdGRlbGV0ZShzLl90YWdzW3NyY10pO1xuXHRcdGRlbGV0ZShzLl90YWdVc2VkW3NyY10pO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBkdXJhdGlvbiBvZiB0aGUgc3JjIGF1ZGlvIGluIG1pbGxpc2Vjb25kc1xuXHQgKiBAbWV0aG9kIGdldER1cmF0aW9uXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBmaWxlIHVzZWQgYnkgdGhlIGF1ZGlvIHRhZy5cblx0ICogQHJldHVybiB7TnVtYmVyfSBEdXJhdGlvbiBvZiBzcmMgaW4gbWlsbGlzZWNvbmRzXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdHMuZ2V0RHVyYXRpb249IGZ1bmN0aW9uIChzcmMpIHtcblx0XHR2YXIgdCA9IHMuX3RhZ3Nbc3JjXTtcblx0XHRpZiAodCA9PSBudWxsIHx8ICF0LmR1cmF0aW9uKSB7cmV0dXJuIDA7fVx0Ly8gT0pSIGR1cmF0aW9uIGlzIE5hTiBpZiBsb2FkaW5nIGhhcyBub3QgY29tcGxldGVkXG5cdFx0cmV0dXJuIHQuZHVyYXRpb24gKiAxMDAwO1xuXHR9O1xuXG5cdGNyZWF0ZWpzLkhUTUxBdWRpb1RhZ1Bvb2wgPSBIVE1MQXVkaW9UYWdQb29sO1xuXG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXHQvKipcblx0ICogVGhlIFRhZ1Bvb2wgaXMgYW4gb2JqZWN0IHBvb2wgZm9yIEhUTUxBdWRpbyB0YWcgaW5zdGFuY2VzLlxuXHQgKiAjY2xhc3MgVGFnUG9vbFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFRoZSBzb3VyY2Ugb2YgdGhlIGNoYW5uZWwuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdGZ1bmN0aW9uIFRhZ1Bvb2woc3JjKSB7XG5cbi8vIFB1YmxpYyBQcm9wZXJ0aWVzXG5cdFx0LyoqXG5cdFx0ICogQSBsaXN0IG9mIGFsbCBhdmFpbGFibGUgdGFncyBpbiB0aGUgcG9vbC5cblx0XHQgKiAjcHJvcGVydHkgdGFnc1xuXHRcdCAqIEB0eXBlIHtBcnJheX1cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fdGFncyA9IFtdO1xuXHR9O1xuXG5cdHZhciBwID0gVGFnUG9vbC5wcm90b3R5cGU7XG5cdHAuY29uc3RydWN0b3IgPSBUYWdQb29sO1xuXG5cbi8vIFB1YmxpYyBNZXRob2RzXG5cdC8qKlxuXHQgKiBHZXQgYW4gSFRNTEF1ZGlvRWxlbWVudCBmb3IgaW1tZWRpYXRlIHBsYXliYWNrLiBUaGlzIHRha2VzIGl0IG91dCBvZiB0aGUgcG9vbC5cblx0ICogI21ldGhvZCBnZXRcblx0ICogQHJldHVybiB7SFRNTEF1ZGlvRWxlbWVudH0gQW4gSFRNTCBhdWRpbyB0YWcuXG5cdCAqL1xuXHRwLmdldCA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdGFnO1xuXHRcdGlmICh0aGlzLl90YWdzLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHR0YWcgPSB0aGlzLl9jcmVhdGVUYWcoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFnID0gdGhpcy5fdGFncy5wb3AoKTtcblx0XHR9XG5cdFx0aWYgKHRhZy5wYXJlbnROb2RlID09IG51bGwpIHtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRhZyk7fVxuXHRcdHJldHVybiB0YWc7XG5cdH07XG5cblx0LyoqXG5cdCAqIFB1dCBhbiBIVE1MQXVkaW9FbGVtZW50IGJhY2sgaW4gdGhlIHBvb2wgZm9yIHVzZS5cblx0ICogI21ldGhvZCBzZXRcblx0ICogQHBhcmFtIHtIVE1MQXVkaW9FbGVtZW50fSB0YWcgSFRNTCBhdWRpbyB0YWdcblx0ICovXG5cdHAuc2V0ID0gZnVuY3Rpb24gKHRhZykge1xuXHRcdC8vIE9KUiB0aGlzIGZpcnN0IHN0ZXAgc2VlbXMgdW5uZWNlc3Nhcnlcblx0XHR2YXIgaW5kZXggPSBjcmVhdGVqcy5pbmRleE9mKHRoaXMuX3RhZ3MsIHRhZyk7XG5cdFx0aWYgKGluZGV4ID09IC0xKSB7XG5cdFx0XHR0aGlzLl90YWdzLnNyYyA9IG51bGw7XG5cdFx0XHR0aGlzLl90YWdzLnB1c2godGFnKTtcblx0XHR9XG5cdH07XG5cblx0cC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gXCJbVGFnUG9vbF1cIjtcblx0fTtcblxuXG4vLyBQcml2YXRlIE1ldGhvZHNcblx0LyoqXG5cdCAqIENyZWF0ZSBhbiBIVE1MIGF1ZGlvIHRhZy5cblx0ICogI21ldGhvZCBfY3JlYXRlVGFnXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHNvdXJjZSBmaWxlIHRvIHNldCBmb3IgdGhlIGF1ZGlvIHRhZy5cblx0ICogQHJldHVybiB7SFRNTEVsZW1lbnR9IFJldHVybnMgYW4gSFRNTCBhdWRpbyB0YWcuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdHAuX2NyZWF0ZVRhZyA9IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIpO1xuXHRcdHRhZy5hdXRvcGxheSA9IGZhbHNlO1xuXHRcdHRhZy5wcmVsb2FkID0gXCJub25lXCI7XG5cdFx0Ly9MTTogRmlyZWZveCBmYWlscyB3aGVuIHRoaXMgdGhlIHByZWxvYWQ9XCJub25lXCIgZm9yIG90aGVyIHRhZ3MsIGJ1dCBpdCBuZWVkcyB0byBiZSBcIm5vbmVcIiB0byBlbnN1cmUgUHJlbG9hZEpTIHdvcmtzLlxuXHRcdHJldHVybiB0YWc7XG5cdH07XG5cbn0oKSk7XG5cbi8vIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyBIVE1MQXVkaW9Tb3VuZEluc3RhbmNlLmpzXG4vLyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuXG53aW5kb3cuY3JlYXRlanMgPSB3aW5kb3cuY3JlYXRlanMgfHwge307XG5cbihmdW5jdGlvbiAoKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBIVE1MQXVkaW9Tb3VuZEluc3RhbmNlIGV4dGVuZHMgdGhlIGJhc2UgYXBpIG9mIHt7I2Nyb3NzTGluayBcIkFic3RyYWN0U291bmRJbnN0YW5jZVwifX17ey9jcm9zc0xpbmt9fSBhbmQgaXMgdXNlZCBieVxuXHQgKiB7eyNjcm9zc0xpbmsgXCJIVE1MQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVGhlIHBhdGggdG8gYW5kIGZpbGUgbmFtZSBvZiB0aGUgc291bmQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFRpbWUgQXVkaW8gc3ByaXRlIHByb3BlcnR5IHVzZWQgdG8gYXBwbHkgYW4gb2Zmc2V0LCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkdXJhdGlvbiBBdWRpbyBzcHJpdGUgcHJvcGVydHkgdXNlZCB0byBzZXQgdGhlIHRpbWUgdGhlIGNsaXAgcGxheXMgZm9yLCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBwbGF5YmFja1Jlc291cmNlIEFueSByZXNvdXJjZSBuZWVkZWQgYnkgcGx1Z2luIHRvIHN1cHBvcnQgYXVkaW8gcGxheWJhY2suXG5cdCAqIEBjbGFzcyBIVE1MQXVkaW9Tb3VuZEluc3RhbmNlXG5cdCAqIEBleHRlbmRzIEFic3RyYWN0U291bmRJbnN0YW5jZVxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICovXG5cdGZ1bmN0aW9uIEhUTUxBdWRpb1NvdW5kSW5zdGFuY2Uoc3JjLCBzdGFydFRpbWUsIGR1cmF0aW9uLCBwbGF5YmFja1Jlc291cmNlKSB7XG5cdFx0dGhpcy5BYnN0cmFjdFNvdW5kSW5zdGFuY2VfY29uc3RydWN0b3Ioc3JjLCBzdGFydFRpbWUsIGR1cmF0aW9uLCBwbGF5YmFja1Jlc291cmNlKTtcblxuXG4vLyBQcml2YXRlIFByb3BlcnRpZXNcblx0XHR0aGlzLl9hdWRpb1Nwcml0ZVN0b3BUaW1lID0gbnVsbDtcblx0XHR0aGlzLl9kZWxheVRpbWVvdXRJZCA9IG51bGw7XG5cblx0XHQvLyBQcm94aWVzLCBtYWtlIHJlbW92aW5nIGxpc3RlbmVycyBlYXNpZXIuXG5cdFx0dGhpcy5fZW5kZWRIYW5kbGVyID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlU291bmRDb21wbGV0ZSwgdGhpcyk7XG5cdFx0dGhpcy5fcmVhZHlIYW5kbGVyID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlVGFnUmVhZHksIHRoaXMpO1xuXHRcdHRoaXMuX3N0YWxsZWRIYW5kbGVyID0gY3JlYXRlanMucHJveHkodGhpcy5fcGxheUZhaWxlZCwgdGhpcyk7XG5cdFx0dGhpcy5fYXVkaW9TcHJpdGVFbmRIYW5kbGVyID0gY3JlYXRlanMucHJveHkodGhpcy5faGFuZGxlQXVkaW9TcHJpdGVMb29wLCB0aGlzKTtcblx0XHR0aGlzLl9sb29wSGFuZGxlciA9IGNyZWF0ZWpzLnByb3h5KHRoaXMuX2hhbmRsZVNvdW5kQ29tcGxldGUsIHRoaXMpO1xuXG5cdFx0aWYgKGR1cmF0aW9uKSB7XG5cdFx0XHR0aGlzLl9hdWRpb1Nwcml0ZVN0b3BUaW1lID0gKHN0YXJ0VGltZSArIGR1cmF0aW9uKSAqIDAuMDAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLl9kdXJhdGlvbiA9IGNyZWF0ZWpzLkhUTUxBdWRpb1RhZ1Bvb2wuZ2V0RHVyYXRpb24odGhpcy5zcmMpO1xuXHRcdH1cblx0fVxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChIVE1MQXVkaW9Tb3VuZEluc3RhbmNlLCBjcmVhdGVqcy5BYnN0cmFjdFNvdW5kSW5zdGFuY2UpO1xuXG4vLyBQdWJsaWMgTWV0aG9kc1xuXHQvKipcblx0ICogQ2FsbGVkIGJ5IHt7I2Nyb3NzTGluayBcIlNvdW5kXCJ9fXt7L2Nyb3NzTGlua319IHdoZW4gcGx1Z2luIGRvZXMgbm90IGhhbmRsZSBtYXN0ZXIgdm9sdW1lLlxuXHQgKiB1bmRvYydkIGJlY2F1c2UgaXQgaXMgbm90IG1lYW50IHRvIGJlIHVzZWQgb3V0c2lkZSBvZiBTb3VuZFxuXHQgKiAjbWV0aG9kIHNldE1hc3RlclZvbHVtZVxuXHQgKiBAcGFyYW0gdmFsdWVcblx0ICovXG5cdHAuc2V0TWFzdGVyVm9sdW1lID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0dGhpcy5fdXBkYXRlVm9sdW1lKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENhbGxlZCBieSB7eyNjcm9zc0xpbmsgXCJTb3VuZFwifX17ey9jcm9zc0xpbmt9fSB3aGVuIHBsdWdpbiBkb2VzIG5vdCBoYW5kbGUgbWFzdGVyIG11dGUuXG5cdCAqIHVuZG9jJ2QgYmVjYXVzZSBpdCBpcyBub3QgbWVhbnQgdG8gYmUgdXNlZCBvdXRzaWRlIG9mIFNvdW5kXG5cdCAqICNtZXRob2Qgc2V0TWFzdGVyTXV0ZVxuXHQgKiBAcGFyYW0gdmFsdWVcblx0ICovXG5cdHAuc2V0TWFzdGVyTXV0ZSA9IGZ1bmN0aW9uIChpc011dGVkKSB7XG5cdFx0dGhpcy5fdXBkYXRlVm9sdW1lKCk7XG5cdH07XG5cblx0cC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gXCJbSFRNTEF1ZGlvU291bmRJbnN0YW5jZV1cIjtcblx0fTtcblxuLy9Qcml2YXRlIE1ldGhvZHNcblx0cC5fcmVtb3ZlTG9vcGluZyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKHRoaXMuX3BsYXliYWNrUmVzb3VyY2UgPT0gbnVsbCkge3JldHVybjt9XG5cdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5sb29wID0gZmFsc2U7XG5cdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbi5fQVVESU9fU0VFS0VELCB0aGlzLl9sb29wSGFuZGxlciwgZmFsc2UpO1xuXHR9O1xuXG5cdHAuX2FkZExvb3BpbmcgPSBmdW5jdGlvbigpIHtcblx0XHRpZih0aGlzLl9wbGF5YmFja1Jlc291cmNlID09IG51bGwgIHx8IHRoaXMuX2F1ZGlvU3ByaXRlU3RvcFRpbWUpIHtyZXR1cm47fVxuXHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW4uX0FVRElPX1NFRUtFRCwgdGhpcy5fbG9vcEhhbmRsZXIsIGZhbHNlKTtcblx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLmxvb3AgPSB0cnVlO1xuXHR9O1xuXG5cdHAuX2hhbmRsZUNsZWFuVXAgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHRhZyA9IHRoaXMuX3BsYXliYWNrUmVzb3VyY2U7XG5cdFx0aWYgKHRhZyAhPSBudWxsKSB7XG5cdFx0XHR0YWcucGF1c2UoKTtcblx0XHRcdHRhZy5sb29wID0gZmFsc2U7XG5cdFx0XHR0YWcucmVtb3ZlRXZlbnRMaXN0ZW5lcihjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW4uX0FVRElPX0VOREVELCB0aGlzLl9lbmRlZEhhbmRsZXIsIGZhbHNlKTtcblx0XHRcdHRhZy5yZW1vdmVFdmVudExpc3RlbmVyKGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbi5fQVVESU9fUkVBRFksIHRoaXMuX3JlYWR5SGFuZGxlciwgZmFsc2UpO1xuXHRcdFx0dGFnLnJlbW92ZUV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19TVEFMTEVELCB0aGlzLl9zdGFsbGVkSGFuZGxlciwgZmFsc2UpO1xuXHRcdFx0dGFnLnJlbW92ZUV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19TRUVLRUQsIHRoaXMuX2xvb3BIYW5kbGVyLCBmYWxzZSk7XG5cdFx0XHR0YWcucmVtb3ZlRXZlbnRMaXN0ZW5lcihjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW4uX1RJTUVfVVBEQVRFLCB0aGlzLl9hdWRpb1Nwcml0ZUVuZEhhbmRsZXIsIGZhbHNlKTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dGFnLmN1cnJlbnRUaW1lID0gdGhpcy5fc3RhcnRUaW1lO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0fSAvLyBSZXNldCBQb3NpdGlvblxuXHRcdFx0Y3JlYXRlanMuSFRNTEF1ZGlvVGFnUG9vbC5zZXQodGhpcy5zcmMsIHRhZyk7XG5cdFx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlID0gbnVsbDtcblx0XHR9XG5cdH07XG5cblx0cC5fYmVnaW5QbGF5aW5nID0gZnVuY3Rpb24gKHBsYXlQcm9wcykge1xuXHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UgPSBjcmVhdGVqcy5IVE1MQXVkaW9UYWdQb29sLmdldCh0aGlzLnNyYyk7XG5cdFx0cmV0dXJuIHRoaXMuQWJzdHJhY3RTb3VuZEluc3RhbmNlX19iZWdpblBsYXlpbmcocGxheVByb3BzKTtcblx0fTtcblxuXHRwLl9oYW5kbGVTb3VuZFJlYWR5ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKHRoaXMuX3BsYXliYWNrUmVzb3VyY2UucmVhZHlTdGF0ZSAhPT0gNCkge1xuXHRcdFx0dmFyIHRhZyA9IHRoaXMuX3BsYXliYWNrUmVzb3VyY2U7XG5cdFx0XHR0YWcuYWRkRXZlbnRMaXN0ZW5lcihjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW4uX0FVRElPX1JFQURZLCB0aGlzLl9yZWFkeUhhbmRsZXIsIGZhbHNlKTtcblx0XHRcdHRhZy5hZGRFdmVudExpc3RlbmVyKGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbi5fQVVESU9fU1RBTExFRCwgdGhpcy5fc3RhbGxlZEhhbmRsZXIsIGZhbHNlKTtcblx0XHRcdHRhZy5wcmVsb2FkID0gXCJhdXRvXCI7IC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGZvciBGaXJlZm94LCBhcyBpdCB3b24ndCBldmVyIFwibG9hZFwiIHVudGlsIHRoaXMgaXMgc2V0LlxuXHRcdFx0dGFnLmxvYWQoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl91cGRhdGVWb2x1bWUoKTtcblx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLmN1cnJlbnRUaW1lID0gKHRoaXMuX3N0YXJ0VGltZSArIHRoaXMuX3Bvc2l0aW9uKSAqIDAuMDAxO1xuXHRcdGlmICh0aGlzLl9hdWRpb1Nwcml0ZVN0b3BUaW1lKSB7XG5cdFx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9USU1FX1VQREFURSwgdGhpcy5fYXVkaW9TcHJpdGVFbmRIYW5kbGVyLCBmYWxzZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW4uX0FVRElPX0VOREVELCB0aGlzLl9lbmRlZEhhbmRsZXIsIGZhbHNlKTtcblx0XHRcdGlmKHRoaXMuX2xvb3AgIT0gMCkge1xuXHRcdFx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19TRUVLRUQsIHRoaXMuX2xvb3BIYW5kbGVyLCBmYWxzZSk7XG5cdFx0XHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UubG9vcCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5wbGF5KCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gaGFuZGxlIHdoZW4gYSB0YWcgaXMgbm90IHJlYWR5IGZvciBpbW1lZGlhdGUgcGxheWJhY2sgd2hlbiBpdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBIVE1MQXVkaW9UYWdQb29sLlxuXHQgKiBAbWV0aG9kIF9oYW5kbGVUYWdSZWFkeVxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0cC5faGFuZGxlVGFnUmVhZHkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcblx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19SRUFEWSwgdGhpcy5fcmVhZHlIYW5kbGVyLCBmYWxzZSk7XG5cdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbi5fQVVESU9fU1RBTExFRCwgdGhpcy5fc3RhbGxlZEhhbmRsZXIsIGZhbHNlKTtcblxuXHRcdHRoaXMuX2hhbmRsZVNvdW5kUmVhZHkoKTtcblx0fTtcblxuXHRwLl9wYXVzZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLnBhdXNlKCk7XG5cdH07XG5cblx0cC5fcmVzdW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UucGxheSgpO1xuXHR9O1xuXG5cdHAuX3VwZGF0ZVZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodGhpcy5fcGxheWJhY2tSZXNvdXJjZSAhPSBudWxsKSB7XG5cdFx0XHR2YXIgbmV3Vm9sdW1lID0gKHRoaXMuX211dGVkIHx8IGNyZWF0ZWpzLlNvdW5kLl9tYXN0ZXJNdXRlKSA/IDAgOiB0aGlzLl92b2x1bWUgKiBjcmVhdGVqcy5Tb3VuZC5fbWFzdGVyVm9sdW1lO1xuXHRcdFx0aWYgKG5ld1ZvbHVtZSAhPSB0aGlzLl9wbGF5YmFja1Jlc291cmNlLnZvbHVtZSkge3RoaXMuX3BsYXliYWNrUmVzb3VyY2Uudm9sdW1lID0gbmV3Vm9sdW1lO31cblx0XHR9XG5cdH07XG5cblx0cC5fY2FsY3VsYXRlQ3VycmVudFBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICh0aGlzLl9wbGF5YmFja1Jlc291cmNlLmN1cnJlbnRUaW1lICogMTAwMCkgLSB0aGlzLl9zdGFydFRpbWU7XG5cdH07XG5cblx0cC5fdXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19TRUVLRUQsIHRoaXMuX2xvb3BIYW5kbGVyLCBmYWxzZSk7XG5cdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5hZGRFdmVudExpc3RlbmVyKGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbi5fQVVESU9fU0VFS0VELCB0aGlzLl9oYW5kbGVTZXRQb3NpdGlvblNlZWssIGZhbHNlKTtcblx0XHR0cnkge1xuXHRcdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5jdXJyZW50VGltZSA9ICh0aGlzLl9wb3NpdGlvbiArIHRoaXMuX3N0YXJ0VGltZSkgKiAwLjAwMTtcblx0XHR9IGNhdGNoIChlcnJvcikgeyAvLyBPdXQgb2YgcmFuZ2Vcblx0XHRcdHRoaXMuX2hhbmRsZVNldFBvc2l0aW9uU2VlayhudWxsKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gZW5hYmxlIHNldHRpbmcgcG9zaXRpb24sIGFzIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhhdCBzZWVrIHRvIGJlIGRvbmUgYmVmb3JlIHdlIGFkZCBiYWNrIG91ciBsb29wIGhhbmRsaW5nIHNlZWsgbGlzdGVuZXJcblx0ICogQG1ldGhvZCBfaGFuZGxlU2V0UG9zaXRpb25TZWVrXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRwLl9oYW5kbGVTZXRQb3NpdGlvblNlZWsgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdGlmICh0aGlzLl9wbGF5YmFja1Jlc291cmNlID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5yZW1vdmVFdmVudExpc3RlbmVyKGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbi5fQVVESU9fU0VFS0VELCB0aGlzLl9oYW5kbGVTZXRQb3NpdGlvblNlZWssIGZhbHNlKTtcblx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19TRUVLRUQsIHRoaXMuX2xvb3BIYW5kbGVyLCBmYWxzZSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFRpbWVyIHVzZWQgdG8gbG9vcCBhdWRpbyBzcHJpdGVzLlxuXHQgKiBOT1RFIGJlY2F1c2Ugb2YgdGhlIGluYWNjdXJhY2llcyBpbiB0aGUgdGltZXVwZGF0ZSBldmVudCAoMTUgLSAyNTBtcykgYW5kIGluIHNldHRpbmcgdGhlIHRhZyB0byB0aGUgZGVzaXJlZCB0aW1lZFxuXHQgKiAodXAgdG8gMzAwbXMpLCBpdCBpcyBzdHJvbmdseSByZWNvbW1lbmRlZCBub3QgdG8gbG9vcCBhdWRpbyBzcHJpdGVzIHdpdGggSFRNTCBBdWRpbyBpZiBzbW9vdGggbG9vcGluZyBpcyBkZXNpcmVkXG5cdCAqXG5cdCAqIEBtZXRob2QgX2hhbmRsZUF1ZGlvU3ByaXRlTG9vcFxuXHQgKiBAcGFyYW0gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHAuX2hhbmRsZUF1ZGlvU3ByaXRlTG9vcCA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGlmKHRoaXMuX3BsYXliYWNrUmVzb3VyY2UuY3VycmVudFRpbWUgPD0gdGhpcy5fYXVkaW9TcHJpdGVTdG9wVGltZSkge3JldHVybjt9XG5cdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5wYXVzZSgpO1xuXHRcdGlmKHRoaXMuX2xvb3AgPT0gMCkge1xuXHRcdFx0dGhpcy5faGFuZGxlU291bmRDb21wbGV0ZShudWxsKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcG9zaXRpb24gPSAwO1xuXHRcdFx0dGhpcy5fbG9vcC0tO1xuXHRcdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5jdXJyZW50VGltZSA9IHRoaXMuX3N0YXJ0VGltZSAqIDAuMDAxO1xuXHRcdFx0aWYoIXRoaXMuX3BhdXNlZCkge3RoaXMuX3BsYXliYWNrUmVzb3VyY2UucGxheSgpO31cblx0XHRcdHRoaXMuX3NlbmRFdmVudChcImxvb3BcIik7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIE5PVEUgd2l0aCB0aGlzIGFwcHJvYWNoIGF1ZGlvIHdpbGwgbG9vcCBhcyByZWxpYWJseSBhcyB0aGUgYnJvd3NlciBhbGxvd3Ncblx0Ly8gYnV0IHdlIGNvdWxkIGVuZCB1cCBzZW5kaW5nIHRoZSBsb29wIGV2ZW50IGFmdGVyIG5leHQgbG9vcCBwbGF5YmFjayBiZWdpbnNcblx0cC5faGFuZGxlTG9vcCA9IGZ1bmN0aW9uIChldmVudCkge1xuXHRcdGlmKHRoaXMuX2xvb3AgPT0gMCkge1xuXHRcdFx0dGhpcy5fcGxheWJhY2tSZXNvdXJjZS5sb29wID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19TRUVLRUQsIHRoaXMuX2xvb3BIYW5kbGVyLCBmYWxzZSk7XG5cdFx0fVxuXHR9O1xuXG5cdHAuX3VwZGF0ZVN0YXJ0VGltZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9hdWRpb1Nwcml0ZVN0b3BUaW1lID0gKHRoaXMuX3N0YXJ0VGltZSArIHRoaXMuX2R1cmF0aW9uKSAqIDAuMDAxO1xuXG5cdFx0aWYodGhpcy5wbGF5U3RhdGUgPT0gY3JlYXRlanMuU291bmQuUExBWV9TVUNDRUVERUQpIHtcblx0XHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW4uX0FVRElPX0VOREVELCB0aGlzLl9lbmRlZEhhbmRsZXIsIGZhbHNlKTtcblx0XHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihjcmVhdGVqcy5IVE1MQXVkaW9QbHVnaW4uX1RJTUVfVVBEQVRFLCB0aGlzLl9hdWRpb1Nwcml0ZUVuZEhhbmRsZXIsIGZhbHNlKTtcblx0XHR9XG5cdH07XG5cblx0cC5fdXBkYXRlRHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdFx0dGhpcy5fYXVkaW9TcHJpdGVTdG9wVGltZSA9ICh0aGlzLl9zdGFydFRpbWUgKyB0aGlzLl9kdXJhdGlvbikgKiAwLjAwMTtcblxuXHRcdGlmKHRoaXMucGxheVN0YXRlID09IGNyZWF0ZWpzLlNvdW5kLlBMQVlfU1VDQ0VFREVEKSB7XG5cdFx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLnJlbW92ZUV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9BVURJT19FTkRFRCwgdGhpcy5fZW5kZWRIYW5kbGVyLCBmYWxzZSk7XG5cdFx0XHR0aGlzLl9wbGF5YmFja1Jlc291cmNlLmFkZEV2ZW50TGlzdGVuZXIoY3JlYXRlanMuSFRNTEF1ZGlvUGx1Z2luLl9USU1FX1VQREFURSwgdGhpcy5fYXVkaW9TcHJpdGVFbmRIYW5kbGVyLCBmYWxzZSk7XG5cdFx0fVxuXHR9O1xuXG5cdHAuX3NldER1cmF0aW9uRnJvbVNvdXJjZSA9IGZ1bmN0aW9uICgpIHtcblx0XHR0aGlzLl9kdXJhdGlvbiA9IGNyZWF0ZWpzLkhUTUxBdWRpb1RhZ1Bvb2wuZ2V0RHVyYXRpb24odGhpcy5zcmMpO1xuXHRcdHRoaXMuX3BsYXliYWNrUmVzb3VyY2UgPSBudWxsO1xuXHR9O1xuXG5cdGNyZWF0ZWpzLkhUTUxBdWRpb1NvdW5kSW5zdGFuY2UgPSBjcmVhdGVqcy5wcm9tb3RlKEhUTUxBdWRpb1NvdW5kSW5zdGFuY2UsIFwiQWJzdHJhY3RTb3VuZEluc3RhbmNlXCIpO1xufSgpKTtcblxuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbi8vIEhUTUxBdWRpb1BsdWdpbi5qc1xuLy8jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxud2luZG93LmNyZWF0ZWpzID0gd2luZG93LmNyZWF0ZWpzIHx8IHt9O1xuXG4oZnVuY3Rpb24gKCkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiBQbGF5IHNvdW5kcyB1c2luZyBIVE1MICZsdDthdWRpbyZndDsgdGFncyBpbiB0aGUgYnJvd3Nlci4gVGhpcyBwbHVnaW4gaXMgdGhlIHNlY29uZCBwcmlvcml0eSBwbHVnaW4gaW5zdGFsbGVkXG5cdCAqIGJ5IGRlZmF1bHQsIGFmdGVyIHRoZSB7eyNjcm9zc0xpbmsgXCJXZWJBdWRpb1BsdWdpblwifX17ey9jcm9zc0xpbmt9fS4gIEZvciBvbGRlciBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IGh0bWxcblx0ICogYXVkaW8sIGluY2x1ZGUgYW5kIGluc3RhbGwgdGhlIHt7I2Nyb3NzTGluayBcIkZsYXNoQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0uXG5cdCAqXG5cdCAqIDxoND5Lbm93biBCcm93c2VyIGFuZCBPUyBpc3N1ZXMgZm9yIEhUTUwgQXVkaW88L2g0PlxuXHQgKiA8Yj5BbGwgYnJvd3NlcnM8L2I+PGJyIC8+XG5cdCAqIFRlc3RpbmcgaGFzIHNob3duIGluIGFsbCBicm93c2VycyB0aGVyZSBpcyBhIGxpbWl0IHRvIGhvdyBtYW55IGF1ZGlvIHRhZyBpbnN0YW5jZXMgeW91IGFyZSBhbGxvd2VkLiAgSWYgeW91IGV4Y2VlZFxuXHQgKiB0aGlzIGxpbWl0LCB5b3UgY2FuIGV4cGVjdCB0byBzZWUgdW5wcmVkaWN0YWJsZSByZXN1bHRzLiBQbGVhc2UgdXNlIHt7I2Nyb3NzTGluayBcIlNvdW5kLk1BWF9JTlNUQU5DRVNcIn19e3svY3Jvc3NMaW5rfX0gYXNcblx0ICogYSBndWlkZSB0byBob3cgbWFueSB0b3RhbCBhdWRpbyB0YWdzIHlvdSBjYW4gc2FmZWx5IHVzZSBpbiBhbGwgYnJvd3NlcnMuICBUaGlzIGlzc3VlIGlzIHByaW1hcmlseSBsaW1pdGVkIHRvIElFOS5cblx0ICpcbiAgICAgKiA8Yj5JRSBodG1sIGxpbWl0YXRpb25zPC9iPjxiciAvPlxuICAgICAqIDx1bD48bGk+VGhlcmUgaXMgYSBkZWxheSBpbiBhcHBseWluZyB2b2x1bWUgY2hhbmdlcyB0byB0YWdzIHRoYXQgb2NjdXJzIG9uY2UgcGxheWJhY2sgaXMgc3RhcnRlZC4gU28gaWYgeW91IGhhdmVcbiAgICAgKiBtdXRlZCBhbGwgc291bmRzLCB0aGV5IHdpbGwgYWxsIHBsYXkgZHVyaW5nIHRoaXMgZGVsYXkgdW50aWwgdGhlIG11dGUgYXBwbGllcyBpbnRlcm5hbGx5LiBUaGlzIGhhcHBlbnMgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZW4gb3IgaG93IHlvdSBhcHBseSB0aGUgdm9sdW1lIGNoYW5nZSwgYXMgdGhlIHRhZyBzZWVtcyB0byBuZWVkIHRvIHBsYXkgdG8gYXBwbHkgaXQuPC9saT5cbiAgICAgKiA8bGk+TVAzIGVuY29kaW5nIHdpbGwgbm90IGFsd2F5cyB3b3JrIGZvciBhdWRpbyB0YWdzIGlmIGl0J3Mgbm90IGRlZmF1bHQuICBXZSd2ZSBmb3VuZCBkZWZhdWx0IGVuY29kaW5nIHdpdGhcbiAgICAgKiA2NGticHMgd29ya3MuPC9saT5cblx0ICogPGxpPk9jY2FzaW9uYWxseSB2ZXJ5IHNob3J0IHNhbXBsZXMgd2lsbCBnZXQgY3V0IG9mZi48L2xpPlxuXHQgKiA8bGk+VGhlcmUgaXMgYSBsaW1pdCB0byBob3cgbWFueSBhdWRpbyB0YWdzIHlvdSBjYW4gbG9hZCBvciBwbGF5IGF0IG9uY2UsIHdoaWNoIGFwcGVhcnMgdG8gYmUgZGV0ZXJtaW5lZCBieVxuXHQgKiBoYXJkd2FyZSBhbmQgYnJvd3NlciBzZXR0aW5ncy4gIFNlZSB7eyNjcm9zc0xpbmsgXCJIVE1MQXVkaW9QbHVnaW4uTUFYX0lOU1RBTkNFU1wifX17ey9jcm9zc0xpbmt9fSBmb3IgYSBzYWZlIGVzdGltYXRlLlxuXHQgKiBOb3RlIHRoYXQgYXVkaW8gc3ByaXRlcyBjYW4gYmUgdXNlZCBhcyBhIHNvbHV0aW9uIHRvIHRoaXMgaXNzdWUuPC9saT48L3VsPlxuXHQgKlxuXHQgKiA8Yj5TYWZhcmkgbGltaXRhdGlvbnM8L2I+PGJyIC8+XG5cdCAqIDx1bD48bGk+U2FmYXJpIHJlcXVpcmVzIFF1aWNrdGltZSB0byBiZSBpbnN0YWxsZWQgZm9yIGF1ZGlvIHBsYXliYWNrLjwvbGk+PC91bD5cblx0ICpcblx0ICogPGI+aU9TIDYgbGltaXRhdGlvbnM8L2I+PGJyIC8+XG5cdCAqIDx1bD48bGk+Y2FuIG9ubHkgaGF2ZSBvbmUgJmx0O2F1ZGlvJmd0OyB0YWc8L2xpPlxuXHQgKiBcdFx0PGxpPmNhbiBub3QgcHJlbG9hZCBvciBhdXRvcGxheSB0aGUgYXVkaW88L2xpPlxuXHQgKiBcdFx0PGxpPmNhbiBub3QgY2FjaGUgdGhlIGF1ZGlvPC9saT5cblx0ICogXHRcdDxsaT5jYW4gbm90IHBsYXkgdGhlIGF1ZGlvIGV4Y2VwdCBpbnNpZGUgYSB1c2VyIGluaXRpYXRlZCBldmVudC48L2xpPlxuXHQgKlx0XHQ8bGk+Tm90ZSBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2Uge3sjY3Jvc3NMaW5rIFwiV2ViQXVkaW9QbHVnaW5cIn19e3svY3Jvc3NMaW5rfX0gZm9yIGlPUyAoNispPC9saT5cblx0ICogXHRcdDxsaT5hdWRpbyBzcHJpdGVzIGNhbiBiZSB1c2VkIHRvIG1pdGlnYXRlIHNvbWUgb2YgdGhlc2UgaXNzdWVzIGFuZCBhcmUgc3Ryb25nbHkgcmVjb21tZW5kZWQgb24gaU9TPC9saT5cblx0ICogPC91bD5cblx0ICpcblx0ICogPGI+QW5kcm9pZCBOYXRpdmUgQnJvd3NlciBsaW1pdGF0aW9uczwvYj48YnIgLz5cblx0ICogPHVsPjxsaT5XZSBoYXZlIG5vIGNvbnRyb2wgb3ZlciBhdWRpbyB2b2x1bWUuIE9ubHkgdGhlIHVzZXIgY2FuIHNldCB2b2x1bWUgb24gdGhlaXIgZGV2aWNlLjwvbGk+XG5cdCAqICAgICAgPGxpPldlIGNhbiBvbmx5IHBsYXkgYXVkaW8gaW5zaWRlIGEgdXNlciBldmVudCAodG91Y2gvY2xpY2spLiAgVGhpcyBjdXJyZW50bHkgbWVhbnMgeW91IGNhbm5vdCBsb29wIHNvdW5kIG9yIHVzZSBhIGRlbGF5LjwvbGk+PC91bD5cblx0ICogPGI+IEFuZHJvaWQgQ2hyb21lIDI2LjAuMTQxMC41OCBzcGVjaWZpYyBsaW1pdGF0aW9uczwvYj48YnIgLz5cblx0ICogPHVsPiA8bGk+Q2FuIG9ubHkgcGxheSAxIHNvdW5kIGF0IGEgdGltZS48L2xpPlxuXHQgKiAgICAgIDxsaT5Tb3VuZCBpcyBub3QgY2FjaGVkLjwvbGk+XG5cdCAqICAgICAgPGxpPlNvdW5kIGNhbiBvbmx5IGJlIGxvYWRlZCBpbiBhIHVzZXIgaW5pdGlhdGVkIHRvdWNoL2NsaWNrIGV2ZW50LjwvbGk+XG5cdCAqICAgICAgPGxpPlRoZXJlIGlzIGEgZGVsYXkgYmVmb3JlIGEgc291bmQgaXMgcGxheWVkLCBwcmVzdW1hYmx5IHdoaWxlIHRoZSBzcmMgaXMgbG9hZGVkLjwvbGk+XG5cdCAqIDwvdWw+XG5cdCAqXG5cdCAqIFNlZSB7eyNjcm9zc0xpbmsgXCJTb3VuZFwifX17ey9jcm9zc0xpbmt9fSBmb3IgZ2VuZXJhbCBub3RlcyBvbiBrbm93biBpc3N1ZXMuXG5cdCAqXG5cdCAqIEBjbGFzcyBIVE1MQXVkaW9QbHVnaW5cblx0ICogQGV4dGVuZHMgQWJzdHJhY3RQbHVnaW5cblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRmdW5jdGlvbiBIVE1MQXVkaW9QbHVnaW4oKSB7XG5cdFx0dGhpcy5BYnN0cmFjdFBsdWdpbl9jb25zdHJ1Y3RvcigpO1xuXG5cblx0Ly8gUHVibGljIFByb3BlcnRpZXNcblx0XHR0aGlzLl9jYXBhYmlsaXRpZXMgPSBzLl9jYXBhYmlsaXRpZXM7XG5cblx0XHR0aGlzLl9sb2FkZXJDbGFzcyA9IGNyZWF0ZWpzLlNvdW5kTG9hZGVyO1xuXHRcdHRoaXMuX3NvdW5kSW5zdGFuY2VDbGFzcyA9IGNyZWF0ZWpzLkhUTUxBdWRpb1NvdW5kSW5zdGFuY2U7XG5cdH1cblxuXHR2YXIgcCA9IGNyZWF0ZWpzLmV4dGVuZChIVE1MQXVkaW9QbHVnaW4sIGNyZWF0ZWpzLkFic3RyYWN0UGx1Z2luKTtcblx0dmFyIHMgPSBIVE1MQXVkaW9QbHVnaW47XG5cbi8vIFN0YXRpYyBQcm9wZXJ0aWVzXG5cdC8qKlxuXHQgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgaW5zdGFuY2VzIHRoYXQgY2FuIGJlIGxvYWRlZCBvciBwbGF5ZWQuIFRoaXMgaXMgYSBicm93c2VyIGxpbWl0YXRpb24sIHByaW1hcmlseSBsaW1pdGVkIHRvIElFOS5cblx0ICogVGhlIGFjdHVhbCBudW1iZXIgdmFyaWVzIGZyb20gYnJvd3NlciB0byBicm93c2VyIChhbmQgaXMgbGFyZ2VseSBoYXJkd2FyZSBkZXBlbmRhbnQpLCBidXQgdGhpcyBpcyBhIHNhZmUgZXN0aW1hdGUuXG5cdCAqIEF1ZGlvIHNwcml0ZXMgd29yayBhcm91bmQgdGhpcyBsaW1pdGF0aW9uLlxuXHQgKiBAcHJvcGVydHkgTUFYX0lOU1RBTkNFU1xuXHQgKiBAdHlwZSB7TnVtYmVyfVxuXHQgKiBAZGVmYXVsdCAzMFxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLk1BWF9JTlNUQU5DRVMgPSAzMDtcblxuXHQvKipcblx0ICogRXZlbnQgY29uc3RhbnQgZm9yIHRoZSBcImNhblBsYXlUaHJvdWdoXCIgZXZlbnQgZm9yIGNsZWFuZXIgY29kZS5cblx0ICogQHByb3BlcnR5IF9BVURJT19SRUFEWVxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBjYW5wbGF5dGhyb3VnaFxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRzLl9BVURJT19SRUFEWSA9IFwiY2FucGxheXRocm91Z2hcIjtcblxuXHQvKipcblx0ICogRXZlbnQgY29uc3RhbnQgZm9yIHRoZSBcImVuZGVkXCIgZXZlbnQgZm9yIGNsZWFuZXIgY29kZS5cblx0ICogQHByb3BlcnR5IF9BVURJT19FTkRFRFxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBlbmRlZFxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRzLl9BVURJT19FTkRFRCA9IFwiZW5kZWRcIjtcblxuXHQvKipcblx0ICogRXZlbnQgY29uc3RhbnQgZm9yIHRoZSBcInNlZWtlZFwiIGV2ZW50IGZvciBjbGVhbmVyIGNvZGUuICBXZSB1dGlsaXplIHRoaXMgZXZlbnQgZm9yIG1haW50YWluaW5nIGxvb3AgZXZlbnRzLlxuXHQgKiBAcHJvcGVydHkgX0FVRElPX1NFRUtFRFxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCBzZWVrZWRcblx0ICogQHN0YXRpY1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cy5fQVVESU9fU0VFS0VEID0gXCJzZWVrZWRcIjtcblxuXHQvKipcblx0ICogRXZlbnQgY29uc3RhbnQgZm9yIHRoZSBcInN0YWxsZWRcIiBldmVudCBmb3IgY2xlYW5lciBjb2RlLlxuXHQgKiBAcHJvcGVydHkgX0FVRElPX1NUQUxMRURcblx0ICogQHR5cGUge1N0cmluZ31cblx0ICogQGRlZmF1bHQgc3RhbGxlZFxuXHQgKiBAc3RhdGljXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRzLl9BVURJT19TVEFMTEVEID0gXCJzdGFsbGVkXCI7XG5cblx0LyoqXG5cdCAqIEV2ZW50IGNvbnN0YW50IGZvciB0aGUgXCJ0aW1ldXBkYXRlXCIgZXZlbnQgZm9yIGNsZWFuZXIgY29kZS4gIFV0aWxpemVkIGZvciBsb29waW5nIGF1ZGlvIHNwcml0ZXMuXG5cdCAqIFRoaXMgZXZlbnQgY2FsbHNiYWNrIGV2ZXIgMTUgdG8gMjUwbXMgYW5kIGNhbiBiZSBkcm9wcGVkIGJ5IHRoZSBicm93c2VyIGZvciBwZXJmb3JtYW5jZS5cblx0ICogQHByb3BlcnR5IF9USU1FX1VQREFURVxuXHQgKiBAdHlwZSB7U3RyaW5nfVxuXHQgKiBAZGVmYXVsdCB0aW1ldXBkYXRlXG5cdCAqIEBzdGF0aWNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHMuX1RJTUVfVVBEQVRFID0gXCJ0aW1ldXBkYXRlXCI7XG5cblx0LyoqXG5cdCAqIFRoZSBjYXBhYmlsaXRpZXMgb2YgdGhlIHBsdWdpbi4gVGhpcyBpcyBnZW5lcmF0ZWQgdmlhIHRoZSB7eyNjcm9zc0xpbmsgXCJIVE1MQXVkaW9QbHVnaW4vX2dlbmVyYXRlQ2FwYWJpbGl0aWVzXCJ9fXt7L2Nyb3NzTGlua319XG5cdCAqIG1ldGhvZC4gUGxlYXNlIHNlZSB0aGUgU291bmQge3sjY3Jvc3NMaW5rIFwiU291bmQvY2FwYWJpbGl0aWVzOnByb3BlcnR5XCJ9fXt7L2Nyb3NzTGlua319IG1ldGhvZCBmb3IgYW4gb3ZlcnZpZXcgb2YgYWxsXG5cdCAqIG9mIHRoZSBhdmFpbGFibGUgcHJvcGVydGllcy5cblx0ICogQHByb3BlcnR5IF9jYXBhYmlsaXRpZXNcblx0ICogQHR5cGUge09iamVjdH1cblx0ICogQHByaXZhdGVcblx0ICogQHN0YXRpY1xuXHQgKi9cblx0cy5fY2FwYWJpbGl0aWVzID0gbnVsbDtcblxuXG4vLyBTdGF0aWMgTWV0aG9kc1xuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIHRoZSBwbHVnaW4gY2FuIGJlIHVzZWQgaW4gdGhlIGN1cnJlbnQgYnJvd3Nlci9PUy4gTm90ZSB0aGF0IEhUTUwgYXVkaW8gaXMgYXZhaWxhYmxlIGluIG1vc3QgbW9kZXJuXG5cdCAqIGJyb3dzZXJzLCBidXQgaXMgZGlzYWJsZWQgaW4gaU9TIGJlY2F1c2Ugb2YgaXRzIGxpbWl0YXRpb25zLlxuXHQgKiBAbWV0aG9kIGlzU3VwcG9ydGVkXG5cdCAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBwbHVnaW4gY2FuIGJlIGluaXRpYWxpemVkLlxuXHQgKiBAc3RhdGljXG5cdCAqL1xuXHRzLmlzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuXHRcdHMuX2dlbmVyYXRlQ2FwYWJpbGl0aWVzKCk7XG5cdFx0cmV0dXJuIChzLl9jYXBhYmlsaXRpZXMgIT0gbnVsbCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERldGVybWluZSB0aGUgY2FwYWJpbGl0aWVzIG9mIHRoZSBwbHVnaW4uIFVzZWQgaW50ZXJuYWxseS4gUGxlYXNlIHNlZSB0aGUgU291bmQgQVBJIHt7I2Nyb3NzTGluayBcIlNvdW5kL2NhcGFiaWxpdGllczpwcm9wZXJ0eVwifX17ey9jcm9zc0xpbmt9fVxuXHQgKiBtZXRob2QgZm9yIGFuIG92ZXJ2aWV3IG9mIHBsdWdpbiBjYXBhYmlsaXRpZXMuXG5cdCAqIEBtZXRob2QgX2dlbmVyYXRlQ2FwYWJpbGl0aWVzXG5cdCAqIEBzdGF0aWNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHMuX2dlbmVyYXRlQ2FwYWJpbGl0aWVzID0gZnVuY3Rpb24gKCkge1xuXHRcdGlmIChzLl9jYXBhYmlsaXRpZXMgIT0gbnVsbCkge3JldHVybjt9XG5cdFx0dmFyIHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYXVkaW9cIik7XG5cdFx0aWYgKHQuY2FuUGxheVR5cGUgPT0gbnVsbCkge3JldHVybiBudWxsO31cblxuXHRcdHMuX2NhcGFiaWxpdGllcyA9IHtcblx0XHRcdHBhbm5pbmc6ZmFsc2UsXG5cdFx0XHR2b2x1bWU6dHJ1ZSxcblx0XHRcdHRyYWNrczotMVxuXHRcdH07XG5cblx0XHQvLyBkZXRlcm1pbmUgd2hpY2ggZXh0ZW5zaW9ucyBvdXIgYnJvd3NlciBzdXBwb3J0cyBmb3IgdGhpcyBwbHVnaW4gYnkgaXRlcmF0aW5nIHRocm91Z2ggU291bmQuU1VQUE9SVEVEX0VYVEVOU0lPTlNcblx0XHR2YXIgc3VwcG9ydGVkRXh0ZW5zaW9ucyA9IGNyZWF0ZWpzLlNvdW5kLlNVUFBPUlRFRF9FWFRFTlNJT05TO1xuXHRcdHZhciBleHRlbnNpb25NYXAgPSBjcmVhdGVqcy5Tb3VuZC5FWFRFTlNJT05fTUFQO1xuXHRcdGZvciAodmFyIGkgPSAwLCBsID0gc3VwcG9ydGVkRXh0ZW5zaW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhciBleHQgPSBzdXBwb3J0ZWRFeHRlbnNpb25zW2ldO1xuXHRcdFx0dmFyIHBsYXlUeXBlID0gZXh0ZW5zaW9uTWFwW2V4dF0gfHwgZXh0O1xuXHRcdFx0cy5fY2FwYWJpbGl0aWVzW2V4dF0gPSAodC5jYW5QbGF5VHlwZShcImF1ZGlvL1wiICsgZXh0KSAhPSBcIm5vXCIgJiYgdC5jYW5QbGF5VHlwZShcImF1ZGlvL1wiICsgZXh0KSAhPSBcIlwiKSB8fCAodC5jYW5QbGF5VHlwZShcImF1ZGlvL1wiICsgcGxheVR5cGUpICE9IFwibm9cIiAmJiB0LmNhblBsYXlUeXBlKFwiYXVkaW8vXCIgKyBwbGF5VHlwZSkgIT0gXCJcIik7XG5cdFx0fSAgLy8gT0pSIGFub3RoZXIgd2F5IHRvIGRvIHRoaXMgbWlnaHQgYmUgY2FuUGxheVR5cGU6XCJtNGFcIiwgY29kZXg6IG1wNFxuXHR9O1xuXG5cbi8vIHB1YmxpYyBtZXRob2RzXG5cdHAucmVnaXN0ZXIgPSBmdW5jdGlvbiAobG9hZEl0ZW0pIHtcblx0XHR2YXIgdGFnID0gY3JlYXRlanMuSFRNTEF1ZGlvVGFnUG9vbC5nZXQobG9hZEl0ZW0uc3JjKTtcblx0XHR2YXIgbG9hZGVyID0gdGhpcy5BYnN0cmFjdFBsdWdpbl9yZWdpc3Rlcihsb2FkSXRlbSk7XG5cdFx0bG9hZGVyLnNldFRhZyh0YWcpO1xuXG5cdFx0cmV0dXJuIGxvYWRlcjtcblx0fTtcblxuXHRwLnJlbW92ZVNvdW5kID0gZnVuY3Rpb24gKHNyYykge1xuXHRcdHRoaXMuQWJzdHJhY3RQbHVnaW5fcmVtb3ZlU291bmQoc3JjKTtcblx0XHRjcmVhdGVqcy5IVE1MQXVkaW9UYWdQb29sLnJlbW92ZShzcmMpO1xuXHR9O1xuXG5cdHAuY3JlYXRlID0gZnVuY3Rpb24gKHNyYywgc3RhcnRUaW1lLCBkdXJhdGlvbikge1xuXHRcdHZhciBzaSA9IHRoaXMuQWJzdHJhY3RQbHVnaW5fY3JlYXRlKHNyYywgc3RhcnRUaW1lLCBkdXJhdGlvbik7XG5cdFx0c2kucGxheWJhY2tSZXNvdXJjZSA9IG51bGw7XG5cdFx0cmV0dXJuIHNpO1xuXHR9O1xuXG5cdHAudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIFwiW0hUTUxBdWRpb1BsdWdpbl1cIjtcblx0fTtcblxuXHQvLyBwbHVnaW4gZG9lcyBub3Qgc3VwcG9ydCB0aGVzZVxuXHRwLnNldFZvbHVtZSA9IHAuZ2V0Vm9sdW1lID0gcC5zZXRNdXRlID0gbnVsbDtcblxuXG5cdGNyZWF0ZWpzLkhUTUxBdWRpb1BsdWdpbiA9IGNyZWF0ZWpzLnByb21vdGUoSFRNTEF1ZGlvUGx1Z2luLCBcIkFic3RyYWN0UGx1Z2luXCIpO1xufSgpKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3ri2\n");

/***/ })

}]);