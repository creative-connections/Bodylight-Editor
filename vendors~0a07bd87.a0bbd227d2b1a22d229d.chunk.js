(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors~0a07bd87"],{

/***/ "aurelia-bodylight-plugin/elements/chartjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.Chartjs = void 0;\nexports.myParseInt = myParseInt;\n\nvar _chart = _interopRequireDefault(__webpack_require__(/*! chart.js */ \"MO+k\"));\n\nvar _chartjsPluginDatalabels = _interopRequireDefault(__webpack_require__(/*! chartjs-plugin-datalabels */ \"qb46\"));\n\nvar _aureliaFramework = __webpack_require__(/*! aurelia-framework */ \"aurelia-framework\");\n\nvar _lodash = _interopRequireDefault(__webpack_require__(/*! lodash */ \"LvDl\"));\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n//returns array of numbers if contains comma, or number - int\nfunction myParseInt(str, raddix) {\n  if (typeof str !== \"string\") return str;\n  if (str.lastIndexOf(',') > 0) return str.split(',').map(x => parseInt(x, raddix));else return parseInt(str, raddix);\n}\n\nlet Chartjs = (_class = class Chartjs {\n  //id to listen addsection event\n  //false - to keep width and height, true - to rescale\n  //time to throttle chart update, if it is too much at once\n  //min for y axis - if chart has this axis\n  //max for y axis - if chart has this axis\n  //whether to integrate with 3d babylonjs\n  //canvas obj name -\n  //index to shift the color\n  //index to shift the color\n  //may be configured by subclasses\n\n  /**\n   * initializes handlers for event processing - this is recommended way\n   */\n  constructor() {\n    _initializerDefineProperty(this, \"fromid\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"type\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"maxdata\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"initialdata\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"width\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"height\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"animate\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"id\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"ylabel\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"xlabel\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"convertors\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"verticalline\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"generatelabels\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"sectionid\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"responsive\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"throttle\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"precision\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"min\", _descriptor21, this);\n\n    _initializerDefineProperty(this, \"max\", _descriptor22, this);\n\n    _initializerDefineProperty(this, \"babylonjs\", _descriptor23, this);\n\n    _initializerDefineProperty(this, \"canvasobj\", _descriptor24, this);\n\n    _initializerDefineProperty(this, \"colorsegmentindex\", _descriptor25, this);\n\n    _initializerDefineProperty(this, \"colorindex\", _descriptor26, this);\n\n    _initializerDefineProperty(this, \"minichart\", _descriptor27, this);\n\n    this.indexsection = 0;\n    this.datalabels = false;\n    this.refindices = void 0;\n\n    this.handleValueChange = e => {\n      //sets data to dataset\n      //apply value convert among all data\n      let rawdata;\n\n      if (this.refindices) {\n        rawdata = this.refindices.map(x => e.detail.data[x]);\n      } else rawdata = e.detail.data.slice(this.refindex, this.refendindex); //if convert operation is defined as array\n\n\n      if (this.operation) {\n        for (let i = 0; i < rawdata.length; i++) {\n          //if particular operation is defined\n          if (this.operation[i]) rawdata[i] = this.operation[i](rawdata[i]);\n        }\n      }\n\n      this.chart.data.datasets[0].data = rawdata;\n      this.updatechart();\n    };\n\n    this.handleReset = e => {\n      console.log('handlereset2()');\n      if (this.chart.data.datasets) for (let dataset of this.chart.data.datasets) if (dataset && dataset.data) dataset.data = [];\n      if (this.chart.data.labels.length > 0) this.chart.data.labels = [];\n\n      if (this.sectionid) {\n        this.chart.config.options.section = [];\n        this.indexsection = 0;\n      }\n\n      this.updatechart(); //this.chart.config.options.section = [];\n    };\n\n    this.handleAddSection = e => {\n      this.addSection(e.detail.label);\n    };\n\n    this.handleFMIAttached = e => {\n      const fromel = document.getElementById(this.fromid);\n\n      if (fromel) {\n        fromel.addEventListener('fmidata', this.handleValueChange);\n        fromel.addEventListener('fmireset', this.handleReset);\n      } else {\n        console.warn('fmi attached, but no element with id found:', this.fromid);\n      }\n    };\n  }\n  /**\n   * Returns unique color per index- neighbouring colors are different using golden angle approximation\n   * @param index\n   * @returns {string} usable by CSS or DOM elements\n   */\n  //  const hue = (i - 1) * 137.508; // use golden angle approximation\n  //  var color = `hsl(${hue},85%,91%)`;\n\n\n  selectColor(index, saturation, lightness) {\n    if (saturation === void 0) {\n      saturation = 55;\n    }\n\n    if (lightness === void 0) {\n      lightness = 55;\n    }\n\n    const hue = (index - 1) * 137.508; // use golden angle approximation\n\n    return \"hsl(\" + hue + \",\" + saturation + \"%,\" + lightness + \"%)\";\n  }\n  /**\n   * process all attributes of <bdl-chart> component and sets appropriate settings of subesquent chartjs\n   */\n\n\n  bind() {\n    //console.log('chartjs bind');\n    if (typeof this.refindex == 'string' && this.refindex.indexOf(',') > 0) {\n      this.refindices = this.refindex.split(',');\n    } else {\n      this.refindex = myParseInt(this.refindex, 10);\n      this.refvalues = parseInt(this.refvalues, 10);\n      this.refendindex = this.refindex + this.refvalues;\n    } //empty plugins by default\n\n\n    this.plugins = []; //configure convertors - used to convert units received from fmi\n\n    if (this.convertors) {\n      let convertvalues = this.convertors.split(';');\n\n      let identity = x => x;\n\n      this.operation = [];\n\n      for (let i = 0; i < convertvalues.length; i++) {\n        if (convertvalues[i].includes(',')) {\n          //convert values are in form numerator,denominator contains comma ','\n          let convertitems = convertvalues[i].split(',');\n          if (convertitems[0] === '1' && convertitems[1] === '1') this.operation.push(identity);else {\n            let numerator = parseFloat(convertitems[0]);\n            let denominator = parseFloat(convertitems[1]);\n            let addend = convertitems.length > 2 ? parseFloat(convertitems[2]) : 0;\n            this.operation.push(x => x * numerator / denominator + addend);\n          }\n        } else {\n          //convert values are in form of expression, do not contain comma\n          if (convertvalues === '1/x') this.operation.push(x => 1 / x);else {\n            // for eval() security filter only allowed characters:\n            // algebraic, digits, e, dot, modulo, parenthesis and 'x' and 'e' is allowed\n            let expression = convertvalues[i].replace(/[^-\\d/*+.()%xe]/g, '');\n            console.log('chartjs bind(), evaluating expression:' + convertvalues[i] + ' securely filtered to :' + expression); // eslint-disable-next-line no-eval\n\n            this.operation.push(x => eval(expression));\n          }\n        }\n      }\n    } //sets boolean value - if verticalline attribute is set\n\n\n    if (typeof this.generatelabels === 'string') {\n      this.generatelabels = this.generatelabels === 'true';\n    }\n\n    if (typeof this.minichart === 'string') this.minichart = this.minichart === 'true';\n\n    if (typeof this.colorindex === 'string') {\n      this.colorindex = parseInt(this.colorindex, 10);\n    }\n\n    if (!this.colorindex) this.colorindex = 0; //in case not defined or null\n\n    if (typeof this.colorsegmentindex === 'string') {\n      this.colorsegmentindex = parseInt(this.colorsegmentindex, 10);\n    } //sets color of each dataset as different as possible\n    //and set initial data in chart\n    //set labels - separated by comma\n\n\n    if (this.labels) this.chlabels = this.labels.split(','); //else generate labels as 'variable 1' ...\n    else {\n      //this.chlabels = [...Array(this.refvalues)].map((_, i) => this.generatelabels ? `variable ${i}` : '');\n      //this seems not to be correctly transpilled to ES5, therefore following generator ->\n      this.chlabels = [];\n\n      for (let i = 0; i < this.refvalues; i++) {\n        let ilabel = this.generatelabels ? 'variable ' + i : '';\n        this.chlabels.push(ilabel);\n      }\n    }\n    this.colors = [];\n    let mydatastr = this.initialdata.split(',');\n    this.mydata = mydatastr.map(x => {\n      return parseFloat(x);\n    });\n    if (this.refindices) this.refvalues = this.refindices.length;\n\n    for (let i = 0; i < this.refvalues; i++) {\n      if (!this.mydata[i]) {//this.mydata.push(0);\n        //console.log('chartjs no data');\n      }\n\n      this.colors.push(this.selectColor(i + this.colorindex));\n    }\n\n    let datasets = [{\n      data: this.mydata,\n      backgroundColor: this.colors\n    }];\n    this.data = {\n      labels: this.chlabels,\n      datasets: datasets\n    }; //bind - string value to boolean\n\n    if (typeof this.animate === 'string') {\n      this.animate = this.animate === 'true';\n    }\n\n    if (typeof this.responsive === 'string') {\n      this.responsive = this.responsive === 'true';\n    } //set animation options\n\n\n    let animopts1 = {\n      animateScale: true,\n      animateRotate: true,\n      duration: 500\n    };\n    let animopts2 = {\n      duration: 0\n    }; //select options based on attribute value - whether to animate or not\n\n    let animopts = this.animate ? animopts1 : animopts2; //set labels for axes in chartjs opts\n\n    let axisopts = {};\n\n    if (this.ylabel) {\n      axisopts.yAxes = [{\n        scaleLabel: {\n          display: true,\n          labelString: this.ylabel\n        }\n      }];\n    }\n\n    if (this.xlabel) {\n      axisopts.xAxes = [{\n        scaleLabel: {\n          display: true,\n          labelString: this.xlabel\n        }\n      }];\n    }\n\n    if (this.minichart) {\n      if (axisopts.xAxes) axisopts.xAxes[0].display = false;else axisopts.xAxes = [{\n        display: false\n      }];\n      if (axisopts.yAxes) axisopts.yAxes[0].display = false;else axisopts.yAxes = [{\n        display: false\n      }];\n    } //initialize options - used later by chartjs instance\n\n\n    this.options = {\n      live: true,\n      responsive: this.responsive,\n      //true - rescale, false - will keep canvas width and height\n      legend: {\n        display: !this.minichart,\n        position: 'top'\n      },\n      animation: animopts,\n      tooltips: {\n        position: 'nearest',\n        mode: 'index',\n        intersect: false,\n        titleFontFamily: 'Open Sans',\n        backgroundColor: 'rgba(0,0,0,0.3)',\n        //titleFontColor: 'red',\n        caretSize: 5,\n        cornerRadius: 4,\n        xPadding: 3,\n        yPadding: 3,\n        callbacks: {\n          label: function (tooltipItem, data) {\n            //let label = data.labels[tooltipItem.index];\n            let value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index]; //console.log('chartjs tooltip, value',tooltipItem,value);\n\n            if (typeof value === 'object') return value.x.toPrecision(4) + ':' + value.y.toPrecision(4);\n            if (typeof value === 'number') return value.toPrecision(4); //TODO this.precision is not accessible from here\n\n            return value;\n          }\n        }\n      },\n      hover: {\n        animationDuration: 0,\n        //disable animation on hover - e.g. for tooltips\n        intersect: false\n      },\n      scales: axisopts,\n      babylondynamictexture: \"\" // name of global dynamictextureobj to call update()\n\n    }; //sets boolean value - if verticalline attribute is set\n\n    if (typeof this.verticalline === 'string') {\n      this.verticalline = this.verticalline === 'true';\n    }\n\n    if (typeof this.maxdata === 'string') {\n      this.maxdata = parseInt(this.maxdata, 10);\n    } //if sections are requested - define chartjs plugin to draw it in background\n\n\n    if (this.sectionid) {\n      this.options.section = [];\n    }\n\n    if (this.min) {\n      //sets yscale min\n      if (!this.options) this.options = {};\n      if (!this.options.scales) this.options.scales = {};\n      if (!this.options.scales.yAxes) this.options.scales.yAxes = [{}]; //chartjs 2.9.4\n\n      if (!this.options.scales.yAxes[0].ticks) this.options.scales.yAxes[0].ticks = {}; //chartjs 2.9.4\n\n      this.options.scales.yAxes[0].ticks.min = parseFloat(this.min);\n    }\n\n    if (this.max) {\n      //sets yscale max\n      if (!this.options) this.options = {};\n      if (!this.options.scales) this.options.scales = {};\n      if (!this.options.scales.yAxes) this.options.scales.yAxes = [{}]; //chartjs 2.9.4\n\n      if (!this.options.scales.yAxes[0].ticks) this.options.scales.yAxes[0].ticks = {}; //chartjs 2.9.4\n\n      this.options.scales.yAxes[0].ticks.max = parseFloat(this.max); //if (this.min) this.options.scales.yAxes[0].ticks.stepSize = (this.options.scales.yAxes[0].ticks.max - this.options.scales.yAxes[0].ticks.min) / 10;\n    }\n\n    this.tooltips = ['mousemove', 'touchstart', 'touchmove', 'click'];\n    /*if (this.minichart) {\n      this.options.plugins.legend.display = false\n    }*/\n  }\n  /**\n   * this is called when the DOM is attached to view - instantiate the chartjs and sets all necesary binding\n   */\n\n\n  attached() {\n    //console.log('chartjs attached');\n    //listening to custom event fmidata and fmireset\n    const fromel = document.getElementById(this.fromid);\n\n    if (fromel) {\n      fromel.addEventListener('fmidata', this.handleValueChange);\n      fromel.addEventListener('fmireset', this.handleReset);\n    } else {\n      console.warn('chartjs, null fromid element, waiting to be attached');\n      document.addEventListener('fmiattached', this.handleFMIAttached);\n    }\n\n    if (this.sectionid) {\n      const sectionel = document.getElementById(this.sectionid);\n      if (sectionel) sectionel.addEventListener('addsection', this.handleAddSection);else console.log('chartjs WARNING, null sectionid element');\n    } //unregister\n\n\n    _chart.default.plugins.unregister(_chartjsPluginDatalabels.default); //for verticalline option - register controller for BdlChartjs\n\n\n    if (this.verticalline) {\n      _chart.default.defaults.LineWithLine = _chart.default.defaults.line;\n      _chart.default.controllers.LineWithLine = _chart.default.controllers.line.extend({\n        draw: function (ease) {\n          _chart.default.controllers.line.prototype.draw.call(this, ease);\n\n          if (this.chart.tooltip._active && this.chart.tooltip._active.length) {\n            let activePoint = this.chart.tooltip._active[0];\n            let ctx = this.chart.ctx;\n            let x = activePoint.tooltipPosition().x;\n            let topY = this.chart.legend.bottom;\n            let bottomY = this.chart.chartArea.bottom; // draw line\n\n            ctx.save();\n            ctx.beginPath();\n            ctx.moveTo(x, topY);\n            ctx.lineTo(x, bottomY);\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#555';\n            ctx.stroke();\n            ctx.restore();\n          }\n        }\n      });\n    } //for sections register chartjs plugin\n\n\n    if (this.sectionid) {\n      _chart.default.pluginService.register({\n        beforeDraw: function (chart, easing) {\n          if (chart.config.options.section && chart.config.options.section.length > 0) {\n            let ctx = chart.chart.ctx;\n            let chartArea = chart.chartArea;\n            let meta = chart.getDatasetMeta(0);\n            let i;\n            ctx.save(); //console.log('chartjs sections', chart.config.options.section);\n\n            if (meta.data.length == 0) return; //first section\n\n            for (i = 1; i < chart.config.options.section.length; i++) {\n              //console.log('chartjs sectionplugin:i, section[i-1], section[1],start,stop)', i, chart.config.options.section[i - 1],chart.config.options.section[i]);\n              const startindex = chart.config.options.section[i - 1].index;\n              const stopindex = chart.config.options.section[i].index;\n              if (startindex >= meta.data.length) continue;\n              if (stopindex >= meta.data.length) continue;\n              let start = meta.data[startindex]._model.x;\n              let stop = meta.data[stopindex]._model.x;\n              /*const hue = (i - 1) * 137.508; // use golden angle approximation\n              ctx.fillStyle = `hsl(${hue},85%,91%)`;\n               */\n              //bar\n\n              ctx.fillStyle = chart.config.options.section[i - 1].color;\n              ctx.fillRect(start, chartArea.top, stop - start, chartArea.bottom - chartArea.top); //label\n              //ctx.translate(start, chartArea.top);\n              //ctx.rotate(Math.PI / 2);\n\n              ctx.save();\n              ctx.translate(start, chartArea.top);\n              ctx.rotate(90 * Math.PI / 180);\n              ctx.fillStyle = '#aaa';\n              ctx.font = '12px Helvetica';\n              ctx.fillText(chart.config.options.section[i - 1].label, 5, -5); //start, chartArea.top);\n\n              ctx.restore();\n            }\n\n            ctx.restore(); //console.log('last i',i);\n            //last section\n\n            i = chart.config.options.section.length;\n\n            if (i > 1 && chart.config.options.section[i - 1].index < meta.data.length - 1 && chart.config.options.section[i - 1].index < meta.data.length) {\n              //draw last section\n              let start = meta.data[chart.config.options.section[i - 1].index]._model.x;\n              let stop = meta.data[meta.data.length - 1]._model.x; //console.log (start,stop);\n\n              /*\n              const hue = (i - 1) * 137.508; // use golden angle approximation\n              var color = `hsl(${hue},85%,91%)`;\n               */\n\n              ctx.fillStyle = chart.config.options.section[i - 1].color; //console.log (chartArea);\n\n              ctx.fillRect(start, chartArea.top, stop - start, chartArea.bottom - chartArea.top);\n              ctx.save();\n              ctx.translate(start, chartArea.top);\n              ctx.rotate(90 * Math.PI / 180);\n              ctx.fillStyle = '#aaa';\n              ctx.font = '12px Helvetica';\n              ctx.fillText(chart.config.options.section[i - 1].label, 5, -5); //start, chartArea.top);\n\n              ctx.restore();\n            }\n          }\n        }\n      });\n    }\n\n    if (this.datalabels) {\n      console.log('datalabels true ,setting plugin', this.datalabels);\n      console.log('datalabels true ,setting plugin', this.datalabels);\n\n      _chart.default.pluginService.register({\n        afterDatasetsDraw: function (chartInstance, easing) {\n          // To only draw at the end of animation, check for easing === 1\n          //if (dataset && dataset.datalabels) {\n          let ctx = chartInstance.chart.ctx;\n          chartInstance.data.datasets.forEach(function (dataset, i) {\n            if (dataset && dataset.datalabels) {\n              let meta = chartInstance.getDatasetMeta(i);\n\n              if (!meta.hidden) {\n                meta.data.forEach(function (element, index) {\n                  if (dataset.datalabels[index].length > 0) {\n                    // Draw the text in black, with the specified font\n                    ctx.fillStyle = '#aaa';\n                    ctx.font = '12px Helvetica'; // Just naively convert to string for now\n\n                    let dataString = dataset.datalabels[index]; // Make sure alignment settings are correct\n\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    let padding = 5;\n                    let position = element.tooltipPosition();\n                    ctx.fillText(dataString, position.x, position.y - 12 / 2 - padding);\n                  }\n                });\n              }\n            }\n          });\n        }\n      });\n    } //babylonjs bind\n\n    /*if (typeof this.babylonjs === 'string') {\n      //this.babylonjs = this.babylonjs === 'true';\n    } else this.babylonjs = false;*/\n\n\n    if (this.babylonjs) {\n      this.options.babylondynamictexture = this.babylonjs;\n\n      _chart.default.plugins.register({\n        beforeDraw: function (chartInstance) {\n          var ctx = chartInstance.chart.ctx; //console.log('ctx before draw:')\n\n          ctx.fillStyle = \"white\";\n          ctx.fillRect(0, 0, chartInstance.chart.width, chartInstance.chart.height);\n        },\n        afterDraw: function (chartInstance) {\n          var ctx = chartInstance.chart.ctx; //console.log('ctx after draw:')\n\n          if (window[chartInstance.options.babylondynamictexture]) window[chartInstance.options.babylondynamictexture].update();\n        }\n      });\n    } //canvasobj - if defined then use this object name to get canvas object -  otherwise the one from template\n\n\n    let ctx = this.canvasobj ? window[this.canvasobj] : this.chartcanvas.getContext('2d'); //ctx may be null if canvasobj is not yet initialized.\n\n    if (ctx) this.initChart(ctx); //init chart only if ctx is ready\n    else {\n      //add myself to lazyinitchart array\n      if (!window.lazyInitChart) window.lazyInitChart = [];\n      window.lazyInitChart.push(this);\n    }\n    /*\n        //do lazy init of charts after third party canvas initialization\n        if (window.lazyInitChart) {\n            for (let obj in window.lazyInitChart) obj.initChart().bind(obj);\n        }\n     */\n  }\n\n  initChart() {\n    let ctx = this.canvasobj ? window[this.canvasobj] : this.chartcanvas.getContext('2d');\n    initChart(ctx);\n  }\n\n  initChart(ctx) {\n    /*let that = this;\n    if (window.lazyInitChart) {let that = window.lazyInitChart;}*/\n    this.chart = new _chart.default(ctx, {\n      plugins: this.plugins,\n      type: this.type,\n      data: this.data,\n      options: this.options,\n      tooltipEvents: this.tooltips\n    }); //register throttled update function\n\n    if (typeof this.throttle === 'string') this.throttle = parseInt(this.throttle, 10);\n\n    if (this.throttle > 0) {\n      //throttle\n      this.updatechart = _lodash.default.throttle(this.chart.update.bind(this.chart), this.throttle);\n    } else {\n      //directly call chart update\n      this.updatechart = this.chart.update.bind(this.chart);\n    } // console.log('chartjs data', this.data);\n\n    /*    //now delay tooltip\n        let originalShowTooltip = that.chart.showTooltip;\n        //let that.timeout;\n        that.timeout=0;\n        that.chart.showTooltip = function (activeElements) {\n          let delay = (activeElements.length === 0) ? 2000 : 0;\n          clearTimeout(that.timeout);\n          that.timeout = setTimeout(function () {\n            originalShowTooltip.call(that.chart, activeElements);\n          }, delay);\n        }\n    \n     */\n\n  }\n  /**\n   * called when component is detached from view - remove event listeners - no need to update chart\n   */\n\n\n  detached() {\n    if (document.getElementById(this.fromid)) {\n      document.getElementById(this.fromid).removeEventListener('fmidata', this.handleValueChange);\n      document.getElementById(this.fromid).removeEventListener('fmireset', this.handleReset);\n    } else {\n      console.log('chartjs WARNING, null fromid element,removing from global');\n      document.removeEventListener('fmidata', this.handleValueChange);\n      document.removeEventListener('fmireset', this.handleReset);\n    }\n\n    if (this.sectionid) {\n      document.getElementById(this.sectionid).removeEventListener('addsection', this.handleAddSection);\n    }\n\n    document.removeEventListener('fmiattached', this.handleFMIAttached);\n  }\n  /**\n   * asks for filename and creates blob with CSV data from chart which initiates web browser download dialog.\n   * CSV -  time point per row\n   */\n\n\n  download() {\n    //ask for filename\n    let filename = prompt('File name (*.csv):', 'data.csv');\n\n    if (filename) {\n      //adds csv as extension\n      if (!filename.endsWith('.csv')) filename = filename.concat('.csv'); //labels first row\n\n      let content = 'Time,' + this.labels + '\\n'; //transpose each row = variable in specific time\n\n      for (let i = 0; i < this.chart.data.labels.length; i++) {\n        let row = this.chart.data.labels[i];\n\n        for (let j = 0; j < this.chart.data.datasets.length; j++) {\n          row += ',' + this.chart.data.datasets[j].data[i];\n        }\n\n        content += row + '\\n';\n      }\n\n      let blob = new Blob([content], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      saveAs(blob, filename);\n    }\n  }\n  /**\n   * asks for filename and creates blob with CSV data from chart which initiates web browser download dialog\n   * CSV - variable values per row\n   */\n\n\n  downloadflat() {\n    //ask for filename\n    let filename = prompt('File name (*.csv):', 'data.csv');\n\n    if (filename) {\n      //adds csv as extension\n      if (!filename.endsWith('.csv')) filename = filename.concat('.csv'); //labels first row - each row is then all data per variable - transposition might be needed\n\n      let content = 'variable name,values ...' + '\\n';\n      let labels = this.labels.split(','); // variable per row\n      //chart labels - usually time\n\n      content = content + 'Time,' + this.chart.data.labels.join(',') + '\\n'; //dataset data on other rows\n\n      for (let i = 0; i < this.chart.data.datasets.length; i++) {\n        content = content + labels[i] + ',' + this.chart.data.datasets[i].data.join(',') + '\\n';\n      }\n\n      let blob = new Blob([content], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      saveAs(blob, filename);\n    }\n  }\n  /**\n   * Adds new section in chartarea - current last data in dataset\n   */\n\n\n  addSection(label) {\n    if (label === void 0) {\n      label = '';\n    }\n\n    this.indexsection++;\n    if (!label) label = '';\n    console.log('chartjs.addsection()', this.chart.data.labels.length - 1, label);\n    let ind; //if (this.chart.data.labels.length>0) ind = 0\n    //else\n\n    ind = Math.max(0, this.chart.data.labels.length - 1);\n    this.chart.config.options.section.push({\n      index: ind,\n      color: this.selectColor(this.indexsection + this.colorsegmentindex, 85, 93),\n      label: label\n    });\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"fromid\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"labels\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"refindex\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"refvalues\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"type\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 'doughnut';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"maxdata\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 256;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"initialdata\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"width\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 300;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"height\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 200;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"animate\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"id\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"ylabel\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"xlabel\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"convertors\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"verticalline\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"generatelabels\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"sectionid\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"responsive\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"throttle\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 200;\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"precision\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 4;\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"min\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, \"max\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, \"babylonjs\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, \"canvasobj\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, \"colorsegmentindex\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return -2;\n  }\n}), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, \"colorindex\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, \"minichart\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\nexports.Chartjs = Chartjs;\n//# sourceMappingURL=chartjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-barplot":
/*!***********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-barplot.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.ChartjsBarplot = void 0;\n\nvar _chartjs = __webpack_require__(/*! ./chartjs */ \"aurelia-bodylight-plugin/elements/chartjs\");\n\nvar _chartjsPluginDatalabels = _interopRequireDefault(__webpack_require__(/*! chartjs-plugin-datalabels */ \"qb46\"));\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n//import {PLATFORM} from 'aurelia-pal';\n//@useView(PLATFORM.moduleName('./bdl-chartjs.html'))\n//@useView('./chartjs.html')\nlet ChartjsBarplot = (_class = class ChartjsBarplot extends _chartjs.Chartjs {\n  //csv limits of chart min and max\n  //='';//0.25,0.75'; //csv normal limits inside chart\n  //sets precision to floor/round\n  //whether click will create event 'change'\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"id\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"extremelimits\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"normallimits\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"initialdata\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"width\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"height\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"nominal\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"twoway\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"responsive\", _descriptor13, this);\n\n    this.handleValueChange = e => {\n      //sets data to dataset\n      //apply value convert among all data\n      let rawdata = e.detail.data.slice(this.refindex, this.refendindex); //if convert operation is defined as array\n\n      if (this.operation) {\n        for (let i = 0; i < rawdata.length; i++) {\n          //if particular operation is defined\n          if (this.operation[i]) rawdata[i] = this.operation[i](rawdata[i]);\n        }\n      }\n\n      this.chart.data.datasets[0].data = rawdata; //now decide whether datalabel is right or left\n\n      if ((this.elimits[1] - rawdata) / (this.elimits[1] - this.elimits[0]) < 0.05) {\n        this.options.plugins.datalabels.align = 'left';\n        this.options.plugins.datalabels.color = 'white';\n      } else {\n        this.options.plugins.datalabels.align = 'right';\n        this.options.plugins.datalabels.color = 'black';\n      }\n\n      this.updatechart();\n    };\n  }\n\n  bind() {\n    super.bind();\n    this.plugins = [_chartjsPluginDatalabels.default];\n\n    if (this.extremelimits) {\n      this.elimits = this.extremelimits.split(','); //split by comma\n\n      for (let i = 0; i < this.elimits.length; i++) this.elimits[i] = parseFloat(this.elimits[i]);\n    }\n\n    if (this.normallimits) {\n      this.nlimits = this.normallimits.split(',');\n\n      for (let i = 0; i < this.nlimits.length; i++) this.nlimits[i] = parseFloat(this.nlimits[i]);\n    }\n\n    if (this.nominal) {\n      if (typeof this.nominal === 'string') this.nominal = parseFloat(this.nominal);\n      this.options.nominal = this.nominal;\n    }\n\n    if (this.twoway && typeof this.twoway === 'string') {\n      this.twoway = this.twoway === 'true';\n    } //chartjs type horizontal bar\n\n\n    this.type = 'horizontalBar'; // no legend and no labels\n    //this.chlabels = [];\n\n    this.options.legend.display = false; //sets xaxis limits to extremelimits\n\n    if (!this.options.scales.xAxes) this.options.scales.xAxes = [{}];\n    this.options.scales.xAxes[0].ticks = {\n      autoSkip: true,\n      min: this.elimits[0],\n      max: this.elimits[1],\n      fontSize: 8,\n      callback: function (value, index, values) {\n        //count relative distance to last tick value\n        const reldistance = (values[3] - value) / (values[3] - values[0]); // do not display tick label if too close to extreme limit (<5% of length)\n\n        if (index === 2 && reldistance < 0.05) return '';\n        return value;\n      }\n    }; //set ticks to extreme and normal limits only\n\n    let myticks = this.normallimits ? [this.elimits[0], this.nlimits[0], this.nlimits[1], this.elimits[1]] : [this.elimits[0], this.elimits[1]]; //console.log('charjs barplot myticks', myticks);\n\n    this.options.scales.xAxes[0].afterBuildTicks = function (scale) {\n      scale.ticks = myticks;\n      return;\n    };\n\n    this.options.scales.xAxes[0].beforeUpdate = function (oScale) {\n      return;\n    }; //datalabel plugin shows value right of the bar\n\n\n    this.options.plugins = {\n      datalabels: {\n        align: 'right',\n        anchor: 'end',\n        formatter: function (value, context) {\n          return value.toPrecision(3);\n        },\n        font: {\n          size: 8\n        },\n        padding: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 1\n        }\n      }\n    }; //now decide whether datalabel is right or left\n    //TODO eliminate duplicate in handlevaluechange\n\n    if ((this.elimits[1] - parseFloat(this.initialdata)) / (this.elimits[1] - this.elimits[0]) < 0.05) {\n      this.options.plugins.datalabels.align = 'left';\n      this.options.plugins.datalabels.color = 'white';\n    } else {\n      this.options.plugins.datalabels.align = 'right';\n      this.options.plugins.datalabels.color = 'black';\n    } //if the component is twoway - on click shows second bar with desired value and triggers 'change' event\n\n\n    if (this.twoway) {\n      //sets options for chart\n      this.options.events = ['click'];\n      this.options.parentId = this.id; //this.options.parentvm = this;\n\n      this.options.onClick = function (c, i) {\n        //note this - refers now to chart, not to webcomponent - shared properties are via options.nominal and options.parentid\n        //console.log('chartjs barplot click,', c, i, 'this:', this);\n        //let scaler = this.chart.scales['y-axis-0'];\n        let xscaler = this.chart.scales['x-axis-0']; //let y = c.clientY - this.canvas.getBoundingClientRect().top - scaler.top;\n\n        let x = c.clientX - this.canvas.getBoundingClientRect().left - xscaler.left; //let yval = scaler.max - y / scaler.height * (scaler.max - scaler.min);\n\n        let xval = xscaler.min + x / xscaler.width * (xscaler.max - xscaler.min);\n\n        if (this.options.nominal) {\n          //nominal is defined - floor xval to nominal\n          xval = Math.floor(xval / this.options.nominal) * this.options.nominal;\n        } //console.log('value clicked: %o, ypx: %o', yval, y);\n        //console.log('value clicked: %o, xpx: %o', xval, x);\n        //this.trigger('onTickerXClick', xval);\n\n\n        if (this.data.datasets.length < 2) {\n          this.data.datasets.push({\n            data: [xval],\n            backgroundColor: '#ff0000',\n            label: 'new value'\n          });\n        } else this.data.datasets[1].data = [xval];\n\n        this.update(); //create and dispatch change event\n\n        let event = new CustomEvent('change', {\n          detail: {\n            value: xval,\n            id: this.options.parentId\n          }\n        }); //dispatch event - it should be listened by some other component\n\n        document.getElementById(this.options.parentId).dispatchEvent(event); //this.parentvm.valueChanged(xval);\n      };\n    }\n\n    this.options.tooltips = {\n      enabled: false\n    };\n    this.tooltips = [];\n    /*if (!this.options.scales.yAxes) this.options.scales.yAxes = [{}];\n    this.options.scales.yAxes[0].ticks = {\n      max: 5,\n      min: 0,\n      stepSize: 0.5\n    };*/\n  }\n\n  valueChanged(value) {\n    console.log('chartjs barplot valuechanged:', value);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"id\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"refindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"refvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 1;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"extremelimits\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '0,1';\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"normallimits\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"initialdata\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '7.5';\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"width\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '500';\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"height\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '50';\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"nominal\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0.01;\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"twoway\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"responsive\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\nexports.ChartjsBarplot = ChartjsBarplot;\n//# sourceMappingURL=chartjs-barplot.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-barplot\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-barplot.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-barplot.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template bindable=\\\"width,height\\\">\\n    <div id=\\\"canvas-holder\\\">\\n        <canvas id=\\\"${id}-canvas\\\" ref=\\\"chartcanvas\\\" width=\\\"${width}\\\" height=\\\"${height}\\\"></canvas>\\n    </div>\\n</template>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMtYmFycGxvdC5odG1sLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F1cmVsaWEtYm9keWxpZ2h0LXBsdWdpbi9kaXN0L25hdGl2ZS1tb2R1bGVzL2VsZW1lbnRzL2NoYXJ0anMtYmFycGxvdC5odG1sP2M3OWYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZW1wbGF0ZSBiaW5kYWJsZT1cXFwid2lkdGgsaGVpZ2h0XFxcIj5cXG4gICAgPGRpdiBpZD1cXFwiY2FudmFzLWhvbGRlclxcXCI+XFxuICAgICAgICA8Y2FudmFzIGlkPVxcXCIke2lkfS1jYW52YXNcXFwiIHJlZj1cXFwiY2hhcnRjYW52YXNcXFwiIHdpZHRoPVxcXCIke3dpZHRofVxcXCIgaGVpZ2h0PVxcXCIke2hlaWdodH1cXFwiPjwvY2FudmFzPlxcbiAgICA8L2Rpdj5cXG48L3RlbXBsYXRlPlwiOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-barplot.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-fixed":
/*!*********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-fixed.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.ChartjsFixed = void 0;\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _chartjs = __webpack_require__(/*! ./chartjs */ \"aurelia-bodylight-plugin/elements/chartjs\");\n\nvar _lodash = _interopRequireDefault(__webpack_require__(/*! lodash */ \"LvDl\"));\n\nvar _chart = _interopRequireDefault(__webpack_require__(/*! chart.js */ \"MO+k\"));\n\nvar _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n/**\n * shows fixed curve at time -\n * on X is 0,1,2,3,4,5,6,7,8,9\n * on Y is values from FMU variables from refindex to refvalues\n */\nlet ChartjsFixed = (_dec = (0, _aureliaTemplating.useView)('./chartjs.html'), _dec(_class = (_class2 = class ChartjsFixed extends _chartjs.Chartjs {\n  //DOM id of FMU component to listen fmu-data event\n  //labels of datasets\n  //variable index in fmu data\n  //how many variables to show from fmu data\n  //type of chart - is overwritten to 'line'\n  //if defined chartjs y axis from min\n  //if defined chartjs y axis to max\n  //howmany datasets to remember\n  //from whic colorindex to start, 0 blue, 1 red, 2 green,...\n  //extra dataset with only one point is drawn\n  //@bindable cachesize;\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"type\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"min\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"max\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"maxdata\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"colorindex\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"highlightindex\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"refpointindex\", _descriptor11, this);\n\n    this.currentcolor = void 0;\n    this.previouscolor = void 0;\n    this.previouscolor2 = void 0;\n    this.currentcolorb = void 0;\n    this.previouscolorb = void 0;\n    this.previouscolorb2 = void 0;\n    this.currentdataset = 0;\n\n    this.handleValueChange = e => {\n      //let j = this.currentdataset;\n      //all values from refindex to one dataset - as one curve\n      //if (!this.chart.data.datasets[j]) {\n      //do initialize dataset first\n      let newdataset = {\n        data: e.detail.data.slice(this.refindex, this.refindex + this.refvalues),\n        label: \"\",\n        backgroundColor: this.currentcolor,\n        borderColor: this.currentcolor,\n        borderWidth: 1,\n        pointRadius: 1,\n        fill: false\n      }; //index to blure color\n\n      let colorindex = 1; //decide whether to add point\n\n      if (this.refpointindex) {\n        let newpointdataset = {\n          data: [e.detail.data[this.refpointindex]],\n          label: \"\",\n          backgroundColor: this.currentcolor,\n          borderColor: this.currentcolor,\n          borderWidth: 1,\n          pointRadius: 0,\n          fill: false\n        };\n        this.chart.data.datasets[0] = newdataset;\n        this.chart.data.datasets.unshift(newpointdataset); //blur color from inde 2, [0] is point [1] is dataset\n\n        colorindex = 2;\n      } else {\n        this.chart.data.datasets.unshift(newdataset);\n      }\n\n      if (this.chart.data.datasets[colorindex]) {\n        this.chart.data.datasets[colorindex].backgroundColor = this.previouscolor;\n        this.chart.data.datasets[colorindex].borderColor = this.previouscolor;\n      }\n\n      if (this.chart.data.datasets[colorindex + 1]) {\n        this.chart.data.datasets[colorindex + 1].backgroundColor = this.previouscolor2;\n        this.chart.data.datasets[colorindex + 1].borderColor = this.previouscolor2;\n      } //do apply operation on each element of array\n\n\n      if (this.operation && this.operation[0]) {\n        this.chart.data.datasets[0].data.map(item => {\n          return this.operation[0](item);\n        });\n\n        if (this.refpointindex) {\n          //do conversion on [1] too\n          this.chart.data.datasets[1].data.map(item => {\n            return this.operation[0](item);\n          });\n        }\n      }\n\n      if (this.chart.data.datasets.length > this.maxdata) {\n        this.chart.data.datasets.pop();\n      }\n\n      this.updatechart();\n    };\n  }\n\n  bind() {\n    super.bind();\n    this.type = 'line';\n    this.options.legend.display = false;\n    let dataset = [];\n    dataset.push({\n      data: [],\n      label: \"\",\n      backgroundColor: this.selectColor(0),\n      borderColor: this.selectColor(0),\n      borderWidth: 1,\n      pointRadius: 1,\n      fill: false\n    });\n    this.data = {\n      labels: Array.from(Array(this.refvalues), (_, x) => x + 1),\n      //returns [1,2,3,..,refvalues]\n      datasets: dataset\n    };\n    if (typeof this.colorindex === 'string') this.colorindex = parseInt(this.colorindex, 10); //initialize colors for each dataset\n\n    this.currentcolor = this.selectColor(this.colorindex, 65);\n    this.previouscolor = this.selectColor(this.colorindex, 65, 75);\n    this.previouscolor2 = this.selectColor(this.colorindex, 65, 95);\n    this.currentcolorb = this.selectColor(this.colorindex + 1, 65);\n    this.previouscolorb = this.selectColor(this.colorindex + 1, 65, 75);\n    this.previouscolorb2 = this.selectColor(this.colorindex + 1, 65, 95);\n    this.refpointindex = parseInt(this.refpointindex, 10);\n\n    if (this.refpointindex) {\n      this.options.refpointplugin = {\n        index: this.refpointindex - this.refindex\n      };\n    }\n  }\n\n  attached() {\n    if (this.refpointindex) {\n      _chart.default.pluginService.register({\n        id: 'custom_lines to ref point',\n        afterDraw: chart => {\n          if (chart.config.options.refpointplugin) {\n            const ctx = chart.canvas.getContext('2d');\n            ctx.save(); // draw line\n\n            let meta1 = chart.getDatasetMeta(0); //let meta2 = chart.getDatasetMeta(1);\n\n            if (meta1) {\n              ctx.beginPath();\n\n              try {\n                //expect that data[0] contains point data[1] lines\n                let x = meta1.data[0]._model.x;\n                let y = meta1.data[0]._model.y;\n                let value = chart.data.datasets[0].data[0];\n\n                if (isNaN(value)) {\n                  //value is object x, y\n                  ctx.moveTo(0, y);\n                  ctx.lineTo(x, y);\n                  ctx.lineTo(x, chart.height);\n                  ctx.lineWidth = 1;\n                  ctx.strokeStyle = '#ff9c9c';\n                  ctx.stroke();\n                  ctx.font = \"10px Arial\";\n                  if (value.y) ctx.fillText(value.y.toPrecision(4), x, y);\n                } else {\n                  //only y value is there, draw line\n                  ctx.moveTo(0, y);\n                  ctx.lineTo(chart.width, y);\n                  ctx.lineWidth = 1;\n                  ctx.strokeStyle = '#ff9c9c';\n                  ctx.stroke();\n                  ctx.font = \"10px Arial\";\n                  ctx.fillStyle = \"black\";\n                  ctx.fillText(value.toPrecision(4), x, y);\n                }\n              } catch (e) {//console.warn('error, meta1:',meta1);\n              }\n\n              ctx.restore();\n            }\n          }\n        }\n      });\n    }\n\n    super.attached();\n    if (this.refpointindex) console.log('chartjs fixed debug: chart:', this.chart);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"refindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"refvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"type\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"min\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"max\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"maxdata\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 3;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"colorindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, \"highlightindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, \"refpointindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexports.ChartjsFixed = ChartjsFixed;\n//# sourceMappingURL=chartjs-fixed.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-fixed\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-fixed-xy":
/*!************************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-fixed-xy.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.ChartjsFixedXy = void 0;\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _chartjsFixed = __webpack_require__(/*! ./chartjs-fixed */ \"aurelia-bodylight-plugin/elements/chartjs-fixed\");\n\nvar _chartjs = __webpack_require__(/*! ./chartjs */ \"aurelia-bodylight-plugin/elements/chartjs\");\n\nvar _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n/**\n * shows fixed curve at time -\n * on X isvalues from FMU variables from xrefindex to xrefvalues\n * on Y is values from FMU variables from refindex to refvalues\n * convertors for x and y axis separated by ;\n * refindex, refvalues for y values\n * refindex2, refvalues2 for second curve in y values;\n * xrefindex,xrefvalues for x values\n * refpointindex\n */\nlet ChartjsFixedXy = (_dec = (0, _aureliaTemplating.useView)('./chartjs.html'), _dec(_class = (_class2 = class ChartjsFixedXy extends _chartjsFixed.ChartjsFixed {\n  //@bindable cachesize;\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"refindex2\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"refvalues2\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"type\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"min\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"max\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"maxdata\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"xrefindex\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"xrefvalues\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"xtofixed\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"refpointindex\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"xrefpointindex\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"showline\", _descriptor16, this);\n\n    this.currentdataset = 0;\n\n    this.handleValueChange = e => {\n      //let j = this.currentdataset;\n      //all values from refindex to one dataset - as one curve\n      let ydata = e.detail.data.slice(this.refindex, this.refindex + this.refvalues);\n      let y2data = [];\n      let xdata = e.detail.data.slice(this.xrefindex, this.xrefindex + this.xrefvalues);\n      let xpoint = 0;\n      let ypoint = 0;\n      let y2point = 0; //point to highlight\n\n      if (this.refpointindex) {\n        xpoint = e.detail.data[this.xrefpointindex];\n        ypoint = e.detail.data[this.refpointindex];\n      } //convertors\n\n\n      if (this.operation && this.operation[0] && this.operation[1]) {\n        xdata = xdata.map(x => this.operation[0](x));\n        ydata = ydata.map(y => this.operation[1](y));\n\n        if (this.refpointindex) {\n          xpoint = this.operation[0](xpoint);\n          ypoint = this.operation[1](ypoint);\n        }\n      }\n\n      let data = [];\n\n      for (let i = 0; i < ydata.length; i++) {\n        data.push({\n          x: xdata[i],\n          y: ydata[i]\n        });\n      }\n\n      let data2 = [{\n        x: xpoint,\n        y: ypoint\n      }]; //set labels to x axis\n\n      if (this.xtofixed >= 0) {\n        let labeldata = xdata.map(x => x.toFixed(this.xtofixed));\n        this.chart.data.labels = labeldata; //console.log('')\n      } //set data xy to chart struct\n      //do initialize dataset first\n\n\n      let newdataset = {\n        data: data,\n        label: \"\",\n        backgroundColor: this.currentcolor,\n        borderColor: this.currentcolor,\n        borderWidth: 1,\n        pointRadius: 1,\n        fill: false,\n        showLine: this.showline\n      };\n      let colorindex = 1;\n\n      if (this.refpointindex) {\n        let newpointdataset = {\n          data: data2,\n          label: \"\",\n          backgroundColor: this.currentcolor,\n          borderColor: this.currentcolor,\n          borderWidth: 1,\n          pointRadius: 2,\n          fill: false\n        };\n        this.chart.data.datasets[0] = newdataset;\n        this.chart.data.datasets.unshift(newpointdataset);\n      } else {\n        this.chart.data.datasets.unshift(newdataset);\n      }\n\n      if (this.chart.data.datasets[colorindex]) {\n        this.chart.data.datasets[colorindex].backgroundColor = this.previouscolor;\n        this.chart.data.datasets[colorindex].borderColor = this.previouscolor;\n      }\n\n      if (this.chart.data.datasets[colorindex + 1]) {\n        this.chart.data.datasets[colorindex + 1].backgroundColor = this.previouscolor2;\n        this.chart.data.datasets[colorindex + 1].borderColor = this.previouscolor2;\n      }\n\n      if (this.chart.data.datasets.length > this.maxdata) {\n        this.chart.data.datasets.pop();\n      }\n\n      if (this.refindex2) {\n        y2data = e.detail.data.slice(this.refindex2, this.refindex2 + this.refvalues2); //if (this.refpointindex2) y2point = e.detail.data[this.ref2pointindex];\n\n        if (this.operation) {\n          y2data = y2data.map(y => this.operation[1](y)); //if (this.refpointindex2) y2point = this.operation[1](y2point);\n        } //operation[1] or operation[2]?\n\n\n        let datab = [];\n\n        for (let i = 0; i < y2data.length; i++) {\n          datab.push({\n            x: xdata[i],\n            y: y2data[i]\n          });\n        }\n\n        let datab2 = [{\n          x: xpoint,\n          y: y2point\n        }];\n        let datasetb = {\n          data: datab,\n          label: \"\",\n          backgroundColor: this.currentcolorb,\n          borderColor: this.currentcolorb,\n          borderWidth: 1,\n          pointRadius: 1,\n          fill: false,\n          showLine: this.showline\n        };\n        this.chart.data.datasets.splice(this.refpointindex ? 2 : 1, 0, datasetb);\n\n        if (this.chart.data.datasets[colorindex + 3]) {\n          this.chart.data.datasets[colorindex + 3].backgroundColor = this.previouscolorb2;\n          this.chart.data.datasets[colorindex + 3].borderColor = this.previouscolorb2;\n        }\n\n        if (this.chart.data.datasets.length > this.maxdata) this.chart.data.datasets.pop();\n      }\n\n      this.updatechart();\n    };\n  }\n\n  bind() {\n    super.bind();\n    this.type = 'scatter';\n    this.data.labels = [];\n    this.xrefindex = parseInt(this.xrefindex, 10);\n    if (typeof this.maxdata === 'string') this.maxdata = parseInt(this.maxdata);\n    if (!this.xrefindex) console.warn('xrefindex is not specified');\n    this.xrefvalues = parseInt(this.xrefvalues, 10);\n    if (this.xrefvalues !== this.refvalues) console.warn('the value of \"xrefvalues\" must be equal to \"refvalues\"');\n    this.xrefpointindex = parseInt(this.xrefpointindex, 10);\n\n    if (typeof this.showline === 'string') {\n      this.showline = this.showline === 'true';\n    }\n\n    if (this.refindex2) {\n      this.refindex2 = (0, _chartjs.myParseInt)(this.refindex2, 10);\n      if (this.refvalues2) this.refvalues2 = parseInt(this.refvalues2, 10);else {\n        console.warn('chartjs-fixed-xy refvalues2 not defined');\n        this.refindex2 = null;\n      }\n    }\n  }\n\n  attached() {\n    super.attached();\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"refindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"refvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"refindex2\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"refvalues2\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"type\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"min\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"max\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, \"maxdata\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 8;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, \"xrefindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, \"xrefvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, \"xtofixed\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, \"refpointindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, \"xrefpointindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, \"showline\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return true;\n  }\n})), _class2)) || _class);\nexports.ChartjsFixedXy = ChartjsFixedXy;\n//# sourceMappingURL=chartjs-fixed-xy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-fixed-xy\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-fixed-xy.html":
/*!**************************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-fixed-xy.html ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template></template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMtZml4ZWQteHkuaHRtbC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWJvZHlsaWdodC1wbHVnaW4vZGlzdC9uYXRpdmUtbW9kdWxlcy9lbGVtZW50cy9jaGFydGpzLWZpeGVkLXh5Lmh0bWw/YTIyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHRlbXBsYXRlPjwvdGVtcGxhdGU+XFxuXCI7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-fixed-xy.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-fixed.html":
/*!***********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-fixed.html ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template></template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMtZml4ZWQuaHRtbC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWJvZHlsaWdodC1wbHVnaW4vZGlzdC9uYXRpdmUtbW9kdWxlcy9lbGVtZW50cy9jaGFydGpzLWZpeGVkLmh0bWw/NTc1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHRlbXBsYXRlPjwvdGVtcGxhdGU+XFxuXCI7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-fixed.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-stacked":
/*!***********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-stacked.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.ChartjsStacked = void 0;\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _chartjs = __webpack_require__(/*! ./chartjs */ \"aurelia-bodylight-plugin/elements/chartjs\");\n\nvar _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n/**\n * shows stacked box -\n * on X is group stack 0 or stack 1\n * on Y is values from FMU variables from refindexes\n */\nlet ChartjsStacked = (_dec = (0, _aureliaTemplating.useView)('./chartjs.html'), _dec(_class = (_class2 = class ChartjsStacked extends _chartjs.Chartjs {\n  constructor() {\n    super(); //stacked box contains data, each box in different dataset, group is\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"type\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"min\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"max\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"maxdata\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"stacks\", _descriptor9, this);\n\n    this.handleValueChange = e => {\n      for (let j = 0; j < this.refindices.length; j++) {\n        let mydata = e.detail.data[this.refindices[j]]; //do conversion if operation is defined\n\n        if (this.operation && this.operation[j]) mydata = this.operation[j](mydata);\n\n        if (!this.chart.data.datasets[j]) {\n          //do initialize dataset first\n          this.chart.data.datasets.push({\n            data: [mydata],\n            //data is array\n            label: this.chlabels[j],\n            backgroundColor: this.selectColor(j),\n            stack: this.stack[j]\n          });\n        } else {\n          this.chart.data.datasets[j].data[0] = mydata; //data is array 0 item\n        }\n      }\n\n      this.updatechart();\n    };\n  }\n\n  bind() {\n    super.bind();\n    this.type = \"bar\";\n    this.options.scales.xAxes = [{\n      stacked: true\n    }];\n    this.options.scales.yAxes = [{\n      stacked: true\n    }]; //reset labels\n\n    this.data.labels = [\"data\"]; //allows refindices to be defined in refindex separated by comma ,\n\n    if (Array.isArray(this.refindex)) {\n      this.refindices = this.refindex; //define stack array for groups, contains descriptive string for group\n    } else {\n      //or refindices will be refindex, refindex+1, ...\n      this.refindices = [];\n\n      for (let i = 0; i < this.refvalues; i++) this.refindices.push(this.refindex + i);\n    }\n\n    if (this.stacks) {\n      this.stack = this.stacks.split(',');\n    } else {\n      this.stack = new Array(this.refindices.length).fill('stack 0');\n    } //init dataset data and labels = 0\n\n\n    this.data.datasets = [];\n\n    for (let j = 0; j < this.refindices.length; j++) {\n      //do initialize dataset first\n      this.data.datasets.push({\n        data: [0],\n        //data is array\n        label: this.chlabels[j],\n        backgroundColor: this.selectColor(j),\n        stack: this.stack[j]\n      });\n    }\n  }\n\n  attached() {\n    super.attached();\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"refindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"refvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"type\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"min\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"max\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"maxdata\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 3;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"stacks\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexports.ChartjsStacked = ChartjsStacked;\n//# sourceMappingURL=chartjs-stacked.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-stacked\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-stacked.html":
/*!*************************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-stacked.html ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template></template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMtc3RhY2tlZC5odG1sLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F1cmVsaWEtYm9keWxpZ2h0LXBsdWdpbi9kaXN0L25hdGl2ZS1tb2R1bGVzL2VsZW1lbnRzL2NoYXJ0anMtc3RhY2tlZC5odG1sPzUyM2EiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZW1wbGF0ZT48L3RlbXBsYXRlPlxcblwiOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-stacked.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-time":
/*!********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-time.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.ChartjsTime = void 0;\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _chartjs = __webpack_require__(/*! ./chartjs */ \"aurelia-bodylight-plugin/elements/chartjs\");\n\nvar _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n//import {PLATFORM} from 'aurelia-pal';\n//@customElement\n//@useView(PLATFORM.moduleName('./bdl-chartjs.html'))\nlet ChartjsTime = (_dec = (0, _aureliaTemplating.useView)('./chartjs.html'), _dec(_class = (_class2 = class ChartjsTime extends _chartjs.Chartjs {\n  // starting  index - if moooor indices, separate by comma\n  //number of values from refindex - only if one refindex is   defined\n  constructor() {\n    super(); //this.type = 'line';\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"type\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"min\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"max\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"minichart\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"colorindex\", _descriptor9, this);\n\n    this.refindices = void 0;\n\n    this.handleValueChange = e => {\n      //e.detail do not reallocate - using same buffer, thus slicing to append to data array\n      //let datapoints =e.detail.data.slice(this.refindex, this.refendindex);\n      let j = 0;\n\n      function handleIndex(i) {\n        {\n          //adds data to datasets\n          //if convert operation is defined as array then convert\n          if (this.operation && this.operation[j]) this.chart.data.datasets[j].data.push(this.operation[j](e.detail.data[i])); //else push data directly\n          else this.chart.data.datasets[j].data.push(e.detail.data[i]);\n\n          if (this.chart.data.datasets[j].data.length > this.maxdata) {\n            //console.log('shifting dataset chartjs-time', this.chart.data.datasets[j].data);\n            this.chart.data.datasets[j].data.shift();\n          }\n\n          j++;\n        }\n      }\n\n      if (this.refindices) for (let i of this.refindices) handleIndex.call(this, i);else for (let i = this.refindex; i < this.refindex + this.refvalues; i++) handleIndex.call(this, i);\n      this.chart.data.labels.push(e.detail.time);\n\n      if (this.chart.data.labels.length > this.maxdata) {\n        this.chart.data.labels.shift();\n\n        if (this.sectionid) {\n          //shift sections\n          if (this.chart.config.options.section[0].index === 0) this.chart.config.options.section.shift(); //decrement all indices in sections\n\n          for (let i = 0; i < this.chart.config.options.section.length; i++) this.chart.config.options.section[i].index -= 1;\n        }\n      } //shift - remove first element if data is too big\n      //console.log('chartjs handlevaluechange() chart.data.datasets[0].data', this.chart.data.datasets[0].data);\n\n\n      this.updatechart();\n    };\n  }\n  /**\n   * sets all tim-series specific options for chartjs\n   */\n\n\n  bind() {\n    super.bind(); //done in super\n    //this.chlabels = this.labels.split(','); //labels for each dataset\n    //this.colors = [];\n\n    let datasets = [];\n    let mydata1 = this.initialdata.split(';');\n\n    for (let i = 0; i < this.refvalues + 1; i++) {\n      //mydata[0] == timelabels in x axis, mydata[1..n] ar in y axis\n      let mydata2 = mydata1[i] ? mydata1[i].split(',') : [];\n      this.mydata[i] = mydata2.map(x => {\n        return parseFloat(x);\n      }); //console.log('chartjstime mydata i',this.mydata[i]);\n    } //initialize colors for each dataset\n\n\n    for (let i = 0; i < this.refvalues; i++) {\n      //this.colors.push(this.selectColor(i));\n      datasets.push({\n        data: this.mydata[i + 1],\n        label: this.chlabels[i],\n        backgroundColor: this.selectColor(i + this.colorindex),\n        borderColor: this.selectColor(i + this.colorindex),\n        borderWidth: 1,\n        pointRadius: 1,\n        fill: false\n      }); //timelabels.push(i);\n    }\n\n    this.data = {\n      labels: this.mydata[0],\n      datasets: datasets\n    };\n    if (this.verticalline) this.type = 'LineWithLine';else this.type = 'line';\n  }\n\n  attached() {\n    super.attached();\n  }\n\n  detached() {\n    super.detached();\n  }\n\n  resetdata() {\n    //super.resetdata();\n    for (let j = 0; j < this.refvalues; j++) this.chart.data.datasets[j].data = [];\n\n    this.chart.data.labels = [];\n    this.updatechart();\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"refindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"refvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"type\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"min\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"max\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"minichart\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"colorindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexports.ChartjsTime = ChartjsTime;\n//# sourceMappingURL=chartjs-time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-time\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-time.html":
/*!**********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-time.html ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template><!-- not used, inherited from chartjs--></template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMtdGltZS5odG1sLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F1cmVsaWEtYm9keWxpZ2h0LXBsdWdpbi9kaXN0L25hdGl2ZS1tb2R1bGVzL2VsZW1lbnRzL2NoYXJ0anMtdGltZS5odG1sPzZjNzIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjx0ZW1wbGF0ZT48IS0tIG5vdCB1c2VkLCBpbmhlcml0ZWQgZnJvbSBjaGFydGpzLS0+PC90ZW1wbGF0ZT5cXG5cIjsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-time.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-xy":
/*!******************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-xy.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.ChartjsXy = void 0;\n\nvar _chartjsTime = __webpack_require__(/*! ./chartjs-time */ \"aurelia-bodylight-plugin/elements/chartjs-time\");\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n//import {PLATFORM} from 'aurelia-pal';\n//@useView(PLATFORM.moduleName('./bdl-chartjs.html'))\nlet ChartjsXy = (_dec = (0, _aureliaTemplating.useView)('./chartjs.html'), _dec(_class = (_class2 = class ChartjsXy extends _chartjsTime.ChartjsTime {\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"type\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"labelx\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"labely\", _descriptor7, this);\n\n    this.showlines = true;\n\n    this.handleValueChange = e => {\n      //e.detail do not reallocate - using same buffer, thus slicing to append to data array\n      //let datapoints =e.detail.data.slice(this.refindex, this.refendindex);\n      let j = 0; //put first value on x axis, others on y axis other values\n\n      for (let i = 1; i < this.refvalues; i++) {\n        if (this.operation && this.operation[i]) this.chart.data.datasets[j].data.push({\n          x: this.operation[0](e.detail.data[this.refindex]),\n          y: this.operation[i](e.detail.data[this.refindex + i])\n        });else this.chart.data.datasets[j].data.push({\n          x: e.detail.data[this.refindex],\n          y: e.detail.data[this.refindex + i]\n        }); //console.log('adding from data[], i, data[i]', e.detail.data, i, e.detail.data[i]);\n\n        if (this.chart.data.datasets[j].data.length > this.maxdata) {\n          //console.log('shifting dataset chartjs-xy', this.chart.data.datasets[j].data);\n          this.chart.data.datasets[j].data.shift();\n        }\n\n        j++;\n      } //console.log('chartjs-xy handlevaluechange datasets, e.detail.data',this.chart.data.datasets, e.detail.data);\n\n\n      this.updatechart();\n    };\n  }\n\n  bind() {\n    super.bind();\n    let datasets = [];\n    let mydata1 = this.initialdata.split(';'); //initialize x and y, x is first dataset, y is al the rest\n\n    this.mydata = [];\n\n    for (let i = 0; i < this.refvalues; i++) {\n      let mydata2 = mydata1[i] ? mydata1[i].split(',') : [];\n\n      if (i === 0) {\n        //parse x\n        this.mydata[0] = mydata2.map((x, index) => {\n          return parseFloat(x);\n        });\n      } else {\n        //parse all y\n        this.mydata[i] = mydata2.map((yy, index) => {\n          return {\n            x: this.mydata[0][index],\n            y: parseFloat(yy)\n          };\n        });\n      }\n    } //this.colors already set in super()\n\n\n    for (let i = 1; i < this.refvalues; i++) {\n      datasets.push({\n        data: this.mydata[i],\n        label: this.chlabels[i],\n        backgroundColor: this.colors[i - 1],\n        borderColor: this.colors[i - 1],\n        fill: false,\n        showLine: this.showlines,\n        borderWidth: 1,\n        refvalues: this.refvalues\n      });\n    } //add additional data, all after ; is taken as x values separated by , of initial curve,\n    // after ; is y values of initial curve separated by ,\n    // if more curves then another ;. E.g. initialdata=\";;0,0.00015;0,28000;0,0.00015;0,1400\"\n    // -> line from 0 0 to 0.0015 28000 and from 0 0 to 00015 1400\n\n\n    if (mydata1.length > this.refvalues) {\n      let j = this.refvalues;\n\n      for (let i = this.refvalues; i < mydata1.length; i += 2) {\n        let mydata2 = mydata1[i].split(',');\n        let mydata3 = mydata1[i + 1].split(',');\n        this.mydata[j] = mydata3.map((yy, index) => {\n          return {\n            x: parseFloat(mydata2[index]),\n            y: parseFloat(yy)\n          };\n        });\n        datasets.push({\n          data: this.mydata[j],\n          backgroundColor: this.selectColor(i),\n          borderColor: this.selectColor(i),\n          fill: false,\n          showLine: this.showlines\n        });\n        j++;\n      }\n    }\n\n    this.data = {\n      datasets: datasets\n    };\n    this.type = 'scatter';\n    this.options.tooltips.mode = 'nearest';\n    this.options.elements = {\n      point: {\n        radius: this.customRadius,\n        display: true\n      }\n    };\n  }\n\n  customRadius(context) {\n    let last = context.dataIndex === context.dataset.data.length - 1;\n    let inrefvalues = context.datasetIndex < context.dataset.refvalues; //dataset is in refvalues - changed by simulator\n\n    if (inrefvalues) return last ? 3 : 1;\n    return 1; //dataset is fixed - background borders\n  }\n\n  resetdata() {\n    let j = 0;\n\n    for (let i = this.refindex + 1; i < this.refindex + this.refvalues; i++) {\n      this.chart.data.datasets[j].data = [];\n      j++;\n    }\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"refindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"refvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"type\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"labelx\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"labely\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexports.ChartjsXy = ChartjsXy;\n//# sourceMappingURL=chartjs-xy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-xy\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-xy-points":
/*!*************************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-xy-points.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.ChartjsXyPoints = void 0;\n\nvar _chartjsXy = __webpack_require__(/*! ./chartjs-xy */ \"aurelia-bodylight-plugin/elements/chartjs-xy\");\n\nvar _aureliaTemplating = __webpack_require__(/*! aurelia-templating */ \"hij8\");\n\nvar _chart = _interopRequireDefault(__webpack_require__(/*! chart.js */ \"MO+k\"));\n\nvar _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nlet ChartjsXyPoints = (_dec = (0, _aureliaTemplating.useView)('./chartjs-xy-points.html'), _dec(_class = (_class2 = class ChartjsXyPoints extends _chartjsXy.ChartjsXy {\n  constructor() {\n    super();\n\n    _initializerDefineProperty(this, \"fromid\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"labels\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"refindex\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"refvalues\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"min\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"max\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"xmin\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"xmax\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"atitle\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"rtitle\", _descriptor10, this);\n\n    this.showlines = false;\n\n    _initializerDefineProperty(this, \"convertors\", _descriptor11, this);\n\n    this.index = 0;\n\n    this.handleValueChange = e => {\n      //e.detail do not reallocate - using same buffer, thus slicing to append to data array\n      let rawdata = e.detail.data.slice(this.refindex, this.refendindex); //do value conversion based on convertors\n\n      if (this.operation) {\n        for (let i = 0; i < rawdata.length; i++) {\n          //if particular operation is defined\n          if (this.operation[i]) rawdata[i] = this.operation[i](rawdata[i]);\n        }\n      }\n\n      let j = 0; //put each first value on x axis, second on y axis\n\n      for (let i = 1; i < this.refvalues; i = i + 2) {\n        //remember only current x,y value - on the index\n        this.chart.data.datasets[j].data[this.index] = {\n          x: rawdata[i - 1],\n          y: rawdata[i]\n        }; //increment dataset - if more dataset are available\n\n        j++;\n      }\n\n      this.updatechart();\n    };\n  }\n\n  bind() {\n    super.bind();\n    console.log('chartjs xy point bind()');\n\n    if (this.xmin) {\n      //sets yscale min\n      if (!this.options) this.options = {};\n      if (!this.options.scales) this.options.scales = {};\n      if (!this.options.scales.xAxes) this.options.scales.xAxes = [{}]; //chartjs 2.9.4\n\n      if (!this.options.scales.xAxes[0].ticks) this.options.scales.xAxes[0].ticks = {}; //chartjs 2.9.4\n\n      this.options.scales.xAxes[0].ticks.min = parseFloat(this.xmin);\n    }\n\n    if (this.xmax) {\n      //sets yscale max\n      if (!this.options) this.options = {};\n      if (!this.options.scales) this.options.scales = {};\n      if (!this.options.scales.xAxes) this.options.scales.xAxes = [{}]; //chartjs 2.9.4\n\n      if (!this.options.scales.xAxes[0].ticks) this.options.scales.xAxes[0].ticks = {}; //chartjs 2.9.4\n\n      this.options.scales.xAxes[0].ticks.max = parseFloat(this.xmax); //if (this.min) this.options.scales.yAxes[0].ticks.stepSize = (this.options.scales.yAxes[0].ticks.max - this.options.scales.yAxes[0].ticks.min) / 10;\n    } //customize tooltip display\n\n\n    this.options.tooltips.callbacks = {\n      label: function (tooltipItem, data) {\n        let label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n        if (label) {\n          label += ': ';\n        }\n\n        label += '(' + tooltipItem.xLabel.toPrecision(3) + ',' + tooltipItem.yLabel.toPrecision(3) + ')';\n        return label;\n      },\n      footer: function (tooltipItem, data) {\n        if (data.datasets.length < 2) return tooltipItem[0].yLabel;\n        let label = []; //label.push('| ' + data.datasets[0].data[tooltipItem[0].index].y.toPrecision(3) + ' - ' + data.datasets[1].data[tooltipItem[0].index].y.toPrecision(3) + ' |');\n\n        label.push('Δ ' + Math.abs(data.datasets[0].data[tooltipItem[0].index].y - data.datasets[1].data[tooltipItem[0].index].y).toPrecision(3));\n        return label;\n      }\n    };\n    this.type = 'scatter';\n    this.plugins = null;\n    this.options.XYPlugin = true;\n  }\n\n  attached() {\n    //register horizontal line drawing, shows difference line between appropriate points from dataset0 and dataset1\n    _chart.default.pluginService.register({\n      beforeDraw: function (chart, ease) {\n        if (chart.config.options.XYPlugin && chart.tooltip._active && chart.tooltip._active.length) {\n          let activePoint = chart.tooltip._active[0]; //console.log('chart horizontal line debug chart activepoint:', activePoint);\n\n          let ctx = chart.ctx;\n          let y = activePoint.tooltipPosition().y; //let topY = this.chart.legend.bottom;\n\n          let leftX = chart.chartArea.left; //let bottomY = this.chart.chartArea.bottom;\n\n          let rightX = chart.chartArea.right; // draw line\n\n          ctx.save();\n          ctx.beginPath();\n          ctx.moveTo(leftX, y);\n          ctx.lineTo(rightX, y);\n          ctx.lineWidth = 1;\n          ctx.strokeStyle = '#ff9c9c';\n          ctx.stroke();\n          let meta1 = chart.getDatasetMeta(0);\n          let meta2 = chart.getDatasetMeta(1);\n\n          if (meta1) {\n            //draw second line\n            //console.log('plugin meta', chart, meta);\n            let secondy2 = meta1.data[activePoint._index]._model.y;\n            let secondy = secondy2 !== y ? secondy2 : meta2.data[activePoint._index]._model.y; //let stop  = meta.data[chart.config.options.section[i].index]._model.x;\n\n            ctx.beginPath();\n            ctx.moveTo(leftX, secondy);\n            ctx.lineTo(rightX, secondy);\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#ff9c9c';\n            ctx.stroke();\n            let x = activePoint.tooltipPosition().x;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            let sy = y > secondy ? 3 : -3; //small arrow up\n\n            ctx.lineTo(x - sy, y - sy);\n            ctx.lineTo(x + sy, y - sy); //line\n\n            ctx.lineTo(x, y);\n            ctx.lineTo(x, secondy); //small arrow down\n\n            ctx.lineTo(x - sy, secondy + sy);\n            ctx.lineTo(x + sy, secondy + sy);\n            ctx.lineTo(x, secondy);\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = '#7b7bff';\n            ctx.stroke();\n          }\n\n          ctx.restore();\n        }\n      }\n    });\n\n    super.attached();\n  }\n\n  addpoint() {\n    this.index++;\n  }\n\n  removepoint() {\n    if (this.index > 0) this.index--;\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"fromid\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"labels\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"refindex\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"refvalues\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"min\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"max\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"xmin\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"xmax\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"atitle\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 'Add Point';\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, \"rtitle\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 'Remove Point';\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, \"convertors\", [_aureliaTemplating.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexports.ChartjsXyPoints = ChartjsXyPoints;\n//# sourceMappingURL=chartjs-xy-points.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-xy-points\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-xy-points.html":
/*!***************************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-xy-points.html ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template bindable=\\\"width,height\\\">\\n    <div id=\\\"canvas-holder\\\">\\n        <div class=\\\"w3-small\\\">\\n            <i class=\\\"fa fa-download fa-flip-horizontal\\\" title=\\\"download csv data, row=data in time point\\\"\\n               click.delegate=\\\"download()\\\"> </i>\\n            <i class=\\\"fa fa-download fa-rotate-270\\\" title=\\\"download flat csv data, row=all data for variable\\\"\\n               click.delegate=\\\"downloadflat()\\\"> </i>\\n\\n        </div>\\n        <div style=\\\"margin-top: -1.5em\\\">\\n            <canvas id=\\\"${id}-canvas\\\" ref=\\\"chartcanvas\\\" width=\\\"${width}\\\" height=\\\"${height}\\\"></canvas>\\n        </div>\\n        <button click.delegate=\\\"addpoint()\\\">${atitle}</button><button click.delegate=\\\"removepoint()\\\">${rtitle}</button>\\n    </div>\\n</template>\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMteHktcG9pbnRzLmh0bWwuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2Rpc3QvbmF0aXZlLW1vZHVsZXMvZWxlbWVudHMvY2hhcnRqcy14eS1wb2ludHMuaHRtbD8xNDMyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGUgYmluZGFibGU9XFxcIndpZHRoLGhlaWdodFxcXCI+XFxuICAgIDxkaXYgaWQ9XFxcImNhbnZhcy1ob2xkZXJcXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwidzMtc21hbGxcXFwiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1kb3dubG9hZCBmYS1mbGlwLWhvcml6b250YWxcXFwiIHRpdGxlPVxcXCJkb3dubG9hZCBjc3YgZGF0YSwgcm93PWRhdGEgaW4gdGltZSBwb2ludFxcXCJcXG4gICAgICAgICAgICAgICBjbGljay5kZWxlZ2F0ZT1cXFwiZG93bmxvYWQoKVxcXCI+IDwvaT5cXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZmEgZmEtZG93bmxvYWQgZmEtcm90YXRlLTI3MFxcXCIgdGl0bGU9XFxcImRvd25sb2FkIGZsYXQgY3N2IGRhdGEsIHJvdz1hbGwgZGF0YSBmb3IgdmFyaWFibGVcXFwiXFxuICAgICAgICAgICAgICAgY2xpY2suZGVsZWdhdGU9XFxcImRvd25sb2FkZmxhdCgpXFxcIj4gPC9pPlxcblxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IHN0eWxlPVxcXCJtYXJnaW4tdG9wOiAtMS41ZW1cXFwiPlxcbiAgICAgICAgICAgIDxjYW52YXMgaWQ9XFxcIiR7aWR9LWNhbnZhc1xcXCIgcmVmPVxcXCJjaGFydGNhbnZhc1xcXCIgd2lkdGg9XFxcIiR7d2lkdGh9XFxcIiBoZWlnaHQ9XFxcIiR7aGVpZ2h0fVxcXCI+PC9jYW52YXM+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxidXR0b24gY2xpY2suZGVsZWdhdGU9XFxcImFkZHBvaW50KClcXFwiPiR7YXRpdGxlfTwvYnV0dG9uPjxidXR0b24gY2xpY2suZGVsZWdhdGU9XFxcInJlbW92ZXBvaW50KClcXFwiPiR7cnRpdGxlfTwvYnV0dG9uPlxcbiAgICA8L2Rpdj5cXG48L3RlbXBsYXRlPlwiOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-xy-points.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs-xy.html":
/*!********************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs-xy.html ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template><!-- not used, inherited from chartjs--></template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMteHkuaHRtbC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWJvZHlsaWdodC1wbHVnaW4vZGlzdC9uYXRpdmUtbW9kdWxlcy9lbGVtZW50cy9jaGFydGpzLXh5Lmh0bWw/ZDFmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHRlbXBsYXRlPjwhLS0gbm90IHVzZWQsIGluaGVyaXRlZCBmcm9tIGNoYXJ0anMtLT48L3RlbXBsYXRlPlxcblwiOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs-xy.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/chartjs.html":
/*!*****************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/chartjs.html ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template bindable=\\\"width,height\\\">\\n    <div id=\\\"canvas-holder\\\" style.bind=\\\"responsive ? '':'display:inline-block'\\\">\\n        <div class=\\\"w3-small\\\" show.bind=\\\"! minichart\\\">\\n            <i class=\\\"fa fa-download fa-flip-horizontal\\\" title=\\\"download csv data, row=data in time point\\\"\\n               click.delegate=\\\"download()\\\"> </i>\\n            <i class=\\\"fa fa-download fa-rotate-270\\\" title=\\\"download flat csv data, row=all data for variable\\\"\\n               click.delegate=\\\"downloadflat()\\\"> </i>\\n        </div>\\n        <div css=\\\"${minichart ? '' : 'margin-top: -1.5em'}\\\">\\n            <canvas id=\\\"${id}-canvas\\\" ref=\\\"chartcanvas\\\" width=\\\"${width}\\\" height=\\\"${height}\\\"></canvas>\\n        </div>\\n    </div>\\n</template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoYXJ0anMuaHRtbC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hdXJlbGlhLWJvZHlsaWdodC1wbHVnaW4vZGlzdC9uYXRpdmUtbW9kdWxlcy9lbGVtZW50cy9jaGFydGpzLmh0bWw/MmNiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHRlbXBsYXRlIGJpbmRhYmxlPVxcXCJ3aWR0aCxoZWlnaHRcXFwiPlxcbiAgICA8ZGl2IGlkPVxcXCJjYW52YXMtaG9sZGVyXFxcIiBzdHlsZS5iaW5kPVxcXCJyZXNwb25zaXZlID8gJyc6J2Rpc3BsYXk6aW5saW5lLWJsb2NrJ1xcXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ3My1zbWFsbFxcXCIgc2hvdy5iaW5kPVxcXCIhIG1pbmljaGFydFxcXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImZhIGZhLWRvd25sb2FkIGZhLWZsaXAtaG9yaXpvbnRhbFxcXCIgdGl0bGU9XFxcImRvd25sb2FkIGNzdiBkYXRhLCByb3c9ZGF0YSBpbiB0aW1lIHBvaW50XFxcIlxcbiAgICAgICAgICAgICAgIGNsaWNrLmRlbGVnYXRlPVxcXCJkb3dubG9hZCgpXFxcIj4gPC9pPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJmYSBmYS1kb3dubG9hZCBmYS1yb3RhdGUtMjcwXFxcIiB0aXRsZT1cXFwiZG93bmxvYWQgZmxhdCBjc3YgZGF0YSwgcm93PWFsbCBkYXRhIGZvciB2YXJpYWJsZVxcXCJcXG4gICAgICAgICAgICAgICBjbGljay5kZWxlZ2F0ZT1cXFwiZG93bmxvYWRmbGF0KClcXFwiPiA8L2k+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY3NzPVxcXCIke21pbmljaGFydCA/ICcnIDogJ21hcmdpbi10b3A6IC0xLjVlbSd9XFxcIj5cXG4gICAgICAgICAgICA8Y2FudmFzIGlkPVxcXCIke2lkfS1jYW52YXNcXFwiIHJlZj1cXFwiY2hhcnRjYW52YXNcXFwiIHdpZHRoPVxcXCIke3dpZHRofVxcXCIgaGVpZ2h0PVxcXCIke2hlaWdodH1cXFwiPjwvY2FudmFzPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuXCI7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/chartjs.html\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/checkbox":
/*!****************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/checkbox.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.Checkbox = void 0;\n\nvar _aureliaFramework = __webpack_require__(/*! aurelia-framework */ \"aurelia-framework\");\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nlet Checkbox = (_class = class Checkbox {\n  constructor() {\n    _initializerDefineProperty(this, \"min\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"max\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"title\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"titlemax\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"titlemin\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"default\", _descriptor6, this);\n\n    this.value = void 0;\n    this.isChecked = false;\n  }\n\n  bind() {\n    if (this.default) {\n      //console.log('checkbox default,', this.default);\n      this.isChecked = this.default === 'true';\n    }\n\n    if (!this.titlemax) this.titlemax = this.title;\n    if (!this.titlemin) this.titlemin = this.title; //console.log('checkbox bind() min:' + this.min + ' max:' + this.max + ' default:' + this.default + ' ischecked' + this.isChecked);\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"min\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"max\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 1;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"title\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"titlemax\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"titlemin\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"default\", [_aureliaFramework.bindable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class);\nexports.Checkbox = Checkbox;\n//# sourceMappingURL=checkbox.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoZWNrYm94LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F1cmVsaWEtYm9keWxpZ2h0LXBsdWdpbi9kaXN0L25hdGl2ZS1tb2R1bGVzL2VsZW1lbnRzL2NoZWNrYm94LmpzP2QwNDQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLkNoZWNrYm94ID0gdm9pZCAwO1xuXG52YXIgX2F1cmVsaWFGcmFtZXdvcmsgPSByZXF1aXJlKFwiYXVyZWxpYS1mcmFtZXdvcmtcIik7XG5cbnZhciBfY2xhc3MsIF9kZXNjcmlwdG9yLCBfZGVzY3JpcHRvcjIsIF9kZXNjcmlwdG9yMywgX2Rlc2NyaXB0b3I0LCBfZGVzY3JpcHRvcjUsIF9kZXNjcmlwdG9yNjtcblxuZnVuY3Rpb24gX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvciwgY29udGV4dCkgeyBpZiAoIWRlc2NyaXB0b3IpIHJldHVybjsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIHsgZW51bWVyYWJsZTogZGVzY3JpcHRvci5lbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlLCB3cml0YWJsZTogZGVzY3JpcHRvci53cml0YWJsZSwgdmFsdWU6IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIgPyBkZXNjcmlwdG9yLmluaXRpYWxpemVyLmNhbGwoY29udGV4dCkgOiB2b2lkIDAgfSk7IH1cblxuZnVuY3Rpb24gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JzLCBkZXNjcmlwdG9yLCBjb250ZXh0KSB7IHZhciBkZXNjID0ge307IE9iamVjdC5rZXlzKGRlc2NyaXB0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBkZXNjW2tleV0gPSBkZXNjcmlwdG9yW2tleV07IH0pOyBkZXNjLmVudW1lcmFibGUgPSAhIWRlc2MuZW51bWVyYWJsZTsgZGVzYy5jb25maWd1cmFibGUgPSAhIWRlc2MuY29uZmlndXJhYmxlOyBpZiAoJ3ZhbHVlJyBpbiBkZXNjIHx8IGRlc2MuaW5pdGlhbGl6ZXIpIHsgZGVzYy53cml0YWJsZSA9IHRydWU7IH0gZGVzYyA9IGRlY29yYXRvcnMuc2xpY2UoKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uIChkZXNjLCBkZWNvcmF0b3IpIHsgcmV0dXJuIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5LCBkZXNjKSB8fCBkZXNjOyB9LCBkZXNjKTsgaWYgKGNvbnRleHQgJiYgZGVzYy5pbml0aWFsaXplciAhPT0gdm9pZCAwKSB7IGRlc2MudmFsdWUgPSBkZXNjLmluaXRpYWxpemVyID8gZGVzYy5pbml0aWFsaXplci5jYWxsKGNvbnRleHQpIDogdm9pZCAwOyBkZXNjLmluaXRpYWxpemVyID0gdW5kZWZpbmVkOyB9IGlmIChkZXNjLmluaXRpYWxpemVyID09PSB2b2lkIDApIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2MpOyBkZXNjID0gbnVsbDsgfSByZXR1cm4gZGVzYzsgfVxuXG5mdW5jdGlvbiBfaW5pdGlhbGl6ZXJXYXJuaW5nSGVscGVyKGRlc2NyaXB0b3IsIGNvbnRleHQpIHsgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0aW5nIGNsYXNzIHByb3BlcnR5IGZhaWxlZC4gUGxlYXNlIGVuc3VyZSB0aGF0ICcgKyAncHJvcG9zYWwtY2xhc3MtcHJvcGVydGllcyBpcyBlbmFibGVkIGFuZCBydW5zIGFmdGVyIHRoZSBkZWNvcmF0b3JzIHRyYW5zZm9ybS4nKTsgfVxuXG5sZXQgQ2hlY2tib3ggPSAoX2NsYXNzID0gY2xhc3MgQ2hlY2tib3gge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1pblwiLCBfZGVzY3JpcHRvciwgdGhpcyk7XG5cbiAgICBfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1heFwiLCBfZGVzY3JpcHRvcjIsIHRoaXMpO1xuXG4gICAgX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXCJ0aXRsZVwiLCBfZGVzY3JpcHRvcjMsIHRoaXMpO1xuXG4gICAgX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXCJ0aXRsZW1heFwiLCBfZGVzY3JpcHRvcjQsIHRoaXMpO1xuXG4gICAgX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXCJ0aXRsZW1pblwiLCBfZGVzY3JpcHRvcjUsIHRoaXMpO1xuXG4gICAgX2luaXRpYWxpemVyRGVmaW5lUHJvcGVydHkodGhpcywgXCJkZWZhdWx0XCIsIF9kZXNjcmlwdG9yNiwgdGhpcyk7XG5cbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMuaXNDaGVja2VkID0gZmFsc2U7XG4gIH1cblxuICBiaW5kKCkge1xuICAgIGlmICh0aGlzLmRlZmF1bHQpIHtcbiAgICAgIC8vY29uc29sZS5sb2coJ2NoZWNrYm94IGRlZmF1bHQsJywgdGhpcy5kZWZhdWx0KTtcbiAgICAgIHRoaXMuaXNDaGVja2VkID0gdGhpcy5kZWZhdWx0ID09PSAndHJ1ZSc7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRpdGxlbWF4KSB0aGlzLnRpdGxlbWF4ID0gdGhpcy50aXRsZTtcbiAgICBpZiAoIXRoaXMudGl0bGVtaW4pIHRoaXMudGl0bGVtaW4gPSB0aGlzLnRpdGxlOyAvL2NvbnNvbGUubG9nKCdjaGVja2JveCBiaW5kKCkgbWluOicgKyB0aGlzLm1pbiArICcgbWF4OicgKyB0aGlzLm1heCArICcgZGVmYXVsdDonICsgdGhpcy5kZWZhdWx0ICsgJyBpc2NoZWNrZWQnICsgdGhpcy5pc0NoZWNrZWQpO1xuICB9XG5cbn0sIChfZGVzY3JpcHRvciA9IF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXCJtaW5cIiwgW19hdXJlbGlhRnJhbWV3b3JrLmJpbmRhYmxlXSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHdyaXRhYmxlOiB0cnVlLFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAwO1xuICB9XG59KSwgX2Rlc2NyaXB0b3IyID0gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihfY2xhc3MucHJvdG90eXBlLCBcIm1heFwiLCBbX2F1cmVsaWFGcmFtZXdvcmsuYmluZGFibGVdLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIGluaXRpYWxpemVyOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn0pLCBfZGVzY3JpcHRvcjMgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsIFwidGl0bGVcIiwgW19hdXJlbGlhRnJhbWV3b3JrLmJpbmRhYmxlXSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHdyaXRhYmxlOiB0cnVlLFxuICBpbml0aWFsaXplcjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJztcbiAgfVxufSksIF9kZXNjcmlwdG9yNCA9IF9hcHBseURlY29yYXRlZERlc2NyaXB0b3IoX2NsYXNzLnByb3RvdHlwZSwgXCJ0aXRsZW1heFwiLCBbX2F1cmVsaWFGcmFtZXdvcmsuYmluZGFibGVdLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIGluaXRpYWxpemVyOiBudWxsXG59KSwgX2Rlc2NyaXB0b3I1ID0gX2FwcGx5RGVjb3JhdGVkRGVzY3JpcHRvcihfY2xhc3MucHJvdG90eXBlLCBcInRpdGxlbWluXCIsIFtfYXVyZWxpYUZyYW1ld29yay5iaW5kYWJsZV0sIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB3cml0YWJsZTogdHJ1ZSxcbiAgaW5pdGlhbGl6ZXI6IG51bGxcbn0pLCBfZGVzY3JpcHRvcjYgPSBfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yKF9jbGFzcy5wcm90b3R5cGUsIFwiZGVmYXVsdFwiLCBbX2F1cmVsaWFGcmFtZXdvcmsuYmluZGFibGVdLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIGluaXRpYWxpemVyOiBudWxsXG59KSksIF9jbGFzcyk7XG5leHBvcnRzLkNoZWNrYm94ID0gQ2hlY2tib3g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja2JveC5qcy5tYXBcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/checkbox\n");

/***/ }),

/***/ "aurelia-bodylight-plugin/elements/checkbox.html":
/*!******************************************************************************************!*\
  !*** ./node_modules/aurelia-bodylight-plugin/dist/native-modules/elements/checkbox.html ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<template bindable=\\\"default,title,min,max,titlemin,titlemax\\\">\\n    <span class=\\\"slidecontainer\\\">\\n        <input class=\\\"w3-check\\\" type=\\\"checkbox\\\" checked.two-way=\\\"isChecked\\\" value.bind=\\\"isChecked?max:min\\\"/> <label>${isChecked?titlemax:titlemin}</label>\\n    </span>\\n</template>\\n\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2VsZW1lbnRzL2NoZWNrYm94Lmh0bWwuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXVyZWxpYS1ib2R5bGlnaHQtcGx1Z2luL2Rpc3QvbmF0aXZlLW1vZHVsZXMvZWxlbWVudHMvY2hlY2tib3guaHRtbD9lMjUwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8dGVtcGxhdGUgYmluZGFibGU9XFxcImRlZmF1bHQsdGl0bGUsbWluLG1heCx0aXRsZW1pbix0aXRsZW1heFxcXCI+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJzbGlkZWNvbnRhaW5lclxcXCI+XFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcInczLWNoZWNrXFxcIiB0eXBlPVxcXCJjaGVja2JveFxcXCIgY2hlY2tlZC50d28td2F5PVxcXCJpc0NoZWNrZWRcXFwiIHZhbHVlLmJpbmQ9XFxcImlzQ2hlY2tlZD9tYXg6bWluXFxcIi8+IDxsYWJlbD4ke2lzQ2hlY2tlZD90aXRsZW1heDp0aXRsZW1pbn08L2xhYmVsPlxcbiAgICA8L3NwYW4+XFxuPC90ZW1wbGF0ZT5cXG5cIjsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///aurelia-bodylight-plugin/elements/checkbox.html\n");

/***/ })

}]);